
Controller_sw.elf:     file format elf32-littlenios2
Controller_sw.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b8

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x000193d8 memsz 0x000196dc flags rwx
    LOAD off    0x0001b000 vaddr 0x04001000 paddr 0x04001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  04001000  04001000  0001b000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00016364  020001b8  020001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000011fc  0201651c  0201651c  0001751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ce0  02017718  02017718  00018718  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000304  020193f8  020193f8  0001a3f8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  0001b000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001178  00000000  00000000  0001b028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00027e62  00000000  00000000  0001c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000acbc  00000000  00000000  00044002  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000c521  00000000  00000000  0004ecbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002c70  00000000  00000000  0005b1e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000410a  00000000  00000000  0005de50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00012a27  00000000  00000000  00061f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00074984  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac0  00000000  00000000  00074998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00079bb9  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00079bbc  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00079bbf  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00079bc0  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00079bc1  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00079bc5  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00079bc9  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00079bcd  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00079bd6  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00079bdf  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  00079be8  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000031  00000000  00000000  00079bf1  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001297ad  00000000  00000000  00079c22  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04001000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b8 l    d  .text	00000000 .text
0201651c l    d  .rodata	00000000 .rodata
02017718 l    d  .rwdata	00000000 .rwdata
020193f8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Controller_sw_bsp//obj/HAL/src/crt0.o
020001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
02000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Counter.c
00000000 l    df *ABS*	00000000 DisDriver.c
00000000 l    df *ABS*	00000000 FRAM.c
00000000 l    df *ABS*	00000000 KPLED.c
020193f8 l     O .bss	00000002 KPLED_Status_Buff
00000000 l    df *ABS*	00000000 comInterface.c
00000000 l    df *ABS*	00000000 coverPage.c
00000000 l    df *ABS*	00000000 delay.c
00000000 l    df *ABS*	00000000 loadWriteData.c
00000000 l    df *ABS*	00000000 powerFailure.c
02001d3c l     F .text	00000140 PowerFailure_ISR
00000000 l    df *ABS*	00000000 uart.c
02001edc l     F .text	00000050 uart_send_byte
02001f2c l     F .text	0000006c uart_send_string
02001f98 l     F .text	0000006c uart_init
020020a8 l     F .text	00000090 set_baudrate
02002004 l     F .text	000000a4 uart_ISR
00000000 l    df *ABS*	00000000 TopMenu.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 FireMenu.c
00000000 l    df *ABS*	00000000 HeaterWarmingUp.c
00000000 l    df *ABS*	00000000 ParameterMenu.c
00000000 l    df *ABS*	00000000 RemoteMenu.c
00000000 l    df *ABS*	00000000 SaveLoadMenu.c
00000000 l    df *ABS*	00000000 ShotCountersMenu.c
00000000 l    df *ABS*	00000000 ShutdownMenu.c
00000000 l    df *ABS*	00000000 StartupMenu.c
00000000 l    df *ABS*	00000000 editNum10.c
00000000 l    df *ABS*	00000000 editNum2.c
00000000 l    df *ABS*	00000000 editNum5.c
00000000 l    df *ABS*	00000000 enterPWD.c
00000000 l    df *ABS*	00000000 errorCheck.c
02019430 l     O .bss	00000012 err_flag
00000000 l    df *ABS*	00000000 pwdPage.c
00000000 l    df *ABS*	00000000 repPage.c
00000000 l    df *ABS*	00000000 shotPage.c
00000000 l    df *ABS*	00000000 timingPage.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
02008c2c l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
02009288 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
02009b5c l     F .text	00000034 __sprint_r
0201753a l     O .rodata	00000010 blanks.3515
0201754a l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0200bba4 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0200d614 l     F .text	00000008 __fp_lock
0200d61c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0201780c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
02017580 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
020176c8 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
020123ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02012508 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02012534 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
020128fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
020129f0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
02012bcc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020193e4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
02012e40 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
02012f80 l     F .text	00000038 alt_dev_reg
020181c8 l     O .rwdata	000000c8 epcs
02018290 l     O .rwdata	00001060 jtag_uart
020192f0 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
02013060 l     F .text	00000038 alt_flash_device_register
020130ec l     F .text	0000028c alt_epcs_flash_query
02013378 l     F .text	000000e8 alt_epcs_flash_memcmp
0201374c l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02013c14 l     F .text	00000204 altera_avalon_jtag_uart_irq
02013e18 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0201460c l     F .text	00000098 altera_avalon_uart_irq
020146a4 l     F .text	000000d8 altera_avalon_uart_rxirq
0201477c l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0201490c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
02014b60 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 epcs_commands.c
02014db4 l     F .text	00000038 epcs_test_wip
02014dec l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
020154bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0201571c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
02015874 l     F .text	00000050 alt_get_errno
020158c4 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
020100d4 g     F .text	00000074 _mprec_log10
020136c0 g     F .text	0000008c alt_epcs_flash_get_info
020101c4 g     F .text	00000084 __any_on
02010e44 g     F .text	00000064 _isatty_r
020175b0 g     O .rodata	00000028 __mprec_tinytens
02012b14 g     F .text	00000078 alt_main
020098c8 g     F .text	00000044 __ashldi3
02009974 g     F .text	00000084 _puts_r
0201946c g     O .bss	00000100 alt_irq
02010ea8 g     F .text	0000006c _lseek_r
0200048c g     F .text	00000070 DisInit
02012090 g     F .text	0000005c __eqdf2
020196fc g       *ABS*	00000000 __alt_heap_start
02009938 g     F .text	0000003c printf
020109e8 g     F .text	0000005c __sseek
0200d6b8 g     F .text	0000010c __sinit
02000e04 g     F .text	00000020 KPLED_getStatus
0200e350 g     F .text	0000009c _setlocale_r
0200d630 g     F .text	00000078 __sfmoreglue
02012bac g     F .text	00000020 __malloc_unlock
02005450 g     F .text	00000250 Num10toStr10
02000678 g     F .text	00000034 DisClear
0200ef90 g     F .text	0000018c memmove
02001bcc g     F .text	00000034 WriteRAMShots
02000b5c g     F .text	0000012c FRAM_Write32Bits
0200d6a8 g     F .text	00000010 _cleanup
02006ae4 g     F .text	00000348 editNum5
0200f1f8 g     F .text	000000a8 _Balloc
02000ee4 g     F .text	0000005c KPLED_All_Dim
02012148 g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
02014e24 g     F .text	000000f8 epcs_sector_erase
04001000 g     F .entry	00000000 __reset
02000e88 g     F .text	0000005c KPLED_All_Bright
020023e0 g     F .text	00000190 TopMenu
02010ddc g     F .text	00000068 _fstat_r
02019414 g     O .bss	00000004 errno
02019420 g     O .bss	00000004 alt_argv
020213b4 g       *ABS*	00000000 _gp
02001e7c g     F .text	00000060 PowerFailure_Init
02005e00 g     F .text	00000464 editNum10
02008604 g     F .text	000005a4 editParamterTiming
02018048 g     O .rwdata	00000180 alt_fd_list
02015060 g     F .text	00000068 epcs_write_status_register
02005d34 g     F .text	000000cc refreshButtonBarNum10
02015ed0 g     F .text	00000090 alt_find_dev
0200ee50 g     F .text	00000140 memcpy
02000418 g     F .text	00000074 DisWrInst
020006f4 g     F .text	0000002c DisOff
0200d624 g     F .text	0000000c _cleanup_r
02006a18 g     F .text	000000cc refreshButtonBarNum5
02012208 g     F .text	000000d4 __floatsidf
020157fc g     F .text	00000078 alt_io_redirect
020121ac g     F .text	0000005c __ltdf2
02001244 g     F .text	00000088 KPLED_Enter
0201651c g       *ABS*	00000000 __DTOR_END__
02001b40 g     F .text	0000002c LoadCounter0Init
020099f8 g     F .text	00000014 puts
02001a68 g     F .text	0000002c LoadRAMRepRate
02013854 g     F .text	00000104 alt_epcs_flash_write_block
02010030 g     F .text	000000a4 __ratio
02014018 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0200990c g     F .text	0000002c _printf_r
020093a8 g     F .text	00000008 __udivsi3
0201294c g     F .text	000000a4 isatty
02017600 g     O .rodata	000000c8 __mprec_tens
020051e4 g     F .text	0000011c refreshStartupMenuPage
0200e3ec g     F .text	0000000c __locale_charset
02008238 g     F .text	000000ac editParameterNumOfShot
02008ba8 g     F .text	00000084 __fixunsdfsi
02019410 g     O .bss	00000004 __malloc_top_pad
020193bc g     O .rwdata	00000004 __mb_cur_max
02002d64 g     F .text	000000cc StopFiring
0200e3f8 g     F .text	0000000c _localeconv_r
0200f628 g     F .text	0000003c __i2b
0200dd0c g     F .text	000004e4 __sfvwrite_r
02001b98 g     F .text	00000034 WriteRAMRepRate
02000c88 g     F .text	00000108 FRAM_Read32Bits
02001ac0 g     F .text	00000040 LoadRAMStartTime
02004e98 g     F .text	000001f0 getStartupInst
020108a8 g     F .text	00000064 _sbrk_r
02003370 g     F .text	000000b4 ShowInterlockMessage
02002e30 g     F .text	00000390 StartFiring
02010f14 g     F .text	0000006c _read_r
02017c0c g     O .rwdata	0000000c __lc_ctype
02007d7c g     F .text	000000ac chkLeftTiming
020193d8 g     O .rwdata	00000004 alt_max_fd
020096b0 g     F .text	00000104 __unpack_d
02010c8c g     F .text	0000013c _fclose_r
0200d5e4 g     F .text	00000030 fflush
0201940c g     O .bss	00000004 __malloc_max_sbrked_mem
020040b4 g     F .text	00000188 enterSaveLoadMenu
02008f80 g     F .text	00000054 __adddf3
020137e0 g     F .text	00000074 alt_epcs_flash_erase_block
0200fda4 g     F .text	00000148 __b2d
020177f8 g     O .rwdata	00000014 interlockNames
020115d0 g     F .text	00000628 __umoddi3
02012a40 g     F .text	000000d4 lseek
020193b4 g     O .rwdata	00000004 _global_impure_ptr
02015324 g     F .text	00000058 epcs_exit_4_bytes_mode
02010248 g     F .text	000005fc _realloc_r
02001020 g     F .text	0000008c KPLED_RightArrow
020196fc g       *ABS*	00000000 __bss_end
0201280c g     F .text	000000f0 alt_iic_isr_register
02005088 g     F .text	000000a4 startupAction
02015ba4 g     F .text	00000104 alt_tick
02010f80 g     F .text	00000650 __udivdi3
020175d8 g     O .rodata	00000028 __mprec_bigtens
0200f40c g     F .text	00000104 __s2b
0200916c g     F .text	0000011c __floatunsidf
0200fb44 g     F .text	00000058 __mcmp
02002974 g     F .text	0000008c PreionFaultHandler
02014564 g     F .text	000000a8 altera_avalon_uart_init
02000720 g     F .text	00000218 FRAM_SendByte
020006ac g     F .text	00000048 DisClearRow
0200d8d0 g     F .text	00000018 __fp_lock_all
020127c0 g     F .text	0000004c alt_ic_irq_enabled
02015b0c g     F .text	00000098 alt_alarm_stop
02019418 g     O .bss	00000004 alt_irq_active
020000ec g     F .exceptions	000000cc alt_irq_handler
02018020 g     O .rwdata	00000028 alt_dev_null
02003bcc g     F .text	0000010c SaveToEEPROM
0200223c g     F .text	000000ec refreshTopMenuEntry
02001a94 g     F .text	0000002c LoadRAMShots
020035a0 g     F .text	00000068 refreshParameterMenuEntry
0200f510 g     F .text	00000068 __hi0bits
02004624 g     F .text	00000188 enterShotCountersMenu
02009098 g     F .text	000000d4 __fixdfsi
02000328 g     F .text	00000078 resetCounter1
020042ec g     F .text	00000190 refreshShotCountersMenuPage
020193d0 g     O .rwdata	00000008 alt_dev_list
020001f0 g     F .text	0000007c CounterInit
02012e90 g     F .text	000000f0 write
020011bc g     F .text	00000088 KPLED_Edit
02012584 g     F .text	000000b0 fstat
02009884 g     F .text	00000044 __lshrdi3
02007500 g     F .text	00000074 chkEditedParameter
02002138 g     F .text	00000104 initController
020034ac g     F .text	00000020 checkHeater
0200f8bc g     F .text	0000012c __pow5mult
02019404 g     O .bss	00000004 __nlocale_changed
020093b0 g     F .text	00000008 __umodsi3
02005300 g     F .text	00000150 enterStartupMenu
020151e4 g     F .text	00000068 epcs_read_electronic_signature
020196fc g       *ABS*	00000000 end
020004fc g     F .text	00000044 DisShowCur
020013d4 g     F .text	00000034 UartInit
02014bb0 g     F .text	000001a8 altera_avalon_uart_write
02013b54 g     F .text	000000c0 altera_avalon_jtag_uart_init
0201651c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02001b6c g     F .text	0000002c LoadCounter1Init
020144b4 g     F .text	00000060 altera_avalon_uart_write_fd
020093e0 g     F .text	000000ac __clzsi2
02014514 g     F .text	00000050 altera_avalon_uart_close_fd
02014230 g     F .text	00000224 altera_avalon_jtag_uart_write
0200d8c0 g     F .text	00000004 __sfp_lock_acquire
0200ed58 g     F .text	000000f8 memchr
02009b90 g     F .text	00001e7c ___vfprintf_internal_r
02009a0c g     F .text	00000058 _sprintf_r
0200da3c g     F .text	000002d0 _free_r
020031c0 g     F .text	000001b0 enterFireMenu
02008088 g     F .text	000000d0 editParameterRepRate
02016340 g     F .text	000001a0 __call_exitprocs
02019400 g     O .bss	00000004 __mlocale_changed
020193c0 g     O .rwdata	00000004 __malloc_sbrk_base
020001b8 g     F .text	00000038 _start
02019428 g     O .bss	00000004 _alt_tick_rate
02007460 g     F .text	000000a0 getErrFlag
0200f9e8 g     F .text	0000015c __lshift
02015cc8 g     F .text	00000208 alt_avalon_spi_command
0201942c g     O .bss	00000004 _alt_nticks
02012c1c g     F .text	000000f4 read
02012fec g     F .text	00000074 alt_sys_init
020014e0 g     F .text	000001cc ReadRAM32Bits
02016210 g     F .text	00000130 __register_exitproc
020018d8 g     F .text	00000104 showCoverPage
02000540 g     F .text	000000c0 DisCurPos
0200f664 g     F .text	00000258 __multiply
02013ebc g     F .text	00000068 altera_avalon_jtag_uart_close
02003608 g     F .text	00000068 editParameter
020093b8 g     F .text	00000028 __mulsi3
02019444 g     O .bss	00000028 __malloc_current_mallinfo
0200feec g     F .text	00000144 __d2b
02014d58 g     F .text	0000005c epcs_read_status_register
020047ac g     F .text	00000178 getShutdownInst
02008158 g     F .text	000000e0 entryParameterNumOfShots
02001408 g     F .text	000000d8 WriteRAM32Bits
02000f9c g     F .text	00000084 KPLED_Numbers
020139f0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02016074 g     F .text	000000d4 alt_get_fd
020097b4 g     F .text	000000d0 __fpcmp_parts_d
02001c00 g     F .text	0000004c WriteRAMStartTime
02003e10 g     F .text	000002a4 enterSaveLoadMenuPage
02010c28 g     F .text	00000064 _close_r
020002cc g     F .text	0000005c SaveCounterToFRAM
0201524c g     F .text	00000080 epcs_read_device_id
02016194 g     F .text	0000007c memcmp
02013ab0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
020016ac g     F .text	00000078 WriteEEPROM8Bits
020196fc g       *ABS*	00000000 __alt_stack_base
02013b00 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0200ba30 g     F .text	00000174 __swsetup_r
02011edc g     F .text	000001b4 __divdf3
02002328 g     F .text	000000b8 enterTopMenuPage
0200d7c4 g     F .text	000000fc __sfp
02010148 g     F .text	0000007c __copybits
02017c18 g     O .rwdata	00000408 __malloc_av_
0200d8cc g     F .text	00000004 __sinit_lock_release
020083cc g     F .text	00000238 entryParameterTiming
02011bf8 g     F .text	000002e4 __muldf3
0201090c g     F .text	00000054 __sread
020028bc g     F .text	000000b8 showFiringInformation
02015f60 g     F .text	00000114 alt_find_file
0201550c g     F .text	000000a0 alt_dev_llist_insert
02012b8c g     F .text	00000020 __malloc_lock
02012d90 g     F .text	000000b0 sbrk
0200d3fc g     F .text	000001e8 _fflush_r
02003cd8 g     F .text	00000138 refreshSaveLoadMenuPage
02001c4c g     F .text	0000004c WriteRAMEndTime
02010b5c g     F .text	000000cc _calloc_r
0200423c g     F .text	000000b0 entryShotCountersMenu
020193e8 g     O .rwdata	00000008 alt_flash_dev_list
020193f8 g       *ABS*	00000000 __bss_start
020082e4 g     F .text	000000e8 convertChnlTitle
0200f11c g     F .text	000000dc memset
02003b14 g     F .text	000000b8 entrySaveLoadMenu
02002570 g     F .text	0000002c main
02019424 g     O .bss	00000004 alt_envp
02001888 g     F .text	00000050 ResetRAMFromEEPROM
02019408 g     O .bss	00000004 __malloc_max_total_mem
02013a50 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0200447c g     F .text	000001a8 editShotCountersMenuPage
02001134 g     F .text	00000088 KPLED_Menu
02010a44 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02010dc8 g     F .text	00000014 fclose
02003804 g     F .text	00000128 StartRemoteCtrl
0201956c g     O .bss	00000190 _atexit0
0200bde0 g     F .text	0000161c _dtoa_r
02003424 g     F .text	00000088 printTime
0200e5d4 g     F .text	00000784 _malloc_r
020193dc g     O .rwdata	00000004 alt_errno
0200e1f0 g     F .text	000000a8 _fwalk
020092fc g     F .text	00000050 __divsi3
020173e0 g     O .rodata	00000014 __thenan_df
0200d900 g     F .text	0000013c _malloc_trim_r
0200029c g     F .text	00000030 getCounter1Val
0201651c g       *ABS*	00000000 __CTOR_END__
02001724 g     F .text	000000d4 WriteEEPROM32Bits
02013460 g     F .text	00000260 alt_epcs_flash_write
02010a4c g     F .text	000000a4 strcmp
02004c4c g     F .text	0000024c enterShutdownMenu
0200512c g     F .text	000000b8 entryStartupMenu
0201651c g       *ABS*	00000000 __DTOR_LIST__
020019dc g     F .text	00000060 delay
020120ec g     F .text	0000005c __nedf2
02012fb8 g     F .text	00000034 alt_irq_init
02006ff8 g     F .text	00000468 enterPWD
02012d10 g     F .text	00000080 alt_release_fd
02002654 g     F .text	00000268 PreFiringErrChk
02009a64 g     F .text	0000006c sprintf
020173f4 g     O .rodata	00000100 __clz_tab
0200259c g     F .text	000000b8 entryFireMenu
020193fc g     O .bss	00000004 _PathLocale
02004b30 g     F .text	0000011c refreshShutdownMenuPage
02016148 g     F .text	00000014 atexit
02010af0 g     F .text	0000006c _write_r
020056a0 g     F .text	00000104 Str10toDis10
0200e404 g     F .text	0000001c setlocale
020057a4 g     F .text	00000310 Num10Check
020049dc g     F .text	00000154 confirmShutdown
020034cc g     F .text	000000d4 entryParameterMenu
020193b8 g     O .rwdata	00000004 _impure_ptr
0201941c g     O .bss	00000004 alt_argc
020068d4 g     F .text	00000144 Str5toNum5
02015608 g     F .text	0000005c _do_dtors
02001b00 g     F .text	00000040 LoadRAMEndTime
02007fac g     F .text	000000dc entryParameterRepRate
02000020 g       .exceptions	00000000 alt_irq_entry
02000e24 g     F .text	00000064 KPLED_setStatus
02006f2c g     F .text	000000cc refreshButtonBarPWD
0200fd44 g     F .text	00000060 __ulp
02010844 g     F .text	00000038 __isinfd
0200392c g     F .text	000000b8 entryRemoteMenu
0200d8e8 g     F .text	00000018 __fp_unlock_all
02006798 g     F .text	0000013c Num5toStr5
020003a0 g     F .text	00000078 DisWrData
020193c8 g     O .rwdata	00000008 alt_fs_list
020062f8 g     F .text	0000008c Str2toNum2
0200e420 g     F .text	0000000c localeconv
02014f1c g     F .text	000000f4 epcs_read_buffer
02004924 g     F .text	000000b8 entryShutdownMenu
020012cc g     F .text	00000088 KPLED_Enable
02013098 g     F .text	00000054 alt_epcs_flash_init
02012634 g     F .text	00000050 alt_ic_isr_register
020193f8 g       *ABS*	00000000 _edata
02014454 g     F .text	00000060 altera_avalon_uart_read_fd
02001840 g     F .text	00000048 Stop
02001c98 g     F .text	000000a4 reloadRegisters
020196fc g       *ABS*	00000000 _end
02000600 g     F .text	00000078 DisWrStr
02015664 g     F .text	00000068 alt_flash_open_dev
02000f40 g     F .text	0000005c KPLED_All_Off
02013f24 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02002a00 g     F .text	00000364 PauseSequence
02007574 g     F .text	00000684 chkSingleTiming
02012720 g     F .text	000000a0 alt_ic_irq_disable
02007ee0 g     F .text	000000cc enterPWDPage
020152cc g     F .text	00000058 epcs_enter_4_bytes_mode
02010960 g     F .text	00000088 __swrite
020193c4 g     O .rwdata	00000004 __malloc_trim_threshold
02015ca8 g     F .text	00000020 altera_nios2_qsys_irq_init
0201615c g     F .text	00000038 exit
0200e298 g     F .text	000000b8 _fwalk_reent
0200fb9c g     F .text	000001a8 __mdiff
02006384 g     F .text	000000cc refreshButtonBarNum2
020156cc g     F .text	00000050 alt_flash_close_dev
0200934c g     F .text	0000005c __modsi3
02007cdc g     F .text	000000a0 chkAllTiming
02005ab4 g     F .text	00000280 Dis10toNum10
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02017718 g     O .rwdata	000000e0 uart
0200d8c4 g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
02001354 g     F .text	00000080 KPLED_Fire
020148b8 g     F .text	00000054 altera_avalon_uart_close
020039e4 g     F .text	00000130 enterRemoteMenu
020164e0 g     F .text	0000003c _exit
0201087c g     F .text	0000002c __isnand
02000938 g     F .text	00000224 FRAM_ReadByte
0201537c g     F .text	00000140 alt_alarm_start
020122dc g     F .text	00000110 __muldi3
020010ac g     F .text	00000088 KPLED_LeftArrow
0200e42c g     F .text	000001a8 __smakebuf_r
02009ad0 g     F .text	0000008c strlen
02015010 g     F .text	00000050 epcs_write_enable
020159b4 g     F .text	00000158 open
02009034 g     F .text	00000064 __gedf2
0200026c g     F .text	00000030 getCounter0Val
02007bf8 g     F .text	000000e4 refreshErrFlags
02000d90 g     F .text	00000074 FRAM_test
020193e0 g     O .rwdata	00000004 alt_priority_mask
02006e2c g     F .text	00000100 checkPWD
020017f8 g     F .text	00000048 Fire
02012684 g     F .text	0000009c alt_ic_irq_enable
0200ba0c g     F .text	00000024 __vfprintf_internal
04001000 g       *ABS*	00000000 __alt_mem_epcs
02006264 g     F .text	00000094 Num2toStr2
0201495c g     F .text	00000204 altera_avalon_uart_read
02008fd4 g     F .text	00000060 __subdf3
02013958 g     F .text	00000098 alt_epcs_flash_read
02003670 g     F .text	00000194 enterParameterMenu
0200f578 g     F .text	000000b0 __lo0bits
020193f0 g     O .rwdata	00000008 alt_alarm_list
020155ac g     F .text	0000005c _do_ctors
02006450 g     F .text	00000348 editNum2
0201243c g     F .text	000000cc close
02001a3c g     F .text	0000002c loadData
0200948c g     F .text	00000224 __pack_d
02007e28 g     F .text	000000b8 chkRightTiming
00000000  w      *UND*	00000000 free
0200d8c8 g     F .text	00000004 __sinit_lock_acquire
020150c8 g     F .text	0000011c epcs_write_buffer
0200f2c8 g     F .text	00000144 __multadd
0200f2a0 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)

02000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 20000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000100:	0005313a 	rdctl	r2,ipending
 2000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000114:	00800044 	movi	r2,1
 2000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200011c:	e0fffb17 	ldw	r3,-20(fp)
 2000120:	e0bffc17 	ldw	r2,-16(fp)
 2000124:	1884703a 	and	r2,r3,r2
 2000128:	10001726 	beq	r2,zero,2000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	00c080b4 	movhi	r3,514
 2000130:	18e51b04 	addi	r3,r3,-27540
 2000134:	e0bffd17 	ldw	r2,-12(fp)
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	1885883a 	add	r2,r3,r2
 2000140:	10c00017 	ldw	r3,0(r2)
 2000144:	010080b4 	movhi	r4,514
 2000148:	21251b04 	addi	r4,r4,-27540
 200014c:	e0bffd17 	ldw	r2,-12(fp)
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	2085883a 	add	r2,r4,r2
 2000158:	10800104 	addi	r2,r2,4
 200015c:	10800017 	ldw	r2,0(r2)
 2000160:	1009883a 	mov	r4,r2
 2000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200016c:	0005313a 	rdctl	r2,ipending
 2000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 200017c:	e0bffb17 	ldw	r2,-20(fp)
 2000180:	103fe31e 	bne	r2,zero,2000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 2000184:	00000706 	br	20001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000188:	e0bffc17 	ldw	r2,-16(fp)
 200018c:	1085883a 	add	r2,r2,r2
 2000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000194:	e0bffd17 	ldw	r2,-12(fp)
 2000198:	10800044 	addi	r2,r2,1
 200019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a0:	003fde06 	br	200011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a4:	e037883a 	mov	sp,fp
 20001a8:	dfc00117 	ldw	ra,4(sp)
 20001ac:	df000017 	ldw	fp,0(sp)
 20001b0:	dec00204 	addi	sp,sp,8
 20001b4:	f800283a 	ret

Disassembly of section .text:

020001b8 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001b8:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001bc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 20001c0:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 20001c4:	d684ed14 	ori	gp,gp,5044
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001c8:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 20001cc:	10a4fe14 	ori	r2,r2,37880

    movhi r3, %hi(__bss_end)
 20001d0:	00c08074 	movhi	r3,513
    ori r3, r3, %lo(__bss_end)
 20001d4:	18e5bf14 	ori	r3,r3,38652

    beq r2, r3, 1f
 20001d8:	10c00326 	beq	r2,r3,20001e8 <_start+0x30>

0:
    stw zero, (r2)
 20001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001e4:	10fffd36 	bltu	r2,r3,20001dc <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001e8:	2012b140 	call	2012b14 <alt_main>

020001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001ec:	003fff06 	br	20001ec <alt_after_alt_main>

020001f0 <CounterInit>:
 * 		4. Set Counter_load to 1.
 * 		5. Set Counter_load to 0.
 */

void CounterInit()
{
 20001f0:	defffc04 	addi	sp,sp,-16
 20001f4:	dfc00315 	stw	ra,12(sp)
 20001f8:	df000215 	stw	fp,8(sp)
 20001fc:	df000204 	addi	fp,sp,8
	Counter_load = 0;
 2000200:	00810034 	movhi	r2,1024
 2000204:	10883c04 	addi	r2,r2,8432
 2000208:	10000005 	stb	zero,0(r2)
	unsigned int init0 = LoadCounter0Init();
 200020c:	2001b400 	call	2001b40 <LoadCounter0Init>
 2000210:	e0bffe15 	stw	r2,-8(fp)
	unsigned int init1 = LoadCounter1Init();
 2000214:	2001b6c0 	call	2001b6c <LoadCounter1Init>
 2000218:	e0bfff15 	stw	r2,-4(fp)
	Counter0_init = init0;
 200021c:	00810034 	movhi	r2,1024
 2000220:	10884c04 	addi	r2,r2,8496
 2000224:	e0fffe17 	ldw	r3,-8(fp)
 2000228:	10c00015 	stw	r3,0(r2)
	Counter1_init = init1;
 200022c:	00810034 	movhi	r2,1024
 2000230:	10884804 	addi	r2,r2,8480
 2000234:	e0ffff17 	ldw	r3,-4(fp)
 2000238:	10c00015 	stw	r3,0(r2)
	Counter_load = 1;
 200023c:	00810034 	movhi	r2,1024
 2000240:	10883c04 	addi	r2,r2,8432
 2000244:	00c00044 	movi	r3,1
 2000248:	10c00005 	stb	r3,0(r2)
	Counter_load = 0;
 200024c:	00810034 	movhi	r2,1024
 2000250:	10883c04 	addi	r2,r2,8432
 2000254:	10000005 	stb	zero,0(r2)
}
 2000258:	e037883a 	mov	sp,fp
 200025c:	dfc00117 	ldw	ra,4(sp)
 2000260:	df000017 	ldw	fp,0(sp)
 2000264:	dec00204 	addi	sp,sp,8
 2000268:	f800283a 	ret

0200026c <getCounter0Val>:
 * At all time, the two outputs of the counter module hold the current value of the two counters.
 * 		Counter0_val (COUNTER0_IN_BASE): System counter
 * 		Counter1_val (COUNTER1_IN_BASE): Capillary counter
 */
unsigned int getCounter0Val()
{
 200026c:	defffe04 	addi	sp,sp,-8
 2000270:	df000115 	stw	fp,4(sp)
 2000274:	df000104 	addi	fp,sp,4
	unsigned int val = Counter0_val;
 2000278:	00810034 	movhi	r2,1024
 200027c:	10884404 	addi	r2,r2,8464
 2000280:	10800017 	ldw	r2,0(r2)
 2000284:	e0bfff15 	stw	r2,-4(fp)
	return val;
 2000288:	e0bfff17 	ldw	r2,-4(fp)
}
 200028c:	e037883a 	mov	sp,fp
 2000290:	df000017 	ldw	fp,0(sp)
 2000294:	dec00104 	addi	sp,sp,4
 2000298:	f800283a 	ret

0200029c <getCounter1Val>:
unsigned int getCounter1Val()
{
 200029c:	defffe04 	addi	sp,sp,-8
 20002a0:	df000115 	stw	fp,4(sp)
 20002a4:	df000104 	addi	fp,sp,4
	unsigned int val = Counter1_val;
 20002a8:	00810034 	movhi	r2,1024
 20002ac:	10884004 	addi	r2,r2,8448
 20002b0:	10800017 	ldw	r2,0(r2)
 20002b4:	e0bfff15 	stw	r2,-4(fp)
	return val;
 20002b8:	e0bfff17 	ldw	r2,-4(fp)
}
 20002bc:	e037883a 	mov	sp,fp
 20002c0:	df000017 	ldw	fp,0(sp)
 20002c4:	dec00104 	addi	sp,sp,4
 20002c8:	f800283a 	ret

020002cc <SaveCounterToFRAM>:

void SaveCounterToFRAM()
{
 20002cc:	defffc04 	addi	sp,sp,-16
 20002d0:	dfc00315 	stw	ra,12(sp)
 20002d4:	df000215 	stw	fp,8(sp)
 20002d8:	df000204 	addi	fp,sp,8
	unsigned int Counter0_val_latch = Counter0_val;
 20002dc:	00810034 	movhi	r2,1024
 20002e0:	10884404 	addi	r2,r2,8464
 20002e4:	10800017 	ldw	r2,0(r2)
 20002e8:	e0bffe15 	stw	r2,-8(fp)
	unsigned int Counter1_val_latch = Counter1_val;
 20002ec:	00810034 	movhi	r2,1024
 20002f0:	10884004 	addi	r2,r2,8448
 20002f4:	10800017 	ldw	r2,0(r2)
 20002f8:	e0bfff15 	stw	r2,-4(fp)
	FRAM_Write32Bits(COUNTER_0_ADDR,Counter0_val_latch);
 20002fc:	01000544 	movi	r4,21
 2000300:	e17ffe17 	ldw	r5,-8(fp)
 2000304:	2000b5c0 	call	2000b5c <FRAM_Write32Bits>
	FRAM_Write32Bits(COUNTER_1_ADDR,Counter1_val_latch);
 2000308:	01000584 	movi	r4,22
 200030c:	e17fff17 	ldw	r5,-4(fp)
 2000310:	2000b5c0 	call	2000b5c <FRAM_Write32Bits>
}
 2000314:	e037883a 	mov	sp,fp
 2000318:	dfc00117 	ldw	ra,4(sp)
 200031c:	df000017 	ldw	fp,0(sp)
 2000320:	dec00204 	addi	sp,sp,8
 2000324:	f800283a 	ret

02000328 <resetCounter1>:
/*
 * The capillary counter can be reset by user.
 * When reset, simply load 0 to Counter1 and the old Counter0 value to Coutner0.
 */
void resetCounter1()
{
 2000328:	defffe04 	addi	sp,sp,-8
 200032c:	dfc00115 	stw	ra,4(sp)
 2000330:	df000015 	stw	fp,0(sp)
 2000334:	d839883a 	mov	fp,sp

	delay(10000);
 2000338:	0109c404 	movi	r4,10000
 200033c:	20019dc0 	call	20019dc <delay>
	Counter_load = 0;
 2000340:	00810034 	movhi	r2,1024
 2000344:	10883c04 	addi	r2,r2,8432
 2000348:	10000005 	stb	zero,0(r2)
	Counter0_init = Counter0_val;
 200034c:	00810034 	movhi	r2,1024
 2000350:	10884c04 	addi	r2,r2,8496
 2000354:	00c10034 	movhi	r3,1024
 2000358:	18c84404 	addi	r3,r3,8464
 200035c:	18c00017 	ldw	r3,0(r3)
 2000360:	10c00015 	stw	r3,0(r2)
	Counter1_init = 0;
 2000364:	00810034 	movhi	r2,1024
 2000368:	10884804 	addi	r2,r2,8480
 200036c:	10000015 	stw	zero,0(r2)
	Counter_load = 1;
 2000370:	00810034 	movhi	r2,1024
 2000374:	10883c04 	addi	r2,r2,8432
 2000378:	00c00044 	movi	r3,1
 200037c:	10c00005 	stb	r3,0(r2)
	Counter_load = 0;
 2000380:	00810034 	movhi	r2,1024
 2000384:	10883c04 	addi	r2,r2,8432
 2000388:	10000005 	stb	zero,0(r2)
}
 200038c:	e037883a 	mov	sp,fp
 2000390:	dfc00117 	ldw	ra,4(sp)
 2000394:	df000017 	ldw	fp,0(sp)
 2000398:	dec00204 	addi	sp,sp,8
 200039c:	f800283a 	ret

020003a0 <DisWrData>:
 * For the data writing, instruction writing, and initialization procedures,
 * please refer to the data sheet of the VFD (CU20049-UW2J)
 */

void DisWrData(unsigned char data)
{
 20003a0:	defffe04 	addi	sp,sp,-8
 20003a4:	df000115 	stw	fp,4(sp)
 20003a8:	df000104 	addi	fp,sp,4
 20003ac:	2005883a 	mov	r2,r4
 20003b0:	e0bfff05 	stb	r2,-4(fp)
	DIS_EN = 0;
 20003b4:	00810034 	movhi	r2,1024
 20003b8:	10889c04 	addi	r2,r2,8816
 20003bc:	10000005 	stb	zero,0(r2)
	DIS_RS = 1;
 20003c0:	00810034 	movhi	r2,1024
 20003c4:	1088a404 	addi	r2,r2,8848
 20003c8:	00c00044 	movi	r3,1
 20003cc:	10c00005 	stb	r3,0(r2)
	DIS_RW = 0;
 20003d0:	00810034 	movhi	r2,1024
 20003d4:	1088a004 	addi	r2,r2,8832
 20003d8:	10000005 	stb	zero,0(r2)
	DIS_DATA = data;
 20003dc:	00810034 	movhi	r2,1024
 20003e0:	1088a804 	addi	r2,r2,8864
 20003e4:	e0ffff03 	ldbu	r3,-4(fp)
 20003e8:	10c00005 	stb	r3,0(r2)
	DIS_EN = 1;
 20003ec:	00810034 	movhi	r2,1024
 20003f0:	10889c04 	addi	r2,r2,8816
 20003f4:	00c00044 	movi	r3,1
 20003f8:	10c00005 	stb	r3,0(r2)
	DIS_EN = 0;
 20003fc:	00810034 	movhi	r2,1024
 2000400:	10889c04 	addi	r2,r2,8816
 2000404:	10000005 	stb	zero,0(r2)
}
 2000408:	e037883a 	mov	sp,fp
 200040c:	df000017 	ldw	fp,0(sp)
 2000410:	dec00104 	addi	sp,sp,4
 2000414:	f800283a 	ret

02000418 <DisWrInst>:

void DisWrInst(unsigned char inst)
{
 2000418:	defffe04 	addi	sp,sp,-8
 200041c:	df000115 	stw	fp,4(sp)
 2000420:	df000104 	addi	fp,sp,4
 2000424:	2005883a 	mov	r2,r4
 2000428:	e0bfff05 	stb	r2,-4(fp)
	DIS_EN = 0x00;
 200042c:	00810034 	movhi	r2,1024
 2000430:	10889c04 	addi	r2,r2,8816
 2000434:	10000005 	stb	zero,0(r2)
	DIS_RS = 0x00;
 2000438:	00810034 	movhi	r2,1024
 200043c:	1088a404 	addi	r2,r2,8848
 2000440:	10000005 	stb	zero,0(r2)
	DIS_RW = 0x00;
 2000444:	00810034 	movhi	r2,1024
 2000448:	1088a004 	addi	r2,r2,8832
 200044c:	10000005 	stb	zero,0(r2)
	DIS_DATA = inst;
 2000450:	00810034 	movhi	r2,1024
 2000454:	1088a804 	addi	r2,r2,8864
 2000458:	e0ffff03 	ldbu	r3,-4(fp)
 200045c:	10c00005 	stb	r3,0(r2)
	DIS_EN = 0x11;
 2000460:	00810034 	movhi	r2,1024
 2000464:	10889c04 	addi	r2,r2,8816
 2000468:	00c00444 	movi	r3,17
 200046c:	10c00005 	stb	r3,0(r2)
	DIS_EN = 0;
 2000470:	00810034 	movhi	r2,1024
 2000474:	10889c04 	addi	r2,r2,8816
 2000478:	10000005 	stb	zero,0(r2)
}
 200047c:	e037883a 	mov	sp,fp
 2000480:	df000017 	ldw	fp,0(sp)
 2000484:	dec00104 	addi	sp,sp,4
 2000488:	f800283a 	ret

0200048c <DisInit>:
void DisInit()
{
 200048c:	defffe04 	addi	sp,sp,-8
 2000490:	dfc00115 	stw	ra,4(sp)
 2000494:	df000015 	stw	fp,0(sp)
 2000498:	d839883a 	mov	fp,sp
	DIS_BUFF_EN_n = 0;		//Set the translating transceiver (U42 74LVX4245) to output mode
 200049c:	00810034 	movhi	r2,1024
 20004a0:	10887404 	addi	r2,r2,8656
 20004a4:	10000005 	stb	zero,0(r2)

	delay(1000);
 20004a8:	0100fa04 	movi	r4,1000
 20004ac:	20019dc0 	call	20019dc <delay>
	DisWrInst(0x38);
 20004b0:	01000e04 	movi	r4,56
 20004b4:	20004180 	call	2000418 <DisWrInst>
	DisWrData(VFD_BRT);		//Set Brightness
 20004b8:	010000c4 	movi	r4,3
 20004bc:	20003a00 	call	20003a0 <DisWrData>
	DisWrInst(0x08);
 20004c0:	01000204 	movi	r4,8
 20004c4:	20004180 	call	2000418 <DisWrInst>

	DisWrInst(0x01);
 20004c8:	01000044 	movi	r4,1
 20004cc:	20004180 	call	2000418 <DisWrInst>
	DisWrInst(0x06);
 20004d0:	01000184 	movi	r4,6
 20004d4:	20004180 	call	2000418 <DisWrInst>
	DisWrInst(0x02);
 20004d8:	01000084 	movi	r4,2
 20004dc:	20004180 	call	2000418 <DisWrInst>
	DisWrInst(0x0c);
 20004e0:	01000304 	movi	r4,12
 20004e4:	20004180 	call	2000418 <DisWrInst>
}
 20004e8:	e037883a 	mov	sp,fp
 20004ec:	dfc00117 	ldw	ra,4(sp)
 20004f0:	df000017 	ldw	fp,0(sp)
 20004f4:	dec00204 	addi	sp,sp,8
 20004f8:	f800283a 	ret

020004fc <DisShowCur>:
 * Turn on or off cursor
 * 		0: On
 * 		1: Off
 */
void DisShowCur(int b)
{
 20004fc:	defffd04 	addi	sp,sp,-12
 2000500:	dfc00215 	stw	ra,8(sp)
 2000504:	df000115 	stw	fp,4(sp)
 2000508:	df000104 	addi	fp,sp,4
 200050c:	e13fff15 	stw	r4,-4(fp)
	if(b)
 2000510:	e0bfff17 	ldw	r2,-4(fp)
 2000514:	10000326 	beq	r2,zero,2000524 <DisShowCur+0x28>
		DisWrInst(0x0f);	//Show a blinking cursor
 2000518:	010003c4 	movi	r4,15
 200051c:	20004180 	call	2000418 <DisWrInst>
 2000520:	00000206 	br	200052c <DisShowCur+0x30>
	else
		DisWrInst(0x0c);	//Turn off cursor
 2000524:	01000304 	movi	r4,12
 2000528:	20004180 	call	2000418 <DisWrInst>
}
 200052c:	e037883a 	mov	sp,fp
 2000530:	dfc00117 	ldw	ra,4(sp)
 2000534:	df000017 	ldw	fp,0(sp)
 2000538:	dec00204 	addi	sp,sp,8
 200053c:	f800283a 	ret

02000540 <DisCurPos>:

/*
 * Locate the cursor to position (row, col)
 */
void DisCurPos(unsigned char row,unsigned char col)
{
 2000540:	defffb04 	addi	sp,sp,-20
 2000544:	dfc00415 	stw	ra,16(sp)
 2000548:	df000315 	stw	fp,12(sp)
 200054c:	df000304 	addi	fp,sp,12
 2000550:	2007883a 	mov	r3,r4
 2000554:	2805883a 	mov	r2,r5
 2000558:	e0fffe05 	stb	r3,-8(fp)
 200055c:	e0bfff05 	stb	r2,-4(fp)
	unsigned char addr = 0;
 2000560:	e03ffd05 	stb	zero,-12(fp)
	switch(row)
 2000564:	e0bffe03 	ldbu	r2,-8(fp)
 2000568:	10c000a0 	cmpeqi	r3,r2,2
 200056c:	18000c1e 	bne	r3,zero,20005a0 <DisCurPos+0x60>
 2000570:	10c000c8 	cmpgei	r3,r2,3
 2000574:	1800031e 	bne	r3,zero,2000584 <DisCurPos+0x44>
 2000578:	10800060 	cmpeqi	r2,r2,1
 200057c:	1000061e 	bne	r2,zero,2000598 <DisCurPos+0x58>
 2000580:	00001006 	br	20005c4 <DisCurPos+0x84>
 2000584:	10c000e0 	cmpeqi	r3,r2,3
 2000588:	1800081e 	bne	r3,zero,20005ac <DisCurPos+0x6c>
 200058c:	10800120 	cmpeqi	r2,r2,4
 2000590:	1000091e 	bne	r2,zero,20005b8 <DisCurPos+0x78>
 2000594:	00000b06 	br	20005c4 <DisCurPos+0x84>
	{
		case 1: addr = 0x00; break;
 2000598:	e03ffd05 	stb	zero,-12(fp)
 200059c:	00000906 	br	20005c4 <DisCurPos+0x84>
		case 2: addr = 0x40; break;
 20005a0:	00801004 	movi	r2,64
 20005a4:	e0bffd05 	stb	r2,-12(fp)
 20005a8:	00000606 	br	20005c4 <DisCurPos+0x84>
		case 3: addr = 0x14; break;
 20005ac:	00800504 	movi	r2,20
 20005b0:	e0bffd05 	stb	r2,-12(fp)
 20005b4:	00000306 	br	20005c4 <DisCurPos+0x84>
		case 4: addr = 0x54; break;
 20005b8:	00801504 	movi	r2,84
 20005bc:	e0bffd05 	stb	r2,-12(fp)
 20005c0:	0001883a 	nop
	}

	addr += col-1;
 20005c4:	e0ffff03 	ldbu	r3,-4(fp)
 20005c8:	e0bffd03 	ldbu	r2,-12(fp)
 20005cc:	1885883a 	add	r2,r3,r2
 20005d0:	10bfffc4 	addi	r2,r2,-1
 20005d4:	e0bffd05 	stb	r2,-12(fp)
	DisWrInst(0x80+addr);
 20005d8:	e0bffd03 	ldbu	r2,-12(fp)
 20005dc:	10bfe004 	addi	r2,r2,-128
 20005e0:	10803fcc 	andi	r2,r2,255
 20005e4:	1009883a 	mov	r4,r2
 20005e8:	20004180 	call	2000418 <DisWrInst>
}
 20005ec:	e037883a 	mov	sp,fp
 20005f0:	dfc00117 	ldw	ra,4(sp)
 20005f4:	df000017 	ldw	fp,0(sp)
 20005f8:	dec00204 	addi	sp,sp,8
 20005fc:	f800283a 	ret

02000600 <DisWrStr>:

/*
 * Display a string at current position.
 */
void DisWrStr(char* s)
{
 2000600:	defffc04 	addi	sp,sp,-16
 2000604:	dfc00315 	stw	ra,12(sp)
 2000608:	df000215 	stw	fp,8(sp)
 200060c:	df000204 	addi	fp,sp,8
 2000610:	e13fff15 	stw	r4,-4(fp)
	unsigned short i = 0;
 2000614:	e03ffe0d 	sth	zero,-8(fp)
	while(s[i]!=0x00)
 2000618:	00000a06 	br	2000644 <DisWrStr+0x44>
	{
		DisWrData(s[i]);
 200061c:	e0bffe0b 	ldhu	r2,-8(fp)
 2000620:	e0ffff17 	ldw	r3,-4(fp)
 2000624:	1885883a 	add	r2,r3,r2
 2000628:	10800003 	ldbu	r2,0(r2)
 200062c:	10803fcc 	andi	r2,r2,255
 2000630:	1009883a 	mov	r4,r2
 2000634:	20003a00 	call	20003a0 <DisWrData>
		i++;
 2000638:	e0bffe0b 	ldhu	r2,-8(fp)
 200063c:	10800044 	addi	r2,r2,1
 2000640:	e0bffe0d 	sth	r2,-8(fp)
 * Display a string at current position.
 */
void DisWrStr(char* s)
{
	unsigned short i = 0;
	while(s[i]!=0x00)
 2000644:	e0bffe0b 	ldhu	r2,-8(fp)
 2000648:	e0ffff17 	ldw	r3,-4(fp)
 200064c:	1885883a 	add	r2,r3,r2
 2000650:	10800003 	ldbu	r2,0(r2)
 2000654:	10803fcc 	andi	r2,r2,255
 2000658:	1080201c 	xori	r2,r2,128
 200065c:	10bfe004 	addi	r2,r2,-128
 2000660:	103fee1e 	bne	r2,zero,200061c <DisWrStr+0x1c>
	{
		DisWrData(s[i]);
		i++;
	}
}
 2000664:	e037883a 	mov	sp,fp
 2000668:	dfc00117 	ldw	ra,4(sp)
 200066c:	df000017 	ldw	fp,0(sp)
 2000670:	dec00204 	addi	sp,sp,8
 2000674:	f800283a 	ret

02000678 <DisClear>:

/*
 * Clear the entire display.
 */
void DisClear()
{
 2000678:	defffe04 	addi	sp,sp,-8
 200067c:	dfc00115 	stw	ra,4(sp)
 2000680:	df000015 	stw	fp,0(sp)
 2000684:	d839883a 	mov	fp,sp
	DisWrInst(0x01);
 2000688:	01000044 	movi	r4,1
 200068c:	20004180 	call	2000418 <DisWrInst>
	delay(0);
 2000690:	0009883a 	mov	r4,zero
 2000694:	20019dc0 	call	20019dc <delay>
}
 2000698:	e037883a 	mov	sp,fp
 200069c:	dfc00117 	ldw	ra,4(sp)
 20006a0:	df000017 	ldw	fp,0(sp)
 20006a4:	dec00204 	addi	sp,sp,8
 20006a8:	f800283a 	ret

020006ac <DisClearRow>:

/*
 * Clear a certain row.
 */
void DisClearRow(unsigned char row)
{
 20006ac:	defffd04 	addi	sp,sp,-12
 20006b0:	dfc00215 	stw	ra,8(sp)
 20006b4:	df000115 	stw	fp,4(sp)
 20006b8:	df000104 	addi	fp,sp,4
 20006bc:	2005883a 	mov	r2,r4
 20006c0:	e0bfff05 	stb	r2,-4(fp)
	DisCurPos(row,1);
 20006c4:	e0bfff03 	ldbu	r2,-4(fp)
 20006c8:	1009883a 	mov	r4,r2
 20006cc:	01400044 	movi	r5,1
 20006d0:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("                    ");
 20006d4:	01008074 	movhi	r4,513
 20006d8:	21194704 	addi	r4,r4,25884
 20006dc:	20006000 	call	2000600 <DisWrStr>
}
 20006e0:	e037883a 	mov	sp,fp
 20006e4:	dfc00117 	ldw	ra,4(sp)
 20006e8:	df000017 	ldw	fp,0(sp)
 20006ec:	dec00204 	addi	sp,sp,8
 20006f0:	f800283a 	ret

020006f4 <DisOff>:

/*
 * Turn off the display.
 */
void DisOff()
{
 20006f4:	defffe04 	addi	sp,sp,-8
 20006f8:	dfc00115 	stw	ra,4(sp)
 20006fc:	df000015 	stw	fp,0(sp)
 2000700:	d839883a 	mov	fp,sp
	DisWrInst(0x08);
 2000704:	01000204 	movi	r4,8
 2000708:	20004180 	call	2000418 <DisWrInst>
}
 200070c:	e037883a 	mov	sp,fp
 2000710:	dfc00117 	ldw	ra,4(sp)
 2000714:	df000017 	ldw	fp,0(sp)
 2000718:	dec00204 	addi	sp,sp,8
 200071c:	f800283a 	ret

02000720 <FRAM_SendByte>:
#include "..\inc\Counter.h"
#include <stdio.h>


void FRAM_SendByte(unsigned char data)
{
 2000720:	defffe04 	addi	sp,sp,-8
 2000724:	df000115 	stw	fp,4(sp)
 2000728:	df000104 	addi	fp,sp,4
 200072c:	2005883a 	mov	r2,r4
 2000730:	e0bfff05 	stb	r2,-4(fp)
	//Bit 7
	FRAM_MOSI = (data & 0x80)?1:0;
 2000734:	00810034 	movhi	r2,1024
 2000738:	10882c04 	addi	r2,r2,8368
 200073c:	e0ffff03 	ldbu	r3,-4(fp)
 2000740:	18c03fcc 	andi	r3,r3,255
 2000744:	1806d1fa 	srli	r3,r3,7
 2000748:	10c00005 	stb	r3,0(r2)
	FRAM_SCLK = 1;
 200074c:	00810034 	movhi	r2,1024
 2000750:	10883404 	addi	r2,r2,8400
 2000754:	00c00044 	movi	r3,1
 2000758:	10c00005 	stb	r3,0(r2)
	data = (data<<1);
 200075c:	e0bfff03 	ldbu	r2,-4(fp)
 2000760:	1085883a 	add	r2,r2,r2
 2000764:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 0;
 2000768:	00810034 	movhi	r2,1024
 200076c:	10883404 	addi	r2,r2,8400
 2000770:	10000005 	stb	zero,0(r2)

	//Bit 6
	FRAM_MOSI = (data & 0x80)?1:0;
 2000774:	00810034 	movhi	r2,1024
 2000778:	10882c04 	addi	r2,r2,8368
 200077c:	e0ffff03 	ldbu	r3,-4(fp)
 2000780:	18c03fcc 	andi	r3,r3,255
 2000784:	1806d1fa 	srli	r3,r3,7
 2000788:	10c00005 	stb	r3,0(r2)
	FRAM_SCLK = 1;
 200078c:	00810034 	movhi	r2,1024
 2000790:	10883404 	addi	r2,r2,8400
 2000794:	00c00044 	movi	r3,1
 2000798:	10c00005 	stb	r3,0(r2)
	data = (data<<1);
 200079c:	e0bfff03 	ldbu	r2,-4(fp)
 20007a0:	1085883a 	add	r2,r2,r2
 20007a4:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 0;
 20007a8:	00810034 	movhi	r2,1024
 20007ac:	10883404 	addi	r2,r2,8400
 20007b0:	10000005 	stb	zero,0(r2)

	//Bit 5
	FRAM_MOSI = (data & 0x80)?1:0;
 20007b4:	00810034 	movhi	r2,1024
 20007b8:	10882c04 	addi	r2,r2,8368
 20007bc:	e0ffff03 	ldbu	r3,-4(fp)
 20007c0:	18c03fcc 	andi	r3,r3,255
 20007c4:	1806d1fa 	srli	r3,r3,7
 20007c8:	10c00005 	stb	r3,0(r2)
	FRAM_SCLK = 1;
 20007cc:	00810034 	movhi	r2,1024
 20007d0:	10883404 	addi	r2,r2,8400
 20007d4:	00c00044 	movi	r3,1
 20007d8:	10c00005 	stb	r3,0(r2)
	data = (data<<1);
 20007dc:	e0bfff03 	ldbu	r2,-4(fp)
 20007e0:	1085883a 	add	r2,r2,r2
 20007e4:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 0;
 20007e8:	00810034 	movhi	r2,1024
 20007ec:	10883404 	addi	r2,r2,8400
 20007f0:	10000005 	stb	zero,0(r2)

	//Bit 4
	FRAM_MOSI = (data & 0x80)?1:0;
 20007f4:	00810034 	movhi	r2,1024
 20007f8:	10882c04 	addi	r2,r2,8368
 20007fc:	e0ffff03 	ldbu	r3,-4(fp)
 2000800:	18c03fcc 	andi	r3,r3,255
 2000804:	1806d1fa 	srli	r3,r3,7
 2000808:	10c00005 	stb	r3,0(r2)
	FRAM_SCLK = 1;
 200080c:	00810034 	movhi	r2,1024
 2000810:	10883404 	addi	r2,r2,8400
 2000814:	00c00044 	movi	r3,1
 2000818:	10c00005 	stb	r3,0(r2)
	data = (data<<1);
 200081c:	e0bfff03 	ldbu	r2,-4(fp)
 2000820:	1085883a 	add	r2,r2,r2
 2000824:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 0;
 2000828:	00810034 	movhi	r2,1024
 200082c:	10883404 	addi	r2,r2,8400
 2000830:	10000005 	stb	zero,0(r2)

	//Bit 3
	FRAM_MOSI = (data & 0x80)?1:0;
 2000834:	00810034 	movhi	r2,1024
 2000838:	10882c04 	addi	r2,r2,8368
 200083c:	e0ffff03 	ldbu	r3,-4(fp)
 2000840:	18c03fcc 	andi	r3,r3,255
 2000844:	1806d1fa 	srli	r3,r3,7
 2000848:	10c00005 	stb	r3,0(r2)
	FRAM_SCLK = 1;
 200084c:	00810034 	movhi	r2,1024
 2000850:	10883404 	addi	r2,r2,8400
 2000854:	00c00044 	movi	r3,1
 2000858:	10c00005 	stb	r3,0(r2)
	data = (data<<1);
 200085c:	e0bfff03 	ldbu	r2,-4(fp)
 2000860:	1085883a 	add	r2,r2,r2
 2000864:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 0;
 2000868:	00810034 	movhi	r2,1024
 200086c:	10883404 	addi	r2,r2,8400
 2000870:	10000005 	stb	zero,0(r2)

	//Bit 2
	FRAM_MOSI = (data & 0x80)?1:0;
 2000874:	00810034 	movhi	r2,1024
 2000878:	10882c04 	addi	r2,r2,8368
 200087c:	e0ffff03 	ldbu	r3,-4(fp)
 2000880:	18c03fcc 	andi	r3,r3,255
 2000884:	1806d1fa 	srli	r3,r3,7
 2000888:	10c00005 	stb	r3,0(r2)
	FRAM_SCLK = 1;
 200088c:	00810034 	movhi	r2,1024
 2000890:	10883404 	addi	r2,r2,8400
 2000894:	00c00044 	movi	r3,1
 2000898:	10c00005 	stb	r3,0(r2)
	data = (data<<1);
 200089c:	e0bfff03 	ldbu	r2,-4(fp)
 20008a0:	1085883a 	add	r2,r2,r2
 20008a4:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 0;
 20008a8:	00810034 	movhi	r2,1024
 20008ac:	10883404 	addi	r2,r2,8400
 20008b0:	10000005 	stb	zero,0(r2)

	//Bit 1
	FRAM_MOSI = (data & 0x80)?1:0;
 20008b4:	00810034 	movhi	r2,1024
 20008b8:	10882c04 	addi	r2,r2,8368
 20008bc:	e0ffff03 	ldbu	r3,-4(fp)
 20008c0:	18c03fcc 	andi	r3,r3,255
 20008c4:	1806d1fa 	srli	r3,r3,7
 20008c8:	10c00005 	stb	r3,0(r2)
	FRAM_SCLK = 1;
 20008cc:	00810034 	movhi	r2,1024
 20008d0:	10883404 	addi	r2,r2,8400
 20008d4:	00c00044 	movi	r3,1
 20008d8:	10c00005 	stb	r3,0(r2)
	data = (data<<1);
 20008dc:	e0bfff03 	ldbu	r2,-4(fp)
 20008e0:	1085883a 	add	r2,r2,r2
 20008e4:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 0;
 20008e8:	00810034 	movhi	r2,1024
 20008ec:	10883404 	addi	r2,r2,8400
 20008f0:	10000005 	stb	zero,0(r2)

	//Bit 0
	FRAM_MOSI = (data & 0x80)?1:0;
 20008f4:	00810034 	movhi	r2,1024
 20008f8:	10882c04 	addi	r2,r2,8368
 20008fc:	e0ffff03 	ldbu	r3,-4(fp)
 2000900:	18c03fcc 	andi	r3,r3,255
 2000904:	1806d1fa 	srli	r3,r3,7
 2000908:	10c00005 	stb	r3,0(r2)
	FRAM_SCLK = 1;
 200090c:	00810034 	movhi	r2,1024
 2000910:	10883404 	addi	r2,r2,8400
 2000914:	00c00044 	movi	r3,1
 2000918:	10c00005 	stb	r3,0(r2)
	FRAM_SCLK = 0;
 200091c:	00810034 	movhi	r2,1024
 2000920:	10883404 	addi	r2,r2,8400
 2000924:	10000005 	stb	zero,0(r2)
}
 2000928:	e037883a 	mov	sp,fp
 200092c:	df000017 	ldw	fp,0(sp)
 2000930:	dec00104 	addi	sp,sp,4
 2000934:	f800283a 	ret

02000938 <FRAM_ReadByte>:

unsigned char FRAM_ReadByte()
{
 2000938:	defffe04 	addi	sp,sp,-8
 200093c:	df000115 	stw	fp,4(sp)
 2000940:	df000104 	addi	fp,sp,4
	char data = 0x00;
 2000944:	e03fff05 	stb	zero,-4(fp)
	FRAM_SCLK = 0;
 2000948:	00810034 	movhi	r2,1024
 200094c:	10883404 	addi	r2,r2,8400
 2000950:	10000005 	stb	zero,0(r2)

	//Bit 7
	data = data | FRAM_MISO;
 2000954:	00810034 	movhi	r2,1024
 2000958:	10882804 	addi	r2,r2,8352
 200095c:	10c00003 	ldbu	r3,0(r2)
 2000960:	e0bfff03 	ldbu	r2,-4(fp)
 2000964:	1884b03a 	or	r2,r3,r2
 2000968:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 1;
 200096c:	00810034 	movhi	r2,1024
 2000970:	10883404 	addi	r2,r2,8400
 2000974:	00c00044 	movi	r3,1
 2000978:	10c00005 	stb	r3,0(r2)
	data = (data<<1);
 200097c:	e0bfff07 	ldb	r2,-4(fp)
 2000980:	1085883a 	add	r2,r2,r2
 2000984:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 0;
 2000988:	00810034 	movhi	r2,1024
 200098c:	10883404 	addi	r2,r2,8400
 2000990:	10000005 	stb	zero,0(r2)

	//Bit 6
	data = data | FRAM_MISO;
 2000994:	00810034 	movhi	r2,1024
 2000998:	10882804 	addi	r2,r2,8352
 200099c:	10c00003 	ldbu	r3,0(r2)
 20009a0:	e0bfff03 	ldbu	r2,-4(fp)
 20009a4:	1884b03a 	or	r2,r3,r2
 20009a8:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 1;
 20009ac:	00810034 	movhi	r2,1024
 20009b0:	10883404 	addi	r2,r2,8400
 20009b4:	00c00044 	movi	r3,1
 20009b8:	10c00005 	stb	r3,0(r2)
	data = (data<<1);
 20009bc:	e0bfff07 	ldb	r2,-4(fp)
 20009c0:	1085883a 	add	r2,r2,r2
 20009c4:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 0;
 20009c8:	00810034 	movhi	r2,1024
 20009cc:	10883404 	addi	r2,r2,8400
 20009d0:	10000005 	stb	zero,0(r2)

	//Bit 5
	data = data | FRAM_MISO;
 20009d4:	00810034 	movhi	r2,1024
 20009d8:	10882804 	addi	r2,r2,8352
 20009dc:	10c00003 	ldbu	r3,0(r2)
 20009e0:	e0bfff03 	ldbu	r2,-4(fp)
 20009e4:	1884b03a 	or	r2,r3,r2
 20009e8:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 1;
 20009ec:	00810034 	movhi	r2,1024
 20009f0:	10883404 	addi	r2,r2,8400
 20009f4:	00c00044 	movi	r3,1
 20009f8:	10c00005 	stb	r3,0(r2)
	data = (data<<1);
 20009fc:	e0bfff07 	ldb	r2,-4(fp)
 2000a00:	1085883a 	add	r2,r2,r2
 2000a04:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 0;
 2000a08:	00810034 	movhi	r2,1024
 2000a0c:	10883404 	addi	r2,r2,8400
 2000a10:	10000005 	stb	zero,0(r2)

	//Bit 4
	data = data | FRAM_MISO;
 2000a14:	00810034 	movhi	r2,1024
 2000a18:	10882804 	addi	r2,r2,8352
 2000a1c:	10c00003 	ldbu	r3,0(r2)
 2000a20:	e0bfff03 	ldbu	r2,-4(fp)
 2000a24:	1884b03a 	or	r2,r3,r2
 2000a28:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 1;
 2000a2c:	00810034 	movhi	r2,1024
 2000a30:	10883404 	addi	r2,r2,8400
 2000a34:	00c00044 	movi	r3,1
 2000a38:	10c00005 	stb	r3,0(r2)
	data = (data<<1);
 2000a3c:	e0bfff07 	ldb	r2,-4(fp)
 2000a40:	1085883a 	add	r2,r2,r2
 2000a44:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 0;
 2000a48:	00810034 	movhi	r2,1024
 2000a4c:	10883404 	addi	r2,r2,8400
 2000a50:	10000005 	stb	zero,0(r2)

	//Bit 3
	data = data | FRAM_MISO;
 2000a54:	00810034 	movhi	r2,1024
 2000a58:	10882804 	addi	r2,r2,8352
 2000a5c:	10c00003 	ldbu	r3,0(r2)
 2000a60:	e0bfff03 	ldbu	r2,-4(fp)
 2000a64:	1884b03a 	or	r2,r3,r2
 2000a68:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 1;
 2000a6c:	00810034 	movhi	r2,1024
 2000a70:	10883404 	addi	r2,r2,8400
 2000a74:	00c00044 	movi	r3,1
 2000a78:	10c00005 	stb	r3,0(r2)
	data = (data<<1);
 2000a7c:	e0bfff07 	ldb	r2,-4(fp)
 2000a80:	1085883a 	add	r2,r2,r2
 2000a84:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 0;
 2000a88:	00810034 	movhi	r2,1024
 2000a8c:	10883404 	addi	r2,r2,8400
 2000a90:	10000005 	stb	zero,0(r2)

	//Bit 2
	data = data | FRAM_MISO;
 2000a94:	00810034 	movhi	r2,1024
 2000a98:	10882804 	addi	r2,r2,8352
 2000a9c:	10c00003 	ldbu	r3,0(r2)
 2000aa0:	e0bfff03 	ldbu	r2,-4(fp)
 2000aa4:	1884b03a 	or	r2,r3,r2
 2000aa8:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 1;
 2000aac:	00810034 	movhi	r2,1024
 2000ab0:	10883404 	addi	r2,r2,8400
 2000ab4:	00c00044 	movi	r3,1
 2000ab8:	10c00005 	stb	r3,0(r2)
	data = (data<<1);
 2000abc:	e0bfff07 	ldb	r2,-4(fp)
 2000ac0:	1085883a 	add	r2,r2,r2
 2000ac4:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 0;
 2000ac8:	00810034 	movhi	r2,1024
 2000acc:	10883404 	addi	r2,r2,8400
 2000ad0:	10000005 	stb	zero,0(r2)

	//Bit 1
	data = data | FRAM_MISO;
 2000ad4:	00810034 	movhi	r2,1024
 2000ad8:	10882804 	addi	r2,r2,8352
 2000adc:	10c00003 	ldbu	r3,0(r2)
 2000ae0:	e0bfff03 	ldbu	r2,-4(fp)
 2000ae4:	1884b03a 	or	r2,r3,r2
 2000ae8:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 1;
 2000aec:	00810034 	movhi	r2,1024
 2000af0:	10883404 	addi	r2,r2,8400
 2000af4:	00c00044 	movi	r3,1
 2000af8:	10c00005 	stb	r3,0(r2)
	data = (data<<1);
 2000afc:	e0bfff07 	ldb	r2,-4(fp)
 2000b00:	1085883a 	add	r2,r2,r2
 2000b04:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 0;
 2000b08:	00810034 	movhi	r2,1024
 2000b0c:	10883404 	addi	r2,r2,8400
 2000b10:	10000005 	stb	zero,0(r2)

	//Bit 0
	data = data | FRAM_MISO;
 2000b14:	00810034 	movhi	r2,1024
 2000b18:	10882804 	addi	r2,r2,8352
 2000b1c:	10c00003 	ldbu	r3,0(r2)
 2000b20:	e0bfff03 	ldbu	r2,-4(fp)
 2000b24:	1884b03a 	or	r2,r3,r2
 2000b28:	e0bfff05 	stb	r2,-4(fp)
	FRAM_SCLK = 1;
 2000b2c:	00810034 	movhi	r2,1024
 2000b30:	10883404 	addi	r2,r2,8400
 2000b34:	00c00044 	movi	r3,1
 2000b38:	10c00005 	stb	r3,0(r2)
	FRAM_SCLK = 0;
 2000b3c:	00810034 	movhi	r2,1024
 2000b40:	10883404 	addi	r2,r2,8400
 2000b44:	10000005 	stb	zero,0(r2)
	return data;
 2000b48:	e0bfff03 	ldbu	r2,-4(fp)
}
 2000b4c:	e037883a 	mov	sp,fp
 2000b50:	df000017 	ldw	fp,0(sp)
 2000b54:	dec00104 	addi	sp,sp,4
 2000b58:	f800283a 	ret

02000b5c <FRAM_Write32Bits>:


void FRAM_Write32Bits(unsigned short addr, unsigned int data)
{
 2000b5c:	defffa04 	addi	sp,sp,-24
 2000b60:	dfc00515 	stw	ra,20(sp)
 2000b64:	df000415 	stw	fp,16(sp)
 2000b68:	df000404 	addi	fp,sp,16
 2000b6c:	2005883a 	mov	r2,r4
 2000b70:	e17fff15 	stw	r5,-4(fp)
 2000b74:	e0bffe0d 	sth	r2,-8(fp)
	unsigned short addr_new = addr * 4;
 2000b78:	e0bffe0b 	ldhu	r2,-8(fp)
 2000b7c:	1085883a 	add	r2,r2,r2
 2000b80:	1085883a 	add	r2,r2,r2
 2000b84:	e0bffc0d 	sth	r2,-16(fp)

	unsigned char addr0 = addr_new & 0xFF;
 2000b88:	e0bffc0b 	ldhu	r2,-16(fp)
 2000b8c:	e0bffc85 	stb	r2,-14(fp)
	unsigned char addr1 = addr_new>>8 & 0xFF;
 2000b90:	e0bffc0b 	ldhu	r2,-16(fp)
 2000b94:	1004d23a 	srli	r2,r2,8
 2000b98:	e0bffcc5 	stb	r2,-13(fp)

	unsigned char byte0 = data & 0xFF;
 2000b9c:	e0bfff17 	ldw	r2,-4(fp)
 2000ba0:	e0bffd05 	stb	r2,-12(fp)
	unsigned char byte1 = data>>8 & 0xFF;
 2000ba4:	e0bfff17 	ldw	r2,-4(fp)
 2000ba8:	1004d23a 	srli	r2,r2,8
 2000bac:	e0bffd45 	stb	r2,-11(fp)
	unsigned char byte2 = data>>16 & 0xFF;
 2000bb0:	e0bfff17 	ldw	r2,-4(fp)
 2000bb4:	1004d43a 	srli	r2,r2,16
 2000bb8:	e0bffd85 	stb	r2,-10(fp)
	unsigned char byte3 = data>>24 & 0xFF;
 2000bbc:	e0bfff17 	ldw	r2,-4(fp)
 2000bc0:	1004d63a 	srli	r2,r2,24
 2000bc4:	e0bffdc5 	stb	r2,-9(fp)

	FRAM_CS_n = 1;
 2000bc8:	00810034 	movhi	r2,1024
 2000bcc:	10883004 	addi	r2,r2,8384
 2000bd0:	00c00044 	movi	r3,1
 2000bd4:	10c00005 	stb	r3,0(r2)
	FRAM_SCLK = 0;
 2000bd8:	00810034 	movhi	r2,1024
 2000bdc:	10883404 	addi	r2,r2,8400
 2000be0:	10000005 	stb	zero,0(r2)
	FRAM_CS_n = 0;
 2000be4:	00810034 	movhi	r2,1024
 2000be8:	10883004 	addi	r2,r2,8384
 2000bec:	10000005 	stb	zero,0(r2)
	FRAM_SendByte(FRAM_OP_WREN);
 2000bf0:	01000184 	movi	r4,6
 2000bf4:	20007200 	call	2000720 <FRAM_SendByte>
	FRAM_CS_n = 1;
 2000bf8:	00810034 	movhi	r2,1024
 2000bfc:	10883004 	addi	r2,r2,8384
 2000c00:	00c00044 	movi	r3,1
 2000c04:	10c00005 	stb	r3,0(r2)

	FRAM_CS_n = 0;
 2000c08:	00810034 	movhi	r2,1024
 2000c0c:	10883004 	addi	r2,r2,8384
 2000c10:	10000005 	stb	zero,0(r2)
	FRAM_SendByte(FRAM_OP_WRITE);
 2000c14:	01000084 	movi	r4,2
 2000c18:	20007200 	call	2000720 <FRAM_SendByte>
	FRAM_SendByte(addr1);
 2000c1c:	e0bffcc3 	ldbu	r2,-13(fp)
 2000c20:	1009883a 	mov	r4,r2
 2000c24:	20007200 	call	2000720 <FRAM_SendByte>
	FRAM_SendByte(addr0);
 2000c28:	e0bffc83 	ldbu	r2,-14(fp)
 2000c2c:	1009883a 	mov	r4,r2
 2000c30:	20007200 	call	2000720 <FRAM_SendByte>
	FRAM_SendByte(byte3);
 2000c34:	e0bffdc3 	ldbu	r2,-9(fp)
 2000c38:	1009883a 	mov	r4,r2
 2000c3c:	20007200 	call	2000720 <FRAM_SendByte>
	FRAM_SendByte(byte2);
 2000c40:	e0bffd83 	ldbu	r2,-10(fp)
 2000c44:	1009883a 	mov	r4,r2
 2000c48:	20007200 	call	2000720 <FRAM_SendByte>
	FRAM_SendByte(byte1);
 2000c4c:	e0bffd43 	ldbu	r2,-11(fp)
 2000c50:	1009883a 	mov	r4,r2
 2000c54:	20007200 	call	2000720 <FRAM_SendByte>
	FRAM_SendByte(byte0);
 2000c58:	e0bffd03 	ldbu	r2,-12(fp)
 2000c5c:	1009883a 	mov	r4,r2
 2000c60:	20007200 	call	2000720 <FRAM_SendByte>
	FRAM_CS_n = 1;
 2000c64:	00810034 	movhi	r2,1024
 2000c68:	10883004 	addi	r2,r2,8384
 2000c6c:	00c00044 	movi	r3,1
 2000c70:	10c00005 	stb	r3,0(r2)
}
 2000c74:	e037883a 	mov	sp,fp
 2000c78:	dfc00117 	ldw	ra,4(sp)
 2000c7c:	df000017 	ldw	fp,0(sp)
 2000c80:	dec00204 	addi	sp,sp,8
 2000c84:	f800283a 	ret

02000c88 <FRAM_Read32Bits>:

unsigned int FRAM_Read32Bits(unsigned short addr)
{
 2000c88:	defff604 	addi	sp,sp,-40
 2000c8c:	dfc00915 	stw	ra,36(sp)
 2000c90:	df000815 	stw	fp,32(sp)
 2000c94:	df000804 	addi	fp,sp,32
 2000c98:	2005883a 	mov	r2,r4
 2000c9c:	e0bfff0d 	sth	r2,-4(fp)
	unsigned short addr_new = addr * 4;
 2000ca0:	e0bfff0b 	ldhu	r2,-4(fp)
 2000ca4:	1085883a 	add	r2,r2,r2
 2000ca8:	1085883a 	add	r2,r2,r2
 2000cac:	e0bff80d 	sth	r2,-32(fp)

	unsigned char addr0 = addr_new & 0xFF;
 2000cb0:	e0bff80b 	ldhu	r2,-32(fp)
 2000cb4:	e0bff885 	stb	r2,-30(fp)
	unsigned char addr1 = addr_new>>8 & 0xFF;
 2000cb8:	e0bff80b 	ldhu	r2,-32(fp)
 2000cbc:	1004d23a 	srli	r2,r2,8
 2000cc0:	e0bff8c5 	stb	r2,-29(fp)

	FRAM_CS_n = 1;
 2000cc4:	00810034 	movhi	r2,1024
 2000cc8:	10883004 	addi	r2,r2,8384
 2000ccc:	00c00044 	movi	r3,1
 2000cd0:	10c00005 	stb	r3,0(r2)
	FRAM_SCLK = 0;
 2000cd4:	00810034 	movhi	r2,1024
 2000cd8:	10883404 	addi	r2,r2,8400
 2000cdc:	10000005 	stb	zero,0(r2)
	FRAM_CS_n = 0;
 2000ce0:	00810034 	movhi	r2,1024
 2000ce4:	10883004 	addi	r2,r2,8384
 2000ce8:	10000005 	stb	zero,0(r2)
	FRAM_SendByte(FRAM_OP_READ);
 2000cec:	010000c4 	movi	r4,3
 2000cf0:	20007200 	call	2000720 <FRAM_SendByte>
	FRAM_SendByte(addr1);
 2000cf4:	e0bff8c3 	ldbu	r2,-29(fp)
 2000cf8:	1009883a 	mov	r4,r2
 2000cfc:	20007200 	call	2000720 <FRAM_SendByte>
	FRAM_SendByte(addr0);
 2000d00:	e0bff883 	ldbu	r2,-30(fp)
 2000d04:	1009883a 	mov	r4,r2
 2000d08:	20007200 	call	2000720 <FRAM_SendByte>

	unsigned char input3 = FRAM_ReadByte();
 2000d0c:	20009380 	call	2000938 <FRAM_ReadByte>
 2000d10:	e0bff905 	stb	r2,-28(fp)
	unsigned char input2 = FRAM_ReadByte();
 2000d14:	20009380 	call	2000938 <FRAM_ReadByte>
 2000d18:	e0bff945 	stb	r2,-27(fp)
	unsigned char input1 = FRAM_ReadByte();
 2000d1c:	20009380 	call	2000938 <FRAM_ReadByte>
 2000d20:	e0bff985 	stb	r2,-26(fp)
	unsigned char input0 = FRAM_ReadByte();
 2000d24:	20009380 	call	2000938 <FRAM_ReadByte>
 2000d28:	e0bff9c5 	stb	r2,-25(fp)


	unsigned int byte0 = input0;
 2000d2c:	e0bff9c3 	ldbu	r2,-25(fp)
 2000d30:	e0bffa15 	stw	r2,-24(fp)
	unsigned int byte1 = input1 << 8;
 2000d34:	e0bff983 	ldbu	r2,-26(fp)
 2000d38:	1004923a 	slli	r2,r2,8
 2000d3c:	e0bffb15 	stw	r2,-20(fp)
	unsigned int byte2 = input2 << 16;
 2000d40:	e0bff943 	ldbu	r2,-27(fp)
 2000d44:	1004943a 	slli	r2,r2,16
 2000d48:	e0bffc15 	stw	r2,-16(fp)
	unsigned int byte3 = input3 << 24;
 2000d4c:	e0bff903 	ldbu	r2,-28(fp)
 2000d50:	1004963a 	slli	r2,r2,24
 2000d54:	e0bffd15 	stw	r2,-12(fp)

	unsigned int data = byte0 + byte1 + byte2 + byte3;
 2000d58:	e0fffa17 	ldw	r3,-24(fp)
 2000d5c:	e0bffb17 	ldw	r2,-20(fp)
 2000d60:	1887883a 	add	r3,r3,r2
 2000d64:	e0bffc17 	ldw	r2,-16(fp)
 2000d68:	1887883a 	add	r3,r3,r2
 2000d6c:	e0bffd17 	ldw	r2,-12(fp)
 2000d70:	1885883a 	add	r2,r3,r2
 2000d74:	e0bffe15 	stw	r2,-8(fp)
	return data;
 2000d78:	e0bffe17 	ldw	r2,-8(fp)
}
 2000d7c:	e037883a 	mov	sp,fp
 2000d80:	dfc00117 	ldw	ra,4(sp)
 2000d84:	df000017 	ldw	fp,0(sp)
 2000d88:	dec00204 	addi	sp,sp,8
 2000d8c:	f800283a 	ret

02000d90 <FRAM_test>:



void FRAM_test()
{
 2000d90:	defffe04 	addi	sp,sp,-8
 2000d94:	dfc00115 	stw	ra,4(sp)
 2000d98:	df000015 	stw	fp,0(sp)
 2000d9c:	d839883a 	mov	fp,sp
	FRAM_Write32Bits(COUNTER_1_ADDR,218999);
 2000da0:	01000584 	movi	r4,22
 2000da4:	014000f4 	movhi	r5,3
 2000da8:	2955ddc4 	addi	r5,r5,22391
 2000dac:	2000b5c0 	call	2000b5c <FRAM_Write32Bits>
	printf("%d\n",FRAM_Read32Bits(COUNTER_1_ADDR));
 2000db0:	01000584 	movi	r4,22
 2000db4:	2000c880 	call	2000c88 <FRAM_Read32Bits>
 2000db8:	01008074 	movhi	r4,513
 2000dbc:	21194d04 	addi	r4,r4,25908
 2000dc0:	100b883a 	mov	r5,r2
 2000dc4:	20099380 	call	2009938 <printf>
	FRAM_Write32Bits(COUNTER_0_ADDR,218999);
 2000dc8:	01000544 	movi	r4,21
 2000dcc:	014000f4 	movhi	r5,3
 2000dd0:	2955ddc4 	addi	r5,r5,22391
 2000dd4:	2000b5c0 	call	2000b5c <FRAM_Write32Bits>
	printf("%d\n",FRAM_Read32Bits(COUNTER_0_ADDR));
 2000dd8:	01000544 	movi	r4,21
 2000ddc:	2000c880 	call	2000c88 <FRAM_Read32Bits>
 2000de0:	01008074 	movhi	r4,513
 2000de4:	21194d04 	addi	r4,r4,25908
 2000de8:	100b883a 	mov	r5,r2
 2000dec:	20099380 	call	2009938 <printf>

}
 2000df0:	e037883a 	mov	sp,fp
 2000df4:	dfc00117 	ldw	ra,4(sp)
 2000df8:	df000017 	ldw	fp,0(sp)
 2000dfc:	dec00204 	addi	sp,sp,8
 2000e00:	f800283a 	ret

02000e04 <KPLED_getStatus>:
static unsigned short KPLED_Status_Buff;		//Stores current status.



unsigned short KPLED_getStatus()
{
 2000e04:	deffff04 	addi	sp,sp,-4
 2000e08:	df000015 	stw	fp,0(sp)
 2000e0c:	d839883a 	mov	fp,sp
	return KPLED_Status_Buff;
 2000e10:	d0a0110b 	ldhu	r2,-32700(gp)
}
 2000e14:	e037883a 	mov	sp,fp
 2000e18:	df000017 	ldw	fp,0(sp)
 2000e1c:	dec00104 	addi	sp,sp,4
 2000e20:	f800283a 	ret

02000e24 <KPLED_setStatus>:

void KPLED_setStatus(unsigned short status)
{
 2000e24:	defffe04 	addi	sp,sp,-8
 2000e28:	df000115 	stw	fp,4(sp)
 2000e2c:	df000104 	addi	fp,sp,4
 2000e30:	2005883a 	mov	r2,r4
 2000e34:	e0bfff0d 	sth	r2,-4(fp)
	KPLED_Status_Buff = status;
 2000e38:	e0bfff0b 	ldhu	r2,-4(fp)
 2000e3c:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status = KPLED_Status_Buff;
 2000e40:	00810034 	movhi	r2,1024
 2000e44:	10880004 	addi	r2,r2,8192
 2000e48:	d0e0110b 	ldhu	r3,-32700(gp)
 2000e4c:	10c0000d 	sth	r3,0(r2)
	KPLED_Load = 0;
 2000e50:	00810034 	movhi	r2,1024
 2000e54:	10887004 	addi	r2,r2,8640
 2000e58:	10000005 	stb	zero,0(r2)
	KPLED_Load = 1;
 2000e5c:	00810034 	movhi	r2,1024
 2000e60:	10887004 	addi	r2,r2,8640
 2000e64:	00c00044 	movi	r3,1
 2000e68:	10c00005 	stb	r3,0(r2)
	KPLED_Load = 0;
 2000e6c:	00810034 	movhi	r2,1024
 2000e70:	10887004 	addi	r2,r2,8640
 2000e74:	10000005 	stb	zero,0(r2)
}
 2000e78:	e037883a 	mov	sp,fp
 2000e7c:	df000017 	ldw	fp,0(sp)
 2000e80:	dec00104 	addi	sp,sp,4
 2000e84:	f800283a 	ret

02000e88 <KPLED_All_Bright>:

void KPLED_All_Bright()
{
 2000e88:	deffff04 	addi	sp,sp,-4
 2000e8c:	df000015 	stw	fp,0(sp)
 2000e90:	d839883a 	mov	fp,sp
	KPLED_Status_Buff = 0x7fff;
 2000e94:	009fffc4 	movi	r2,32767
 2000e98:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status = 0x7fff;
 2000e9c:	00810034 	movhi	r2,1024
 2000ea0:	10880004 	addi	r2,r2,8192
 2000ea4:	00dfffc4 	movi	r3,32767
 2000ea8:	10c0000d 	sth	r3,0(r2)
	KPLED_Load = 0;
 2000eac:	00810034 	movhi	r2,1024
 2000eb0:	10887004 	addi	r2,r2,8640
 2000eb4:	10000005 	stb	zero,0(r2)
	KPLED_Load = 1;
 2000eb8:	00810034 	movhi	r2,1024
 2000ebc:	10887004 	addi	r2,r2,8640
 2000ec0:	00c00044 	movi	r3,1
 2000ec4:	10c00005 	stb	r3,0(r2)
	KPLED_Load = 0;
 2000ec8:	00810034 	movhi	r2,1024
 2000ecc:	10887004 	addi	r2,r2,8640
 2000ed0:	10000005 	stb	zero,0(r2)
}
 2000ed4:	e037883a 	mov	sp,fp
 2000ed8:	df000017 	ldw	fp,0(sp)
 2000edc:	dec00104 	addi	sp,sp,4
 2000ee0:	f800283a 	ret

02000ee4 <KPLED_All_Dim>:
void KPLED_All_Dim()
{
 2000ee4:	deffff04 	addi	sp,sp,-4
 2000ee8:	df000015 	stw	fp,0(sp)
 2000eec:	d839883a 	mov	fp,sp
	KPLED_Status_Buff = 0x9555;
 2000ef0:	00a55544 	movi	r2,-27307
 2000ef4:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status = 0x9555;
 2000ef8:	00810034 	movhi	r2,1024
 2000efc:	10880004 	addi	r2,r2,8192
 2000f00:	00e55544 	movi	r3,-27307
 2000f04:	10c0000d 	sth	r3,0(r2)
	KPLED_Load = 0;
 2000f08:	00810034 	movhi	r2,1024
 2000f0c:	10887004 	addi	r2,r2,8640
 2000f10:	10000005 	stb	zero,0(r2)
	KPLED_Load = 1;
 2000f14:	00810034 	movhi	r2,1024
 2000f18:	10887004 	addi	r2,r2,8640
 2000f1c:	00c00044 	movi	r3,1
 2000f20:	10c00005 	stb	r3,0(r2)
	KPLED_Load = 0;
 2000f24:	00810034 	movhi	r2,1024
 2000f28:	10887004 	addi	r2,r2,8640
 2000f2c:	10000005 	stb	zero,0(r2)
}
 2000f30:	e037883a 	mov	sp,fp
 2000f34:	df000017 	ldw	fp,0(sp)
 2000f38:	dec00104 	addi	sp,sp,4
 2000f3c:	f800283a 	ret

02000f40 <KPLED_All_Off>:
void KPLED_All_Off()
{
 2000f40:	deffff04 	addi	sp,sp,-4
 2000f44:	df000015 	stw	fp,0(sp)
 2000f48:	d839883a 	mov	fp,sp
	KPLED_Status_Buff = 0xc000;
 2000f4c:	00b00004 	movi	r2,-16384
 2000f50:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status = 0xc000;
 2000f54:	00810034 	movhi	r2,1024
 2000f58:	10880004 	addi	r2,r2,8192
 2000f5c:	00f00004 	movi	r3,-16384
 2000f60:	10c0000d 	sth	r3,0(r2)
	KPLED_Load = 0;
 2000f64:	00810034 	movhi	r2,1024
 2000f68:	10887004 	addi	r2,r2,8640
 2000f6c:	10000005 	stb	zero,0(r2)
	KPLED_Load = 1;
 2000f70:	00810034 	movhi	r2,1024
 2000f74:	10887004 	addi	r2,r2,8640
 2000f78:	00c00044 	movi	r3,1
 2000f7c:	10c00005 	stb	r3,0(r2)
	KPLED_Load = 0;
 2000f80:	00810034 	movhi	r2,1024
 2000f84:	10887004 	addi	r2,r2,8640
 2000f88:	10000005 	stb	zero,0(r2)
}
 2000f8c:	e037883a 	mov	sp,fp
 2000f90:	df000017 	ldw	fp,0(sp)
 2000f94:	dec00104 	addi	sp,sp,4
 2000f98:	f800283a 	ret

02000f9c <KPLED_Numbers>:

void KPLED_Numbers(unsigned short b)
{
 2000f9c:	defffe04 	addi	sp,sp,-8
 2000fa0:	df000115 	stw	fp,4(sp)
 2000fa4:	df000104 	addi	fp,sp,4
 2000fa8:	2005883a 	mov	r2,r4
 2000fac:	e0bfff0d 	sth	r2,-4(fp)
	KPLED_Status_Buff = KPLED_Status_Buff & 0xfffc;
 2000fb0:	d0e0110b 	ldhu	r3,-32700(gp)
 2000fb4:	00bfff04 	movi	r2,-4
 2000fb8:	1884703a 	and	r2,r3,r2
 2000fbc:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status_Buff = KPLED_Status_Buff | (b & 0x0003);
 2000fc0:	e0bfff0b 	ldhu	r2,-4(fp)
 2000fc4:	108000cc 	andi	r2,r2,3
 2000fc8:	1007883a 	mov	r3,r2
 2000fcc:	d0a0110b 	ldhu	r2,-32700(gp)
 2000fd0:	1884b03a 	or	r2,r3,r2
 2000fd4:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status = KPLED_Status_Buff;
 2000fd8:	00810034 	movhi	r2,1024
 2000fdc:	10880004 	addi	r2,r2,8192
 2000fe0:	d0e0110b 	ldhu	r3,-32700(gp)
 2000fe4:	10c0000d 	sth	r3,0(r2)
	KPLED_Load = 0;
 2000fe8:	00810034 	movhi	r2,1024
 2000fec:	10887004 	addi	r2,r2,8640
 2000ff0:	10000005 	stb	zero,0(r2)
	KPLED_Load = 1;
 2000ff4:	00810034 	movhi	r2,1024
 2000ff8:	10887004 	addi	r2,r2,8640
 2000ffc:	00c00044 	movi	r3,1
 2001000:	10c00005 	stb	r3,0(r2)
	KPLED_Load = 0;
 2001004:	00810034 	movhi	r2,1024
 2001008:	10887004 	addi	r2,r2,8640
 200100c:	10000005 	stb	zero,0(r2)
}
 2001010:	e037883a 	mov	sp,fp
 2001014:	df000017 	ldw	fp,0(sp)
 2001018:	dec00104 	addi	sp,sp,4
 200101c:	f800283a 	ret

02001020 <KPLED_RightArrow>:

void KPLED_RightArrow(unsigned short b)
{
 2001020:	defffe04 	addi	sp,sp,-8
 2001024:	df000115 	stw	fp,4(sp)
 2001028:	df000104 	addi	fp,sp,4
 200102c:	2005883a 	mov	r2,r4
 2001030:	e0bfff0d 	sth	r2,-4(fp)
	KPLED_Status_Buff = KPLED_Status_Buff & 0xfff3;
 2001034:	d0e0110b 	ldhu	r3,-32700(gp)
 2001038:	00bffcc4 	movi	r2,-13
 200103c:	1884703a 	and	r2,r3,r2
 2001040:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status_Buff = KPLED_Status_Buff | ((b & 0x0003)<<2);
 2001044:	e0bfff0b 	ldhu	r2,-4(fp)
 2001048:	108000cc 	andi	r2,r2,3
 200104c:	1085883a 	add	r2,r2,r2
 2001050:	1085883a 	add	r2,r2,r2
 2001054:	1007883a 	mov	r3,r2
 2001058:	d0a0110b 	ldhu	r2,-32700(gp)
 200105c:	1884b03a 	or	r2,r3,r2
 2001060:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status = KPLED_Status_Buff;
 2001064:	00810034 	movhi	r2,1024
 2001068:	10880004 	addi	r2,r2,8192
 200106c:	d0e0110b 	ldhu	r3,-32700(gp)
 2001070:	10c0000d 	sth	r3,0(r2)
	KPLED_Load = 0;
 2001074:	00810034 	movhi	r2,1024
 2001078:	10887004 	addi	r2,r2,8640
 200107c:	10000005 	stb	zero,0(r2)
	KPLED_Load = 1;
 2001080:	00810034 	movhi	r2,1024
 2001084:	10887004 	addi	r2,r2,8640
 2001088:	00c00044 	movi	r3,1
 200108c:	10c00005 	stb	r3,0(r2)
	KPLED_Load = 0;
 2001090:	00810034 	movhi	r2,1024
 2001094:	10887004 	addi	r2,r2,8640
 2001098:	10000005 	stb	zero,0(r2)
}
 200109c:	e037883a 	mov	sp,fp
 20010a0:	df000017 	ldw	fp,0(sp)
 20010a4:	dec00104 	addi	sp,sp,4
 20010a8:	f800283a 	ret

020010ac <KPLED_LeftArrow>:

void KPLED_LeftArrow(unsigned short b)
{
 20010ac:	defffe04 	addi	sp,sp,-8
 20010b0:	df000115 	stw	fp,4(sp)
 20010b4:	df000104 	addi	fp,sp,4
 20010b8:	2005883a 	mov	r2,r4
 20010bc:	e0bfff0d 	sth	r2,-4(fp)
	KPLED_Status_Buff = KPLED_Status_Buff & 0xffcf;
 20010c0:	d0e0110b 	ldhu	r3,-32700(gp)
 20010c4:	00bff3c4 	movi	r2,-49
 20010c8:	1884703a 	and	r2,r3,r2
 20010cc:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status_Buff = KPLED_Status_Buff | ((b & 0x0003)<<4);
 20010d0:	e0bfff0b 	ldhu	r2,-4(fp)
 20010d4:	108000cc 	andi	r2,r2,3
 20010d8:	1004913a 	slli	r2,r2,4
 20010dc:	1007883a 	mov	r3,r2
 20010e0:	d0a0110b 	ldhu	r2,-32700(gp)
 20010e4:	1884b03a 	or	r2,r3,r2
 20010e8:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status = KPLED_Status_Buff;
 20010ec:	00810034 	movhi	r2,1024
 20010f0:	10880004 	addi	r2,r2,8192
 20010f4:	d0e0110b 	ldhu	r3,-32700(gp)
 20010f8:	10c0000d 	sth	r3,0(r2)
	KPLED_Load = 0;
 20010fc:	00810034 	movhi	r2,1024
 2001100:	10887004 	addi	r2,r2,8640
 2001104:	10000005 	stb	zero,0(r2)
	KPLED_Load = 1;
 2001108:	00810034 	movhi	r2,1024
 200110c:	10887004 	addi	r2,r2,8640
 2001110:	00c00044 	movi	r3,1
 2001114:	10c00005 	stb	r3,0(r2)
	KPLED_Load = 0;
 2001118:	00810034 	movhi	r2,1024
 200111c:	10887004 	addi	r2,r2,8640
 2001120:	10000005 	stb	zero,0(r2)
}
 2001124:	e037883a 	mov	sp,fp
 2001128:	df000017 	ldw	fp,0(sp)
 200112c:	dec00104 	addi	sp,sp,4
 2001130:	f800283a 	ret

02001134 <KPLED_Menu>:

void KPLED_Menu(unsigned short b)
{
 2001134:	defffe04 	addi	sp,sp,-8
 2001138:	df000115 	stw	fp,4(sp)
 200113c:	df000104 	addi	fp,sp,4
 2001140:	2005883a 	mov	r2,r4
 2001144:	e0bfff0d 	sth	r2,-4(fp)
	KPLED_Status_Buff = KPLED_Status_Buff & 0xff3f;
 2001148:	d0e0110b 	ldhu	r3,-32700(gp)
 200114c:	00bfcfc4 	movi	r2,-193
 2001150:	1884703a 	and	r2,r3,r2
 2001154:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status_Buff = KPLED_Status_Buff | ((b & 0x0003)<<6);
 2001158:	e0bfff0b 	ldhu	r2,-4(fp)
 200115c:	100491ba 	slli	r2,r2,6
 2001160:	10803fcc 	andi	r2,r2,255
 2001164:	1007883a 	mov	r3,r2
 2001168:	d0a0110b 	ldhu	r2,-32700(gp)
 200116c:	1884b03a 	or	r2,r3,r2
 2001170:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status = KPLED_Status_Buff;
 2001174:	00810034 	movhi	r2,1024
 2001178:	10880004 	addi	r2,r2,8192
 200117c:	d0e0110b 	ldhu	r3,-32700(gp)
 2001180:	10c0000d 	sth	r3,0(r2)
	KPLED_Load = 0;
 2001184:	00810034 	movhi	r2,1024
 2001188:	10887004 	addi	r2,r2,8640
 200118c:	10000005 	stb	zero,0(r2)
	KPLED_Load = 1;
 2001190:	00810034 	movhi	r2,1024
 2001194:	10887004 	addi	r2,r2,8640
 2001198:	00c00044 	movi	r3,1
 200119c:	10c00005 	stb	r3,0(r2)
	KPLED_Load = 0;
 20011a0:	00810034 	movhi	r2,1024
 20011a4:	10887004 	addi	r2,r2,8640
 20011a8:	10000005 	stb	zero,0(r2)
}
 20011ac:	e037883a 	mov	sp,fp
 20011b0:	df000017 	ldw	fp,0(sp)
 20011b4:	dec00104 	addi	sp,sp,4
 20011b8:	f800283a 	ret

020011bc <KPLED_Edit>:

void KPLED_Edit(unsigned short b)
{
 20011bc:	defffe04 	addi	sp,sp,-8
 20011c0:	df000115 	stw	fp,4(sp)
 20011c4:	df000104 	addi	fp,sp,4
 20011c8:	2005883a 	mov	r2,r4
 20011cc:	e0bfff0d 	sth	r2,-4(fp)
	KPLED_Status_Buff = KPLED_Status_Buff & 0xfcff;
 20011d0:	d0e0110b 	ldhu	r3,-32700(gp)
 20011d4:	00bf3fc4 	movi	r2,-769
 20011d8:	1884703a 	and	r2,r3,r2
 20011dc:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status_Buff = KPLED_Status_Buff | ((b & 0x0003)<<8);
 20011e0:	e0bfff0b 	ldhu	r2,-4(fp)
 20011e4:	108000cc 	andi	r2,r2,3
 20011e8:	1004923a 	slli	r2,r2,8
 20011ec:	1007883a 	mov	r3,r2
 20011f0:	d0a0110b 	ldhu	r2,-32700(gp)
 20011f4:	1884b03a 	or	r2,r3,r2
 20011f8:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status = KPLED_Status_Buff;
 20011fc:	00810034 	movhi	r2,1024
 2001200:	10880004 	addi	r2,r2,8192
 2001204:	d0e0110b 	ldhu	r3,-32700(gp)
 2001208:	10c0000d 	sth	r3,0(r2)
	KPLED_Load = 0;
 200120c:	00810034 	movhi	r2,1024
 2001210:	10887004 	addi	r2,r2,8640
 2001214:	10000005 	stb	zero,0(r2)
	KPLED_Load = 1;
 2001218:	00810034 	movhi	r2,1024
 200121c:	10887004 	addi	r2,r2,8640
 2001220:	00c00044 	movi	r3,1
 2001224:	10c00005 	stb	r3,0(r2)
	KPLED_Load = 0;
 2001228:	00810034 	movhi	r2,1024
 200122c:	10887004 	addi	r2,r2,8640
 2001230:	10000005 	stb	zero,0(r2)
}
 2001234:	e037883a 	mov	sp,fp
 2001238:	df000017 	ldw	fp,0(sp)
 200123c:	dec00104 	addi	sp,sp,4
 2001240:	f800283a 	ret

02001244 <KPLED_Enter>:

void KPLED_Enter(unsigned short b)
{
 2001244:	defffe04 	addi	sp,sp,-8
 2001248:	df000115 	stw	fp,4(sp)
 200124c:	df000104 	addi	fp,sp,4
 2001250:	2005883a 	mov	r2,r4
 2001254:	e0bfff0d 	sth	r2,-4(fp)
	KPLED_Status_Buff = KPLED_Status_Buff & 0xf3ff;
 2001258:	d0e0110b 	ldhu	r3,-32700(gp)
 200125c:	00bcffc4 	movi	r2,-3073
 2001260:	1884703a 	and	r2,r3,r2
 2001264:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status_Buff = KPLED_Status_Buff | ((b & 0x0003)<<10);
 2001268:	e0bfff0b 	ldhu	r2,-4(fp)
 200126c:	108000cc 	andi	r2,r2,3
 2001270:	100492ba 	slli	r2,r2,10
 2001274:	1007883a 	mov	r3,r2
 2001278:	d0a0110b 	ldhu	r2,-32700(gp)
 200127c:	1884b03a 	or	r2,r3,r2
 2001280:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status = KPLED_Status_Buff;
 2001284:	00810034 	movhi	r2,1024
 2001288:	10880004 	addi	r2,r2,8192
 200128c:	d0e0110b 	ldhu	r3,-32700(gp)
 2001290:	10c0000d 	sth	r3,0(r2)
	KPLED_Load = 0;
 2001294:	00810034 	movhi	r2,1024
 2001298:	10887004 	addi	r2,r2,8640
 200129c:	10000005 	stb	zero,0(r2)
	KPLED_Load = 1;
 20012a0:	00810034 	movhi	r2,1024
 20012a4:	10887004 	addi	r2,r2,8640
 20012a8:	00c00044 	movi	r3,1
 20012ac:	10c00005 	stb	r3,0(r2)
	KPLED_Load = 0;
 20012b0:	00810034 	movhi	r2,1024
 20012b4:	10887004 	addi	r2,r2,8640
 20012b8:	10000005 	stb	zero,0(r2)
}
 20012bc:	e037883a 	mov	sp,fp
 20012c0:	df000017 	ldw	fp,0(sp)
 20012c4:	dec00104 	addi	sp,sp,4
 20012c8:	f800283a 	ret

020012cc <KPLED_Enable>:

void KPLED_Enable(unsigned short b)
{
 20012cc:	defffe04 	addi	sp,sp,-8
 20012d0:	df000115 	stw	fp,4(sp)
 20012d4:	df000104 	addi	fp,sp,4
 20012d8:	2005883a 	mov	r2,r4
 20012dc:	e0bfff0d 	sth	r2,-4(fp)
	KPLED_Status_Buff = KPLED_Status_Buff & 0xcfff;
 20012e0:	d0e0110b 	ldhu	r3,-32700(gp)
 20012e4:	00b3ffc4 	movi	r2,-12289
 20012e8:	1884703a 	and	r2,r3,r2
 20012ec:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status_Buff = KPLED_Status_Buff | ((b & 0x0003)<<12);
 20012f0:	e0bfff0b 	ldhu	r2,-4(fp)
 20012f4:	108000cc 	andi	r2,r2,3
 20012f8:	1004933a 	slli	r2,r2,12
 20012fc:	1007883a 	mov	r3,r2
 2001300:	d0a0110b 	ldhu	r2,-32700(gp)
 2001304:	1884b03a 	or	r2,r3,r2
 2001308:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status = KPLED_Status_Buff;
 200130c:	00810034 	movhi	r2,1024
 2001310:	10880004 	addi	r2,r2,8192
 2001314:	d0e0110b 	ldhu	r3,-32700(gp)
 2001318:	10c0000d 	sth	r3,0(r2)
	KPLED_Load = 0;
 200131c:	00810034 	movhi	r2,1024
 2001320:	10887004 	addi	r2,r2,8640
 2001324:	10000005 	stb	zero,0(r2)
	KPLED_Load = 1;
 2001328:	00810034 	movhi	r2,1024
 200132c:	10887004 	addi	r2,r2,8640
 2001330:	00c00044 	movi	r3,1
 2001334:	10c00005 	stb	r3,0(r2)
	KPLED_Load = 0;
 2001338:	00810034 	movhi	r2,1024
 200133c:	10887004 	addi	r2,r2,8640
 2001340:	10000005 	stb	zero,0(r2)
}
 2001344:	e037883a 	mov	sp,fp
 2001348:	df000017 	ldw	fp,0(sp)
 200134c:	dec00104 	addi	sp,sp,4
 2001350:	f800283a 	ret

02001354 <KPLED_Fire>:

void KPLED_Fire(unsigned short b)
{
 2001354:	defffe04 	addi	sp,sp,-8
 2001358:	df000115 	stw	fp,4(sp)
 200135c:	df000104 	addi	fp,sp,4
 2001360:	2005883a 	mov	r2,r4
 2001364:	e0bfff0d 	sth	r2,-4(fp)
	KPLED_Status_Buff = KPLED_Status_Buff & 0x3fff;
 2001368:	d0a0110b 	ldhu	r2,-32700(gp)
 200136c:	108fffcc 	andi	r2,r2,16383
 2001370:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status_Buff = KPLED_Status_Buff | ((b & 0x0003)<<14);
 2001374:	e0bfff0b 	ldhu	r2,-4(fp)
 2001378:	100493ba 	slli	r2,r2,14
 200137c:	1007883a 	mov	r3,r2
 2001380:	d0a0110b 	ldhu	r2,-32700(gp)
 2001384:	1884b03a 	or	r2,r3,r2
 2001388:	d0a0110d 	sth	r2,-32700(gp)
	KPLED_Status = KPLED_Status_Buff;
 200138c:	00810034 	movhi	r2,1024
 2001390:	10880004 	addi	r2,r2,8192
 2001394:	d0e0110b 	ldhu	r3,-32700(gp)
 2001398:	10c0000d 	sth	r3,0(r2)
	KPLED_Load = 0;
 200139c:	00810034 	movhi	r2,1024
 20013a0:	10887004 	addi	r2,r2,8640
 20013a4:	10000005 	stb	zero,0(r2)
	KPLED_Load = 1;
 20013a8:	00810034 	movhi	r2,1024
 20013ac:	10887004 	addi	r2,r2,8640
 20013b0:	00c00044 	movi	r3,1
 20013b4:	10c00005 	stb	r3,0(r2)
	KPLED_Load = 0;
 20013b8:	00810034 	movhi	r2,1024
 20013bc:	10887004 	addi	r2,r2,8640
 20013c0:	10000005 	stb	zero,0(r2)
}
 20013c4:	e037883a 	mov	sp,fp
 20013c8:	df000017 	ldw	fp,0(sp)
 20013cc:	dec00104 	addi	sp,sp,4
 20013d0:	f800283a 	ret

020013d4 <UartInit>:
#include "..\inc\sopc.h"
#include "..\inc\uart.h"
#include "..\inc\delay.h"

void UartInit()
{
 20013d4:	defffe04 	addi	sp,sp,-8
 20013d8:	dfc00115 	stw	ra,4(sp)
 20013dc:	df000015 	stw	fp,0(sp)
 20013e0:	d839883a 	mov	fp,sp
	uart.init();
 20013e4:	00808074 	movhi	r2,513
 20013e8:	109dc604 	addi	r2,r2,30488
 20013ec:	10803617 	ldw	r2,216(r2)
 20013f0:	103ee83a 	callr	r2
}
 20013f4:	e037883a 	mov	sp,fp
 20013f8:	dfc00117 	ldw	ra,4(sp)
 20013fc:	df000017 	ldw	fp,0(sp)
 2001400:	dec00204 	addi	sp,sp,8
 2001404:	f800283a 	ret

02001408 <WriteRAM32Bits>:

void WriteRAM32Bits(unsigned char address, unsigned int data)
{
 2001408:	defffa04 	addi	sp,sp,-24
 200140c:	dfc00515 	stw	ra,20(sp)
 2001410:	df000415 	stw	fp,16(sp)
 2001414:	df000404 	addi	fp,sp,16
 2001418:	2005883a 	mov	r2,r4
 200141c:	e17fff15 	stw	r5,-4(fp)
 2001420:	e0bffe05 	stb	r2,-8(fp)

	unsigned char byte0 = data & 0xFF;
 2001424:	e0bfff17 	ldw	r2,-4(fp)
 2001428:	e0bffc05 	stb	r2,-16(fp)
	unsigned char byte1 = data>>8 & 0xFF;
 200142c:	e0bfff17 	ldw	r2,-4(fp)
 2001430:	1004d23a 	srli	r2,r2,8
 2001434:	e0bffc45 	stb	r2,-15(fp)
	unsigned char byte2 = data>>16 & 0xFF;
 2001438:	e0bfff17 	ldw	r2,-4(fp)
 200143c:	1004d43a 	srli	r2,r2,16
 2001440:	e0bffc85 	stb	r2,-14(fp)
	unsigned char byte3 = data>>24 & 0xFF;
 2001444:	e0bfff17 	ldw	r2,-4(fp)
 2001448:	1004d63a 	srli	r2,r2,24
 200144c:	e0bffcc5 	stb	r2,-13(fp)
	[8] x				//Unused
	[9] 0x04			//End of transmission
	[10] 0x04
	*/

	unsigned char* message = (unsigned char*)"\x02Waxddddx\x04\x04";
 2001450:	00808074 	movhi	r2,513
 2001454:	10994e04 	addi	r2,r2,25912
 2001458:	e0bffd15 	stw	r2,-12(fp)

	message[2] = address*4;
 200145c:	e0bffd17 	ldw	r2,-12(fp)
 2001460:	10c00084 	addi	r3,r2,2
 2001464:	e0bffe03 	ldbu	r2,-8(fp)
 2001468:	1085883a 	add	r2,r2,r2
 200146c:	1085883a 	add	r2,r2,r2
 2001470:	18800005 	stb	r2,0(r3)
	message[4] = byte3;
 2001474:	e0bffd17 	ldw	r2,-12(fp)
 2001478:	10800104 	addi	r2,r2,4
 200147c:	e0fffcc3 	ldbu	r3,-13(fp)
 2001480:	10c00005 	stb	r3,0(r2)
	message[5] = byte2;
 2001484:	e0bffd17 	ldw	r2,-12(fp)
 2001488:	10800144 	addi	r2,r2,5
 200148c:	e0fffc83 	ldbu	r3,-14(fp)
 2001490:	10c00005 	stb	r3,0(r2)
	message[6] = byte1;
 2001494:	e0bffd17 	ldw	r2,-12(fp)
 2001498:	10800184 	addi	r2,r2,6
 200149c:	e0fffc43 	ldbu	r3,-15(fp)
 20014a0:	10c00005 	stb	r3,0(r2)
	message[7] = byte0;
 20014a4:	e0bffd17 	ldw	r2,-12(fp)
 20014a8:	108001c4 	addi	r2,r2,7
 20014ac:	e0fffc03 	ldbu	r3,-16(fp)
 20014b0:	10c00005 	stb	r3,0(r2)

	uart.send_string(11,message);
 20014b4:	00808074 	movhi	r2,513
 20014b8:	109dc604 	addi	r2,r2,30488
 20014bc:	10803517 	ldw	r2,212(r2)
 20014c0:	010002c4 	movi	r4,11
 20014c4:	e17ffd17 	ldw	r5,-12(fp)
 20014c8:	103ee83a 	callr	r2

}
 20014cc:	e037883a 	mov	sp,fp
 20014d0:	dfc00117 	ldw	ra,4(sp)
 20014d4:	df000017 	ldw	fp,0(sp)
 20014d8:	dec00204 	addi	sp,sp,8
 20014dc:	f800283a 	ret

020014e0 <ReadRAM32Bits>:




unsigned int ReadRAM32Bits(unsigned int address)
{
 20014e0:	defff604 	addi	sp,sp,-40
 20014e4:	dfc00915 	stw	ra,36(sp)
 20014e8:	df000815 	stw	fp,32(sp)
 20014ec:	df000804 	addi	fp,sp,32
 20014f0:	e13fff15 	stw	r4,-4(fp)
	[8] x				//Unused
	[9] 0x04			//End of transmission
	[10] 0x04
	*/

	unsigned char* message = (unsigned char*)"\x02Raxxxxxx\x04\x04";
 20014f4:	00808074 	movhi	r2,513
 20014f8:	10995104 	addi	r2,r2,25924
 20014fc:	e0bff815 	stw	r2,-32(fp)
	unsigned char* input = (unsigned char*)"*******";
 2001500:	00808074 	movhi	r2,513
 2001504:	10995404 	addi	r2,r2,25936
 2001508:	e0bff915 	stw	r2,-28(fp)
	message[2] = address*4;
 200150c:	e0bff817 	ldw	r2,-32(fp)
 2001510:	10c00084 	addi	r3,r2,2
 2001514:	e0bfff17 	ldw	r2,-4(fp)
 2001518:	1085883a 	add	r2,r2,r2
 200151c:	1085883a 	add	r2,r2,r2
 2001520:	18800005 	stb	r2,0(r3)

	uart.receive_count = 0;
 2001524:	00808074 	movhi	r2,513
 2001528:	109dc604 	addi	r2,r2,30488
 200152c:	10000115 	stw	zero,4(r2)
	uart.receive_flag = 0;
 2001530:	00808074 	movhi	r2,513
 2001534:	109dc604 	addi	r2,r2,30488
 2001538:	10000015 	stw	zero,0(r2)

	uart.send_string(11,message);
 200153c:	00808074 	movhi	r2,513
 2001540:	109dc604 	addi	r2,r2,30488
 2001544:	10803517 	ldw	r2,212(r2)
 2001548:	010002c4 	movi	r4,11
 200154c:	e17ff817 	ldw	r5,-32(fp)
 2001550:	103ee83a 	callr	r2

	while(! uart.receive_flag);
 2001554:	0001883a 	nop
 2001558:	00808074 	movhi	r2,513
 200155c:	109dc604 	addi	r2,r2,30488
 2001560:	10800017 	ldw	r2,0(r2)
 2001564:	103ffc26 	beq	r2,zero,2001558 <ReadRAM32Bits+0x78>

	input[0] = uart.receive_buffer[0];
 2001568:	00808074 	movhi	r2,513
 200156c:	109dc604 	addi	r2,r2,30488
 2001570:	10c00203 	ldbu	r3,8(r2)
 2001574:	e0bff917 	ldw	r2,-28(fp)
 2001578:	10c00005 	stb	r3,0(r2)
	input[1] = uart.receive_buffer[1];
 200157c:	e0bff917 	ldw	r2,-28(fp)
 2001580:	10800044 	addi	r2,r2,1
 2001584:	00c08074 	movhi	r3,513
 2001588:	18ddc604 	addi	r3,r3,30488
 200158c:	18c00243 	ldbu	r3,9(r3)
 2001590:	10c00005 	stb	r3,0(r2)
	input[2] = uart.receive_buffer[2];
 2001594:	e0bff917 	ldw	r2,-28(fp)
 2001598:	10800084 	addi	r2,r2,2
 200159c:	00c08074 	movhi	r3,513
 20015a0:	18ddc604 	addi	r3,r3,30488
 20015a4:	18c00283 	ldbu	r3,10(r3)
 20015a8:	10c00005 	stb	r3,0(r2)
	input[3] = uart.receive_buffer[3];
 20015ac:	e0bff917 	ldw	r2,-28(fp)
 20015b0:	108000c4 	addi	r2,r2,3
 20015b4:	00c08074 	movhi	r3,513
 20015b8:	18ddc604 	addi	r3,r3,30488
 20015bc:	18c002c3 	ldbu	r3,11(r3)
 20015c0:	10c00005 	stb	r3,0(r2)
	input[4] = uart.receive_buffer[4];
 20015c4:	e0bff917 	ldw	r2,-28(fp)
 20015c8:	10800104 	addi	r2,r2,4
 20015cc:	00c08074 	movhi	r3,513
 20015d0:	18ddc604 	addi	r3,r3,30488
 20015d4:	18c00303 	ldbu	r3,12(r3)
 20015d8:	10c00005 	stb	r3,0(r2)
	input[5] = uart.receive_buffer[5];
 20015dc:	e0bff917 	ldw	r2,-28(fp)
 20015e0:	10800144 	addi	r2,r2,5
 20015e4:	00c08074 	movhi	r3,513
 20015e8:	18ddc604 	addi	r3,r3,30488
 20015ec:	18c00343 	ldbu	r3,13(r3)
 20015f0:	10c00005 	stb	r3,0(r2)
	input[6] = uart.receive_buffer[6];
 20015f4:	e0bff917 	ldw	r2,-28(fp)
 20015f8:	10800184 	addi	r2,r2,6
 20015fc:	00c08074 	movhi	r3,513
 2001600:	18ddc604 	addi	r3,r3,30488
 2001604:	18c00383 	ldbu	r3,14(r3)
 2001608:	10c00005 	stb	r3,0(r2)
    //printf("%s",input);
	uart.receive_flag = 0;
 200160c:	00808074 	movhi	r2,513
 2001610:	109dc604 	addi	r2,r2,30488
 2001614:	10000015 	stw	zero,0(r2)

	unsigned int byte0 = input[2];
 2001618:	e0bff917 	ldw	r2,-28(fp)
 200161c:	10800084 	addi	r2,r2,2
 2001620:	10800003 	ldbu	r2,0(r2)
 2001624:	10803fcc 	andi	r2,r2,255
 2001628:	e0bffa15 	stw	r2,-24(fp)
	unsigned int byte1 = input[3] << 8;
 200162c:	e0bff917 	ldw	r2,-28(fp)
 2001630:	108000c4 	addi	r2,r2,3
 2001634:	10800003 	ldbu	r2,0(r2)
 2001638:	10803fcc 	andi	r2,r2,255
 200163c:	1004923a 	slli	r2,r2,8
 2001640:	e0bffb15 	stw	r2,-20(fp)
	unsigned int byte2 = input[4] << 16;
 2001644:	e0bff917 	ldw	r2,-28(fp)
 2001648:	10800104 	addi	r2,r2,4
 200164c:	10800003 	ldbu	r2,0(r2)
 2001650:	10803fcc 	andi	r2,r2,255
 2001654:	1004943a 	slli	r2,r2,16
 2001658:	e0bffc15 	stw	r2,-16(fp)
	unsigned int byte3 = input[5] << 24;
 200165c:	e0bff917 	ldw	r2,-28(fp)
 2001660:	10800144 	addi	r2,r2,5
 2001664:	10800003 	ldbu	r2,0(r2)
 2001668:	10803fcc 	andi	r2,r2,255
 200166c:	1004963a 	slli	r2,r2,24
 2001670:	e0bffd15 	stw	r2,-12(fp)

	unsigned int data = byte0 + byte1 + byte2 + byte3;
 2001674:	e0fffa17 	ldw	r3,-24(fp)
 2001678:	e0bffb17 	ldw	r2,-20(fp)
 200167c:	1887883a 	add	r3,r3,r2
 2001680:	e0bffc17 	ldw	r2,-16(fp)
 2001684:	1887883a 	add	r3,r3,r2
 2001688:	e0bffd17 	ldw	r2,-12(fp)
 200168c:	1885883a 	add	r2,r3,r2
 2001690:	e0bffe15 	stw	r2,-8(fp)
	return data;
 2001694:	e0bffe17 	ldw	r2,-8(fp)
}
 2001698:	e037883a 	mov	sp,fp
 200169c:	dfc00117 	ldw	ra,4(sp)
 20016a0:	df000017 	ldw	fp,0(sp)
 20016a4:	dec00204 	addi	sp,sp,8
 20016a8:	f800283a 	ret

020016ac <WriteEEPROM8Bits>:
	time.sleep(0.1)
	return
 */

void WriteEEPROM8Bits(unsigned char address, unsigned char data)
{
 20016ac:	defffb04 	addi	sp,sp,-20
 20016b0:	dfc00415 	stw	ra,16(sp)
 20016b4:	df000315 	stw	fp,12(sp)
 20016b8:	df000304 	addi	fp,sp,12
 20016bc:	2007883a 	mov	r3,r4
 20016c0:	2805883a 	mov	r2,r5
 20016c4:	e0fffe05 	stb	r3,-8(fp)
 20016c8:	e0bfff05 	stb	r2,-4(fp)
	//unsigned char byte0 = data & 0xFF;

	unsigned char* message = (unsigned char*)"\x02waxdxxxx\x04\x04";
 20016cc:	00808074 	movhi	r2,513
 20016d0:	10995604 	addi	r2,r2,25944
 20016d4:	e0bffd15 	stw	r2,-12(fp)

	message[2] = address;
 20016d8:	e0bffd17 	ldw	r2,-12(fp)
 20016dc:	10800084 	addi	r2,r2,2
 20016e0:	e0fffe03 	ldbu	r3,-8(fp)
 20016e4:	10c00005 	stb	r3,0(r2)
	message[4] = data;
 20016e8:	e0bffd17 	ldw	r2,-12(fp)
 20016ec:	10800104 	addi	r2,r2,4
 20016f0:	e0ffff03 	ldbu	r3,-4(fp)
 20016f4:	10c00005 	stb	r3,0(r2)

	uart.send_string(11,message);
 20016f8:	00808074 	movhi	r2,513
 20016fc:	109dc604 	addi	r2,r2,30488
 2001700:	10803517 	ldw	r2,212(r2)
 2001704:	010002c4 	movi	r4,11
 2001708:	e17ffd17 	ldw	r5,-12(fp)
 200170c:	103ee83a 	callr	r2
	//delay(1000);
}
 2001710:	e037883a 	mov	sp,fp
 2001714:	dfc00117 	ldw	ra,4(sp)
 2001718:	df000017 	ldw	fp,0(sp)
 200171c:	dec00204 	addi	sp,sp,8
 2001720:	f800283a 	ret

02001724 <WriteEEPROM32Bits>:
	WriteEEPROM8Bits(port_name,address+2,char3)
	WriteEEPROM8Bits(port_name,address+3,char4)
	return
 */
void WriteEEPROM32Bits(unsigned char address, unsigned int data)
{
 2001724:	defffa04 	addi	sp,sp,-24
 2001728:	dfc00515 	stw	ra,20(sp)
 200172c:	df000415 	stw	fp,16(sp)
 2001730:	df000404 	addi	fp,sp,16
 2001734:	2005883a 	mov	r2,r4
 2001738:	e17fff15 	stw	r5,-4(fp)
 200173c:	e0bffe05 	stb	r2,-8(fp)
	unsigned char address_new = address*4;
 2001740:	e0bffe03 	ldbu	r2,-8(fp)
 2001744:	1085883a 	add	r2,r2,r2
 2001748:	1085883a 	add	r2,r2,r2
 200174c:	e0bffc05 	stb	r2,-16(fp)

	unsigned char byte0 = data & 0xFF;
 2001750:	e0bfff17 	ldw	r2,-4(fp)
 2001754:	e0bffc45 	stb	r2,-15(fp)
	unsigned char byte1 = data>>8 & 0xFF;
 2001758:	e0bfff17 	ldw	r2,-4(fp)
 200175c:	1004d23a 	srli	r2,r2,8
 2001760:	e0bffc85 	stb	r2,-14(fp)
	unsigned char byte2 = data>>16 & 0xFF;
 2001764:	e0bfff17 	ldw	r2,-4(fp)
 2001768:	1004d43a 	srli	r2,r2,16
 200176c:	e0bffcc5 	stb	r2,-13(fp)
	unsigned char byte3 = data>>24 & 0xFF;
 2001770:	e0bfff17 	ldw	r2,-4(fp)
 2001774:	1004d63a 	srli	r2,r2,24
 2001778:	e0bffd05 	stb	r2,-12(fp)

	WriteEEPROM8Bits(address_new,byte3);
 200177c:	e0fffc03 	ldbu	r3,-16(fp)
 2001780:	e0bffd03 	ldbu	r2,-12(fp)
 2001784:	1809883a 	mov	r4,r3
 2001788:	100b883a 	mov	r5,r2
 200178c:	20016ac0 	call	20016ac <WriteEEPROM8Bits>
	WriteEEPROM8Bits(address_new+1,byte2);
 2001790:	e0bffc03 	ldbu	r2,-16(fp)
 2001794:	10800044 	addi	r2,r2,1
 2001798:	10c03fcc 	andi	r3,r2,255
 200179c:	e0bffcc3 	ldbu	r2,-13(fp)
 20017a0:	1809883a 	mov	r4,r3
 20017a4:	100b883a 	mov	r5,r2
 20017a8:	20016ac0 	call	20016ac <WriteEEPROM8Bits>
	WriteEEPROM8Bits(address_new+2,byte1);
 20017ac:	e0bffc03 	ldbu	r2,-16(fp)
 20017b0:	10800084 	addi	r2,r2,2
 20017b4:	10c03fcc 	andi	r3,r2,255
 20017b8:	e0bffc83 	ldbu	r2,-14(fp)
 20017bc:	1809883a 	mov	r4,r3
 20017c0:	100b883a 	mov	r5,r2
 20017c4:	20016ac0 	call	20016ac <WriteEEPROM8Bits>
	WriteEEPROM8Bits(address_new+3,byte0);
 20017c8:	e0bffc03 	ldbu	r2,-16(fp)
 20017cc:	108000c4 	addi	r2,r2,3
 20017d0:	10c03fcc 	andi	r3,r2,255
 20017d4:	e0bffc43 	ldbu	r2,-15(fp)
 20017d8:	1809883a 	mov	r4,r3
 20017dc:	100b883a 	mov	r5,r2
 20017e0:	20016ac0 	call	20016ac <WriteEEPROM8Bits>

}
 20017e4:	e037883a 	mov	sp,fp
 20017e8:	dfc00117 	ldw	ra,4(sp)
 20017ec:	df000017 	ldw	fp,0(sp)
 20017f0:	dec00204 	addi	sp,sp,8
 20017f4:	f800283a 	ret

020017f8 <Fire>:

void Fire()
{
 20017f8:	defffd04 	addi	sp,sp,-12
 20017fc:	dfc00215 	stw	ra,8(sp)
 2001800:	df000115 	stw	fp,4(sp)
 2001804:	df000104 	addi	fp,sp,4
	unsigned char* message = (unsigned char*)"\x02\x46xxxxxxx\x04\x04";
 2001808:	00808074 	movhi	r2,513
 200180c:	10995904 	addi	r2,r2,25956
 2001810:	e0bfff15 	stw	r2,-4(fp)

	uart.send_string(11,message);
 2001814:	00808074 	movhi	r2,513
 2001818:	109dc604 	addi	r2,r2,30488
 200181c:	10803517 	ldw	r2,212(r2)
 2001820:	010002c4 	movi	r4,11
 2001824:	e17fff17 	ldw	r5,-4(fp)
 2001828:	103ee83a 	callr	r2
}
 200182c:	e037883a 	mov	sp,fp
 2001830:	dfc00117 	ldw	ra,4(sp)
 2001834:	df000017 	ldw	fp,0(sp)
 2001838:	dec00204 	addi	sp,sp,8
 200183c:	f800283a 	ret

02001840 <Stop>:

void Stop()
{
 2001840:	defffd04 	addi	sp,sp,-12
 2001844:	dfc00215 	stw	ra,8(sp)
 2001848:	df000115 	stw	fp,4(sp)
 200184c:	df000104 	addi	fp,sp,4
	unsigned char* message = (unsigned char*)"\x02Sxxxxxxx\x04\x04";
 2001850:	00808074 	movhi	r2,513
 2001854:	10995c04 	addi	r2,r2,25968
 2001858:	e0bfff15 	stw	r2,-4(fp)
	uart.send_string(11,message);
 200185c:	00808074 	movhi	r2,513
 2001860:	109dc604 	addi	r2,r2,30488
 2001864:	10803517 	ldw	r2,212(r2)
 2001868:	010002c4 	movi	r4,11
 200186c:	e17fff17 	ldw	r5,-4(fp)
 2001870:	103ee83a 	callr	r2
}
 2001874:	e037883a 	mov	sp,fp
 2001878:	dfc00117 	ldw	ra,4(sp)
 200187c:	df000017 	ldw	fp,0(sp)
 2001880:	dec00204 	addi	sp,sp,8
 2001884:	f800283a 	ret

02001888 <ResetRAMFromEEPROM>:

void ResetRAMFromEEPROM()
{
 2001888:	defffd04 	addi	sp,sp,-12
 200188c:	dfc00215 	stw	ra,8(sp)
 2001890:	df000115 	stw	fp,4(sp)
 2001894:	df000104 	addi	fp,sp,4
	unsigned char* message = (unsigned char*)"\x02\x45xxxxxxx\x04\x04";
 2001898:	00808074 	movhi	r2,513
 200189c:	10995f04 	addi	r2,r2,25980
 20018a0:	e0bfff15 	stw	r2,-4(fp)
	uart.send_string(11,message);
 20018a4:	00808074 	movhi	r2,513
 20018a8:	109dc604 	addi	r2,r2,30488
 20018ac:	10803517 	ldw	r2,212(r2)
 20018b0:	010002c4 	movi	r4,11
 20018b4:	e17fff17 	ldw	r5,-4(fp)
 20018b8:	103ee83a 	callr	r2
	delay(40000);
 20018bc:	01271014 	movui	r4,40000
 20018c0:	20019dc0 	call	20019dc <delay>
}
 20018c4:	e037883a 	mov	sp,fp
 20018c8:	dfc00117 	ldw	ra,4(sp)
 20018cc:	df000017 	ldw	fp,0(sp)
 20018d0:	dec00204 	addi	sp,sp,8
 20018d4:	f800283a 	ret

020018d8 <showCoverPage>:
/*
 * Display the cover page (welcome screen).
 */

void showCoverPage()
{
 20018d8:	defffd04 	addi	sp,sp,-12
 20018dc:	dfc00215 	stw	ra,8(sp)
 20018e0:	df000115 	stw	fp,4(sp)
 20018e4:	df000104 	addi	fp,sp,4
	DisClear();
 20018e8:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 20018ec:	0009883a 	mov	r4,zero
 20018f0:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(2,1);
 20018f4:	01000084 	movi	r4,2
 20018f8:	01400044 	movi	r5,1
 20018fc:	20005400 	call	2000540 <DisCurPos>
	//        12345678901234567890
	DisWrStr("  Soft X-Ray Laser  ");
 2001900:	01008074 	movhi	r4,513
 2001904:	21196204 	addi	r4,r4,25992
 2001908:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(3,1);
 200190c:	010000c4 	movi	r4,3
 2001910:	01400044 	movi	r5,1
 2001914:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Press MENU to Start");
 2001918:	01008074 	movhi	r4,513
 200191c:	21196804 	addi	r4,r4,26016
 2001920:	20006000 	call	2000600 <DisWrStr>
	printf("Engr: %d",ENGR_MODE);
 2001924:	01008074 	movhi	r4,513
 2001928:	21196d04 	addi	r4,r4,26036
 200192c:	01400044 	movi	r5,1
 2001930:	20099380 	call	2009938 <printf>
	if(ENGR_MODE)
	{
		DisCurPos(4,1);
 2001934:	01000104 	movi	r4,4
 2001938:	01400044 	movi	r5,1
 200193c:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("  !!!ENGR_MODE!!!   ");
 2001940:	01008074 	movhi	r4,513
 2001944:	21197004 	addi	r4,r4,26048
 2001948:	20006000 	call	2000600 <DisWrStr>
	}

	KPLED_All_Off();
 200194c:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Menu(3);
 2001950:	010000c4 	movi	r4,3
 2001954:	20011340 	call	2001134 <KPLED_Menu>
 2001958:	00000106 	br	2001960 <showCoverPage+0x88>
					while(keyFlag);
					return;
				}
			}
		}
	}
 200195c:	0001883a 	nop
	KPLED_Menu(3);

	unsigned char keyVal_latch;
	while(1)
	{
		if(keyFlag)
 2001960:	00810034 	movhi	r2,1024
 2001964:	10889804 	addi	r2,r2,8800
 2001968:	10800003 	ldbu	r2,0(r2)
 200196c:	10803fcc 	andi	r2,r2,255
 2001970:	103ffa26 	beq	r2,zero,200195c <showCoverPage+0x84>
		{
			delay(100);
 2001974:	01001904 	movi	r4,100
 2001978:	20019dc0 	call	20019dc <delay>
			if(keyFlag)
 200197c:	00810034 	movhi	r2,1024
 2001980:	10889804 	addi	r2,r2,8800
 2001984:	10800003 	ldbu	r2,0(r2)
 2001988:	10803fcc 	andi	r2,r2,255
 200198c:	103ff326 	beq	r2,zero,200195c <showCoverPage+0x84>
			{
				keyVal_latch = keyVal;
 2001990:	00810034 	movhi	r2,1024
 2001994:	10889404 	addi	r2,r2,8784
 2001998:	10800003 	ldbu	r2,0(r2)
 200199c:	e0bfff05 	stb	r2,-4(fp)
				if(keyVal_latch==KEY_MENU)
 20019a0:	e0bfff03 	ldbu	r2,-4(fp)
 20019a4:	10800318 	cmpnei	r2,r2,12
 20019a8:	103fec1e 	bne	r2,zero,200195c <showCoverPage+0x84>
				{
					while(keyFlag);
 20019ac:	0001883a 	nop
 20019b0:	00810034 	movhi	r2,1024
 20019b4:	10889804 	addi	r2,r2,8800
 20019b8:	10800003 	ldbu	r2,0(r2)
 20019bc:	10803fcc 	andi	r2,r2,255
 20019c0:	103ffb1e 	bne	r2,zero,20019b0 <showCoverPage+0xd8>
					return;
 20019c4:	0001883a 	nop
				}
			}
		}
	}
}
 20019c8:	e037883a 	mov	sp,fp
 20019cc:	dfc00117 	ldw	ra,4(sp)
 20019d0:	df000017 	ldw	fp,0(sp)
 20019d4:	dec00204 	addi	sp,sp,8
 20019d8:	f800283a 	ret

020019dc <delay>:
void delay(int n)
{
 20019dc:	defffc04 	addi	sp,sp,-16
 20019e0:	df000315 	stw	fp,12(sp)
 20019e4:	df000304 	addi	fp,sp,12
 20019e8:	e13fff15 	stw	r4,-4(fp)
	int i = 0;
 20019ec:	e03ffd15 	stw	zero,-12(fp)
	int j;
	while(i<n)
 20019f0:	00000b06 	br	2001a20 <delay+0x44>
	{
		j = 0;
 20019f4:	e03ffe15 	stw	zero,-8(fp)
		while(j<10)
 20019f8:	00000306 	br	2001a08 <delay+0x2c>
			j++;
 20019fc:	e0bffe17 	ldw	r2,-8(fp)
 2001a00:	10800044 	addi	r2,r2,1
 2001a04:	e0bffe15 	stw	r2,-8(fp)
	int i = 0;
	int j;
	while(i<n)
	{
		j = 0;
		while(j<10)
 2001a08:	e0bffe17 	ldw	r2,-8(fp)
 2001a0c:	10800290 	cmplti	r2,r2,10
 2001a10:	103ffa1e 	bne	r2,zero,20019fc <delay+0x20>
			j++;
		i++;
 2001a14:	e0bffd17 	ldw	r2,-12(fp)
 2001a18:	10800044 	addi	r2,r2,1
 2001a1c:	e0bffd15 	stw	r2,-12(fp)
void delay(int n)
{
	int i = 0;
	int j;
	while(i<n)
 2001a20:	e0fffd17 	ldw	r3,-12(fp)
 2001a24:	e0bfff17 	ldw	r2,-4(fp)
 2001a28:	18bff216 	blt	r3,r2,20019f4 <delay+0x18>
		j = 0;
		while(j<10)
			j++;
		i++;
	}
}
 2001a2c:	e037883a 	mov	sp,fp
 2001a30:	df000017 	ldw	fp,0(sp)
 2001a34:	dec00104 	addi	sp,sp,4
 2001a38:	f800283a 	ret

02001a3c <loadData>:
#include "..\inc\comInterface.h"
#include "..\inc\config.h"
#include "..\inc\FRAM.h"

void loadData()
{
 2001a3c:	defffe04 	addi	sp,sp,-8
 2001a40:	dfc00115 	stw	ra,4(sp)
 2001a44:	df000015 	stw	fp,0(sp)
 2001a48:	d839883a 	mov	fp,sp
	ResetRAMFromEEPROM();
 2001a4c:	20018880 	call	2001888 <ResetRAMFromEEPROM>
	return;
 2001a50:	0001883a 	nop
}
 2001a54:	e037883a 	mov	sp,fp
 2001a58:	dfc00117 	ldw	ra,4(sp)
 2001a5c:	df000017 	ldw	fp,0(sp)
 2001a60:	dec00204 	addi	sp,sp,8
 2001a64:	f800283a 	ret

02001a68 <LoadRAMRepRate>:

unsigned int LoadRAMRepRate()
{
 2001a68:	defffe04 	addi	sp,sp,-8
 2001a6c:	dfc00115 	stw	ra,4(sp)
 2001a70:	df000015 	stw	fp,0(sp)
 2001a74:	d839883a 	mov	fp,sp
	return ReadRAM32Bits(1);
 2001a78:	01000044 	movi	r4,1
 2001a7c:	20014e00 	call	20014e0 <ReadRAM32Bits>
}
 2001a80:	e037883a 	mov	sp,fp
 2001a84:	dfc00117 	ldw	ra,4(sp)
 2001a88:	df000017 	ldw	fp,0(sp)
 2001a8c:	dec00204 	addi	sp,sp,8
 2001a90:	f800283a 	ret

02001a94 <LoadRAMShots>:

unsigned int LoadRAMShots()
{
 2001a94:	defffe04 	addi	sp,sp,-8
 2001a98:	dfc00115 	stw	ra,4(sp)
 2001a9c:	df000015 	stw	fp,0(sp)
 2001aa0:	d839883a 	mov	fp,sp
	return ReadRAM32Bits(2);
 2001aa4:	01000084 	movi	r4,2
 2001aa8:	20014e00 	call	20014e0 <ReadRAM32Bits>
}
 2001aac:	e037883a 	mov	sp,fp
 2001ab0:	dfc00117 	ldw	ra,4(sp)
 2001ab4:	df000017 	ldw	fp,0(sp)
 2001ab8:	dec00204 	addi	sp,sp,8
 2001abc:	f800283a 	ret

02001ac0 <LoadRAMStartTime>:

unsigned int LoadRAMStartTime(unsigned char chnl)
{
 2001ac0:	defffd04 	addi	sp,sp,-12
 2001ac4:	dfc00215 	stw	ra,8(sp)
 2001ac8:	df000115 	stw	fp,4(sp)
 2001acc:	df000104 	addi	fp,sp,4
 2001ad0:	2005883a 	mov	r2,r4
 2001ad4:	e0bfff05 	stb	r2,-4(fp)
	return ReadRAM32Bits(1+chnl*2);
 2001ad8:	e0bfff03 	ldbu	r2,-4(fp)
 2001adc:	1085883a 	add	r2,r2,r2
 2001ae0:	10800044 	addi	r2,r2,1
 2001ae4:	1009883a 	mov	r4,r2
 2001ae8:	20014e00 	call	20014e0 <ReadRAM32Bits>
}
 2001aec:	e037883a 	mov	sp,fp
 2001af0:	dfc00117 	ldw	ra,4(sp)
 2001af4:	df000017 	ldw	fp,0(sp)
 2001af8:	dec00204 	addi	sp,sp,8
 2001afc:	f800283a 	ret

02001b00 <LoadRAMEndTime>:

unsigned int LoadRAMEndTime(unsigned char chnl)
{
 2001b00:	defffd04 	addi	sp,sp,-12
 2001b04:	dfc00215 	stw	ra,8(sp)
 2001b08:	df000115 	stw	fp,4(sp)
 2001b0c:	df000104 	addi	fp,sp,4
 2001b10:	2005883a 	mov	r2,r4
 2001b14:	e0bfff05 	stb	r2,-4(fp)
	return ReadRAM32Bits(2+chnl*2);
 2001b18:	e0bfff03 	ldbu	r2,-4(fp)
 2001b1c:	10800044 	addi	r2,r2,1
 2001b20:	1085883a 	add	r2,r2,r2
 2001b24:	1009883a 	mov	r4,r2
 2001b28:	20014e00 	call	20014e0 <ReadRAM32Bits>
}
 2001b2c:	e037883a 	mov	sp,fp
 2001b30:	dfc00117 	ldw	ra,4(sp)
 2001b34:	df000017 	ldw	fp,0(sp)
 2001b38:	dec00204 	addi	sp,sp,8
 2001b3c:	f800283a 	ret

02001b40 <LoadCounter0Init>:

unsigned int LoadCounter0Init()
{
 2001b40:	defffe04 	addi	sp,sp,-8
 2001b44:	dfc00115 	stw	ra,4(sp)
 2001b48:	df000015 	stw	fp,0(sp)
 2001b4c:	d839883a 	mov	fp,sp
	return FRAM_Read32Bits(COUNTER_0_ADDR);
 2001b50:	01000544 	movi	r4,21
 2001b54:	2000c880 	call	2000c88 <FRAM_Read32Bits>
}
 2001b58:	e037883a 	mov	sp,fp
 2001b5c:	dfc00117 	ldw	ra,4(sp)
 2001b60:	df000017 	ldw	fp,0(sp)
 2001b64:	dec00204 	addi	sp,sp,8
 2001b68:	f800283a 	ret

02001b6c <LoadCounter1Init>:

unsigned int LoadCounter1Init()
{
 2001b6c:	defffe04 	addi	sp,sp,-8
 2001b70:	dfc00115 	stw	ra,4(sp)
 2001b74:	df000015 	stw	fp,0(sp)
 2001b78:	d839883a 	mov	fp,sp
	return FRAM_Read32Bits(COUNTER_1_ADDR);
 2001b7c:	01000584 	movi	r4,22
 2001b80:	2000c880 	call	2000c88 <FRAM_Read32Bits>
}
 2001b84:	e037883a 	mov	sp,fp
 2001b88:	dfc00117 	ldw	ra,4(sp)
 2001b8c:	df000017 	ldw	fp,0(sp)
 2001b90:	dec00204 	addi	sp,sp,8
 2001b94:	f800283a 	ret

02001b98 <WriteRAMRepRate>:


void WriteRAMRepRate(unsigned int data)
{
 2001b98:	defffd04 	addi	sp,sp,-12
 2001b9c:	dfc00215 	stw	ra,8(sp)
 2001ba0:	df000115 	stw	fp,4(sp)
 2001ba4:	df000104 	addi	fp,sp,4
 2001ba8:	e13fff15 	stw	r4,-4(fp)
	WriteRAM32Bits(1,data);
 2001bac:	01000044 	movi	r4,1
 2001bb0:	e17fff17 	ldw	r5,-4(fp)
 2001bb4:	20014080 	call	2001408 <WriteRAM32Bits>
}
 2001bb8:	e037883a 	mov	sp,fp
 2001bbc:	dfc00117 	ldw	ra,4(sp)
 2001bc0:	df000017 	ldw	fp,0(sp)
 2001bc4:	dec00204 	addi	sp,sp,8
 2001bc8:	f800283a 	ret

02001bcc <WriteRAMShots>:

void WriteRAMShots(unsigned int data)
{
 2001bcc:	defffd04 	addi	sp,sp,-12
 2001bd0:	dfc00215 	stw	ra,8(sp)
 2001bd4:	df000115 	stw	fp,4(sp)
 2001bd8:	df000104 	addi	fp,sp,4
 2001bdc:	e13fff15 	stw	r4,-4(fp)
	WriteRAM32Bits(2,data);
 2001be0:	01000084 	movi	r4,2
 2001be4:	e17fff17 	ldw	r5,-4(fp)
 2001be8:	20014080 	call	2001408 <WriteRAM32Bits>
}
 2001bec:	e037883a 	mov	sp,fp
 2001bf0:	dfc00117 	ldw	ra,4(sp)
 2001bf4:	df000017 	ldw	fp,0(sp)
 2001bf8:	dec00204 	addi	sp,sp,8
 2001bfc:	f800283a 	ret

02001c00 <WriteRAMStartTime>:

void WriteRAMStartTime(unsigned char chnl, unsigned int data)
{
 2001c00:	defffc04 	addi	sp,sp,-16
 2001c04:	dfc00315 	stw	ra,12(sp)
 2001c08:	df000215 	stw	fp,8(sp)
 2001c0c:	df000204 	addi	fp,sp,8
 2001c10:	2005883a 	mov	r2,r4
 2001c14:	e17fff15 	stw	r5,-4(fp)
 2001c18:	e0bffe05 	stb	r2,-8(fp)
	WriteRAM32Bits(1+chnl*2,data);
 2001c1c:	e0bffe03 	ldbu	r2,-8(fp)
 2001c20:	1085883a 	add	r2,r2,r2
 2001c24:	10800044 	addi	r2,r2,1
 2001c28:	10803fcc 	andi	r2,r2,255
 2001c2c:	1009883a 	mov	r4,r2
 2001c30:	e17fff17 	ldw	r5,-4(fp)
 2001c34:	20014080 	call	2001408 <WriteRAM32Bits>
}
 2001c38:	e037883a 	mov	sp,fp
 2001c3c:	dfc00117 	ldw	ra,4(sp)
 2001c40:	df000017 	ldw	fp,0(sp)
 2001c44:	dec00204 	addi	sp,sp,8
 2001c48:	f800283a 	ret

02001c4c <WriteRAMEndTime>:

void WriteRAMEndTime(unsigned char chnl, unsigned int data)
{
 2001c4c:	defffc04 	addi	sp,sp,-16
 2001c50:	dfc00315 	stw	ra,12(sp)
 2001c54:	df000215 	stw	fp,8(sp)
 2001c58:	df000204 	addi	fp,sp,8
 2001c5c:	2005883a 	mov	r2,r4
 2001c60:	e17fff15 	stw	r5,-4(fp)
 2001c64:	e0bffe05 	stb	r2,-8(fp)
	WriteRAM32Bits(2+chnl*2,data);
 2001c68:	e0bffe03 	ldbu	r2,-8(fp)
 2001c6c:	10800044 	addi	r2,r2,1
 2001c70:	1085883a 	add	r2,r2,r2
 2001c74:	10803fcc 	andi	r2,r2,255
 2001c78:	1009883a 	mov	r4,r2
 2001c7c:	e17fff17 	ldw	r5,-4(fp)
 2001c80:	20014080 	call	2001408 <WriteRAM32Bits>
}
 2001c84:	e037883a 	mov	sp,fp
 2001c88:	dfc00117 	ldw	ra,4(sp)
 2001c8c:	df000017 	ldw	fp,0(sp)
 2001c90:	dec00204 	addi	sp,sp,8
 2001c94:	f800283a 	ret

02001c98 <reloadRegisters>:

void reloadRegisters()		//All registers are reset on StopFiring signal. Reload all registers by rewriting to RAM.
{
 2001c98:	defffc04 	addi	sp,sp,-16
 2001c9c:	dfc00315 	stw	ra,12(sp)
 2001ca0:	df000215 	stw	fp,8(sp)
 2001ca4:	dc000115 	stw	r16,4(sp)
 2001ca8:	df000104 	addi	fp,sp,4
	WriteRAMRepRate(LoadRAMRepRate());
 2001cac:	2001a680 	call	2001a68 <LoadRAMRepRate>
 2001cb0:	1009883a 	mov	r4,r2
 2001cb4:	2001b980 	call	2001b98 <WriteRAMRepRate>
	WriteRAMShots(LoadRAMShots());
 2001cb8:	2001a940 	call	2001a94 <LoadRAMShots>
 2001cbc:	1009883a 	mov	r4,r2
 2001cc0:	2001bcc0 	call	2001bcc <WriteRAMShots>
	unsigned char i;
	for(i=1;i<=CHNL_NUM;i++)
 2001cc4:	00800044 	movi	r2,1
 2001cc8:	e0bfff05 	stb	r2,-4(fp)
 2001ccc:	00001106 	br	2001d14 <reloadRegisters+0x7c>
	{
		WriteRAMStartTime(i,LoadRAMStartTime(i));
 2001cd0:	e43fff03 	ldbu	r16,-4(fp)
 2001cd4:	e0bfff03 	ldbu	r2,-4(fp)
 2001cd8:	1009883a 	mov	r4,r2
 2001cdc:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 2001ce0:	8009883a 	mov	r4,r16
 2001ce4:	100b883a 	mov	r5,r2
 2001ce8:	2001c000 	call	2001c00 <WriteRAMStartTime>
		WriteRAMEndTime(i,LoadRAMEndTime(i));
 2001cec:	e43fff03 	ldbu	r16,-4(fp)
 2001cf0:	e0bfff03 	ldbu	r2,-4(fp)
 2001cf4:	1009883a 	mov	r4,r2
 2001cf8:	2001b000 	call	2001b00 <LoadRAMEndTime>
 2001cfc:	8009883a 	mov	r4,r16
 2001d00:	100b883a 	mov	r5,r2
 2001d04:	2001c4c0 	call	2001c4c <WriteRAMEndTime>
void reloadRegisters()		//All registers are reset on StopFiring signal. Reload all registers by rewriting to RAM.
{
	WriteRAMRepRate(LoadRAMRepRate());
	WriteRAMShots(LoadRAMShots());
	unsigned char i;
	for(i=1;i<=CHNL_NUM;i++)
 2001d08:	e0bfff03 	ldbu	r2,-4(fp)
 2001d0c:	10800044 	addi	r2,r2,1
 2001d10:	e0bfff05 	stb	r2,-4(fp)
 2001d14:	e0bfff03 	ldbu	r2,-4(fp)
 2001d18:	108002b0 	cmpltui	r2,r2,10
 2001d1c:	103fec1e 	bne	r2,zero,2001cd0 <reloadRegisters+0x38>
	{
		WriteRAMStartTime(i,LoadRAMStartTime(i));
		WriteRAMEndTime(i,LoadRAMEndTime(i));
	}
	refreshErrFlags();
 2001d20:	2007bf80 	call	2007bf8 <refreshErrFlags>
}
 2001d24:	e037883a 	mov	sp,fp
 2001d28:	dfc00217 	ldw	ra,8(sp)
 2001d2c:	df000117 	ldw	fp,4(sp)
 2001d30:	dc000017 	ldw	r16,0(sp)
 2001d34:	dec00304 	addi	sp,sp,12
 2001d38:	f800283a 	ret

02001d3c <PowerFailure_ISR>:

#define powerOk			*(unsigned char*)POWER_OK_BASE
#define pauseSeq		*(unsigned char*)PAUSE_SEQ_BASE

static void PowerFailure_ISR(void *context)
{
 2001d3c:	defffd04 	addi	sp,sp,-12
 2001d40:	dfc00215 	stw	ra,8(sp)
 2001d44:	df000115 	stw	fp,4(sp)
 2001d48:	df000104 	addi	fp,sp,4
 2001d4c:	e13fff15 	stw	r4,-4(fp)
	//De-bouncing
	delay(0);
 2001d50:	0009883a 	mov	r4,zero
 2001d54:	20019dc0 	call	20019dc <delay>
	if(powerOk)
 2001d58:	00810034 	movhi	r2,1024
 2001d5c:	10883804 	addi	r2,r2,8416
 2001d60:	10800003 	ldbu	r2,0(r2)
 2001d64:	10803fcc 	andi	r2,r2,255
 2001d68:	10000526 	beq	r2,zero,2001d80 <PowerFailure_ISR+0x44>
	{
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(POWER_OK_BASE, 0x0);
 2001d6c:	0007883a 	mov	r3,zero
 2001d70:	00810034 	movhi	r2,1024
 2001d74:	10883b04 	addi	r2,r2,8428
 2001d78:	10c00035 	stwio	r3,0(r2)
		return;
 2001d7c:	00003a06 	br	2001e68 <PowerFailure_ISR+0x12c>
	}

	delay(0);
 2001d80:	0009883a 	mov	r4,zero
 2001d84:	20019dc0 	call	20019dc <delay>
	if(powerOk)
 2001d88:	00810034 	movhi	r2,1024
 2001d8c:	10883804 	addi	r2,r2,8416
 2001d90:	10800003 	ldbu	r2,0(r2)
 2001d94:	10803fcc 	andi	r2,r2,255
 2001d98:	10000526 	beq	r2,zero,2001db0 <PowerFailure_ISR+0x74>
	{
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(POWER_OK_BASE, 0x0);
 2001d9c:	0007883a 	mov	r3,zero
 2001da0:	00810034 	movhi	r2,1024
 2001da4:	10883b04 	addi	r2,r2,8428
 2001da8:	10c00035 	stwio	r3,0(r2)
		return;
 2001dac:	00002e06 	br	2001e68 <PowerFailure_ISR+0x12c>
	}

	delay(0);
 2001db0:	0009883a 	mov	r4,zero
 2001db4:	20019dc0 	call	20019dc <delay>
	if(powerOk)
 2001db8:	00810034 	movhi	r2,1024
 2001dbc:	10883804 	addi	r2,r2,8416
 2001dc0:	10800003 	ldbu	r2,0(r2)
 2001dc4:	10803fcc 	andi	r2,r2,255
 2001dc8:	10000526 	beq	r2,zero,2001de0 <PowerFailure_ISR+0xa4>
	{
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(POWER_OK_BASE, 0x0);
 2001dcc:	0007883a 	mov	r3,zero
 2001dd0:	00810034 	movhi	r2,1024
 2001dd4:	10883b04 	addi	r2,r2,8428
 2001dd8:	10c00035 	stwio	r3,0(r2)
		return;
 2001ddc:	00002206 	br	2001e68 <PowerFailure_ISR+0x12c>
	}

	delay(0);
 2001de0:	0009883a 	mov	r4,zero
 2001de4:	20019dc0 	call	20019dc <delay>
	if(powerOk)
 2001de8:	00810034 	movhi	r2,1024
 2001dec:	10883804 	addi	r2,r2,8416
 2001df0:	10800003 	ldbu	r2,0(r2)
 2001df4:	10803fcc 	andi	r2,r2,255
 2001df8:	10000626 	beq	r2,zero,2001e14 <PowerFailure_ISR+0xd8>
	{
		IOWR_ALTERA_AVALON_PIO_EDGE_CAP(POWER_OK_BASE, 0x0);
 2001dfc:	0007883a 	mov	r3,zero
 2001e00:	00810034 	movhi	r2,1024
 2001e04:	10883b04 	addi	r2,r2,8428
 2001e08:	10c00035 	stwio	r3,0(r2)
		return;
 2001e0c:	0001883a 	nop
 2001e10:	00001506 	br	2001e68 <PowerFailure_ISR+0x12c>
	}


	pauseSeq = 1;
 2001e14:	00810034 	movhi	r2,1024
 2001e18:	10885c04 	addi	r2,r2,8560
 2001e1c:	00c00044 	movi	r3,1
 2001e20:	10c00005 	stb	r3,0(r2)
	DisOff();
 2001e24:	20006f40 	call	20006f4 <DisOff>
	KPLED_All_Off();
 2001e28:	2000f400 	call	2000f40 <KPLED_All_Off>

	//Counter Protection
	SaveCounterToFRAM();
 2001e2c:	20002cc0 	call	20002cc <SaveCounterToFRAM>

	//In case of fake power failure
	DisInit();
 2001e30:	200048c0 	call	200048c <DisInit>
	DisCurPos(2,1);
 2001e34:	01000084 	movi	r4,2
 2001e38:	01400044 	movi	r5,1
 2001e3c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Controller Pwr Fails");
 2001e40:	01008074 	movhi	r4,513
 2001e44:	21197604 	addi	r4,r4,26072
 2001e48:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(3,1);
 2001e4c:	010000c4 	movi	r4,3
 2001e50:	01400044 	movi	r5,1
 2001e54:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(" Counter Protected  ");
 2001e58:	01008074 	movhi	r4,513
 2001e5c:	21197c04 	addi	r4,r4,26096
 2001e60:	20006000 	call	2000600 <DisWrStr>

	while(1);
 2001e64:	003fff06 	br	2001e64 <PowerFailure_ISR+0x128>

}
 2001e68:	e037883a 	mov	sp,fp
 2001e6c:	dfc00117 	ldw	ra,4(sp)
 2001e70:	df000017 	ldw	fp,0(sp)
 2001e74:	dec00204 	addi	sp,sp,8
 2001e78:	f800283a 	ret

02001e7c <PowerFailure_Init>:


void PowerFailure_Init()
{
 2001e7c:	defffd04 	addi	sp,sp,-12
 2001e80:	dfc00215 	stw	ra,8(sp)
 2001e84:	df000115 	stw	fp,4(sp)
 2001e88:	df000104 	addi	fp,sp,4
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(POWER_OK_BASE, 0xF);
 2001e8c:	00c003c4 	movi	r3,15
 2001e90:	00810034 	movhi	r2,1024
 2001e94:	10883a04 	addi	r2,r2,8424
 2001e98:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(POWER_OK_BASE, 0x0);
 2001e9c:	0007883a 	mov	r3,zero
 2001ea0:	00810034 	movhi	r2,1024
 2001ea4:	10883b04 	addi	r2,r2,8428
 2001ea8:	10c00035 	stwio	r3,0(r2)
	alt_ic_isr_register(POWER_OK_IRQ_INTERRUPT_CONTROLLER_ID, POWER_OK_IRQ, PowerFailure_ISR, NULL, 0x0);
 2001eac:	d8000015 	stw	zero,0(sp)
 2001eb0:	0009883a 	mov	r4,zero
 2001eb4:	01400044 	movi	r5,1
 2001eb8:	01808034 	movhi	r6,512
 2001ebc:	31874f04 	addi	r6,r6,7484
 2001ec0:	000f883a 	mov	r7,zero
 2001ec4:	20126340 	call	2012634 <alt_ic_isr_register>
}
 2001ec8:	e037883a 	mov	sp,fp
 2001ecc:	dfc00117 	ldw	ra,4(sp)
 2001ed0:	df000017 	ldw	fp,0(sp)
 2001ed4:	dec00204 	addi	sp,sp,8
 2001ed8:	f800283a 	ret

02001edc <uart_send_byte>:
		.init = uart_init,
		.baudrate = set_baudrate
		};

int uart_send_byte(unsigned char data)
{
 2001edc:	defffe04 	addi	sp,sp,-8
 2001ee0:	df000115 	stw	fp,4(sp)
 2001ee4:	df000104 	addi	fp,sp,4
 2001ee8:	2005883a 	mov	r2,r4
 2001eec:	e0bfff05 	stb	r2,-4(fp)
	UART->TXDATA.BITS.TRANSMIT_DATA = data;
 2001ef0:	00810034 	movhi	r2,1024
 2001ef4:	10880804 	addi	r2,r2,8224
 2001ef8:	e0ffff03 	ldbu	r3,-4(fp)
 2001efc:	10c00105 	stb	r3,4(r2)
	while (!UART->STATUS.BITS.TRDY);
 2001f00:	0001883a 	nop
 2001f04:	00810034 	movhi	r2,1024
 2001f08:	10880804 	addi	r2,r2,8224
 2001f0c:	10800217 	ldw	r2,8(r2)
 2001f10:	1080100c 	andi	r2,r2,64
 2001f14:	103ffb26 	beq	r2,zero,2001f04 <uart_send_byte+0x28>
	return 0;
 2001f18:	0005883a 	mov	r2,zero
}
 2001f1c:	e037883a 	mov	sp,fp
 2001f20:	df000017 	ldw	fp,0(sp)
 2001f24:	dec00104 	addi	sp,sp,4
 2001f28:	f800283a 	ret

02001f2c <uart_send_string>:

void uart_send_string(unsigned int len, unsigned char *str)
{
 2001f2c:	defffc04 	addi	sp,sp,-16
 2001f30:	dfc00315 	stw	ra,12(sp)
 2001f34:	df000215 	stw	fp,8(sp)
 2001f38:	df000204 	addi	fp,sp,8
 2001f3c:	e13ffe15 	stw	r4,-8(fp)
 2001f40:	e17fff15 	stw	r5,-4(fp)
	while (len--)
 2001f44:	00000806 	br	2001f68 <uart_send_string+0x3c>
	{
		uart_send_byte(*str++);
 2001f48:	e0bfff17 	ldw	r2,-4(fp)
 2001f4c:	10800003 	ldbu	r2,0(r2)
 2001f50:	10803fcc 	andi	r2,r2,255
 2001f54:	e0ffff17 	ldw	r3,-4(fp)
 2001f58:	18c00044 	addi	r3,r3,1
 2001f5c:	e0ffff15 	stw	r3,-4(fp)
 2001f60:	1009883a 	mov	r4,r2
 2001f64:	2001edc0 	call	2001edc <uart_send_byte>
	return 0;
}

void uart_send_string(unsigned int len, unsigned char *str)
{
	while (len--)
 2001f68:	e0bffe17 	ldw	r2,-8(fp)
 2001f6c:	1004c03a 	cmpne	r2,r2,zero
 2001f70:	e0fffe17 	ldw	r3,-8(fp)
 2001f74:	18ffffc4 	addi	r3,r3,-1
 2001f78:	e0fffe15 	stw	r3,-8(fp)
 2001f7c:	10803fcc 	andi	r2,r2,255
 2001f80:	103ff11e 	bne	r2,zero,2001f48 <uart_send_string+0x1c>
	{
		uart_send_byte(*str++);
	}
}
 2001f84:	e037883a 	mov	sp,fp
 2001f88:	dfc00117 	ldw	ra,4(sp)
 2001f8c:	df000017 	ldw	fp,0(sp)
 2001f90:	dec00204 	addi	sp,sp,8
 2001f94:	f800283a 	ret

02001f98 <uart_init>:

int uart_init(void)
{
 2001f98:	defffd04 	addi	sp,sp,-12
 2001f9c:	dfc00215 	stw	ra,8(sp)
 2001fa0:	df000115 	stw	fp,4(sp)
 2001fa4:	df000104 	addi	fp,sp,4
	set_baudrate(9600);
 2001fa8:	01096004 	movi	r4,9600
 2001fac:	20020a80 	call	20020a8 <set_baudrate>
	UART->CONTROL.BITS.IRRDY = 1;
 2001fb0:	00810034 	movhi	r2,1024
 2001fb4:	10880804 	addi	r2,r2,8224
 2001fb8:	10c00317 	ldw	r3,12(r2)
 2001fbc:	18c02014 	ori	r3,r3,128
 2001fc0:	10c00315 	stw	r3,12(r2)
	UART->STATUS.WORD = 0;
 2001fc4:	00810034 	movhi	r2,1024
 2001fc8:	10880804 	addi	r2,r2,8224
 2001fcc:	10000215 	stw	zero,8(r2)
	alt_ic_isr_register(UART_IRQ_INTERRUPT_CONTROLLER_ID, UART_IRQ, uart_ISR,
 2001fd0:	d8000015 	stw	zero,0(sp)
 2001fd4:	0009883a 	mov	r4,zero
 2001fd8:	01400184 	movi	r5,6
 2001fdc:	01808034 	movhi	r6,512
 2001fe0:	31880104 	addi	r6,r6,8196
 2001fe4:	000f883a 	mov	r7,zero
 2001fe8:	20126340 	call	2012634 <alt_ic_isr_register>
		NULL, 0x0);
	return 0;
 2001fec:	0005883a 	mov	r2,zero
}
 2001ff0:	e037883a 	mov	sp,fp
 2001ff4:	dfc00117 	ldw	ra,4(sp)
 2001ff8:	df000017 	ldw	fp,0(sp)
 2001ffc:	dec00204 	addi	sp,sp,8
 2002000:	f800283a 	ret

02002004 <uart_ISR>:

static void uart_ISR(void *context)
{
 2002004:	defffe04 	addi	sp,sp,-8
 2002008:	df000115 	stw	fp,4(sp)
 200200c:	df000104 	addi	fp,sp,4
 2002010:	e13fff15 	stw	r4,-4(fp)
	while (!(UART->STATUS.BITS.RRDY));
 2002014:	0001883a 	nop
 2002018:	00810034 	movhi	r2,1024
 200201c:	10880804 	addi	r2,r2,8224
 2002020:	10800217 	ldw	r2,8(r2)
 2002024:	1080200c 	andi	r2,r2,128
 2002028:	103ffb26 	beq	r2,zero,2002018 <uart_ISR+0x14>
	uart.receive_buffer[uart.receive_count++] = UART->RXDATA.BITS.RECEIVE_DATA;
 200202c:	00808074 	movhi	r2,513
 2002030:	109dc604 	addi	r2,r2,30488
 2002034:	10800117 	ldw	r2,4(r2)
 2002038:	00c10034 	movhi	r3,1024
 200203c:	18c80804 	addi	r3,r3,8224
 2002040:	19000003 	ldbu	r4,0(r3)
 2002044:	00c08074 	movhi	r3,513
 2002048:	18ddc604 	addi	r3,r3,30488
 200204c:	1887883a 	add	r3,r3,r2
 2002050:	18c00204 	addi	r3,r3,8
 2002054:	19000005 	stb	r4,0(r3)
 2002058:	10c00044 	addi	r3,r2,1
 200205c:	00808074 	movhi	r2,513
 2002060:	109dc604 	addi	r2,r2,30488
 2002064:	10c00115 	stw	r3,4(r2)
		uart.receive_buffer[uart.receive_count] = '\0';
		uart.receive_count = 0;
		uart.receive_flag = 1;
	}*/

	if(uart.receive_count==8)
 2002068:	00808074 	movhi	r2,513
 200206c:	109dc604 	addi	r2,r2,30488
 2002070:	10800117 	ldw	r2,4(r2)
 2002074:	10800218 	cmpnei	r2,r2,8
 2002078:	1000071e 	bne	r2,zero,2002098 <uart_ISR+0x94>
	{
		uart.receive_count = 0;
 200207c:	00808074 	movhi	r2,513
 2002080:	109dc604 	addi	r2,r2,30488
 2002084:	10000115 	stw	zero,4(r2)
		uart.receive_flag = 1;
 2002088:	00808074 	movhi	r2,513
 200208c:	109dc604 	addi	r2,r2,30488
 2002090:	00c00044 	movi	r3,1
 2002094:	10c00015 	stw	r3,0(r2)
	}
}
 2002098:	e037883a 	mov	sp,fp
 200209c:	df000017 	ldw	fp,0(sp)
 20020a0:	dec00104 	addi	sp,sp,4
 20020a4:	f800283a 	ret

020020a8 <set_baudrate>:

int set_baudrate(unsigned int baudrate)
{
 20020a8:	defffc04 	addi	sp,sp,-16
 20020ac:	dfc00315 	stw	ra,12(sp)
 20020b0:	df000215 	stw	fp,8(sp)
 20020b4:	dc000115 	stw	r16,4(sp)
 20020b8:	df000104 	addi	fp,sp,4
 20020bc:	e13fff15 	stw	r4,-4(fp)
	UART->DIVISOR.WORD = (unsigned int) (ALT_CPU_FREQ / baudrate + 0.5);
 20020c0:	04010034 	movhi	r16,1024
 20020c4:	84080804 	addi	r16,r16,8224
 20020c8:	0100bef4 	movhi	r4,763
 20020cc:	213c2004 	addi	r4,r4,-3968
 20020d0:	e17fff17 	ldw	r5,-4(fp)
 20020d4:	20093a80 	call	20093a8 <__udivsi3>
 20020d8:	1009883a 	mov	r4,r2
 20020dc:	200916c0 	call	200916c <__floatunsidf>
 20020e0:	100b883a 	mov	r5,r2
 20020e4:	180d883a 	mov	r6,r3
 20020e8:	2809883a 	mov	r4,r5
 20020ec:	300b883a 	mov	r5,r6
 20020f0:	000d883a 	mov	r6,zero
 20020f4:	01cff834 	movhi	r7,16352
 20020f8:	2008f800 	call	2008f80 <__adddf3>
 20020fc:	1009883a 	mov	r4,r2
 2002100:	180b883a 	mov	r5,r3
 2002104:	2005883a 	mov	r2,r4
 2002108:	2807883a 	mov	r3,r5
 200210c:	1009883a 	mov	r4,r2
 2002110:	180b883a 	mov	r5,r3
 2002114:	2008ba80 	call	2008ba8 <__fixunsdfsi>
 2002118:	80800415 	stw	r2,16(r16)
	return 0;
 200211c:	0005883a 	mov	r2,zero
}
 2002120:	e037883a 	mov	sp,fp
 2002124:	dfc00217 	ldw	ra,8(sp)
 2002128:	df000117 	ldw	fp,4(sp)
 200212c:	dc000017 	ldw	r16,0(sp)
 2002130:	dec00304 	addi	sp,sp,12
 2002134:	f800283a 	ret

02002138 <initController>:
#define InterockSplitted 	*(unsigned char*)INTERLOCK_SPLITED_BASE		//Clear Interlock Splitted. Active High
#define pauseSeq		*(unsigned char*)PAUSE_SEQ_BASE			//Pause Firing Sequence. (Block trigger signal for timing engine) Active High
#define clrPreionFault	*(unsigned char*)RST_PREION_FAULT_BASE	//Clear Preion Fault handler. Active High

void initController()
{
 2002138:	defffe04 	addi	sp,sp,-8
 200213c:	dfc00115 	stw	ra,4(sp)
 2002140:	df000015 	stw	fp,0(sp)
 2002144:	d839883a 	mov	fp,sp

	pauseSeq = 1;								//In case of the Timing Engine is in "Firing" on powering up, this setting can prevent it from actually firing
 2002148:	00810034 	movhi	r2,1024
 200214c:	10885c04 	addi	r2,r2,8560
 2002150:	00c00044 	movi	r3,1
 2002154:	10c00005 	stb	r3,0(r2)

	KPLED_All_Bright();							//Turn on all keypad LEDs (Bright)
 2002158:	2000e880 	call	2000e88 <KPLED_All_Bright>

	DisInit();									//Initialize Display
 200215c:	200048c0 	call	200048c <DisInit>
	DisCurPos(1,1);
 2002160:	01000044 	movi	r4,1
 2002164:	01400044 	movi	r5,1
 2002168:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Initializing...");				//Show message "Initializing..."
 200216c:	01008074 	movhi	r4,513
 2002170:	21198204 	addi	r4,r4,26120
 2002174:	20006000 	call	2000600 <DisWrStr>

	UartInit();									//Initialize Nios UART
 2002178:	20013d40 	call	20013d4 <UartInit>


	remoteEn = 0;								//Disable Remote Control (make sure Nios core has the right of the UART)
 200217c:	00810034 	movhi	r2,1024
 2002180:	10888804 	addi	r2,r2,8736
 2002184:	10000005 	stb	zero,0(r2)
	KPLED_All_Off();
 2002188:	2000f400 	call	2000f40 <KPLED_All_Off>
	Stop();										//Send a Stop instruction to the Timing Engine. Make sure it's not firing on initial state.
 200218c:	20018400 	call	2001840 <Stop>


	clrTimer = 1; 								//Reset Password&Heater Timer
 2002190:	00810034 	movhi	r2,1024
 2002194:	10887c04 	addi	r2,r2,8688
 2002198:	00c00044 	movi	r3,1
 200219c:	10c00005 	stb	r3,0(r2)
	clrTimer = 0;
 20021a0:	00810034 	movhi	r2,1024
 20021a4:	10887c04 	addi	r2,r2,8688
 20021a8:	10000005 	stb	zero,0(r2)

	clrPreionFault = 1;							//Clear Preion Fault Handler
 20021ac:	00810034 	movhi	r2,1024
 20021b0:	10886804 	addi	r2,r2,8608
 20021b4:	00c00044 	movi	r3,1
 20021b8:	10c00005 	stb	r3,0(r2)
	clrPreionFault = 0;
 20021bc:	00810034 	movhi	r2,1024
 20021c0:	10886804 	addi	r2,r2,8608
 20021c4:	10000005 	stb	zero,0(r2)

	clrInterlock=1;								//Clear Interlock Handler
 20021c8:	00810034 	movhi	r2,1024
 20021cc:	10886004 	addi	r2,r2,8576
 20021d0:	00c00044 	movi	r3,1
 20021d4:	10c00005 	stb	r3,0(r2)
	clrInterlock=0;
 20021d8:	00810034 	movhi	r2,1024
 20021dc:	10886004 	addi	r2,r2,8576
 20021e0:	10000005 	stb	zero,0(r2)
	//InterlockIn=0;

	//InterockSplitted=1;
	//InterockSplitted=0;

	loadData();									//Load Data From EEPROM to Main RAM
 20021e4:	2001a3c0 	call	2001a3c <loadData>
	delay(5000);								//There is no signal that indicates if the loading is done so use delay() to wait.
 20021e8:	0104e204 	movi	r4,5000
 20021ec:	20019dc0 	call	20019dc <delay>

	KPLED_All_Dim();							//Turn on all keypad LEDs (Dim)
 20021f0:	2000ee40 	call	2000ee4 <KPLED_All_Dim>
	delay(5000);
 20021f4:	0104e204 	movi	r4,5000
 20021f8:	20019dc0 	call	20019dc <delay>

	reloadRegisters();							//Reload all Timing Engine registers with current data in Main RAM. (Load data from EEPROM does not refresh those registers)
 20021fc:	2001c980 	call	2001c98 <reloadRegisters>


	refreshErrFlags();							//Data Error Check
 2002200:	2007bf80 	call	2007bf8 <refreshErrFlags>

	CounterInit();								//Load Counters data to FPGA Counter module (from FRAM)
 2002204:	20001f00 	call	20001f0 <CounterInit>

	PowerFailure_Init();						//Power Failure Handler Initialization (enable interrupt and register ISR)
 2002208:	2001e7c0 	call	2001e7c <PowerFailure_Init>

	pauseSeq = 0;								//Clear Pause
 200220c:	00810034 	movhi	r2,1024
 2002210:	10885c04 	addi	r2,r2,8560
 2002214:	10000005 	stb	zero,0(r2)

	KPLED_All_Off();							//Turn off all keypad LEDs
 2002218:	2000f400 	call	2000f40 <KPLED_All_Off>

	printf("Done!\n");							//Send massage through JTAG, for debugging.
 200221c:	01008074 	movhi	r4,513
 2002220:	21198604 	addi	r4,r4,26136
 2002224:	20099f80 	call	20099f8 <puts>
}
 2002228:	e037883a 	mov	sp,fp
 200222c:	dfc00117 	ldw	ra,4(sp)
 2002230:	df000017 	ldw	fp,0(sp)
 2002234:	dec00204 	addi	sp,sp,8
 2002238:	f800283a 	ret

0200223c <refreshTopMenuEntry>:
 * 			Remember to check and update them when the order they appear in a menu changes.
 */


void refreshTopMenuEntry(unsigned char curr_state)
{
 200223c:	defffd04 	addi	sp,sp,-12
 2002240:	dfc00215 	stw	ra,8(sp)
 2002244:	df000115 	stw	fp,4(sp)
 2002248:	df000104 	addi	fp,sp,4
 200224c:	2005883a 	mov	r2,r4
 2002250:	e0bfff05 	stb	r2,-4(fp)
	if(curr_state==1)		entryParameterMenu(curr_state);
 2002254:	e0bfff03 	ldbu	r2,-4(fp)
 2002258:	10800058 	cmpnei	r2,r2,1
 200225c:	1000041e 	bne	r2,zero,2002270 <refreshTopMenuEntry+0x34>
 2002260:	e0bfff03 	ldbu	r2,-4(fp)
 2002264:	1009883a 	mov	r4,r2
 2002268:	20034cc0 	call	20034cc <entryParameterMenu>
 200226c:	00002906 	br	2002314 <refreshTopMenuEntry+0xd8>
	else if(curr_state==2)	entryStartupMenu(curr_state);
 2002270:	e0bfff03 	ldbu	r2,-4(fp)
 2002274:	10800098 	cmpnei	r2,r2,2
 2002278:	1000041e 	bne	r2,zero,200228c <refreshTopMenuEntry+0x50>
 200227c:	e0bfff03 	ldbu	r2,-4(fp)
 2002280:	1009883a 	mov	r4,r2
 2002284:	200512c0 	call	200512c <entryStartupMenu>
 2002288:	00002206 	br	2002314 <refreshTopMenuEntry+0xd8>
	else if(curr_state==3)	entryShutdownMenu(curr_state);
 200228c:	e0bfff03 	ldbu	r2,-4(fp)
 2002290:	108000d8 	cmpnei	r2,r2,3
 2002294:	1000041e 	bne	r2,zero,20022a8 <refreshTopMenuEntry+0x6c>
 2002298:	e0bfff03 	ldbu	r2,-4(fp)
 200229c:	1009883a 	mov	r4,r2
 20022a0:	20049240 	call	2004924 <entryShutdownMenu>
 20022a4:	00001b06 	br	2002314 <refreshTopMenuEntry+0xd8>
	else if(curr_state==4)	entryFireMenu(curr_state);
 20022a8:	e0bfff03 	ldbu	r2,-4(fp)
 20022ac:	10800118 	cmpnei	r2,r2,4
 20022b0:	1000041e 	bne	r2,zero,20022c4 <refreshTopMenuEntry+0x88>
 20022b4:	e0bfff03 	ldbu	r2,-4(fp)
 20022b8:	1009883a 	mov	r4,r2
 20022bc:	200259c0 	call	200259c <entryFireMenu>
 20022c0:	00001406 	br	2002314 <refreshTopMenuEntry+0xd8>
	else if(curr_state==5)	entryRemoteMenu(curr_state);
 20022c4:	e0bfff03 	ldbu	r2,-4(fp)
 20022c8:	10800158 	cmpnei	r2,r2,5
 20022cc:	1000041e 	bne	r2,zero,20022e0 <refreshTopMenuEntry+0xa4>
 20022d0:	e0bfff03 	ldbu	r2,-4(fp)
 20022d4:	1009883a 	mov	r4,r2
 20022d8:	200392c0 	call	200392c <entryRemoteMenu>
 20022dc:	00000d06 	br	2002314 <refreshTopMenuEntry+0xd8>
	else if(curr_state==6)	entrySaveLoadMenu(curr_state);
 20022e0:	e0bfff03 	ldbu	r2,-4(fp)
 20022e4:	10800198 	cmpnei	r2,r2,6
 20022e8:	1000041e 	bne	r2,zero,20022fc <refreshTopMenuEntry+0xc0>
 20022ec:	e0bfff03 	ldbu	r2,-4(fp)
 20022f0:	1009883a 	mov	r4,r2
 20022f4:	2003b140 	call	2003b14 <entrySaveLoadMenu>
 20022f8:	00000606 	br	2002314 <refreshTopMenuEntry+0xd8>
	else if(curr_state==7)	entryShotCountersMenu(curr_state);
 20022fc:	e0bfff03 	ldbu	r2,-4(fp)
 2002300:	108001d8 	cmpnei	r2,r2,7
 2002304:	1000031e 	bne	r2,zero,2002314 <refreshTopMenuEntry+0xd8>
 2002308:	e0bfff03 	ldbu	r2,-4(fp)
 200230c:	1009883a 	mov	r4,r2
 2002310:	200423c0 	call	200423c <entryShotCountersMenu>
	//else if(curr_state==8)	entryExternalTriggerMenu(curr_state);
}
 2002314:	e037883a 	mov	sp,fp
 2002318:	dfc00117 	ldw	ra,4(sp)
 200231c:	df000017 	ldw	fp,0(sp)
 2002320:	dec00204 	addi	sp,sp,8
 2002324:	f800283a 	ret

02002328 <enterTopMenuPage>:
 * It should be called when need to enter an sub-menu, such as ENTER button is pressed.
 * It has no returns.
 */

void enterTopMenuPage(unsigned char curr_state)
{
 2002328:	defffd04 	addi	sp,sp,-12
 200232c:	dfc00215 	stw	ra,8(sp)
 2002330:	df000115 	stw	fp,4(sp)
 2002334:	df000104 	addi	fp,sp,4
 2002338:	2005883a 	mov	r2,r4
 200233c:	e0bfff05 	stb	r2,-4(fp)
	if(curr_state==1)		enterParameterMenu();
 2002340:	e0bfff03 	ldbu	r2,-4(fp)
 2002344:	10800058 	cmpnei	r2,r2,1
 2002348:	1000021e 	bne	r2,zero,2002354 <enterTopMenuPage+0x2c>
 200234c:	20036700 	call	2003670 <enterParameterMenu>
 2002350:	00001e06 	br	20023cc <enterTopMenuPage+0xa4>
	else if(curr_state==2)	enterStartupMenu(0);
 2002354:	e0bfff03 	ldbu	r2,-4(fp)
 2002358:	10800098 	cmpnei	r2,r2,2
 200235c:	1000031e 	bne	r2,zero,200236c <enterTopMenuPage+0x44>
 2002360:	0009883a 	mov	r4,zero
 2002364:	20053000 	call	2005300 <enterStartupMenu>
 2002368:	00001806 	br	20023cc <enterTopMenuPage+0xa4>
	else if(curr_state==3)	enterShutdownMenu();
 200236c:	e0bfff03 	ldbu	r2,-4(fp)
 2002370:	108000d8 	cmpnei	r2,r2,3
 2002374:	1000021e 	bne	r2,zero,2002380 <enterTopMenuPage+0x58>
 2002378:	2004c4c0 	call	2004c4c <enterShutdownMenu>
 200237c:	00001306 	br	20023cc <enterTopMenuPage+0xa4>
	else if(curr_state==4)	enterFireMenu();
 2002380:	e0bfff03 	ldbu	r2,-4(fp)
 2002384:	10800118 	cmpnei	r2,r2,4
 2002388:	1000021e 	bne	r2,zero,2002394 <enterTopMenuPage+0x6c>
 200238c:	20031c00 	call	20031c0 <enterFireMenu>
 2002390:	00000e06 	br	20023cc <enterTopMenuPage+0xa4>
	else if(curr_state==5)	enterRemoteMenu();
 2002394:	e0bfff03 	ldbu	r2,-4(fp)
 2002398:	10800158 	cmpnei	r2,r2,5
 200239c:	1000021e 	bne	r2,zero,20023a8 <enterTopMenuPage+0x80>
 20023a0:	20039e40 	call	20039e4 <enterRemoteMenu>
 20023a4:	00000906 	br	20023cc <enterTopMenuPage+0xa4>
	else if(curr_state==6)	enterSaveLoadMenu();
 20023a8:	e0bfff03 	ldbu	r2,-4(fp)
 20023ac:	10800198 	cmpnei	r2,r2,6
 20023b0:	1000021e 	bne	r2,zero,20023bc <enterTopMenuPage+0x94>
 20023b4:	20040b40 	call	20040b4 <enterSaveLoadMenu>
 20023b8:	00000406 	br	20023cc <enterTopMenuPage+0xa4>
	else if(curr_state==7)	enterShotCountersMenu();
 20023bc:	e0bfff03 	ldbu	r2,-4(fp)
 20023c0:	108001d8 	cmpnei	r2,r2,7
 20023c4:	1000011e 	bne	r2,zero,20023cc <enterTopMenuPage+0xa4>
 20023c8:	20046240 	call	2004624 <enterShotCountersMenu>
	//else if(curr_state==8)	entryExternalTriggerMenu(curr_state);
}
 20023cc:	e037883a 	mov	sp,fp
 20023d0:	dfc00117 	ldw	ra,4(sp)
 20023d4:	df000017 	ldw	fp,0(sp)
 20023d8:	dec00204 	addi	sp,sp,8
 20023dc:	f800283a 	ret

020023e0 <TopMenu>:
 *
 * CAUTION: Put "while(keyFlag);" before entering a sub-menu to make sure key-press is released. If not, the key-press may also be captured by the sub-menu.
 */

void TopMenu()
{
 20023e0:	defffa04 	addi	sp,sp,-24
 20023e4:	dfc00515 	stw	ra,20(sp)
 20023e8:	df000415 	stw	fp,16(sp)
 20023ec:	df000404 	addi	fp,sp,16
	initController();												//Initialize the controller (go into this function to see details)
 20023f0:	20021380 	call	2002138 <initController>
	printf("Menu Initialized!\n");									//Send massage through JTAG, for debugging.
 20023f4:	01008074 	movhi	r4,513
 20023f8:	21198804 	addi	r4,r4,26144
 20023fc:	20099f80 	call	20099f8 <puts>
	int MinPageID = 1;
 2002400:	00800044 	movi	r2,1
 2002404:	e0bffd15 	stw	r2,-12(fp)
	int MaxPageID = 7;
 2002408:	008001c4 	movi	r2,7
 200240c:	e0bffe15 	stw	r2,-8(fp)

	showCoverPage();												//Display the "welcome screen".
 2002410:	20018d80 	call	20018d8 <showCoverPage>

	enterStartupMenu(1);												//Enter startup instruction menu to guide through the startup sequence
 2002414:	01000044 	movi	r4,1
 2002418:	20053000 	call	2005300 <enterStartupMenu>

	unsigned char curr_state = 1;									//Make sure the menu starts from its first page
 200241c:	00800044 	movi	r2,1
 2002420:	e0bffc05 	stb	r2,-16(fp)

	refreshTopMenuEntry(curr_state);								//Call "refreshTopMenuEntry(curr_state)" to refresh the display each time after curr_state changes.
 2002424:	e0bffc03 	ldbu	r2,-16(fp)
 2002428:	1009883a 	mov	r4,r2
 200242c:	200223c0 	call	200223c <refreshTopMenuEntry>
 2002430:	00000106 	br	2002438 <TopMenu+0x58>
					refreshTopMenuEntry(curr_state);
				}
			}
			while(keyFlag);											//Wait until key is released
		}
	}
 2002434:	0001883a 	nop
	refreshTopMenuEntry(curr_state);								//Call "refreshTopMenuEntry(curr_state)" to refresh the display each time after curr_state changes.

	unsigned char keyVal_latch;										//Once a key-press is detected, latch the key value in keyVal_latch.
	while(1)														//Infinity loop to pull key-press and update the state of the FSM.
	{
		if(keyFlag)													//If a key press is detected.
 2002438:	00810034 	movhi	r2,1024
 200243c:	10889804 	addi	r2,r2,8800
 2002440:	10800003 	ldbu	r2,0(r2)
 2002444:	10803fcc 	andi	r2,r2,255
 2002448:	103ffa26 	beq	r2,zero,2002434 <TopMenu+0x54>
		{
			delay(100);												//De-bouncing
 200244c:	01001904 	movi	r4,100
 2002450:	20019dc0 	call	20019dc <delay>
			if(keyFlag)												//De-bouncing
 2002454:	00810034 	movhi	r2,1024
 2002458:	10889804 	addi	r2,r2,8800
 200245c:	10800003 	ldbu	r2,0(r2)
 2002460:	10803fcc 	andi	r2,r2,255
 2002464:	10003b26 	beq	r2,zero,2002554 <TopMenu+0x174>
			{
				keyVal_latch = keyVal;								//Latch key value
 2002468:	00810034 	movhi	r2,1024
 200246c:	10889404 	addi	r2,r2,8784
 2002470:	10800003 	ldbu	r2,0(r2)
 2002474:	e0bfff05 	stb	r2,-4(fp)
				if(keyVal_latch == KEY_LEFT)						//If left arrow is pressed
 2002478:	e0bfff03 	ldbu	r2,-4(fp)
 200247c:	10800298 	cmpnei	r2,r2,10
 2002480:	10000a1e 	bne	r2,zero,20024ac <TopMenu+0xcc>
				{
					if(curr_state > MinPageID)								//If curr_state is greater than 1
 2002484:	e0bffc03 	ldbu	r2,-16(fp)
 2002488:	e0fffd17 	ldw	r3,-12(fp)
 200248c:	1880310e 	bge	r3,r2,2002554 <TopMenu+0x174>
					{
						curr_state--;								//Decrease curr_state by 1
 2002490:	e0bffc03 	ldbu	r2,-16(fp)
 2002494:	10bfffc4 	addi	r2,r2,-1
 2002498:	e0bffc05 	stb	r2,-16(fp)
						refreshTopMenuEntry(curr_state);			//Refresh display
 200249c:	e0bffc03 	ldbu	r2,-16(fp)
 20024a0:	1009883a 	mov	r4,r2
 20024a4:	200223c0 	call	200223c <refreshTopMenuEntry>
					while(keyFlag);
					enterFireMenu();
					refreshTopMenuEntry(curr_state);
				}
			}
			while(keyFlag);											//Wait until key is released
 20024a8:	00002a06 	br	2002554 <TopMenu+0x174>
					{
						curr_state--;								//Decrease curr_state by 1
						refreshTopMenuEntry(curr_state);			//Refresh display
					}
				}
				else if(keyVal_latch == KEY_RIGHT)					//If right arrow is pressed
 20024ac:	e0bfff03 	ldbu	r2,-4(fp)
 20024b0:	108002d8 	cmpnei	r2,r2,11
 20024b4:	10000a1e 	bne	r2,zero,20024e0 <TopMenu+0x100>
				{
					if(curr_state < MaxPageID)								//If curr_state is less than the total page number, 7(May updated to 8)
 20024b8:	e0fffc03 	ldbu	r3,-16(fp)
 20024bc:	e0bffe17 	ldw	r2,-8(fp)
 20024c0:	1880240e 	bge	r3,r2,2002554 <TopMenu+0x174>
					{
						curr_state++;								//Increase curr_state by 1
 20024c4:	e0bffc03 	ldbu	r2,-16(fp)
 20024c8:	10800044 	addi	r2,r2,1
 20024cc:	e0bffc05 	stb	r2,-16(fp)
						refreshTopMenuEntry(curr_state);			//Refresh display
 20024d0:	e0bffc03 	ldbu	r2,-16(fp)
 20024d4:	1009883a 	mov	r4,r2
 20024d8:	200223c0 	call	200223c <refreshTopMenuEntry>
					while(keyFlag);
					enterFireMenu();
					refreshTopMenuEntry(curr_state);
				}
			}
			while(keyFlag);											//Wait until key is released
 20024dc:	00001d06 	br	2002554 <TopMenu+0x174>
					{
						curr_state++;								//Increase curr_state by 1
						refreshTopMenuEntry(curr_state);			//Refresh display
					}
				}
				else if(keyVal_latch == KEY_ENTER)					//If ENTER key is pressed
 20024e0:	e0bfff03 	ldbu	r2,-4(fp)
 20024e4:	10800398 	cmpnei	r2,r2,14
 20024e8:	10000d1e 	bne	r2,zero,2002520 <TopMenu+0x140>
				{
					while(keyFlag);									//Wait until key is released
 20024ec:	0001883a 	nop
 20024f0:	00810034 	movhi	r2,1024
 20024f4:	10889804 	addi	r2,r2,8800
 20024f8:	10800003 	ldbu	r2,0(r2)
 20024fc:	10803fcc 	andi	r2,r2,255
 2002500:	103ffb1e 	bne	r2,zero,20024f0 <TopMenu+0x110>
					enterTopMenuPage(curr_state);					//Enter a sub-menu
 2002504:	e0bffc03 	ldbu	r2,-16(fp)
 2002508:	1009883a 	mov	r4,r2
 200250c:	20023280 	call	2002328 <enterTopMenuPage>
					refreshTopMenuEntry(curr_state);				//Remember to call "refreshTopMenuEntry(curr_state)" when it returns from a sub-menu, because the display might be manipulated by a sub-menu.
 2002510:	e0bffc03 	ldbu	r2,-16(fp)
 2002514:	1009883a 	mov	r4,r2
 2002518:	200223c0 	call	200223c <refreshTopMenuEntry>
					while(keyFlag);
					enterFireMenu();
					refreshTopMenuEntry(curr_state);
				}
			}
			while(keyFlag);											//Wait until key is released
 200251c:	00000d06 	br	2002554 <TopMenu+0x174>
				{
					while(keyFlag);									//Wait until key is released
					enterTopMenuPage(curr_state);					//Enter a sub-menu
					refreshTopMenuEntry(curr_state);				//Remember to call "refreshTopMenuEntry(curr_state)" when it returns from a sub-menu, because the display might be manipulated by a sub-menu.
				}
				else if(keyVal_latch == KEY_ENA)					//Enter Fire menu if ENABLE is pressed.
 2002520:	e0bfff03 	ldbu	r2,-4(fp)
 2002524:	108003d8 	cmpnei	r2,r2,15
 2002528:	10000a1e 	bne	r2,zero,2002554 <TopMenu+0x174>
				{
					while(keyFlag);
 200252c:	0001883a 	nop
 2002530:	00810034 	movhi	r2,1024
 2002534:	10889804 	addi	r2,r2,8800
 2002538:	10800003 	ldbu	r2,0(r2)
 200253c:	10803fcc 	andi	r2,r2,255
 2002540:	103ffb1e 	bne	r2,zero,2002530 <TopMenu+0x150>
					enterFireMenu();
 2002544:	20031c00 	call	20031c0 <enterFireMenu>
					refreshTopMenuEntry(curr_state);
 2002548:	e0bffc03 	ldbu	r2,-16(fp)
 200254c:	1009883a 	mov	r4,r2
 2002550:	200223c0 	call	200223c <refreshTopMenuEntry>
				}
			}
			while(keyFlag);											//Wait until key is released
 2002554:	0001883a 	nop
 2002558:	00810034 	movhi	r2,1024
 200255c:	10889804 	addi	r2,r2,8800
 2002560:	10800003 	ldbu	r2,0(r2)
 2002564:	10803fcc 	andi	r2,r2,255
 2002568:	103ffb1e 	bne	r2,zero,2002558 <TopMenu+0x178>
		}
	}
 200256c:	003fb106 	br	2002434 <TopMenu+0x54>

02002570 <main>:
#define heaterCounter	*(unsigned int*) HEATERCOUNTER_BASE		//Input, 10bit, A count down timer for heater warming up
#define heaterDone		*(unsigned char*) HEATERDONE_BASE		//Input, Flag, set when heater is ready (warming up finished)
#define rstHeaterTimer *(unsigned char*)RSTHEATERTIMER_BASE

int main()
{
 2002570:	defffe04 	addi	sp,sp,-8
 2002574:	dfc00115 	stw	ra,4(sp)
 2002578:	df000015 	stw	fp,0(sp)
 200257c:	d839883a 	mov	fp,sp
		printf("%dth HeaterCounter: %d\n",i,heaterCounter);
		i++;
		delay(5000);
	}*/

	TopMenu();
 2002580:	20023e00 	call	20023e0 <TopMenu>

  return 0;
 2002584:	0005883a 	mov	r2,zero
}
 2002588:	e037883a 	mov	sp,fp
 200258c:	dfc00117 	ldw	ra,4(sp)
 2002590:	df000017 	ldw	fp,0(sp)
 2002594:	dec00204 	addi	sp,sp,8
 2002598:	f800283a 	ret

0200259c <entryFireMenu>:
#define interlock_code  *(volatile unsigned char*)INTERLOCK_SPLITED_BASE //Input,a sequence of binary which determines which interlock channel has an error.



void entryFireMenu(unsigned char number)
{
 200259c:	defffd04 	addi	sp,sp,-12
 20025a0:	dfc00215 	stw	ra,8(sp)
 20025a4:	df000115 	stw	fp,4(sp)
 20025a8:	df000104 	addi	fp,sp,4
 20025ac:	2005883a 	mov	r2,r4
 20025b0:	e0bfff05 	stb	r2,-4(fp)
	//Configure backlit LEDs
	KPLED_All_Off();
 20025b4:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Enter(3);
 20025b8:	010000c4 	movi	r4,3
 20025bc:	20012440 	call	2001244 <KPLED_Enter>
	KPLED_Enable(1);
 20025c0:	01000044 	movi	r4,1
 20025c4:	20012cc0 	call	20012cc <KPLED_Enable>
	KPLED_RightArrow(3);
 20025c8:	010000c4 	movi	r4,3
 20025cc:	20010200 	call	2001020 <KPLED_RightArrow>
	KPLED_LeftArrow(3);
 20025d0:	010000c4 	movi	r4,3
 20025d4:	20010ac0 	call	20010ac <KPLED_LeftArrow>

	//Construct display screen
	DisClear();
 20025d8:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 20025dc:	0009883a 	mov	r4,zero
 20025e0:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(1,1);
 20025e4:	01000044 	movi	r4,1
 20025e8:	01400044 	movi	r5,1
 20025ec:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("       MENU         ");
 20025f0:	01008074 	movhi	r4,513
 20025f4:	21198d04 	addi	r4,r4,26164
 20025f8:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(2,1);
 20025fc:	01000084 	movi	r4,2
 2002600:	01400044 	movi	r5,1
 2002604:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(Num2toStr2(number));
 2002608:	e0bfff03 	ldbu	r2,-4(fp)
 200260c:	1009883a 	mov	r4,r2
 2002610:	20062640 	call	2006264 <Num2toStr2>
 2002614:	1009883a 	mov	r4,r2
 2002618:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(".Fire");
 200261c:	01008074 	movhi	r4,513
 2002620:	21199304 	addi	r4,r4,26188
 2002624:	20006000 	call	2000600 <DisWrStr>

	DisCurPos(4,1);
 2002628:	01000104 	movi	r4,4
 200262c:	01400044 	movi	r5,1
 2002630:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("<Prev   Enter  Next>");
 2002634:	01008074 	movhi	r4,513
 2002638:	21199504 	addi	r4,r4,26196
 200263c:	20006000 	call	2000600 <DisWrStr>

}
 2002640:	e037883a 	mov	sp,fp
 2002644:	dfc00117 	ldw	ra,4(sp)
 2002648:	df000017 	ldw	fp,0(sp)
 200264c:	dec00204 	addi	sp,sp,8
 2002650:	f800283a 	ret

02002654 <PreFiringErrChk>:
 * Returns:
 * 		non-zero: Error(Do NOT Fire)	0:No Error
 */

unsigned char PreFiringErrChk()
{
 2002654:	defffd04 	addi	sp,sp,-12
 2002658:	dfc00215 	stw	ra,8(sp)
 200265c:	df000115 	stw	fp,4(sp)
 2002660:	df000104 	addi	fp,sp,4
	unsigned char keyVal_latch;
	unsigned char err = chkAllTiming();			//Check all timing parameters. Returns "1" if ny parameter error is detected.
 2002664:	2007cdc0 	call	2007cdc <chkAllTiming>
 2002668:	e0bfff05 	stb	r2,-4(fp)
	unsigned char interlock_latch;

	clrInterlock = 1;
 200266c:	00810034 	movhi	r2,1024
 2002670:	10886004 	addi	r2,r2,8576
 2002674:	00c00044 	movi	r3,1
 2002678:	10c00005 	stb	r3,0(r2)
	clrInterlock = 0;
 200267c:	00810034 	movhi	r2,1024
 2002680:	10886004 	addi	r2,r2,8576
 2002684:	10000005 	stb	zero,0(r2)
	interlock_latch = interlock;
 2002688:	00810034 	movhi	r2,1024
 200268c:	10886404 	addi	r2,r2,8592
 2002690:	10800003 	ldbu	r2,0(r2)
 2002694:	e0bfff45 	stb	r2,-3(fp)

	KPLED_All_Off();
 2002698:	2000f400 	call	2000f40 <KPLED_All_Off>
	if(err)										//If any parameter error is detected.
 200269c:	e0bfff03 	ldbu	r2,-4(fp)
 20026a0:	10004326 	beq	r2,zero,20027b0 <PreFiringErrChk+0x15c>
	{

		KPLED_Menu(3);							//Display "Range check error" message
 20026a4:	010000c4 	movi	r4,3
 20026a8:	20011340 	call	2001134 <KPLED_Menu>
		DisClear();
 20026ac:	20006780 	call	2000678 <DisClear>
		DisShowCur(0);
 20026b0:	0009883a 	mov	r4,zero
 20026b4:	20004fc0 	call	20004fc <DisShowCur>
		DisCurPos(1,8);
 20026b8:	01000044 	movi	r4,1
 20026bc:	01400204 	movi	r5,8
 20026c0:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("ERROR");
 20026c4:	01008074 	movhi	r4,513
 20026c8:	21199b04 	addi	r4,r4,26220
 20026cc:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(2,1);
 20026d0:	01000084 	movi	r4,2
 20026d4:	01400044 	movi	r5,1
 20026d8:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("Range Check Error");
 20026dc:	01008074 	movhi	r4,513
 20026e0:	21199d04 	addi	r4,r4,26228
 20026e4:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(3,1);
 20026e8:	010000c4 	movi	r4,3
 20026ec:	01400044 	movi	r5,1
 20026f0:	20005400 	call	2000540 <DisCurPos>
		DisWrStr(convertChnlTitle(err));
 20026f4:	e0bfff03 	ldbu	r2,-4(fp)
 20026f8:	1009883a 	mov	r4,r2
 20026fc:	20082e40 	call	20082e4 <convertChnlTitle>
 2002700:	1009883a 	mov	r4,r2
 2002704:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(4,1);
 2002708:	01000104 	movi	r4,4
 200270c:	01400044 	movi	r5,1
 2002710:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("Press MENU to Return");
 2002714:	01008074 	movhi	r4,513
 2002718:	2119a204 	addi	r4,r4,26248
 200271c:	20006000 	call	2000600 <DisWrStr>
 2002720:	00000106 	br	2002728 <PreFiringErrChk+0xd4>
						return err;
					}
				}
				while(keyFlag);
			}
		}
 2002724:	0001883a 	nop
		DisWrStr("Press MENU to Return");


		while(1)								//Detect key press, MENU to return.
		{
			if(keyFlag)
 2002728:	00810034 	movhi	r2,1024
 200272c:	10889804 	addi	r2,r2,8800
 2002730:	10800003 	ldbu	r2,0(r2)
 2002734:	10803fcc 	andi	r2,r2,255
 2002738:	103ffa26 	beq	r2,zero,2002724 <PreFiringErrChk+0xd0>
			{
				delay(100);
 200273c:	01001904 	movi	r4,100
 2002740:	20019dc0 	call	20019dc <delay>
				if(keyFlag)
 2002744:	00810034 	movhi	r2,1024
 2002748:	10889804 	addi	r2,r2,8800
 200274c:	10800003 	ldbu	r2,0(r2)
 2002750:	10803fcc 	andi	r2,r2,255
 2002754:	10000f26 	beq	r2,zero,2002794 <PreFiringErrChk+0x140>
				{
					keyVal_latch = keyVal;
 2002758:	00810034 	movhi	r2,1024
 200275c:	10889404 	addi	r2,r2,8784
 2002760:	10800003 	ldbu	r2,0(r2)
 2002764:	e0bfff85 	stb	r2,-2(fp)
					if(keyVal_latch == KEY_MENU)
 2002768:	e0bfff83 	ldbu	r2,-2(fp)
 200276c:	10800318 	cmpnei	r2,r2,12
 2002770:	1000081e 	bne	r2,zero,2002794 <PreFiringErrChk+0x140>
					{
						while(keyFlag);
 2002774:	0001883a 	nop
 2002778:	00810034 	movhi	r2,1024
 200277c:	10889804 	addi	r2,r2,8800
 2002780:	10800003 	ldbu	r2,0(r2)
 2002784:	10803fcc 	andi	r2,r2,255
 2002788:	103ffb1e 	bne	r2,zero,2002778 <PreFiringErrChk+0x124>
						return err;
 200278c:	e0bfff03 	ldbu	r2,-4(fp)
 2002790:	00004506 	br	20028a8 <PreFiringErrChk+0x254>
					}
				}
				while(keyFlag);
 2002794:	0001883a 	nop
 2002798:	00810034 	movhi	r2,1024
 200279c:	10889804 	addi	r2,r2,8800
 20027a0:	10800003 	ldbu	r2,0(r2)
 20027a4:	10803fcc 	andi	r2,r2,255
 20027a8:	103ffb1e 	bne	r2,zero,2002798 <PreFiringErrChk+0x144>
			}
		}
 20027ac:	003fdd06 	br	2002724 <PreFiringErrChk+0xd0>
	}
	else if(interlock_latch)					//If interlock is detected
 20027b0:	e0bfff43 	ldbu	r2,-3(fp)
 20027b4:	10003b26 	beq	r2,zero,20028a4 <PreFiringErrChk+0x250>
	{
		KPLED_Menu(3);							//Display Interlock message
 20027b8:	010000c4 	movi	r4,3
 20027bc:	20011340 	call	2001134 <KPLED_Menu>
		DisClear();
 20027c0:	20006780 	call	2000678 <DisClear>
		DisShowCur(0);
 20027c4:	0009883a 	mov	r4,zero
 20027c8:	20004fc0 	call	20004fc <DisShowCur>
		DisCurPos(1,8);
 20027cc:	01000044 	movi	r4,1
 20027d0:	01400204 	movi	r5,8
 20027d4:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("ERROR");
 20027d8:	01008074 	movhi	r4,513
 20027dc:	21199b04 	addi	r4,r4,26220
 20027e0:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(2,1);
 20027e4:	01000084 	movi	r4,2
 20027e8:	01400044 	movi	r5,1
 20027ec:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("Interlock!");
 20027f0:	01008074 	movhi	r4,513
 20027f4:	2119a804 	addi	r4,r4,26272
 20027f8:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(4,1);
 20027fc:	01000104 	movi	r4,4
 2002800:	01400044 	movi	r5,1
 2002804:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("Press MENU to Return");
 2002808:	01008074 	movhi	r4,513
 200280c:	2119a204 	addi	r4,r4,26248
 2002810:	20006000 	call	2000600 <DisWrStr>
 2002814:	00000106 	br	200281c <PreFiringErrChk+0x1c8>
						return 255;
					}
				}
				while(keyFlag);
			}
		}
 2002818:	0001883a 	nop
		DisCurPos(4,1);
		DisWrStr("Press MENU to Return");

		while(1)								//Detect key press, MENU to return
		{
			if(keyFlag)
 200281c:	00810034 	movhi	r2,1024
 2002820:	10889804 	addi	r2,r2,8800
 2002824:	10800003 	ldbu	r2,0(r2)
 2002828:	10803fcc 	andi	r2,r2,255
 200282c:	103ffa26 	beq	r2,zero,2002818 <PreFiringErrChk+0x1c4>
			{
				delay(100);
 2002830:	01001904 	movi	r4,100
 2002834:	20019dc0 	call	20019dc <delay>
				if(keyFlag)
 2002838:	00810034 	movhi	r2,1024
 200283c:	10889804 	addi	r2,r2,8800
 2002840:	10800003 	ldbu	r2,0(r2)
 2002844:	10803fcc 	andi	r2,r2,255
 2002848:	10000f26 	beq	r2,zero,2002888 <PreFiringErrChk+0x234>
				{
					keyVal_latch = keyVal;
 200284c:	00810034 	movhi	r2,1024
 2002850:	10889404 	addi	r2,r2,8784
 2002854:	10800003 	ldbu	r2,0(r2)
 2002858:	e0bfff85 	stb	r2,-2(fp)
					if(keyVal_latch == KEY_MENU)
 200285c:	e0bfff83 	ldbu	r2,-2(fp)
 2002860:	10800318 	cmpnei	r2,r2,12
 2002864:	1000081e 	bne	r2,zero,2002888 <PreFiringErrChk+0x234>
					{
						while(keyFlag);
 2002868:	0001883a 	nop
 200286c:	00810034 	movhi	r2,1024
 2002870:	10889804 	addi	r2,r2,8800
 2002874:	10800003 	ldbu	r2,0(r2)
 2002878:	10803fcc 	andi	r2,r2,255
 200287c:	103ffb1e 	bne	r2,zero,200286c <PreFiringErrChk+0x218>
						return 255;
 2002880:	00bfffc4 	movi	r2,-1
 2002884:	00000806 	br	20028a8 <PreFiringErrChk+0x254>
					}
				}
				while(keyFlag);
 2002888:	0001883a 	nop
 200288c:	00810034 	movhi	r2,1024
 2002890:	10889804 	addi	r2,r2,8800
 2002894:	10800003 	ldbu	r2,0(r2)
 2002898:	10803fcc 	andi	r2,r2,255
 200289c:	103ffb1e 	bne	r2,zero,200288c <PreFiringErrChk+0x238>
			}
		}
 20028a0:	003fdd06 	br	2002818 <PreFiringErrChk+0x1c4>
	}
	return checkHeater();						//Return heater check status. If the heater is already warming up for 10 minutes, then it is ready.
 20028a4:	20034ac0 	call	20034ac <checkHeater>
}
 20028a8:	e037883a 	mov	sp,fp
 20028ac:	dfc00117 	ldw	ra,4(sp)
 20028b0:	df000017 	ldw	fp,0(sp)
 20028b4:	dec00204 	addi	sp,sp,8
 20028b8:	f800283a 	ret

020028bc <showFiringInformation>:

void showFiringInformation()
{
 20028bc:	defffe04 	addi	sp,sp,-8
 20028c0:	dfc00115 	stw	ra,4(sp)
 20028c4:	df000015 	stw	fp,0(sp)
 20028c8:	d839883a 	mov	fp,sp
	KPLED_All_Off();
 20028cc:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Enable(3);
 20028d0:	010000c4 	movi	r4,3
 20028d4:	20012cc0 	call	20012cc <KPLED_Enable>
	KPLED_Menu(3);
 20028d8:	010000c4 	movi	r4,3
 20028dc:	20011340 	call	2001134 <KPLED_Menu>
	KPLED_Fire(3);								//Let the Fire button flash once during each shot
 20028e0:	010000c4 	movi	r4,3
 20028e4:	20013540 	call	2001354 <KPLED_Fire>

	DisClear();
 20028e8:	20006780 	call	2000678 <DisClear>
	DisCurPos(1,5);
 20028ec:	01000044 	movi	r4,1
 20028f0:	01400144 	movi	r5,5
 20028f4:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(" Firing...");
 20028f8:	01008074 	movhi	r4,513
 20028fc:	2119ab04 	addi	r4,r4,26284
 2002900:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(2,1);
 2002904:	01000084 	movi	r4,2
 2002908:	01400044 	movi	r5,1
 200290c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("SeqCount:     /");
 2002910:	01008074 	movhi	r4,513
 2002914:	2119ae04 	addi	r4,r4,26296
 2002918:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(Num5toStr5(LoadRAMShots()));
 200291c:	2001a940 	call	2001a94 <LoadRAMShots>
 2002920:	1009883a 	mov	r4,r2
 2002924:	20067980 	call	2006798 <Num5toStr5>
 2002928:	1009883a 	mov	r4,r2
 200292c:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(3,1);
 2002930:	010000c4 	movi	r4,3
 2002934:	01400044 	movi	r5,1
 2002938:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("CapCount:");
 200293c:	01008074 	movhi	r4,513
 2002940:	2119b204 	addi	r4,r4,26312
 2002944:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(4,1);
 2002948:	01000104 	movi	r4,4
 200294c:	01400044 	movi	r5,1
 2002950:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("ENA=Pause  MENU=Stop");
 2002954:	01008074 	movhi	r4,513
 2002958:	2119b504 	addi	r4,r4,26324
 200295c:	20006000 	call	2000600 <DisWrStr>
}
 2002960:	e037883a 	mov	sp,fp
 2002964:	dfc00117 	ldw	ra,4(sp)
 2002968:	df000017 	ldw	fp,0(sp)
 200296c:	dec00204 	addi	sp,sp,8
 2002970:	f800283a 	ret

02002974 <PreionFaultHandler>:

/*
 * Display fault massage when DC preion fault is detected
 */
void PreionFaultHandler()
{
 2002974:	defffd04 	addi	sp,sp,-12
 2002978:	dfc00215 	stw	ra,8(sp)
 200297c:	df000115 	stw	fp,4(sp)
 2002980:	df000104 	addi	fp,sp,4
	unsigned char preionFault_latch = preionFault;
 2002984:	00810034 	movhi	r2,1024
 2002988:	10886c04 	addi	r2,r2,8624
 200298c:	10800003 	ldbu	r2,0(r2)
 2002990:	e0bfff05 	stb	r2,-4(fp)
	unsigned char HV_Inhibit_latch = HV_Inhibit;
 2002994:	00810034 	movhi	r2,1024
 2002998:	10885004 	addi	r2,r2,8512
 200299c:	10800003 	ldbu	r2,0(r2)
 20029a0:	e0bfff45 	stb	r2,-3(fp)



	if(preionFault_latch || HV_Inhibit_latch)
 20029a4:	e0bfff03 	ldbu	r2,-4(fp)
 20029a8:	1000021e 	bne	r2,zero,20029b4 <PreionFaultHandler+0x40>
 20029ac:	e0bfff43 	ldbu	r2,-3(fp)
 20029b0:	10000626 	beq	r2,zero,20029cc <PreionFaultHandler+0x58>
	{
		DisCurPos(2,1);
 20029b4:	01000084 	movi	r4,2
 20029b8:	01400044 	movi	r5,1
 20029bc:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("  DC Preion Fault!  ");
 20029c0:	01008074 	movhi	r4,513
 20029c4:	2119bb04 	addi	r4,r4,26348
 20029c8:	20006000 	call	2000600 <DisWrStr>
	}

	if(HV_Inhibit_latch)
 20029cc:	e0bfff43 	ldbu	r2,-3(fp)
 20029d0:	10000626 	beq	r2,zero,20029ec <PreionFaultHandler+0x78>
	{
		DisCurPos(3,1);
 20029d4:	010000c4 	movi	r4,3
 20029d8:	01400044 	movi	r5,1
 20029dc:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("     HV Inhibit     ");
 20029e0:	01008074 	movhi	r4,513
 20029e4:	2119c104 	addi	r4,r4,26372
 20029e8:	20006000 	call	2000600 <DisWrStr>
	}
}
 20029ec:	e037883a 	mov	sp,fp
 20029f0:	dfc00117 	ldw	ra,4(sp)
 20029f4:	df000017 	ldw	fp,0(sp)
 20029f8:	dec00204 	addi	sp,sp,8
 20029fc:	f800283a 	ret

02002a00 <PauseSequence>:
 */

//Return 0: Resume
//Return 1: Stop
unsigned char PauseSequence(unsigned char isFromInterlock)
{
 2002a00:	defff804 	addi	sp,sp,-32
 2002a04:	dfc00715 	stw	ra,28(sp)
 2002a08:	df000615 	stw	fp,24(sp)
 2002a0c:	df000604 	addi	fp,sp,24
 2002a10:	2005883a 	mov	r2,r4
 2002a14:	e0bfff05 	stb	r2,-4(fp)
	pauseSeq = 1;
 2002a18:	00810034 	movhi	r2,1024
 2002a1c:	10885c04 	addi	r2,r2,8560
 2002a20:	00c00044 	movi	r3,1
 2002a24:	10c00005 	stb	r3,0(r2)

	unsigned char interlock_latch;
	unsigned int interlock_code_latch;
	unsigned short blink_ctr = 0;
 2002a28:	e03ffa8d 	sth	zero,-22(fp)
	unsigned char keyVal_latch;
	unsigned char interlock_flag;	//This flag is set once an interlock is detected

	interlock_flag = isFromInterlock;		//Initialize Interlock Flag
 2002a2c:	e0bfff03 	ldbu	r2,-4(fp)
 2002a30:	e0bffb05 	stb	r2,-20(fp)

	showFiringInformation();
 2002a34:	20028bc0 	call	20028bc <showFiringInformation>

	KPLED_All_Off();
 2002a38:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Enable(1);
 2002a3c:	01000044 	movi	r4,1
 2002a40:	20012cc0 	call	20012cc <KPLED_Enable>
	KPLED_Menu(3);
 2002a44:	010000c4 	movi	r4,3
 2002a48:	20011340 	call	2001134 <KPLED_Menu>


	//Construct the Pause screen
	DisCurPos(1,1);
 2002a4c:	01000044 	movi	r4,1
 2002a50:	01400044 	movi	r5,1
 2002a54:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(" Firing Seq. Paused");
 2002a58:	01008074 	movhi	r4,513
 2002a5c:	2119c704 	addi	r4,r4,26396
 2002a60:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(4,1);
 2002a64:	01000104 	movi	r4,4
 2002a68:	01400044 	movi	r5,1
 2002a6c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("ENA=Resume MENU=Stop");
 2002a70:	01008074 	movhi	r4,513
 2002a74:	2119cc04 	addi	r4,r4,26416
 2002a78:	20006000 	call	2000600 <DisWrStr>
	unsigned int seqCount_latch = seqCount;
 2002a7c:	00810034 	movhi	r2,1024
 2002a80:	10885804 	addi	r2,r2,8544
 2002a84:	10800017 	ldw	r2,0(r2)
 2002a88:	e0bffc15 	stw	r2,-16(fp)
	DisCurPos(2,10);
 2002a8c:	01000084 	movi	r4,2
 2002a90:	01400284 	movi	r5,10
 2002a94:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(Num5toStr5(seqCount_latch));
 2002a98:	e13ffc17 	ldw	r4,-16(fp)
 2002a9c:	20067980 	call	2006798 <Num5toStr5>
 2002aa0:	1009883a 	mov	r4,r2
 2002aa4:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(3,11);
 2002aa8:	010000c4 	movi	r4,3
 2002aac:	014002c4 	movi	r5,11
 2002ab0:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(Num10toStr10(getCounter1Val()));
 2002ab4:	200029c0 	call	200029c <getCounter1Val>
 2002ab8:	1009883a 	mov	r4,r2
 2002abc:	20054500 	call	2005450 <Num10toStr10>
 2002ac0:	1009883a 	mov	r4,r2
 2002ac4:	20006000 	call	2000600 <DisWrStr>
 2002ac8:	00000106 	br	2002ad0 <PauseSequence+0xd0>
						}
					}
				}
			}
		}
	}
 2002acc:	0001883a 	nop
	DisWrStr(Num10toStr10(getCounter1Val()));

	//Pull interlock
	while(1)
	{
		interlock_latch = interlock;
 2002ad0:	00810034 	movhi	r2,1024
 2002ad4:	10886404 	addi	r2,r2,8592
 2002ad8:	10800003 	ldbu	r2,0(r2)
 2002adc:	e0bffa05 	stb	r2,-24(fp)
		interlock_code_latch = interlock_code;
 2002ae0:	00810034 	movhi	r2,1024
 2002ae4:	10882404 	addi	r2,r2,8336
 2002ae8:	10800003 	ldbu	r2,0(r2)
 2002aec:	10803fcc 	andi	r2,r2,255
 2002af0:	e0bffd15 	stw	r2,-12(fp)
		clrInterlock = 1;
 2002af4:	00810034 	movhi	r2,1024
 2002af8:	10886004 	addi	r2,r2,8576
 2002afc:	00c00044 	movi	r3,1
 2002b00:	10c00005 	stb	r3,0(r2)
		clrInterlock = 0;
 2002b04:	00810034 	movhi	r2,1024
 2002b08:	10886004 	addi	r2,r2,8576
 2002b0c:	10000005 	stb	zero,0(r2)


		if(interlock_latch)
 2002b10:	e0bffa03 	ldbu	r2,-24(fp)
 2002b14:	10003d26 	beq	r2,zero,2002c0c <PauseSequence+0x20c>
		{
			if(! interlock_flag)
 2002b18:	e0bffb03 	ldbu	r2,-20(fp)
 2002b1c:	10000a1e 	bne	r2,zero,2002b48 <PauseSequence+0x148>
			{
				KPLED_Enable(0);
 2002b20:	0009883a 	mov	r4,zero
 2002b24:	20012cc0 	call	20012cc <KPLED_Enable>
				DisCurPos(4,1);
 2002b28:	01000104 	movi	r4,4
 2002b2c:	01400044 	movi	r5,1
 2002b30:	20005400 	call	2000540 <DisCurPos>
				DisWrStr("          ");
 2002b34:	01008074 	movhi	r4,513
 2002b38:	2119d204 	addi	r4,r4,26440
 2002b3c:	20006000 	call	2000600 <DisWrStr>
				interlock_flag = 1;
 2002b40:	00800044 	movi	r2,1
 2002b44:	e0bffb05 	stb	r2,-20(fp)
			}
			blink_ctr++;
 2002b48:	e0bffa8b 	ldhu	r2,-22(fp)
 2002b4c:	10800044 	addi	r2,r2,1
 2002b50:	e0bffa8d 	sth	r2,-22(fp)
			if(blink_ctr == 50000)
 2002b54:	e0fffa8b 	ldhu	r3,-22(fp)
 2002b58:	00b0d414 	movui	r2,50000
 2002b5c:	18800b1e 	bne	r3,r2,2002b8c <PauseSequence+0x18c>
			{
				DisCurPos(3,6);
 2002b60:	010000c4 	movi	r4,3
 2002b64:	01400184 	movi	r5,6
 2002b68:	20005400 	call	2000540 <DisCurPos>
				ShowInterlockMessage(interlock_code);
 2002b6c:	00810034 	movhi	r2,1024
 2002b70:	10882404 	addi	r2,r2,8336
 2002b74:	10800003 	ldbu	r2,0(r2)
 2002b78:	10803fcc 	andi	r2,r2,255
 2002b7c:	1009883a 	mov	r4,r2
 2002b80:	20033700 	call	2003370 <ShowInterlockMessage>
				//DisWrStr("Interlock!");
				blink_ctr = 0;
 2002b84:	e03ffa8d 	sth	zero,-22(fp)
 2002b88:	00000506 	br	2002ba0 <PauseSequence+0x1a0>
			}
			else if(blink_ctr == 25000)
 2002b8c:	e0bffa8b 	ldhu	r2,-22(fp)
 2002b90:	10986a18 	cmpnei	r2,r2,25000
 2002b94:	1000021e 	bne	r2,zero,2002ba0 <PauseSequence+0x1a0>
			{
				DisClearRow(3);
 2002b98:	010000c4 	movi	r4,3
 2002b9c:	20006ac0 	call	20006ac <DisClearRow>
			}

			if(keyFlag)
 2002ba0:	00810034 	movhi	r2,1024
 2002ba4:	10889804 	addi	r2,r2,8800
 2002ba8:	10800003 	ldbu	r2,0(r2)
 2002bac:	10803fcc 	andi	r2,r2,255
 2002bb0:	103fc626 	beq	r2,zero,2002acc <PauseSequence+0xcc>
			{
				delay(100);
 2002bb4:	01001904 	movi	r4,100
 2002bb8:	20019dc0 	call	20019dc <delay>
				if(keyFlag)
 2002bbc:	00810034 	movhi	r2,1024
 2002bc0:	10889804 	addi	r2,r2,8800
 2002bc4:	10800003 	ldbu	r2,0(r2)
 2002bc8:	10803fcc 	andi	r2,r2,255
 2002bcc:	103fbf26 	beq	r2,zero,2002acc <PauseSequence+0xcc>
				{
					keyVal_latch = keyVal;
 2002bd0:	00810034 	movhi	r2,1024
 2002bd4:	10889404 	addi	r2,r2,8784
 2002bd8:	10800003 	ldbu	r2,0(r2)
 2002bdc:	e0bffe05 	stb	r2,-8(fp)
					if(keyVal_latch==KEY_MENU)
 2002be0:	e0bffe03 	ldbu	r2,-8(fp)
 2002be4:	10800318 	cmpnei	r2,r2,12
 2002be8:	103fb81e 	bne	r2,zero,2002acc <PauseSequence+0xcc>
					{
						while(keyFlag);
 2002bec:	0001883a 	nop
 2002bf0:	00810034 	movhi	r2,1024
 2002bf4:	10889804 	addi	r2,r2,8800
 2002bf8:	10800003 	ldbu	r2,0(r2)
 2002bfc:	10803fcc 	andi	r2,r2,255
 2002c00:	103ffb1e 	bne	r2,zero,2002bf0 <PauseSequence+0x1f0>
						return(1);
 2002c04:	00800044 	movi	r2,1
 2002c08:	00005106 	br	2002d50 <PauseSequence+0x350>
				}
			}
		}
		else
		{
			if(interlock_flag)
 2002c0c:	e0bffb03 	ldbu	r2,-20(fp)
 2002c10:	10004c26 	beq	r2,zero,2002d44 <PauseSequence+0x344>
			{
				KPLED_Enable(1);
 2002c14:	01000044 	movi	r4,1
 2002c18:	20012cc0 	call	20012cc <KPLED_Enable>
				DisCurPos(3,1);
 2002c1c:	010000c4 	movi	r4,3
 2002c20:	01400044 	movi	r5,1
 2002c24:	20005400 	call	2000540 <DisCurPos>
				DisWrStr(" Interlock Occurred ");
 2002c28:	01008074 	movhi	r4,513
 2002c2c:	2119d504 	addi	r4,r4,26452
 2002c30:	20006000 	call	2000600 <DisWrStr>
				DisCurPos(4,1);
 2002c34:	01000104 	movi	r4,4
 2002c38:	01400044 	movi	r5,1
 2002c3c:	20005400 	call	2000540 <DisCurPos>
				DisWrStr("ENA=Resume");
 2002c40:	01008074 	movhi	r4,513
 2002c44:	2119db04 	addi	r4,r4,26476
 2002c48:	20006000 	call	2000600 <DisWrStr>
				interlock_flag = 0;
 2002c4c:	e03ffb05 	stb	zero,-20(fp)
			}
			while(! interlock_latch)
 2002c50:	00003c06 	br	2002d44 <PauseSequence+0x344>
			{
				clrInterlock = 1;
 2002c54:	00810034 	movhi	r2,1024
 2002c58:	10886004 	addi	r2,r2,8576
 2002c5c:	00c00044 	movi	r3,1
 2002c60:	10c00005 	stb	r3,0(r2)
				clrInterlock = 0;
 2002c64:	00810034 	movhi	r2,1024
 2002c68:	10886004 	addi	r2,r2,8576
 2002c6c:	10000005 	stb	zero,0(r2)
				interlock_latch = interlock;
 2002c70:	00810034 	movhi	r2,1024
 2002c74:	10886404 	addi	r2,r2,8592
 2002c78:	10800003 	ldbu	r2,0(r2)
 2002c7c:	e0bffa05 	stb	r2,-24(fp)
				if(keyFlag)
 2002c80:	00810034 	movhi	r2,1024
 2002c84:	10889804 	addi	r2,r2,8800
 2002c88:	10800003 	ldbu	r2,0(r2)
 2002c8c:	10803fcc 	andi	r2,r2,255
 2002c90:	10002c26 	beq	r2,zero,2002d44 <PauseSequence+0x344>
				{
					delay(100);
 2002c94:	01001904 	movi	r4,100
 2002c98:	20019dc0 	call	20019dc <delay>
					if(keyFlag)
 2002c9c:	00810034 	movhi	r2,1024
 2002ca0:	10889804 	addi	r2,r2,8800
 2002ca4:	10800003 	ldbu	r2,0(r2)
 2002ca8:	10803fcc 	andi	r2,r2,255
 2002cac:	10002526 	beq	r2,zero,2002d44 <PauseSequence+0x344>
					{
						keyVal_latch = keyVal;
 2002cb0:	00810034 	movhi	r2,1024
 2002cb4:	10889404 	addi	r2,r2,8784
 2002cb8:	10800003 	ldbu	r2,0(r2)
 2002cbc:	e0bffe05 	stb	r2,-8(fp)
						if(keyVal_latch==KEY_ENA)
 2002cc0:	e0bffe03 	ldbu	r2,-8(fp)
 2002cc4:	108003d8 	cmpnei	r2,r2,15
 2002cc8:	1000131e 	bne	r2,zero,2002d18 <PauseSequence+0x318>
						{
							while(keyFlag);
 2002ccc:	0001883a 	nop
 2002cd0:	00810034 	movhi	r2,1024
 2002cd4:	10889804 	addi	r2,r2,8800
 2002cd8:	10800003 	ldbu	r2,0(r2)
 2002cdc:	10803fcc 	andi	r2,r2,255
 2002ce0:	103ffb1e 	bne	r2,zero,2002cd0 <PauseSequence+0x2d0>
							showFiringInformation();
 2002ce4:	20028bc0 	call	20028bc <showFiringInformation>
							clrInterlock = 1;
 2002ce8:	00810034 	movhi	r2,1024
 2002cec:	10886004 	addi	r2,r2,8576
 2002cf0:	00c00044 	movi	r3,1
 2002cf4:	10c00005 	stb	r3,0(r2)
							clrInterlock = 0;
 2002cf8:	00810034 	movhi	r2,1024
 2002cfc:	10886004 	addi	r2,r2,8576
 2002d00:	10000005 	stb	zero,0(r2)
							pauseSeq = 0;
 2002d04:	00810034 	movhi	r2,1024
 2002d08:	10885c04 	addi	r2,r2,8560
 2002d0c:	10000005 	stb	zero,0(r2)
							return(0);
 2002d10:	0005883a 	mov	r2,zero
 2002d14:	00000e06 	br	2002d50 <PauseSequence+0x350>
						}
						else if(keyVal_latch==KEY_MENU)
 2002d18:	e0bffe03 	ldbu	r2,-8(fp)
 2002d1c:	10800318 	cmpnei	r2,r2,12
 2002d20:	1000081e 	bne	r2,zero,2002d44 <PauseSequence+0x344>
						{
							while(keyFlag);
 2002d24:	0001883a 	nop
 2002d28:	00810034 	movhi	r2,1024
 2002d2c:	10889804 	addi	r2,r2,8800
 2002d30:	10800003 	ldbu	r2,0(r2)
 2002d34:	10803fcc 	andi	r2,r2,255
 2002d38:	103ffb1e 	bne	r2,zero,2002d28 <PauseSequence+0x328>
							return(1);
 2002d3c:	00800044 	movi	r2,1
 2002d40:	00000306 	br	2002d50 <PauseSequence+0x350>
				DisWrStr(" Interlock Occurred ");
				DisCurPos(4,1);
				DisWrStr("ENA=Resume");
				interlock_flag = 0;
			}
			while(! interlock_latch)
 2002d44:	e0bffa03 	ldbu	r2,-24(fp)
 2002d48:	103fc226 	beq	r2,zero,2002c54 <PauseSequence+0x254>
						}
					}
				}
			}
		}
	}
 2002d4c:	003f5f06 	br	2002acc <PauseSequence+0xcc>
	return(0);
}
 2002d50:	e037883a 	mov	sp,fp
 2002d54:	dfc00117 	ldw	ra,4(sp)
 2002d58:	df000017 	ldw	fp,0(sp)
 2002d5c:	dec00204 	addi	sp,sp,8
 2002d60:	f800283a 	ret

02002d64 <StopFiring>:


void StopFiring()
{
 2002d64:	defffe04 	addi	sp,sp,-8
 2002d68:	dfc00115 	stw	ra,4(sp)
 2002d6c:	df000015 	stw	fp,0(sp)
 2002d70:	d839883a 	mov	fp,sp
	Stop();
 2002d74:	20018400 	call	2001840 <Stop>
	DisClear();
 2002d78:	20006780 	call	2000678 <DisClear>
	DisCurPos(2,5);
 2002d7c:	01000084 	movi	r4,2
 2002d80:	01400144 	movi	r5,5
 2002d84:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Stopping...");
 2002d88:	01008074 	movhi	r4,513
 2002d8c:	2119de04 	addi	r4,r4,26488
 2002d90:	20006000 	call	2000600 <DisWrStr>

	//Refresh Timing Engine Registers *** Necessary!!
	reloadRegisters();
 2002d94:	2001c980 	call	2001c98 <reloadRegisters>

	//Clear Preion Fault
	clrPreionFault = 1;
 2002d98:	00810034 	movhi	r2,1024
 2002d9c:	10886804 	addi	r2,r2,8608
 2002da0:	00c00044 	movi	r3,1
 2002da4:	10c00005 	stb	r3,0(r2)
	clrPreionFault = 0;
 2002da8:	00810034 	movhi	r2,1024
 2002dac:	10886804 	addi	r2,r2,8608
 2002db0:	10000005 	stb	zero,0(r2)
	//Clear Interlock
	clrInterlock = 1;
 2002db4:	00810034 	movhi	r2,1024
 2002db8:	10886004 	addi	r2,r2,8576
 2002dbc:	00c00044 	movi	r3,1
 2002dc0:	10c00005 	stb	r3,0(r2)
	clrInterlock = 0;
 2002dc4:	00810034 	movhi	r2,1024
 2002dc8:	10886004 	addi	r2,r2,8576
 2002dcc:	10000005 	stb	zero,0(r2)
	//Clear Pause Lock
	pauseSeq = 0;
 2002dd0:	00810034 	movhi	r2,1024
 2002dd4:	10885c04 	addi	r2,r2,8560
 2002dd8:	10000005 	stb	zero,0(r2)

	//Save Counter to FRAM
	SaveCounterToFRAM();
 2002ddc:	20002cc0 	call	20002cc <SaveCounterToFRAM>

	DisCurPos(2,4);
 2002de0:	01000084 	movi	r4,2
 2002de4:	01400104 	movi	r5,4
 2002de8:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Firing Stopped");
 2002dec:	01008074 	movhi	r4,513
 2002df0:	2119e104 	addi	r4,r4,26500
 2002df4:	20006000 	call	2000600 <DisWrStr>
	delay(MSG_DELAY);
 2002df8:	01271014 	movui	r4,40000
 2002dfc:	20019dc0 	call	20019dc <delay>
	while(keyFlag);
 2002e00:	0001883a 	nop
 2002e04:	00810034 	movhi	r2,1024
 2002e08:	10889804 	addi	r2,r2,8800
 2002e0c:	10800003 	ldbu	r2,0(r2)
 2002e10:	10803fcc 	andi	r2,r2,255
 2002e14:	103ffb1e 	bne	r2,zero,2002e04 <StopFiring+0xa0>
	return;
 2002e18:	0001883a 	nop
}
 2002e1c:	e037883a 	mov	sp,fp
 2002e20:	dfc00117 	ldw	ra,4(sp)
 2002e24:	df000017 	ldw	fp,0(sp)
 2002e28:	dec00204 	addi	sp,sp,8
 2002e2c:	f800283a 	ret

02002e30 <StartFiring>:
 * Start Firing
 * Before the new interlock handler system is implemented, the Preion Fault is handled with a separate logic block which is designed in Quartus II
 */
//1: Fire Again		0:Exit
unsigned char StartFiring()
{
 2002e30:	defffb04 	addi	sp,sp,-20
 2002e34:	dfc00415 	stw	ra,16(sp)
 2002e38:	df000315 	stw	fp,12(sp)
 2002e3c:	df000304 	addi	fp,sp,12
	unsigned char isFiring_latch;
	unsigned int  seqCount_latch;
	unsigned char interlock_latch;
	unsigned char preionFault_latch;
	unsigned char HV_Inhibit_latch;
	unsigned char preionFault_flag = 0;
 2002e40:	e03ffd45 	stb	zero,-11(fp)
	unsigned char stop_flag = 0;
 2002e44:	e03ffd85 	stb	zero,-10(fp)
	DisClear();
 2002e48:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 2002e4c:	0009883a 	mov	r4,zero
 2002e50:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(2,5);
 2002e54:	01000084 	movi	r4,2
 2002e58:	01400144 	movi	r5,5
 2002e5c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Starting...");
 2002e60:	01008074 	movhi	r4,513
 2002e64:	2119e504 	addi	r4,r4,26516
 2002e68:	20006000 	call	2000600 <DisWrStr>

	//Clear Preion Fault
	clrPreionFault = 1;
 2002e6c:	00810034 	movhi	r2,1024
 2002e70:	10886804 	addi	r2,r2,8608
 2002e74:	00c00044 	movi	r3,1
 2002e78:	10c00005 	stb	r3,0(r2)
	clrPreionFault = 0;
 2002e7c:	00810034 	movhi	r2,1024
 2002e80:	10886804 	addi	r2,r2,8608
 2002e84:	10000005 	stb	zero,0(r2)
	//Clear Interlock
	clrInterlock = 1;
 2002e88:	00810034 	movhi	r2,1024
 2002e8c:	10886004 	addi	r2,r2,8576
 2002e90:	00c00044 	movi	r3,1
 2002e94:	10c00005 	stb	r3,0(r2)
	clrInterlock = 0;
 2002e98:	00810034 	movhi	r2,1024
 2002e9c:	10886004 	addi	r2,r2,8576
 2002ea0:	10000005 	stb	zero,0(r2)
	//Clear Pause Lock
	pauseSeq = 0;
 2002ea4:	00810034 	movhi	r2,1024
 2002ea8:	10885c04 	addi	r2,r2,8560
 2002eac:	10000005 	stb	zero,0(r2)

	Fire();
 2002eb0:	20017f80 	call	20017f8 <Fire>
	delay(100);
 2002eb4:	01001904 	movi	r4,100
 2002eb8:	20019dc0 	call	20019dc <delay>
	if(isFiring)
 2002ebc:	00810034 	movhi	r2,1024
 2002ec0:	10887804 	addi	r2,r2,8672
 2002ec4:	10800003 	ldbu	r2,0(r2)
 2002ec8:	10803fcc 	andi	r2,r2,255
 2002ecc:	10007026 	beq	r2,zero,2003090 <StartFiring+0x260>
	{
		showFiringInformation();
 2002ed0:	20028bc0 	call	20028bc <showFiringInformation>
		isFiring_latch = isFiring;
 2002ed4:	00810034 	movhi	r2,1024
 2002ed8:	10887804 	addi	r2,r2,8672
 2002edc:	10800003 	ldbu	r2,0(r2)
 2002ee0:	e0bffd05 	stb	r2,-12(fp)
		while(isFiring_latch)
 2002ee4:	00006806 	br	2003088 <StartFiring+0x258>
		{

			isFiring_latch = isFiring;
 2002ee8:	00810034 	movhi	r2,1024
 2002eec:	10887804 	addi	r2,r2,8672
 2002ef0:	10800003 	ldbu	r2,0(r2)
 2002ef4:	e0bffd05 	stb	r2,-12(fp)
			if(! preionFault_flag)								//Check for Preion Fault
 2002ef8:	e0bffd43 	ldbu	r2,-11(fp)
 2002efc:	1000131e 	bne	r2,zero,2002f4c <StartFiring+0x11c>
			{
				//If no preion fault, refresh counter on the screen
				seqCount_latch = seqCount;
 2002f00:	00810034 	movhi	r2,1024
 2002f04:	10885804 	addi	r2,r2,8544
 2002f08:	10800017 	ldw	r2,0(r2)
 2002f0c:	e0bffe15 	stw	r2,-8(fp)
				DisCurPos(2,10);
 2002f10:	01000084 	movi	r4,2
 2002f14:	01400284 	movi	r5,10
 2002f18:	20005400 	call	2000540 <DisCurPos>
				DisWrStr(Num5toStr5(seqCount_latch));
 2002f1c:	e13ffe17 	ldw	r4,-8(fp)
 2002f20:	20067980 	call	2006798 <Num5toStr5>
 2002f24:	1009883a 	mov	r4,r2
 2002f28:	20006000 	call	2000600 <DisWrStr>
				DisCurPos(3,11);
 2002f2c:	010000c4 	movi	r4,3
 2002f30:	014002c4 	movi	r5,11
 2002f34:	20005400 	call	2000540 <DisCurPos>
				DisWrStr(Num10toStr10(getCounter1Val()));
 2002f38:	200029c0 	call	200029c <getCounter1Val>
 2002f3c:	1009883a 	mov	r4,r2
 2002f40:	20054500 	call	2005450 <Num10toStr10>
 2002f44:	1009883a 	mov	r4,r2
 2002f48:	20006000 	call	2000600 <DisWrStr>
			}

			HV_Inhibit_latch = HV_Inhibit;
 2002f4c:	00810034 	movhi	r2,1024
 2002f50:	10885004 	addi	r2,r2,8512
 2002f54:	10800003 	ldbu	r2,0(r2)
 2002f58:	e0bfff05 	stb	r2,-4(fp)
			preionFault_latch = preionFault;
 2002f5c:	00810034 	movhi	r2,1024
 2002f60:	10886c04 	addi	r2,r2,8624
 2002f64:	10800003 	ldbu	r2,0(r2)
 2002f68:	e0bfff45 	stb	r2,-3(fp)
			if(preionFault_latch || HV_Inhibit_latch)
 2002f6c:	e0bfff43 	ldbu	r2,-3(fp)
 2002f70:	1000021e 	bne	r2,zero,2002f7c <StartFiring+0x14c>
 2002f74:	e0bfff03 	ldbu	r2,-4(fp)
 2002f78:	10000426 	beq	r2,zero,2002f8c <StartFiring+0x15c>
			{
				preionFault_flag = 1;
 2002f7c:	00800044 	movi	r2,1
 2002f80:	e0bffd45 	stb	r2,-11(fp)
				PreionFaultHandler();
 2002f84:	20029740 	call	2002974 <PreionFaultHandler>
 2002f88:	00000406 	br	2002f9c <StartFiring+0x16c>
			}
			else if(preionFault_flag)
 2002f8c:	e0bffd43 	ldbu	r2,-11(fp)
 2002f90:	10000226 	beq	r2,zero,2002f9c <StartFiring+0x16c>
			{
				preionFault_flag = 0;
 2002f94:	e03ffd45 	stb	zero,-11(fp)
				showFiringInformation();
 2002f98:	20028bc0 	call	20028bc <showFiringInformation>
			}
			interlock_latch = interlock;
 2002f9c:	00810034 	movhi	r2,1024
 2002fa0:	10886404 	addi	r2,r2,8592
 2002fa4:	10800003 	ldbu	r2,0(r2)
 2002fa8:	e0bfff85 	stb	r2,-2(fp)
			if(interlock_latch)
 2002fac:	e0bfff83 	ldbu	r2,-2(fp)
 2002fb0:	10000326 	beq	r2,zero,2002fc0 <StartFiring+0x190>
			{
				stop_flag = PauseSequence(1);
 2002fb4:	01000044 	movi	r4,1
 2002fb8:	2002a000 	call	2002a00 <PauseSequence>
 2002fbc:	e0bffd85 	stb	r2,-10(fp)
			}

			if(stop_flag)
 2002fc0:	e0bffd83 	ldbu	r2,-10(fp)
 2002fc4:	10000326 	beq	r2,zero,2002fd4 <StartFiring+0x1a4>
			{
				StopFiring();
 2002fc8:	2002d640 	call	2002d64 <StopFiring>
				return 0;
 2002fcc:	0005883a 	mov	r2,zero
 2002fd0:	00007606 	br	20031ac <StartFiring+0x37c>
			}
			if(keyFlag)
 2002fd4:	00810034 	movhi	r2,1024
 2002fd8:	10889804 	addi	r2,r2,8800
 2002fdc:	10800003 	ldbu	r2,0(r2)
 2002fe0:	10803fcc 	andi	r2,r2,255
 2002fe4:	10002826 	beq	r2,zero,2003088 <StartFiring+0x258>
			{
				delay(100);
 2002fe8:	01001904 	movi	r4,100
 2002fec:	20019dc0 	call	20019dc <delay>
				if(keyFlag)
 2002ff0:	00810034 	movhi	r2,1024
 2002ff4:	10889804 	addi	r2,r2,8800
 2002ff8:	10800003 	ldbu	r2,0(r2)
 2002ffc:	10803fcc 	andi	r2,r2,255
 2003000:	10002126 	beq	r2,zero,2003088 <StartFiring+0x258>
				{
					keyVal_latch = keyVal;
 2003004:	00810034 	movhi	r2,1024
 2003008:	10889404 	addi	r2,r2,8784
 200300c:	10800003 	ldbu	r2,0(r2)
 2003010:	e0bfffc5 	stb	r2,-1(fp)
					if(keyVal_latch == KEY_MENU)
 2003014:	e0bfffc3 	ldbu	r2,-1(fp)
 2003018:	10800318 	cmpnei	r2,r2,12
 200301c:	1000091e 	bne	r2,zero,2003044 <StartFiring+0x214>
					{
						while(keyFlag);
 2003020:	0001883a 	nop
 2003024:	00810034 	movhi	r2,1024
 2003028:	10889804 	addi	r2,r2,8800
 200302c:	10800003 	ldbu	r2,0(r2)
 2003030:	10803fcc 	andi	r2,r2,255
 2003034:	103ffb1e 	bne	r2,zero,2003024 <StartFiring+0x1f4>
						StopFiring();
 2003038:	2002d640 	call	2002d64 <StopFiring>
						return 0;
 200303c:	0005883a 	mov	r2,zero
 2003040:	00005a06 	br	20031ac <StartFiring+0x37c>
					}
					else if(keyVal_latch == KEY_ENA)
 2003044:	e0bfffc3 	ldbu	r2,-1(fp)
 2003048:	108003d8 	cmpnei	r2,r2,15
 200304c:	10000e1e 	bne	r2,zero,2003088 <StartFiring+0x258>
					{
						while(keyFlag);
 2003050:	0001883a 	nop
 2003054:	00810034 	movhi	r2,1024
 2003058:	10889804 	addi	r2,r2,8800
 200305c:	10800003 	ldbu	r2,0(r2)
 2003060:	10803fcc 	andi	r2,r2,255
 2003064:	103ffb1e 	bne	r2,zero,2003054 <StartFiring+0x224>
						stop_flag = PauseSequence(0);
 2003068:	0009883a 	mov	r4,zero
 200306c:	2002a000 	call	2002a00 <PauseSequence>
 2003070:	e0bffd85 	stb	r2,-10(fp)
						if(stop_flag)
 2003074:	e0bffd83 	ldbu	r2,-10(fp)
 2003078:	10000326 	beq	r2,zero,2003088 <StartFiring+0x258>
						{
							StopFiring();
 200307c:	2002d640 	call	2002d64 <StopFiring>
							return 0;
 2003080:	0005883a 	mov	r2,zero
 2003084:	00004906 	br	20031ac <StartFiring+0x37c>
	delay(100);
	if(isFiring)
	{
		showFiringInformation();
		isFiring_latch = isFiring;
		while(isFiring_latch)
 2003088:	e0bffd03 	ldbu	r2,-12(fp)
 200308c:	103f961e 	bne	r2,zero,2002ee8 <StartFiring+0xb8>
			}
		}
	}


	KPLED_All_Off();
 2003090:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Menu(3);
 2003094:	010000c4 	movi	r4,3
 2003098:	20011340 	call	2001134 <KPLED_Menu>
	KPLED_Fire(1);
 200309c:	01000044 	movi	r4,1
 20030a0:	20013540 	call	2001354 <KPLED_Fire>

	DisClear();
 20030a4:	20006780 	call	2000678 <DisClear>
	DisCurPos(2,5);
 20030a8:	01000084 	movi	r4,2
 20030ac:	01400144 	movi	r5,5
 20030b0:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Done Firing");
 20030b4:	01008074 	movhi	r4,513
 20030b8:	2119e804 	addi	r4,r4,26528
 20030bc:	20006000 	call	2000600 <DisWrStr>

	DisCurPos(3,3);
 20030c0:	010000c4 	movi	r4,3
 20030c4:	014000c4 	movi	r5,3
 20030c8:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("MENU=Exit");
 20030cc:	01008074 	movhi	r4,513
 20030d0:	2119eb04 	addi	r4,r4,26540
 20030d4:	20006000 	call	2000600 <DisWrStr>

	DisCurPos(4,3);
 20030d8:	01000104 	movi	r4,4
 20030dc:	014000c4 	movi	r5,3
 20030e0:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("FIRE=Fire Again");
 20030e4:	01008074 	movhi	r4,513
 20030e8:	2119ee04 	addi	r4,r4,26552
 20030ec:	20006000 	call	2000600 <DisWrStr>
 20030f0:	00000106 	br	20030f8 <StartFiring+0x2c8>
					return 1;
				}
			}
			while(keyFlag);
		}
	}
 20030f4:	0001883a 	nop
	DisCurPos(4,3);
	DisWrStr("FIRE=Fire Again");

	while(1)
	{
		if(keyFlag)
 20030f8:	00810034 	movhi	r2,1024
 20030fc:	10889804 	addi	r2,r2,8800
 2003100:	10800003 	ldbu	r2,0(r2)
 2003104:	10803fcc 	andi	r2,r2,255
 2003108:	103ffa26 	beq	r2,zero,20030f4 <StartFiring+0x2c4>
		{
			delay(100);
 200310c:	01001904 	movi	r4,100
 2003110:	20019dc0 	call	20019dc <delay>
			if(keyFlag)
 2003114:	00810034 	movhi	r2,1024
 2003118:	10889804 	addi	r2,r2,8800
 200311c:	10800003 	ldbu	r2,0(r2)
 2003120:	10803fcc 	andi	r2,r2,255
 2003124:	10001a26 	beq	r2,zero,2003190 <StartFiring+0x360>
			{
				keyVal_latch = keyVal;
 2003128:	00810034 	movhi	r2,1024
 200312c:	10889404 	addi	r2,r2,8784
 2003130:	10800003 	ldbu	r2,0(r2)
 2003134:	e0bfffc5 	stb	r2,-1(fp)
				if(keyVal_latch == KEY_MENU)
 2003138:	e0bfffc3 	ldbu	r2,-1(fp)
 200313c:	10800318 	cmpnei	r2,r2,12
 2003140:	1000081e 	bne	r2,zero,2003164 <StartFiring+0x334>
				{
					while(keyFlag);
 2003144:	0001883a 	nop
 2003148:	00810034 	movhi	r2,1024
 200314c:	10889804 	addi	r2,r2,8800
 2003150:	10800003 	ldbu	r2,0(r2)
 2003154:	10803fcc 	andi	r2,r2,255
 2003158:	103ffb1e 	bne	r2,zero,2003148 <StartFiring+0x318>
					return 0;
 200315c:	0005883a 	mov	r2,zero
 2003160:	00001206 	br	20031ac <StartFiring+0x37c>
				}
				else if(keyVal_latch == KEY_FIRE)
 2003164:	e0bfffc3 	ldbu	r2,-1(fp)
 2003168:	10800418 	cmpnei	r2,r2,16
 200316c:	1000081e 	bne	r2,zero,2003190 <StartFiring+0x360>
				{
					while(keyFlag);
 2003170:	0001883a 	nop
 2003174:	00810034 	movhi	r2,1024
 2003178:	10889804 	addi	r2,r2,8800
 200317c:	10800003 	ldbu	r2,0(r2)
 2003180:	10803fcc 	andi	r2,r2,255
 2003184:	103ffb1e 	bne	r2,zero,2003174 <StartFiring+0x344>
					return 1;
 2003188:	00800044 	movi	r2,1
 200318c:	00000706 	br	20031ac <StartFiring+0x37c>
				}
			}
			while(keyFlag);
 2003190:	0001883a 	nop
 2003194:	00810034 	movhi	r2,1024
 2003198:	10889804 	addi	r2,r2,8800
 200319c:	10800003 	ldbu	r2,0(r2)
 20031a0:	10803fcc 	andi	r2,r2,255
 20031a4:	103ffb1e 	bne	r2,zero,2003194 <StartFiring+0x364>
		}
	}
 20031a8:	003fd206 	br	20030f4 <StartFiring+0x2c4>
	return 0;
}
 20031ac:	e037883a 	mov	sp,fp
 20031b0:	dfc00117 	ldw	ra,4(sp)
 20031b4:	df000017 	ldw	fp,0(sp)
 20031b8:	dec00204 	addi	sp,sp,8
 20031bc:	f800283a 	ret

020031c0 <enterFireMenu>:

void enterFireMenu()
{
 20031c0:	defffd04 	addi	sp,sp,-12
 20031c4:	dfc00215 	stw	ra,8(sp)
 20031c8:	df000115 	stw	fp,4(sp)
 20031cc:	df000104 	addi	fp,sp,4
	if(!PreFiringErrChk())		//If PreFiringErrChk() returns 0, then there is no error.
 20031d0:	20026540 	call	2002654 <PreFiringErrChk>
 20031d4:	10803fcc 	andi	r2,r2,255
 20031d8:	1000601e 	bne	r2,zero,200335c <enterFireMenu+0x19c>
	{
		KPLED_All_Off();
 20031dc:	2000f400 	call	2000f40 <KPLED_All_Off>
		KPLED_Fire(1);
 20031e0:	01000044 	movi	r4,1
 20031e4:	20013540 	call	2001354 <KPLED_Fire>
		KPLED_Menu(3);
 20031e8:	010000c4 	movi	r4,3
 20031ec:	20011340 	call	2001134 <KPLED_Menu>

		DisClear();
 20031f0:	20006780 	call	2000678 <DisClear>
		DisShowCur(0);
 20031f4:	0009883a 	mov	r4,zero
 20031f8:	20004fc0 	call	20004fc <DisShowCur>
		DisCurPos(1,1);
 20031fc:	01000044 	movi	r4,1
 2003200:	01400044 	movi	r5,1
 2003204:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("Confirm to Fire?");
 2003208:	01008074 	movhi	r4,513
 200320c:	2119f204 	addi	r4,r4,26568
 2003210:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(2,1);
 2003214:	01000084 	movi	r4,2
 2003218:	01400044 	movi	r5,1
 200321c:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("   Yes: Press FIRE");
 2003220:	01008074 	movhi	r4,513
 2003224:	2119f704 	addi	r4,r4,26588
 2003228:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(3,1);
 200322c:	010000c4 	movi	r4,3
 2003230:	01400044 	movi	r5,1
 2003234:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("   No:  Press MENU");
 2003238:	01008074 	movhi	r4,513
 200323c:	2119fc04 	addi	r4,r4,26608
 2003240:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(4,1);
 2003244:	01000104 	movi	r4,4
 2003248:	01400044 	movi	r5,1
 200324c:	20005400 	call	2000540 <DisCurPos>
 2003250:	00000106 	br	2003258 <enterFireMenu+0x98>
						return;
					}
				}
				while(keyFlag);
			}
		}
 2003254:	0001883a 	nop
		DisCurPos(4,1);

		unsigned char keyVal_latch;
		while(1)
		{
			if(PreFiringErrChk())	//If PreFiringErrChk() returns 1, then there is  error.
 2003258:	20026540 	call	2002654 <PreFiringErrChk>
 200325c:	10803fcc 	andi	r2,r2,255
 2003260:	10003b1e 	bne	r2,zero,2003350 <enterFireMenu+0x190>
			{
				return;
			}
			KPLED_All_Off();
 2003264:	2000f400 	call	2000f40 <KPLED_All_Off>
			KPLED_Fire(1);
 2003268:	01000044 	movi	r4,1
 200326c:	20013540 	call	2001354 <KPLED_Fire>
			KPLED_Menu(3);
 2003270:	010000c4 	movi	r4,3
 2003274:	20011340 	call	2001134 <KPLED_Menu>
			if(keyFlag)
 2003278:	00810034 	movhi	r2,1024
 200327c:	10889804 	addi	r2,r2,8800
 2003280:	10800003 	ldbu	r2,0(r2)
 2003284:	10803fcc 	andi	r2,r2,255
 2003288:	103ff226 	beq	r2,zero,2003254 <enterFireMenu+0x94>
			{
				delay(100);
 200328c:	01001904 	movi	r4,100
 2003290:	20019dc0 	call	20019dc <delay>
				if(keyFlag)
 2003294:	00810034 	movhi	r2,1024
 2003298:	10889804 	addi	r2,r2,8800
 200329c:	10800003 	ldbu	r2,0(r2)
 20032a0:	10803fcc 	andi	r2,r2,255
 20032a4:	10002326 	beq	r2,zero,2003334 <enterFireMenu+0x174>
				{
					keyVal_latch = keyVal;
 20032a8:	00810034 	movhi	r2,1024
 20032ac:	10889404 	addi	r2,r2,8784
 20032b0:	10800003 	ldbu	r2,0(r2)
 20032b4:	e0bfff05 	stb	r2,-4(fp)
					if(keyVal_latch == KEY_MENU)
 20032b8:	e0bfff03 	ldbu	r2,-4(fp)
 20032bc:	10800318 	cmpnei	r2,r2,12
 20032c0:	1000071e 	bne	r2,zero,20032e0 <enterFireMenu+0x120>
					{
						while(keyFlag);
 20032c4:	0001883a 	nop
 20032c8:	00810034 	movhi	r2,1024
 20032cc:	10889804 	addi	r2,r2,8800
 20032d0:	10800003 	ldbu	r2,0(r2)
 20032d4:	10803fcc 	andi	r2,r2,255
 20032d8:	103ffb1e 	bne	r2,zero,20032c8 <enterFireMenu+0x108>
						return;
 20032dc:	00001f06 	br	200335c <enterFireMenu+0x19c>
					}
					else if(keyVal_latch == KEY_FIRE)
 20032e0:	e0bfff03 	ldbu	r2,-4(fp)
 20032e4:	10800418 	cmpnei	r2,r2,16
 20032e8:	1000121e 	bne	r2,zero,2003334 <enterFireMenu+0x174>
					{
						while(keyFlag);
 20032ec:	0001883a 	nop
 20032f0:	00810034 	movhi	r2,1024
 20032f4:	10889804 	addi	r2,r2,8800
 20032f8:	10800003 	ldbu	r2,0(r2)
 20032fc:	10803fcc 	andi	r2,r2,255
 2003300:	103ffb1e 	bne	r2,zero,20032f0 <enterFireMenu+0x130>
						if(!PreFiringErrChk())
 2003304:	20026540 	call	2002654 <PreFiringErrChk>
 2003308:	10803fcc 	andi	r2,r2,255
 200330c:	1000121e 	bne	r2,zero,2003358 <enterFireMenu+0x198>
 2003310:	00000106 	br	2003318 <enterFireMenu+0x158>
							while(1)
							{
								unsigned char fireAgain;
								fireAgain = StartFiring();	//If PreFiringErrChk() returns 1, then the fire sequence continues.
								if(fireAgain==0) break;
							}
 2003314:	0001883a 	nop
						while(keyFlag);
						if(!PreFiringErrChk())
							while(1)
							{
								unsigned char fireAgain;
								fireAgain = StartFiring();	//If PreFiringErrChk() returns 1, then the fire sequence continues.
 2003318:	2002e300 	call	2002e30 <StartFiring>
 200331c:	e0bfff45 	stb	r2,-3(fp)
								if(fireAgain==0) break;
 2003320:	e0bfff43 	ldbu	r2,-3(fp)
 2003324:	103ffb1e 	bne	r2,zero,2003314 <enterFireMenu+0x154>
 2003328:	0001883a 	nop
							}
						return;
 200332c:	0001883a 	nop
 2003330:	00000906 	br	2003358 <enterFireMenu+0x198>
					}
				}
				while(keyFlag);
 2003334:	0001883a 	nop
 2003338:	00810034 	movhi	r2,1024
 200333c:	10889804 	addi	r2,r2,8800
 2003340:	10800003 	ldbu	r2,0(r2)
 2003344:	10803fcc 	andi	r2,r2,255
 2003348:	103ffb1e 	bne	r2,zero,2003338 <enterFireMenu+0x178>
			}
		}
 200334c:	003fc106 	br	2003254 <enterFireMenu+0x94>
		unsigned char keyVal_latch;
		while(1)
		{
			if(PreFiringErrChk())	//If PreFiringErrChk() returns 1, then there is  error.
			{
				return;
 2003350:	0001883a 	nop
 2003354:	00000106 	br	200335c <enterFireMenu+0x19c>
							{
								unsigned char fireAgain;
								fireAgain = StartFiring();	//If PreFiringErrChk() returns 1, then the fire sequence continues.
								if(fireAgain==0) break;
							}
						return;
 2003358:	0001883a 	nop
				}
				while(keyFlag);
			}
		}
	}
}
 200335c:	e037883a 	mov	sp,fp
 2003360:	dfc00117 	ldw	ra,4(sp)
 2003364:	df000017 	ldw	fp,0(sp)
 2003368:	dec00204 	addi	sp,sp,8
 200336c:	f800283a 	ret

02003370 <ShowInterlockMessage>:

char *interlockNames[5] = {"LHV ", "Ht ", "RF ", "DC ", "Thy"};
void ShowInterlockMessage (unsigned int ILchnl)
{
 2003370:	defffb04 	addi	sp,sp,-20
 2003374:	dfc00415 	stw	ra,16(sp)
 2003378:	df000315 	stw	fp,12(sp)
 200337c:	df000304 	addi	fp,sp,12
 2003380:	e13fff15 	stw	r4,-4(fp)
	DisCurPos(3,1);
 2003384:	010000c4 	movi	r4,3
 2003388:	01400044 	movi	r5,1
 200338c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("INT:");
 2003390:	01008074 	movhi	r4,513
 2003394:	211a0704 	addi	r4,r4,26652
 2003398:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(3,5);
 200339c:	010000c4 	movi	r4,3
 20033a0:	01400144 	movi	r5,5
 20033a4:	20005400 	call	2000540 <DisCurPos>
	unsigned int mask = 0x1;
 20033a8:	00800044 	movi	r2,1
 20033ac:	e0bffd15 	stw	r2,-12(fp)
	int i;
	for(i = 0; i < 5; i++) {
 20033b0:	e03ffe15 	stw	zero,-8(fp)
 20033b4:	00001306 	br	2003404 <ShowInterlockMessage+0x94>
		if(ILchnl&mask) DisWrStr(interlockNames[i]);
 20033b8:	e0ffff17 	ldw	r3,-4(fp)
 20033bc:	e0bffd17 	ldw	r2,-12(fp)
 20033c0:	1884703a 	and	r2,r3,r2
 20033c4:	10000926 	beq	r2,zero,20033ec <ShowInterlockMessage+0x7c>
 20033c8:	00c08074 	movhi	r3,513
 20033cc:	18ddfe04 	addi	r3,r3,30712
 20033d0:	e0bffe17 	ldw	r2,-8(fp)
 20033d4:	1085883a 	add	r2,r2,r2
 20033d8:	1085883a 	add	r2,r2,r2
 20033dc:	1885883a 	add	r2,r3,r2
 20033e0:	10800017 	ldw	r2,0(r2)
 20033e4:	1009883a 	mov	r4,r2
 20033e8:	20006000 	call	2000600 <DisWrStr>
		mask=mask<<1;
 20033ec:	e0bffd17 	ldw	r2,-12(fp)
 20033f0:	1085883a 	add	r2,r2,r2
 20033f4:	e0bffd15 	stw	r2,-12(fp)
	DisCurPos(3,1);
	DisWrStr("INT:");
	DisCurPos(3,5);
	unsigned int mask = 0x1;
	int i;
	for(i = 0; i < 5; i++) {
 20033f8:	e0bffe17 	ldw	r2,-8(fp)
 20033fc:	10800044 	addi	r2,r2,1
 2003400:	e0bffe15 	stw	r2,-8(fp)
 2003404:	e0bffe17 	ldw	r2,-8(fp)
 2003408:	10800150 	cmplti	r2,r2,5
 200340c:	103fea1e 	bne	r2,zero,20033b8 <ShowInterlockMessage+0x48>
		if(ILchnl&mask) DisWrStr(interlockNames[i]);
		mask=mask<<1;
	}
}
 2003410:	e037883a 	mov	sp,fp
 2003414:	dfc00117 	ldw	ra,4(sp)
 2003418:	df000017 	ldw	fp,0(sp)
 200341c:	dec00204 	addi	sp,sp,8
 2003420:	f800283a 	ret

02003424 <printTime>:

/*
 * Convert time format from seconds to MM:SS
 */
void printTime(unsigned short seconds)
{
 2003424:	defffc04 	addi	sp,sp,-16
 2003428:	dfc00315 	stw	ra,12(sp)
 200342c:	df000215 	stw	fp,8(sp)
 2003430:	df000204 	addi	fp,sp,8
 2003434:	2005883a 	mov	r2,r4
 2003438:	e0bfff0d 	sth	r2,-4(fp)
	unsigned char min = seconds / 60;
 200343c:	e0bfff0b 	ldhu	r2,-4(fp)
 2003440:	1009883a 	mov	r4,r2
 2003444:	01400f04 	movi	r5,60
 2003448:	20093a80 	call	20093a8 <__udivsi3>
 200344c:	e0bffe05 	stb	r2,-8(fp)
	unsigned char sec = seconds % 60;
 2003450:	e0bfff0b 	ldhu	r2,-4(fp)
 2003454:	1009883a 	mov	r4,r2
 2003458:	01400f04 	movi	r5,60
 200345c:	20093b00 	call	20093b0 <__umodsi3>
 2003460:	e0bffe45 	stb	r2,-7(fp)

	DisWrStr(Num2toStr2(min));
 2003464:	e0bffe03 	ldbu	r2,-8(fp)
 2003468:	1009883a 	mov	r4,r2
 200346c:	20062640 	call	2006264 <Num2toStr2>
 2003470:	1009883a 	mov	r4,r2
 2003474:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(":");
 2003478:	01008074 	movhi	r4,513
 200347c:	211a0904 	addi	r4,r4,26660
 2003480:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(Num2toStr2(sec));
 2003484:	e0bffe43 	ldbu	r2,-7(fp)
 2003488:	1009883a 	mov	r4,r2
 200348c:	20062640 	call	2006264 <Num2toStr2>
 2003490:	1009883a 	mov	r4,r2
 2003494:	20006000 	call	2000600 <DisWrStr>
}
 2003498:	e037883a 	mov	sp,fp
 200349c:	dfc00117 	ldw	ra,4(sp)
 20034a0:	df000017 	ldw	fp,0(sp)
 20034a4:	dec00204 	addi	sp,sp,8
 20034a8:	f800283a 	ret

020034ac <checkHeater>:
 * If the heater is ready, return 0, which indicates OK
 * Return:
 * 		0: Ready(Done)	1: Not Ready(Warming Up)
 */
unsigned char checkHeater()
{
 20034ac:	deffff04 	addi	sp,sp,-4
 20034b0:	df000015 	stw	fp,0(sp)
 20034b4:	d839883a 	mov	fp,sp
					}
				}
			}
		}
	}
	return 0;									//Return 0, indicates that the heater is ready
 20034b8:	0005883a 	mov	r2,zero
}
 20034bc:	e037883a 	mov	sp,fp
 20034c0:	df000017 	ldw	fp,0(sp)
 20034c4:	dec00104 	addi	sp,sp,4
 20034c8:	f800283a 	ret

020034cc <entryParameterMenu>:
#include "..\inc\KPLED.h"



void entryParameterMenu(unsigned char number)
{
 20034cc:	defffd04 	addi	sp,sp,-12
 20034d0:	dfc00215 	stw	ra,8(sp)
 20034d4:	df000115 	stw	fp,4(sp)
 20034d8:	df000104 	addi	fp,sp,4
 20034dc:	2005883a 	mov	r2,r4
 20034e0:	e0bfff05 	stb	r2,-4(fp)
	KPLED_All_Off();
 20034e4:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Enter(3);
 20034e8:	010000c4 	movi	r4,3
 20034ec:	20012440 	call	2001244 <KPLED_Enter>
	KPLED_Enable(1);
 20034f0:	01000044 	movi	r4,1
 20034f4:	20012cc0 	call	20012cc <KPLED_Enable>
	KPLED_RightArrow(3);
 20034f8:	010000c4 	movi	r4,3
 20034fc:	20010200 	call	2001020 <KPLED_RightArrow>
	//KPLED_LeftArrow(3);

	DisClear();
 2003500:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 2003504:	0009883a 	mov	r4,zero
 2003508:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(1,1);
 200350c:	01000044 	movi	r4,1
 2003510:	01400044 	movi	r5,1
 2003514:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("       MENU         ");
 2003518:	01008074 	movhi	r4,513
 200351c:	211a0a04 	addi	r4,r4,26664
 2003520:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(2,1);
 2003524:	01000084 	movi	r4,2
 2003528:	01400044 	movi	r5,1
 200352c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(Num2toStr2(number));
 2003530:	e0bfff03 	ldbu	r2,-4(fp)
 2003534:	1009883a 	mov	r4,r2
 2003538:	20062640 	call	2006264 <Num2toStr2>
 200353c:	1009883a 	mov	r4,r2
 2003540:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(".Parameters");
 2003544:	01008074 	movhi	r4,513
 2003548:	211a1004 	addi	r4,r4,26688
 200354c:	20006000 	call	2000600 <DisWrStr>

	//Error Check
	if(chkAllTiming())
 2003550:	2007cdc0 	call	2007cdc <chkAllTiming>
 2003554:	10803fcc 	andi	r2,r2,255
 2003558:	10000626 	beq	r2,zero,2003574 <entryParameterMenu+0xa8>
	{
		DisCurPos(2,13);
 200355c:	01000084 	movi	r4,2
 2003560:	01400344 	movi	r5,13
 2003564:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("*");
 2003568:	01008074 	movhi	r4,513
 200356c:	211a1304 	addi	r4,r4,26700
 2003570:	20006000 	call	2000600 <DisWrStr>
	}

	DisCurPos(4,1);
 2003574:	01000104 	movi	r4,4
 2003578:	01400044 	movi	r5,1
 200357c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("        Enter  Next>");
 2003580:	01008074 	movhi	r4,513
 2003584:	211a1404 	addi	r4,r4,26704
 2003588:	20006000 	call	2000600 <DisWrStr>


}
 200358c:	e037883a 	mov	sp,fp
 2003590:	dfc00117 	ldw	ra,4(sp)
 2003594:	df000017 	ldw	fp,0(sp)
 2003598:	dec00204 	addi	sp,sp,8
 200359c:	f800283a 	ret

020035a0 <refreshParameterMenuEntry>:

void refreshParameterMenuEntry(unsigned char curr_state)
{
 20035a0:	defffd04 	addi	sp,sp,-12
 20035a4:	dfc00215 	stw	ra,8(sp)
 20035a8:	df000115 	stw	fp,4(sp)
 20035ac:	df000104 	addi	fp,sp,4
 20035b0:	2005883a 	mov	r2,r4
 20035b4:	e0bfff05 	stb	r2,-4(fp)

	if(curr_state == 1)
 20035b8:	e0bfff03 	ldbu	r2,-4(fp)
 20035bc:	10800058 	cmpnei	r2,r2,1
 20035c0:	1000021e 	bne	r2,zero,20035cc <refreshParameterMenuEntry+0x2c>
	{
		entryParameterRepRate();
 20035c4:	2007fac0 	call	2007fac <entryParameterRepRate>
 20035c8:	00000a06 	br	20035f4 <refreshParameterMenuEntry+0x54>
	}
	else if(curr_state == 2)
 20035cc:	e0bfff03 	ldbu	r2,-4(fp)
 20035d0:	10800098 	cmpnei	r2,r2,2
 20035d4:	1000021e 	bne	r2,zero,20035e0 <refreshParameterMenuEntry+0x40>
	{
		entryParameterNumOfShots();
 20035d8:	20081580 	call	2008158 <entryParameterNumOfShots>
 20035dc:	00000506 	br	20035f4 <refreshParameterMenuEntry+0x54>
	}
	else
	{
		entryParameterTiming(curr_state-2);
 20035e0:	e0bfff03 	ldbu	r2,-4(fp)
 20035e4:	10bfff84 	addi	r2,r2,-2
 20035e8:	10803fcc 	andi	r2,r2,255
 20035ec:	1009883a 	mov	r4,r2
 20035f0:	20083cc0 	call	20083cc <entryParameterTiming>
	}
}
 20035f4:	e037883a 	mov	sp,fp
 20035f8:	dfc00117 	ldw	ra,4(sp)
 20035fc:	df000017 	ldw	fp,0(sp)
 2003600:	dec00204 	addi	sp,sp,8
 2003604:	f800283a 	ret

02003608 <editParameter>:

void editParameter(unsigned char curr_state)
{
 2003608:	defffd04 	addi	sp,sp,-12
 200360c:	dfc00215 	stw	ra,8(sp)
 2003610:	df000115 	stw	fp,4(sp)
 2003614:	df000104 	addi	fp,sp,4
 2003618:	2005883a 	mov	r2,r4
 200361c:	e0bfff05 	stb	r2,-4(fp)
	if(curr_state == 1)
 2003620:	e0bfff03 	ldbu	r2,-4(fp)
 2003624:	10800058 	cmpnei	r2,r2,1
 2003628:	1000021e 	bne	r2,zero,2003634 <editParameter+0x2c>
		editParameterRepRate();
 200362c:	20080880 	call	2008088 <editParameterRepRate>
 2003630:	00000a06 	br	200365c <editParameter+0x54>
	else if(curr_state == 2)
 2003634:	e0bfff03 	ldbu	r2,-4(fp)
 2003638:	10800098 	cmpnei	r2,r2,2
 200363c:	1000021e 	bne	r2,zero,2003648 <editParameter+0x40>
		editParameterNumOfShot();
 2003640:	20082380 	call	2008238 <editParameterNumOfShot>
 2003644:	00000506 	br	200365c <editParameter+0x54>
	else
		editParamterTiming(curr_state-2);
 2003648:	e0bfff03 	ldbu	r2,-4(fp)
 200364c:	10bfff84 	addi	r2,r2,-2
 2003650:	10803fcc 	andi	r2,r2,255
 2003654:	1009883a 	mov	r4,r2
 2003658:	20086040 	call	2008604 <editParamterTiming>
}
 200365c:	e037883a 	mov	sp,fp
 2003660:	dfc00117 	ldw	ra,4(sp)
 2003664:	df000017 	ldw	fp,0(sp)
 2003668:	dec00204 	addi	sp,sp,8
 200366c:	f800283a 	ret

02003670 <enterParameterMenu>:

void enterParameterMenu()
{
 2003670:	defffd04 	addi	sp,sp,-12
 2003674:	dfc00215 	stw	ra,8(sp)
 2003678:	df000115 	stw	fp,4(sp)
 200367c:	df000104 	addi	fp,sp,4

	//initMenu();

	//showCoverPage();

	unsigned char curr_state = 1;
 2003680:	00800044 	movi	r2,1
 2003684:	e0bfff05 	stb	r2,-4(fp)
	refreshParameterMenuEntry(curr_state);
 2003688:	e0bfff03 	ldbu	r2,-4(fp)
 200368c:	1009883a 	mov	r4,r2
 2003690:	20035a00 	call	20035a0 <refreshParameterMenuEntry>
 2003694:	00000106 	br	200369c <enterParameterMenu+0x2c>
			}
			while(keyFlag);
		}


	}
 2003698:	0001883a 	nop
	unsigned char curr_state = 1;
	refreshParameterMenuEntry(curr_state);
	unsigned char keyVal_latch;
	while(1)
	{
		if(keyFlag)
 200369c:	00810034 	movhi	r2,1024
 20036a0:	10889804 	addi	r2,r2,8800
 20036a4:	10800003 	ldbu	r2,0(r2)
 20036a8:	10803fcc 	andi	r2,r2,255
 20036ac:	103ffa26 	beq	r2,zero,2003698 <enterParameterMenu+0x28>
		{
			delay(100);
 20036b0:	01001904 	movi	r4,100
 20036b4:	20019dc0 	call	20019dc <delay>
			if(keyFlag)
 20036b8:	00810034 	movhi	r2,1024
 20036bc:	10889804 	addi	r2,r2,8800
 20036c0:	10800003 	ldbu	r2,0(r2)
 20036c4:	10803fcc 	andi	r2,r2,255
 20036c8:	10004226 	beq	r2,zero,20037d4 <enterParameterMenu+0x164>
			{
				keyVal_latch = keyVal;
 20036cc:	00810034 	movhi	r2,1024
 20036d0:	10889404 	addi	r2,r2,8784
 20036d4:	10800003 	ldbu	r2,0(r2)
 20036d8:	e0bfff45 	stb	r2,-3(fp)
				if(keyVal_latch == KEY_LEFT)
 20036dc:	e0bfff43 	ldbu	r2,-3(fp)
 20036e0:	10800298 	cmpnei	r2,r2,10
 20036e4:	10000a1e 	bne	r2,zero,2003710 <enterParameterMenu+0xa0>
				{
					if(curr_state > 1)
 20036e8:	e0bfff03 	ldbu	r2,-4(fp)
 20036ec:	108000b0 	cmpltui	r2,r2,2
 20036f0:	1000381e 	bne	r2,zero,20037d4 <enterParameterMenu+0x164>
					{
						curr_state--;
 20036f4:	e0bfff03 	ldbu	r2,-4(fp)
 20036f8:	10bfffc4 	addi	r2,r2,-1
 20036fc:	e0bfff05 	stb	r2,-4(fp)
						refreshParameterMenuEntry(curr_state);
 2003700:	e0bfff03 	ldbu	r2,-4(fp)
 2003704:	1009883a 	mov	r4,r2
 2003708:	20035a00 	call	20035a0 <refreshParameterMenuEntry>
					while(keyFlag);
					enterFireMenu();
					refreshParameterMenuEntry(curr_state);
				}
			}
			while(keyFlag);
 200370c:	00003106 	br	20037d4 <enterParameterMenu+0x164>
					{
						curr_state--;
						refreshParameterMenuEntry(curr_state);
					}
				}
				else if(keyVal_latch == KEY_RIGHT)
 2003710:	e0bfff43 	ldbu	r2,-3(fp)
 2003714:	108002d8 	cmpnei	r2,r2,11
 2003718:	10000a1e 	bne	r2,zero,2003744 <enterParameterMenu+0xd4>
				{
					if(curr_state < 2+CHNL_NUM)
 200371c:	e0bfff03 	ldbu	r2,-4(fp)
 2003720:	108002e8 	cmpgeui	r2,r2,11
 2003724:	10002b1e 	bne	r2,zero,20037d4 <enterParameterMenu+0x164>
					{
						curr_state++;
 2003728:	e0bfff03 	ldbu	r2,-4(fp)
 200372c:	10800044 	addi	r2,r2,1
 2003730:	e0bfff05 	stb	r2,-4(fp)
						refreshParameterMenuEntry(curr_state);
 2003734:	e0bfff03 	ldbu	r2,-4(fp)
 2003738:	1009883a 	mov	r4,r2
 200373c:	20035a00 	call	20035a0 <refreshParameterMenuEntry>
					while(keyFlag);
					enterFireMenu();
					refreshParameterMenuEntry(curr_state);
				}
			}
			while(keyFlag);
 2003740:	00002406 	br	20037d4 <enterParameterMenu+0x164>
					{
						curr_state++;
						refreshParameterMenuEntry(curr_state);
					}
				}
				else if(keyVal_latch == KEY_EDIT)
 2003744:	e0bfff43 	ldbu	r2,-3(fp)
 2003748:	10800358 	cmpnei	r2,r2,13
 200374c:	10000a1e 	bne	r2,zero,2003778 <enterParameterMenu+0x108>
				{
					while(keyFlag);
 2003750:	0001883a 	nop
 2003754:	00810034 	movhi	r2,1024
 2003758:	10889804 	addi	r2,r2,8800
 200375c:	10800003 	ldbu	r2,0(r2)
 2003760:	10803fcc 	andi	r2,r2,255
 2003764:	103ffb1e 	bne	r2,zero,2003754 <enterParameterMenu+0xe4>
					editParameter(curr_state);
 2003768:	e0bfff03 	ldbu	r2,-4(fp)
 200376c:	1009883a 	mov	r4,r2
 2003770:	20036080 	call	2003608 <editParameter>
					while(keyFlag);
					enterFireMenu();
					refreshParameterMenuEntry(curr_state);
				}
			}
			while(keyFlag);
 2003774:	00001706 	br	20037d4 <enterParameterMenu+0x164>
				else if(keyVal_latch == KEY_EDIT)
				{
					while(keyFlag);
					editParameter(curr_state);
				}
				else if(keyVal_latch == KEY_MENU)
 2003778:	e0bfff43 	ldbu	r2,-3(fp)
 200377c:	10800318 	cmpnei	r2,r2,12
 2003780:	1000071e 	bne	r2,zero,20037a0 <enterParameterMenu+0x130>
				{
					while(keyFlag);
 2003784:	0001883a 	nop
 2003788:	00810034 	movhi	r2,1024
 200378c:	10889804 	addi	r2,r2,8800
 2003790:	10800003 	ldbu	r2,0(r2)
 2003794:	10803fcc 	andi	r2,r2,255
 2003798:	103ffb1e 	bne	r2,zero,2003788 <enterParameterMenu+0x118>
					return;
 200379c:	00001406 	br	20037f0 <enterParameterMenu+0x180>
				}
				else if(keyVal_latch == KEY_ENA)
 20037a0:	e0bfff43 	ldbu	r2,-3(fp)
 20037a4:	108003d8 	cmpnei	r2,r2,15
 20037a8:	10000a1e 	bne	r2,zero,20037d4 <enterParameterMenu+0x164>
				{
					while(keyFlag);
 20037ac:	0001883a 	nop
 20037b0:	00810034 	movhi	r2,1024
 20037b4:	10889804 	addi	r2,r2,8800
 20037b8:	10800003 	ldbu	r2,0(r2)
 20037bc:	10803fcc 	andi	r2,r2,255
 20037c0:	103ffb1e 	bne	r2,zero,20037b0 <enterParameterMenu+0x140>
					enterFireMenu();
 20037c4:	20031c00 	call	20031c0 <enterFireMenu>
					refreshParameterMenuEntry(curr_state);
 20037c8:	e0bfff03 	ldbu	r2,-4(fp)
 20037cc:	1009883a 	mov	r4,r2
 20037d0:	20035a00 	call	20035a0 <refreshParameterMenuEntry>
				}
			}
			while(keyFlag);
 20037d4:	0001883a 	nop
 20037d8:	00810034 	movhi	r2,1024
 20037dc:	10889804 	addi	r2,r2,8800
 20037e0:	10800003 	ldbu	r2,0(r2)
 20037e4:	10803fcc 	andi	r2,r2,255
 20037e8:	103ffb1e 	bne	r2,zero,20037d8 <enterParameterMenu+0x168>
		}


	}
 20037ec:	003faa06 	br	2003698 <enterParameterMenu+0x28>

}
 20037f0:	e037883a 	mov	sp,fp
 20037f4:	dfc00117 	ldw	ra,4(sp)
 20037f8:	df000017 	ldw	fp,0(sp)
 20037fc:	dec00204 	addi	sp,sp,8
 2003800:	f800283a 	ret

02003804 <StartRemoteCtrl>:
#include "..\inc\editNum2.h"

#define remoteEn *(unsigned char*)REMOTECTRL_BASE    //If remoteEn = 1, then goes into remote control mode; if remoteEn = 0, then goes into domestic control mode.

void StartRemoteCtrl()
{
 2003804:	defffd04 	addi	sp,sp,-12
 2003808:	dfc00215 	stw	ra,8(sp)
 200380c:	df000115 	stw	fp,4(sp)
 2003810:	df000104 	addi	fp,sp,4
	unsigned char keyVal_latch;

	remoteEn = 1;
 2003814:	00810034 	movhi	r2,1024
 2003818:	10888804 	addi	r2,r2,8736
 200381c:	00c00044 	movi	r3,1
 2003820:	10c00005 	stb	r3,0(r2)

	KPLED_All_Off();
 2003824:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Menu(3);
 2003828:	010000c4 	movi	r4,3
 200382c:	20011340 	call	2001134 <KPLED_Menu>

	DisClear();
 2003830:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 2003834:	0009883a 	mov	r4,zero
 2003838:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(2,1);
 200383c:	01000084 	movi	r4,2
 2003840:	01400044 	movi	r5,1
 2003844:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Controlled Remotely");
 2003848:	01008074 	movhi	r4,513
 200384c:	211a1a04 	addi	r4,r4,26728
 2003850:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(3,1);
 2003854:	010000c4 	movi	r4,3
 2003858:	01400044 	movi	r5,1
 200385c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(" Press MENU to Exit");
 2003860:	01008074 	movhi	r4,513
 2003864:	211a1f04 	addi	r4,r4,26748
 2003868:	20006000 	call	2000600 <DisWrStr>
 200386c:	00000106 	br	2003874 <StartRemoteCtrl+0x70>
					return;
				}
			}
			while(keyFlag);
		}
	}
 2003870:	0001883a 	nop
	DisCurPos(3,1);
	DisWrStr(" Press MENU to Exit");

	while(1)
	{
		if(keyFlag)
 2003874:	00810034 	movhi	r2,1024
 2003878:	10889804 	addi	r2,r2,8800
 200387c:	10800003 	ldbu	r2,0(r2)
 2003880:	10803fcc 	andi	r2,r2,255
 2003884:	103ffa26 	beq	r2,zero,2003870 <StartRemoteCtrl+0x6c>
		{
			delay(100);
 2003888:	01001904 	movi	r4,100
 200388c:	20019dc0 	call	20019dc <delay>
			if(keyFlag)
 2003890:	00810034 	movhi	r2,1024
 2003894:	10889804 	addi	r2,r2,8800
 2003898:	10800003 	ldbu	r2,0(r2)
 200389c:	10803fcc 	andi	r2,r2,255
 20038a0:	10001626 	beq	r2,zero,20038fc <StartRemoteCtrl+0xf8>
			{
				keyVal_latch = keyVal;
 20038a4:	00810034 	movhi	r2,1024
 20038a8:	10889404 	addi	r2,r2,8784
 20038ac:	10800003 	ldbu	r2,0(r2)
 20038b0:	e0bfff05 	stb	r2,-4(fp)
				if(keyVal_latch == KEY_MENU)
 20038b4:	e0bfff03 	ldbu	r2,-4(fp)
 20038b8:	10800318 	cmpnei	r2,r2,12
 20038bc:	10000f1e 	bne	r2,zero,20038fc <StartRemoteCtrl+0xf8>
				{
					remoteEn = 0;
 20038c0:	00810034 	movhi	r2,1024
 20038c4:	10888804 	addi	r2,r2,8736
 20038c8:	10000005 	stb	zero,0(r2)
					KPLED_All_Off();
 20038cc:	2000f400 	call	2000f40 <KPLED_All_Off>
					DisClear();
 20038d0:	20006780 	call	2000678 <DisClear>
					DisCurPos(2,2);
 20038d4:	01000084 	movi	r4,2
 20038d8:	01400084 	movi	r5,2
 20038dc:	20005400 	call	2000540 <DisCurPos>
					DisWrStr("Remote Terminated");
 20038e0:	01008074 	movhi	r4,513
 20038e4:	211a2404 	addi	r4,r4,26768
 20038e8:	20006000 	call	2000600 <DisWrStr>
					delay(MSG_DELAY);
 20038ec:	01271014 	movui	r4,40000
 20038f0:	20019dc0 	call	20019dc <delay>
					return;
 20038f4:	0001883a 	nop
 20038f8:	00000706 	br	2003918 <StartRemoteCtrl+0x114>
				}
			}
			while(keyFlag);
 20038fc:	0001883a 	nop
 2003900:	00810034 	movhi	r2,1024
 2003904:	10889804 	addi	r2,r2,8800
 2003908:	10800003 	ldbu	r2,0(r2)
 200390c:	10803fcc 	andi	r2,r2,255
 2003910:	103ffb1e 	bne	r2,zero,2003900 <StartRemoteCtrl+0xfc>
		}
	}
 2003914:	003fd606 	br	2003870 <StartRemoteCtrl+0x6c>
}
 2003918:	e037883a 	mov	sp,fp
 200391c:	dfc00117 	ldw	ra,4(sp)
 2003920:	df000017 	ldw	fp,0(sp)
 2003924:	dec00204 	addi	sp,sp,8
 2003928:	f800283a 	ret

0200392c <entryRemoteMenu>:

void entryRemoteMenu(unsigned char number)
{
 200392c:	defffd04 	addi	sp,sp,-12
 2003930:	dfc00215 	stw	ra,8(sp)
 2003934:	df000115 	stw	fp,4(sp)
 2003938:	df000104 	addi	fp,sp,4
 200393c:	2005883a 	mov	r2,r4
 2003940:	e0bfff05 	stb	r2,-4(fp)
	KPLED_All_Off();
 2003944:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Enter(3);
 2003948:	010000c4 	movi	r4,3
 200394c:	20012440 	call	2001244 <KPLED_Enter>
	KPLED_Enable(1);
 2003950:	01000044 	movi	r4,1
 2003954:	20012cc0 	call	20012cc <KPLED_Enable>
	KPLED_LeftArrow(3);
 2003958:	010000c4 	movi	r4,3
 200395c:	20010ac0 	call	20010ac <KPLED_LeftArrow>
	KPLED_RightArrow(3);
 2003960:	010000c4 	movi	r4,3
 2003964:	20010200 	call	2001020 <KPLED_RightArrow>

	DisClear();
 2003968:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 200396c:	0009883a 	mov	r4,zero
 2003970:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(1,1);
 2003974:	01000044 	movi	r4,1
 2003978:	01400044 	movi	r5,1
 200397c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("       MENU         ");
 2003980:	01008074 	movhi	r4,513
 2003984:	211a2904 	addi	r4,r4,26788
 2003988:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(2,1);
 200398c:	01000084 	movi	r4,2
 2003990:	01400044 	movi	r5,1
 2003994:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(Num2toStr2(number));
 2003998:	e0bfff03 	ldbu	r2,-4(fp)
 200399c:	1009883a 	mov	r4,r2
 20039a0:	20062640 	call	2006264 <Num2toStr2>
 20039a4:	1009883a 	mov	r4,r2
 20039a8:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(".Remote Control");
 20039ac:	01008074 	movhi	r4,513
 20039b0:	211a2f04 	addi	r4,r4,26812
 20039b4:	20006000 	call	2000600 <DisWrStr>

	DisCurPos(4,1);
 20039b8:	01000104 	movi	r4,4
 20039bc:	01400044 	movi	r5,1
 20039c0:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("<Prev   Enter  Next>");
 20039c4:	01008074 	movhi	r4,513
 20039c8:	211a3304 	addi	r4,r4,26828
 20039cc:	20006000 	call	2000600 <DisWrStr>
}
 20039d0:	e037883a 	mov	sp,fp
 20039d4:	dfc00117 	ldw	ra,4(sp)
 20039d8:	df000017 	ldw	fp,0(sp)
 20039dc:	dec00204 	addi	sp,sp,8
 20039e0:	f800283a 	ret

020039e4 <enterRemoteMenu>:

void enterRemoteMenu()
{
 20039e4:	defffd04 	addi	sp,sp,-12
 20039e8:	dfc00215 	stw	ra,8(sp)
 20039ec:	df000115 	stw	fp,4(sp)
 20039f0:	df000104 	addi	fp,sp,4
	KPLED_All_Off();
 20039f4:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Enter(3);
 20039f8:	010000c4 	movi	r4,3
 20039fc:	20012440 	call	2001244 <KPLED_Enter>
	KPLED_Menu(3);
 2003a00:	010000c4 	movi	r4,3
 2003a04:	20011340 	call	2001134 <KPLED_Menu>

	DisClear();
 2003a08:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 2003a0c:	0009883a 	mov	r4,zero
 2003a10:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(1,1);
 2003a14:	01000044 	movi	r4,1
 2003a18:	01400044 	movi	r5,1
 2003a1c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Enable Remote Ctrl?");
 2003a20:	01008074 	movhi	r4,513
 2003a24:	211a3904 	addi	r4,r4,26852
 2003a28:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(2,1);
 2003a2c:	01000084 	movi	r4,2
 2003a30:	01400044 	movi	r5,1
 2003a34:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("   Yes: Press ENTER");
 2003a38:	01008074 	movhi	r4,513
 2003a3c:	211a3e04 	addi	r4,r4,26872
 2003a40:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(3,1);
 2003a44:	010000c4 	movi	r4,3
 2003a48:	01400044 	movi	r5,1
 2003a4c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("   No:  Press MENU");
 2003a50:	01008074 	movhi	r4,513
 2003a54:	211a4304 	addi	r4,r4,26892
 2003a58:	20006000 	call	2000600 <DisWrStr>
 2003a5c:	00000106 	br	2003a64 <enterRemoteMenu+0x80>
					return;
				}
			}
			while(keyFlag);
		}
	}
 2003a60:	0001883a 	nop
	DisWrStr("   No:  Press MENU");

	unsigned char keyVal_latch;
	while(1)
	{
		if(keyFlag)
 2003a64:	00810034 	movhi	r2,1024
 2003a68:	10889804 	addi	r2,r2,8800
 2003a6c:	10800003 	ldbu	r2,0(r2)
 2003a70:	10803fcc 	andi	r2,r2,255
 2003a74:	103ffa26 	beq	r2,zero,2003a60 <enterRemoteMenu+0x7c>
		{
			delay(100);
 2003a78:	01001904 	movi	r4,100
 2003a7c:	20019dc0 	call	20019dc <delay>
			if(keyFlag)
 2003a80:	00810034 	movhi	r2,1024
 2003a84:	10889804 	addi	r2,r2,8800
 2003a88:	10800003 	ldbu	r2,0(r2)
 2003a8c:	10803fcc 	andi	r2,r2,255
 2003a90:	10001326 	beq	r2,zero,2003ae0 <enterRemoteMenu+0xfc>
			{
				keyVal_latch = keyVal;
 2003a94:	00810034 	movhi	r2,1024
 2003a98:	10889404 	addi	r2,r2,8784
 2003a9c:	10800003 	ldbu	r2,0(r2)
 2003aa0:	e0bfff05 	stb	r2,-4(fp)
				if(keyVal_latch == KEY_MENU)
 2003aa4:	e0bfff03 	ldbu	r2,-4(fp)
 2003aa8:	10800318 	cmpnei	r2,r2,12
 2003aac:	10001326 	beq	r2,zero,2003afc <enterRemoteMenu+0x118>
				{
					return;
				}
				else if(keyVal_latch == KEY_ENTER)
 2003ab0:	e0bfff03 	ldbu	r2,-4(fp)
 2003ab4:	10800398 	cmpnei	r2,r2,14
 2003ab8:	1000091e 	bne	r2,zero,2003ae0 <enterRemoteMenu+0xfc>
				{
					while(keyFlag);
 2003abc:	0001883a 	nop
 2003ac0:	00810034 	movhi	r2,1024
 2003ac4:	10889804 	addi	r2,r2,8800
 2003ac8:	10800003 	ldbu	r2,0(r2)
 2003acc:	10803fcc 	andi	r2,r2,255
 2003ad0:	103ffb1e 	bne	r2,zero,2003ac0 <enterRemoteMenu+0xdc>
					StartRemoteCtrl();
 2003ad4:	20038040 	call	2003804 <StartRemoteCtrl>
					return;
 2003ad8:	0001883a 	nop
 2003adc:	00000806 	br	2003b00 <enterRemoteMenu+0x11c>
				}
			}
			while(keyFlag);
 2003ae0:	0001883a 	nop
 2003ae4:	00810034 	movhi	r2,1024
 2003ae8:	10889804 	addi	r2,r2,8800
 2003aec:	10800003 	ldbu	r2,0(r2)
 2003af0:	10803fcc 	andi	r2,r2,255
 2003af4:	103ffb1e 	bne	r2,zero,2003ae4 <enterRemoteMenu+0x100>
		}
	}
 2003af8:	003fd906 	br	2003a60 <enterRemoteMenu+0x7c>
			if(keyFlag)
			{
				keyVal_latch = keyVal;
				if(keyVal_latch == KEY_MENU)
				{
					return;
 2003afc:	0001883a 	nop
				}
			}
			while(keyFlag);
		}
	}
}
 2003b00:	e037883a 	mov	sp,fp
 2003b04:	dfc00117 	ldw	ra,4(sp)
 2003b08:	df000017 	ldw	fp,0(sp)
 2003b0c:	dec00204 	addi	sp,sp,8
 2003b10:	f800283a 	ret

02003b14 <entrySaveLoadMenu>:
#include "..\inc\comInterface.h"
#include "..\inc\KPLED.h"
#include "..\inc\editNum2.h"

void entrySaveLoadMenu(unsigned char number)
{
 2003b14:	defffd04 	addi	sp,sp,-12
 2003b18:	dfc00215 	stw	ra,8(sp)
 2003b1c:	df000115 	stw	fp,4(sp)
 2003b20:	df000104 	addi	fp,sp,4
 2003b24:	2005883a 	mov	r2,r4
 2003b28:	e0bfff05 	stb	r2,-4(fp)
	KPLED_All_Off();
 2003b2c:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Enter(3);
 2003b30:	010000c4 	movi	r4,3
 2003b34:	20012440 	call	2001244 <KPLED_Enter>
	KPLED_Enable(1);
 2003b38:	01000044 	movi	r4,1
 2003b3c:	20012cc0 	call	20012cc <KPLED_Enable>
	KPLED_LeftArrow(3);
 2003b40:	010000c4 	movi	r4,3
 2003b44:	20010ac0 	call	20010ac <KPLED_LeftArrow>
	KPLED_RightArrow(3);
 2003b48:	010000c4 	movi	r4,3
 2003b4c:	20010200 	call	2001020 <KPLED_RightArrow>
	DisClear();
 2003b50:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 2003b54:	0009883a 	mov	r4,zero
 2003b58:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(1,1);
 2003b5c:	01000044 	movi	r4,1
 2003b60:	01400044 	movi	r5,1
 2003b64:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("       MENU         ");
 2003b68:	01008074 	movhi	r4,513
 2003b6c:	211a4804 	addi	r4,r4,26912
 2003b70:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(2,1);
 2003b74:	01000084 	movi	r4,2
 2003b78:	01400044 	movi	r5,1
 2003b7c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(Num2toStr2(number));
 2003b80:	e0bfff03 	ldbu	r2,-4(fp)
 2003b84:	1009883a 	mov	r4,r2
 2003b88:	20062640 	call	2006264 <Num2toStr2>
 2003b8c:	1009883a 	mov	r4,r2
 2003b90:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(".Load/Save Setting");
 2003b94:	01008074 	movhi	r4,513
 2003b98:	211a4e04 	addi	r4,r4,26936
 2003b9c:	20006000 	call	2000600 <DisWrStr>

	DisCurPos(4,1);
 2003ba0:	01000104 	movi	r4,4
 2003ba4:	01400044 	movi	r5,1
 2003ba8:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("<Prev   Enter  Next>");
 2003bac:	01008074 	movhi	r4,513
 2003bb0:	211a5304 	addi	r4,r4,26956
 2003bb4:	20006000 	call	2000600 <DisWrStr>
}
 2003bb8:	e037883a 	mov	sp,fp
 2003bbc:	dfc00117 	ldw	ra,4(sp)
 2003bc0:	df000017 	ldw	fp,0(sp)
 2003bc4:	dec00204 	addi	sp,sp,8
 2003bc8:	f800283a 	ret

02003bcc <SaveToEEPROM>:

void SaveToEEPROM()
{
 2003bcc:	defffc04 	addi	sp,sp,-16
 2003bd0:	dfc00315 	stw	ra,12(sp)
 2003bd4:	df000215 	stw	fp,8(sp)
 2003bd8:	dc000115 	stw	r16,4(sp)
 2003bdc:	df000104 	addi	fp,sp,4
	KPLED_All_Off();
 2003be0:	2000f400 	call	2000f40 <KPLED_All_Off>

	DisClear();
 2003be4:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 2003be8:	0009883a 	mov	r4,zero
 2003bec:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(2,1);
 2003bf0:	01000084 	movi	r4,2
 2003bf4:	01400044 	movi	r5,1
 2003bf8:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("      Saving...     ");
 2003bfc:	01008074 	movhi	r4,513
 2003c00:	211a5904 	addi	r4,r4,26980
 2003c04:	20006000 	call	2000600 <DisWrStr>
	WriteEEPROM32Bits(1,LoadRAMRepRate());
 2003c08:	2001a680 	call	2001a68 <LoadRAMRepRate>
 2003c0c:	01000044 	movi	r4,1
 2003c10:	100b883a 	mov	r5,r2
 2003c14:	20017240 	call	2001724 <WriteEEPROM32Bits>
	WriteEEPROM32Bits(2,LoadRAMShots());
 2003c18:	2001a940 	call	2001a94 <LoadRAMShots>
 2003c1c:	01000084 	movi	r4,2
 2003c20:	100b883a 	mov	r5,r2
 2003c24:	20017240 	call	2001724 <WriteEEPROM32Bits>
	unsigned char i;
	for(i=1;i<=CHNL_NUM;i++)
 2003c28:	00800044 	movi	r2,1
 2003c2c:	e0bfff05 	stb	r2,-4(fp)
 2003c30:	00001706 	br	2003c90 <SaveToEEPROM+0xc4>
	{
		WriteEEPROM32Bits(2*i+1,LoadRAMStartTime(i));
 2003c34:	e0bfff03 	ldbu	r2,-4(fp)
 2003c38:	1085883a 	add	r2,r2,r2
 2003c3c:	10800044 	addi	r2,r2,1
 2003c40:	14003fcc 	andi	r16,r2,255
 2003c44:	e0bfff03 	ldbu	r2,-4(fp)
 2003c48:	1009883a 	mov	r4,r2
 2003c4c:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 2003c50:	8009883a 	mov	r4,r16
 2003c54:	100b883a 	mov	r5,r2
 2003c58:	20017240 	call	2001724 <WriteEEPROM32Bits>
		WriteEEPROM32Bits(2*i+2,LoadRAMEndTime(i));
 2003c5c:	e0bfff03 	ldbu	r2,-4(fp)
 2003c60:	10800044 	addi	r2,r2,1
 2003c64:	1085883a 	add	r2,r2,r2
 2003c68:	14003fcc 	andi	r16,r2,255
 2003c6c:	e0bfff03 	ldbu	r2,-4(fp)
 2003c70:	1009883a 	mov	r4,r2
 2003c74:	2001b000 	call	2001b00 <LoadRAMEndTime>
 2003c78:	8009883a 	mov	r4,r16
 2003c7c:	100b883a 	mov	r5,r2
 2003c80:	20017240 	call	2001724 <WriteEEPROM32Bits>
	DisCurPos(2,1);
	DisWrStr("      Saving...     ");
	WriteEEPROM32Bits(1,LoadRAMRepRate());
	WriteEEPROM32Bits(2,LoadRAMShots());
	unsigned char i;
	for(i=1;i<=CHNL_NUM;i++)
 2003c84:	e0bfff03 	ldbu	r2,-4(fp)
 2003c88:	10800044 	addi	r2,r2,1
 2003c8c:	e0bfff05 	stb	r2,-4(fp)
 2003c90:	e0bfff03 	ldbu	r2,-4(fp)
 2003c94:	108002b0 	cmpltui	r2,r2,10
 2003c98:	103fe61e 	bne	r2,zero,2003c34 <SaveToEEPROM+0x68>
	{
		WriteEEPROM32Bits(2*i+1,LoadRAMStartTime(i));
		WriteEEPROM32Bits(2*i+2,LoadRAMEndTime(i));
	}
	ResetRAMFromEEPROM();
 2003c9c:	20018880 	call	2001888 <ResetRAMFromEEPROM>
	DisCurPos(3,1);
 2003ca0:	010000c4 	movi	r4,3
 2003ca4:	01400044 	movi	r5,1
 2003ca8:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("        Done!       ");
 2003cac:	01008074 	movhi	r4,513
 2003cb0:	211a5f04 	addi	r4,r4,27004
 2003cb4:	20006000 	call	2000600 <DisWrStr>
	delay(MSG_DELAY);
 2003cb8:	01271014 	movui	r4,40000
 2003cbc:	20019dc0 	call	20019dc <delay>
}
 2003cc0:	e037883a 	mov	sp,fp
 2003cc4:	dfc00217 	ldw	ra,8(sp)
 2003cc8:	df000117 	ldw	fp,4(sp)
 2003ccc:	dc000017 	ldw	r16,0(sp)
 2003cd0:	dec00304 	addi	sp,sp,12
 2003cd4:	f800283a 	ret

02003cd8 <refreshSaveLoadMenuPage>:

void refreshSaveLoadMenuPage(unsigned char curr_state)
{
 2003cd8:	defffd04 	addi	sp,sp,-12
 2003cdc:	dfc00215 	stw	ra,8(sp)
 2003ce0:	df000115 	stw	fp,4(sp)
 2003ce4:	df000104 	addi	fp,sp,4
 2003ce8:	2005883a 	mov	r2,r4
 2003cec:	e0bfff05 	stb	r2,-4(fp)
	if(curr_state == 1)
 2003cf0:	e0bfff03 	ldbu	r2,-4(fp)
 2003cf4:	10800058 	cmpnei	r2,r2,1
 2003cf8:	10001f1e 	bne	r2,zero,2003d78 <refreshSaveLoadMenuPage+0xa0>
	{
		KPLED_All_Off();
 2003cfc:	2000f400 	call	2000f40 <KPLED_All_Off>
		KPLED_Enter(3);
 2003d00:	010000c4 	movi	r4,3
 2003d04:	20012440 	call	2001244 <KPLED_Enter>
		KPLED_RightArrow(3);
 2003d08:	010000c4 	movi	r4,3
 2003d0c:	20010200 	call	2001020 <KPLED_RightArrow>
		KPLED_Menu(3);
 2003d10:	010000c4 	movi	r4,3
 2003d14:	20011340 	call	2001134 <KPLED_Menu>
		KPLED_Enable(1);
 2003d18:	01000044 	movi	r4,1
 2003d1c:	20012cc0 	call	20012cc <KPLED_Enable>

		DisClear();
 2003d20:	20006780 	call	2000678 <DisClear>
		DisShowCur(0);
 2003d24:	0009883a 	mov	r4,zero
 2003d28:	20004fc0 	call	20004fc <DisShowCur>
		DisCurPos(1,1);
 2003d2c:	01000044 	movi	r4,1
 2003d30:	01400044 	movi	r5,1
 2003d34:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("     Load/Save      ");
 2003d38:	01008074 	movhi	r4,513
 2003d3c:	211a6504 	addi	r4,r4,27028
 2003d40:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(2,1);
 2003d44:	01000084 	movi	r4,2
 2003d48:	01400044 	movi	r5,1
 2003d4c:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("Load Settings");
 2003d50:	01008074 	movhi	r4,513
 2003d54:	211a6b04 	addi	r4,r4,27052
 2003d58:	20006000 	call	2000600 <DisWrStr>

		DisCurPos(4,1);
 2003d5c:	01000104 	movi	r4,4
 2003d60:	01400044 	movi	r5,1
 2003d64:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("        Enter  Next>");
 2003d68:	01008074 	movhi	r4,513
 2003d6c:	211a6f04 	addi	r4,r4,27068
 2003d70:	20006000 	call	2000600 <DisWrStr>
 2003d74:	00002106 	br	2003dfc <refreshSaveLoadMenuPage+0x124>
	}
	else if(curr_state == 2)
 2003d78:	e0bfff03 	ldbu	r2,-4(fp)
 2003d7c:	10800098 	cmpnei	r2,r2,2
 2003d80:	10001e1e 	bne	r2,zero,2003dfc <refreshSaveLoadMenuPage+0x124>
	{
		KPLED_All_Off();
 2003d84:	2000f400 	call	2000f40 <KPLED_All_Off>
		KPLED_Enter(3);
 2003d88:	010000c4 	movi	r4,3
 2003d8c:	20012440 	call	2001244 <KPLED_Enter>
		KPLED_LeftArrow(3);
 2003d90:	010000c4 	movi	r4,3
 2003d94:	20010ac0 	call	20010ac <KPLED_LeftArrow>
		KPLED_Menu(3);
 2003d98:	010000c4 	movi	r4,3
 2003d9c:	20011340 	call	2001134 <KPLED_Menu>
		KPLED_Enable(1);
 2003da0:	01000044 	movi	r4,1
 2003da4:	20012cc0 	call	20012cc <KPLED_Enable>

		DisClear();
 2003da8:	20006780 	call	2000678 <DisClear>
		DisShowCur(0);
 2003dac:	0009883a 	mov	r4,zero
 2003db0:	20004fc0 	call	20004fc <DisShowCur>
		DisCurPos(1,1);
 2003db4:	01000044 	movi	r4,1
 2003db8:	01400044 	movi	r5,1
 2003dbc:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("     Load/Save      ");
 2003dc0:	01008074 	movhi	r4,513
 2003dc4:	211a6504 	addi	r4,r4,27028
 2003dc8:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(2,1);
 2003dcc:	01000084 	movi	r4,2
 2003dd0:	01400044 	movi	r5,1
 2003dd4:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("Save Settings");
 2003dd8:	01008074 	movhi	r4,513
 2003ddc:	211a7504 	addi	r4,r4,27092
 2003de0:	20006000 	call	2000600 <DisWrStr>

		DisCurPos(4,1);
 2003de4:	01000104 	movi	r4,4
 2003de8:	01400044 	movi	r5,1
 2003dec:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("<Prev   Enter       ");
 2003df0:	01008074 	movhi	r4,513
 2003df4:	211a7904 	addi	r4,r4,27108
 2003df8:	20006000 	call	2000600 <DisWrStr>
	}
}
 2003dfc:	e037883a 	mov	sp,fp
 2003e00:	dfc00117 	ldw	ra,4(sp)
 2003e04:	df000017 	ldw	fp,0(sp)
 2003e08:	dec00204 	addi	sp,sp,8
 2003e0c:	f800283a 	ret

02003e10 <enterSaveLoadMenuPage>:

void enterSaveLoadMenuPage(unsigned char curr_state)
{
 2003e10:	defffc04 	addi	sp,sp,-16
 2003e14:	dfc00315 	stw	ra,12(sp)
 2003e18:	df000215 	stw	fp,8(sp)
 2003e1c:	df000204 	addi	fp,sp,8
 2003e20:	2005883a 	mov	r2,r4
 2003e24:	e0bfff05 	stb	r2,-4(fp)
	if(curr_state == 1)
 2003e28:	e0bfff03 	ldbu	r2,-4(fp)
 2003e2c:	10800058 	cmpnei	r2,r2,1
 2003e30:	1000531e 	bne	r2,zero,2003f80 <enterSaveLoadMenuPage+0x170>
	{
		KPLED_All_Off();
 2003e34:	2000f400 	call	2000f40 <KPLED_All_Off>
		KPLED_Enter(3);
 2003e38:	010000c4 	movi	r4,3
 2003e3c:	20012440 	call	2001244 <KPLED_Enter>
		KPLED_Menu(3);
 2003e40:	010000c4 	movi	r4,3
 2003e44:	20011340 	call	2001134 <KPLED_Menu>

		DisClear();
 2003e48:	20006780 	call	2000678 <DisClear>
		DisShowCur(0);
 2003e4c:	0009883a 	mov	r4,zero
 2003e50:	20004fc0 	call	20004fc <DisShowCur>
		DisCurPos(1,1);
 2003e54:	01000044 	movi	r4,1
 2003e58:	01400044 	movi	r5,1
 2003e5c:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("Confirm to Load?");
 2003e60:	01008074 	movhi	r4,513
 2003e64:	211a7f04 	addi	r4,r4,27132
 2003e68:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(2,1);
 2003e6c:	01000084 	movi	r4,2
 2003e70:	01400044 	movi	r5,1
 2003e74:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("   Yes: Press ENTER");
 2003e78:	01008074 	movhi	r4,513
 2003e7c:	211a8404 	addi	r4,r4,27152
 2003e80:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(3,1);
 2003e84:	010000c4 	movi	r4,3
 2003e88:	01400044 	movi	r5,1
 2003e8c:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("   No:  Press MENU");
 2003e90:	01008074 	movhi	r4,513
 2003e94:	211a8904 	addi	r4,r4,27172
 2003e98:	20006000 	call	2000600 <DisWrStr>
 2003e9c:	00000106 	br	2003ea4 <enterSaveLoadMenuPage+0x94>
						return;
					}
				}
				while(keyFlag);
			}
		}
 2003ea0:	0001883a 	nop
		DisWrStr("   No:  Press MENU");

		unsigned char keyVal_latch;
		while(1)
		{
			if(keyFlag)
 2003ea4:	00810034 	movhi	r2,1024
 2003ea8:	10889804 	addi	r2,r2,8800
 2003eac:	10800003 	ldbu	r2,0(r2)
 2003eb0:	10803fcc 	andi	r2,r2,255
 2003eb4:	103ffa26 	beq	r2,zero,2003ea0 <enterSaveLoadMenuPage+0x90>
			{
				delay(100);
 2003eb8:	01001904 	movi	r4,100
 2003ebc:	20019dc0 	call	20019dc <delay>
				if(keyFlag)
 2003ec0:	00810034 	movhi	r2,1024
 2003ec4:	10889804 	addi	r2,r2,8800
 2003ec8:	10800003 	ldbu	r2,0(r2)
 2003ecc:	10803fcc 	andi	r2,r2,255
 2003ed0:	10002426 	beq	r2,zero,2003f64 <enterSaveLoadMenuPage+0x154>
				{
					keyVal_latch = keyVal;
 2003ed4:	00810034 	movhi	r2,1024
 2003ed8:	10889404 	addi	r2,r2,8784
 2003edc:	10800003 	ldbu	r2,0(r2)
 2003ee0:	e0bffe05 	stb	r2,-8(fp)
					if(keyVal_latch == KEY_MENU)
 2003ee4:	e0bffe03 	ldbu	r2,-8(fp)
 2003ee8:	10800318 	cmpnei	r2,r2,12
 2003eec:	10006926 	beq	r2,zero,2004094 <enterSaveLoadMenuPage+0x284>
					{
						return;
					}
					else if(keyVal_latch == KEY_ENTER)
 2003ef0:	e0bffe03 	ldbu	r2,-8(fp)
 2003ef4:	10800398 	cmpnei	r2,r2,14
 2003ef8:	10001a1e 	bne	r2,zero,2003f64 <enterSaveLoadMenuPage+0x154>
					{
						while(keyFlag);
 2003efc:	0001883a 	nop
 2003f00:	00810034 	movhi	r2,1024
 2003f04:	10889804 	addi	r2,r2,8800
 2003f08:	10800003 	ldbu	r2,0(r2)
 2003f0c:	10803fcc 	andi	r2,r2,255
 2003f10:	103ffb1e 	bne	r2,zero,2003f00 <enterSaveLoadMenuPage+0xf0>
						DisClear();
 2003f14:	20006780 	call	2000678 <DisClear>
						DisShowCur(0);
 2003f18:	0009883a 	mov	r4,zero
 2003f1c:	20004fc0 	call	20004fc <DisShowCur>
						DisCurPos(2,1);
 2003f20:	01000084 	movi	r4,2
 2003f24:	01400044 	movi	r5,1
 2003f28:	20005400 	call	2000540 <DisCurPos>
						DisWrStr("      Loading...    ");
 2003f2c:	01008074 	movhi	r4,513
 2003f30:	211a8e04 	addi	r4,r4,27192
 2003f34:	20006000 	call	2000600 <DisWrStr>
						ResetRAMFromEEPROM();
 2003f38:	20018880 	call	2001888 <ResetRAMFromEEPROM>
						refreshErrFlags();
 2003f3c:	2007bf80 	call	2007bf8 <refreshErrFlags>
						DisCurPos(3,1);
 2003f40:	010000c4 	movi	r4,3
 2003f44:	01400044 	movi	r5,1
 2003f48:	20005400 	call	2000540 <DisCurPos>
						DisWrStr("        Done!       ");
 2003f4c:	01008074 	movhi	r4,513
 2003f50:	211a5f04 	addi	r4,r4,27004
 2003f54:	20006000 	call	2000600 <DisWrStr>
						delay(MSG_DELAY);
 2003f58:	01271014 	movui	r4,40000
 2003f5c:	20019dc0 	call	20019dc <delay>
						return;
 2003f60:	00004f06 	br	20040a0 <enterSaveLoadMenuPage+0x290>
					}
				}
				while(keyFlag);
 2003f64:	0001883a 	nop
 2003f68:	00810034 	movhi	r2,1024
 2003f6c:	10889804 	addi	r2,r2,8800
 2003f70:	10800003 	ldbu	r2,0(r2)
 2003f74:	10803fcc 	andi	r2,r2,255
 2003f78:	103ffb1e 	bne	r2,zero,2003f68 <enterSaveLoadMenuPage+0x158>
			}
		}
 2003f7c:	003fc806 	br	2003ea0 <enterSaveLoadMenuPage+0x90>
	}
	else if(curr_state == 2)
 2003f80:	e0bfff03 	ldbu	r2,-4(fp)
 2003f84:	10800098 	cmpnei	r2,r2,2
 2003f88:	1000451e 	bne	r2,zero,20040a0 <enterSaveLoadMenuPage+0x290>
	{
		KPLED_All_Off();
 2003f8c:	2000f400 	call	2000f40 <KPLED_All_Off>
		KPLED_Enter(3);
 2003f90:	010000c4 	movi	r4,3
 2003f94:	20012440 	call	2001244 <KPLED_Enter>
		KPLED_Menu(3);
 2003f98:	010000c4 	movi	r4,3
 2003f9c:	20011340 	call	2001134 <KPLED_Menu>

		DisClear();
 2003fa0:	20006780 	call	2000678 <DisClear>
		DisShowCur(0);
 2003fa4:	0009883a 	mov	r4,zero
 2003fa8:	20004fc0 	call	20004fc <DisShowCur>
		DisCurPos(1,1);
 2003fac:	01000044 	movi	r4,1
 2003fb0:	01400044 	movi	r5,1
 2003fb4:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("Confirm to Save?");
 2003fb8:	01008074 	movhi	r4,513
 2003fbc:	211a9404 	addi	r4,r4,27216
 2003fc0:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(2,1);
 2003fc4:	01000084 	movi	r4,2
 2003fc8:	01400044 	movi	r5,1
 2003fcc:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("   Yes: Press ENTER");
 2003fd0:	01008074 	movhi	r4,513
 2003fd4:	211a8404 	addi	r4,r4,27152
 2003fd8:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(3,1);
 2003fdc:	010000c4 	movi	r4,3
 2003fe0:	01400044 	movi	r5,1
 2003fe4:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("   No:  Press MENU");
 2003fe8:	01008074 	movhi	r4,513
 2003fec:	211a8904 	addi	r4,r4,27172
 2003ff0:	20006000 	call	2000600 <DisWrStr>
 2003ff4:	00000106 	br	2003ffc <enterSaveLoadMenuPage+0x1ec>
						return;
					}
				}
				while(keyFlag);
			}
		}
 2003ff8:	0001883a 	nop
		DisWrStr("   No:  Press MENU");

		unsigned char keyVal_latch;
		while(1)
		{
			if(keyFlag)
 2003ffc:	00810034 	movhi	r2,1024
 2004000:	10889804 	addi	r2,r2,8800
 2004004:	10800003 	ldbu	r2,0(r2)
 2004008:	10803fcc 	andi	r2,r2,255
 200400c:	103ffa26 	beq	r2,zero,2003ff8 <enterSaveLoadMenuPage+0x1e8>
			{
				delay(100);
 2004010:	01001904 	movi	r4,100
 2004014:	20019dc0 	call	20019dc <delay>
				if(keyFlag)
 2004018:	00810034 	movhi	r2,1024
 200401c:	10889804 	addi	r2,r2,8800
 2004020:	10800003 	ldbu	r2,0(r2)
 2004024:	10803fcc 	andi	r2,r2,255
 2004028:	10001326 	beq	r2,zero,2004078 <enterSaveLoadMenuPage+0x268>
				{
					keyVal_latch = keyVal;
 200402c:	00810034 	movhi	r2,1024
 2004030:	10889404 	addi	r2,r2,8784
 2004034:	10800003 	ldbu	r2,0(r2)
 2004038:	e0bffe45 	stb	r2,-7(fp)
					if(keyVal_latch == KEY_MENU)
 200403c:	e0bffe43 	ldbu	r2,-7(fp)
 2004040:	10800318 	cmpnei	r2,r2,12
 2004044:	10001526 	beq	r2,zero,200409c <enterSaveLoadMenuPage+0x28c>
					{
						return;
					}
					else if(keyVal_latch == KEY_ENTER)
 2004048:	e0bffe43 	ldbu	r2,-7(fp)
 200404c:	10800398 	cmpnei	r2,r2,14
 2004050:	1000091e 	bne	r2,zero,2004078 <enterSaveLoadMenuPage+0x268>
					{
						while(keyFlag);
 2004054:	0001883a 	nop
 2004058:	00810034 	movhi	r2,1024
 200405c:	10889804 	addi	r2,r2,8800
 2004060:	10800003 	ldbu	r2,0(r2)
 2004064:	10803fcc 	andi	r2,r2,255
 2004068:	103ffb1e 	bne	r2,zero,2004058 <enterSaveLoadMenuPage+0x248>
						SaveToEEPROM();
 200406c:	2003bcc0 	call	2003bcc <SaveToEEPROM>

						return;
 2004070:	0001883a 	nop
 2004074:	00000a06 	br	20040a0 <enterSaveLoadMenuPage+0x290>
					}
				}
				while(keyFlag);
 2004078:	0001883a 	nop
 200407c:	00810034 	movhi	r2,1024
 2004080:	10889804 	addi	r2,r2,8800
 2004084:	10800003 	ldbu	r2,0(r2)
 2004088:	10803fcc 	andi	r2,r2,255
 200408c:	103ffb1e 	bne	r2,zero,200407c <enterSaveLoadMenuPage+0x26c>
			}
		}
 2004090:	003fd906 	br	2003ff8 <enterSaveLoadMenuPage+0x1e8>
				if(keyFlag)
				{
					keyVal_latch = keyVal;
					if(keyVal_latch == KEY_MENU)
					{
						return;
 2004094:	0001883a 	nop
 2004098:	00000106 	br	20040a0 <enterSaveLoadMenuPage+0x290>
				if(keyFlag)
				{
					keyVal_latch = keyVal;
					if(keyVal_latch == KEY_MENU)
					{
						return;
 200409c:	0001883a 	nop
				}
				while(keyFlag);
			}
		}
	}
}
 20040a0:	e037883a 	mov	sp,fp
 20040a4:	dfc00117 	ldw	ra,4(sp)
 20040a8:	df000017 	ldw	fp,0(sp)
 20040ac:	dec00204 	addi	sp,sp,8
 20040b0:	f800283a 	ret

020040b4 <enterSaveLoadMenu>:

void enterSaveLoadMenu()
{
 20040b4:	defffd04 	addi	sp,sp,-12
 20040b8:	dfc00215 	stw	ra,8(sp)
 20040bc:	df000115 	stw	fp,4(sp)
 20040c0:	df000104 	addi	fp,sp,4
	unsigned char curr_state = 1;
 20040c4:	00800044 	movi	r2,1
 20040c8:	e0bfff05 	stb	r2,-4(fp)

	refreshSaveLoadMenuPage(curr_state);
 20040cc:	e0bfff03 	ldbu	r2,-4(fp)
 20040d0:	1009883a 	mov	r4,r2
 20040d4:	2003cd80 	call	2003cd8 <refreshSaveLoadMenuPage>
 20040d8:	00000106 	br	20040e0 <enterSaveLoadMenu+0x2c>
						refreshSaveLoadMenuPage(curr_state);
					}
				}
				while(keyFlag);
			}
		}
 20040dc:	0001883a 	nop
	refreshSaveLoadMenuPage(curr_state);
	unsigned char keyVal_latch;

	while(1)
		{
			if(keyFlag)
 20040e0:	00810034 	movhi	r2,1024
 20040e4:	10889804 	addi	r2,r2,8800
 20040e8:	10800003 	ldbu	r2,0(r2)
 20040ec:	10803fcc 	andi	r2,r2,255
 20040f0:	103ffa26 	beq	r2,zero,20040dc <enterSaveLoadMenu+0x28>
			{
				delay(100);
 20040f4:	01001904 	movi	r4,100
 20040f8:	20019dc0 	call	20019dc <delay>
				if(keyFlag)
 20040fc:	00810034 	movhi	r2,1024
 2004100:	10889804 	addi	r2,r2,8800
 2004104:	10800003 	ldbu	r2,0(r2)
 2004108:	10803fcc 	andi	r2,r2,255
 200410c:	10003e26 	beq	r2,zero,2004208 <enterSaveLoadMenu+0x154>
				{
					keyVal_latch = keyVal;
 2004110:	00810034 	movhi	r2,1024
 2004114:	10889404 	addi	r2,r2,8784
 2004118:	10800003 	ldbu	r2,0(r2)
 200411c:	e0bfff45 	stb	r2,-3(fp)
					if(keyVal_latch == KEY_LEFT)
 2004120:	e0bfff43 	ldbu	r2,-3(fp)
 2004124:	10800298 	cmpnei	r2,r2,10
 2004128:	10000a1e 	bne	r2,zero,2004154 <enterSaveLoadMenu+0xa0>
					{
						if(curr_state > 1)
 200412c:	e0bfff03 	ldbu	r2,-4(fp)
 2004130:	108000b0 	cmpltui	r2,r2,2
 2004134:	1000341e 	bne	r2,zero,2004208 <enterSaveLoadMenu+0x154>
						{
							curr_state--;
 2004138:	e0bfff03 	ldbu	r2,-4(fp)
 200413c:	10bfffc4 	addi	r2,r2,-1
 2004140:	e0bfff05 	stb	r2,-4(fp)
							refreshSaveLoadMenuPage(curr_state);
 2004144:	e0bfff03 	ldbu	r2,-4(fp)
 2004148:	1009883a 	mov	r4,r2
 200414c:	2003cd80 	call	2003cd8 <refreshSaveLoadMenuPage>
						while(keyFlag);
						enterFireMenu();
						refreshSaveLoadMenuPage(curr_state);
					}
				}
				while(keyFlag);
 2004150:	00002d06 	br	2004208 <enterSaveLoadMenu+0x154>
						{
							curr_state--;
							refreshSaveLoadMenuPage(curr_state);
						}
					}
					else if(keyVal_latch == KEY_RIGHT)
 2004154:	e0bfff43 	ldbu	r2,-3(fp)
 2004158:	108002d8 	cmpnei	r2,r2,11
 200415c:	10000a1e 	bne	r2,zero,2004188 <enterSaveLoadMenu+0xd4>
					{
						if(curr_state < 2)
 2004160:	e0bfff03 	ldbu	r2,-4(fp)
 2004164:	108000a8 	cmpgeui	r2,r2,2
 2004168:	1000271e 	bne	r2,zero,2004208 <enterSaveLoadMenu+0x154>
						{
							curr_state++;
 200416c:	e0bfff03 	ldbu	r2,-4(fp)
 2004170:	10800044 	addi	r2,r2,1
 2004174:	e0bfff05 	stb	r2,-4(fp)
							refreshSaveLoadMenuPage(curr_state);
 2004178:	e0bfff03 	ldbu	r2,-4(fp)
 200417c:	1009883a 	mov	r4,r2
 2004180:	2003cd80 	call	2003cd8 <refreshSaveLoadMenuPage>
						while(keyFlag);
						enterFireMenu();
						refreshSaveLoadMenuPage(curr_state);
					}
				}
				while(keyFlag);
 2004184:	00002006 	br	2004208 <enterSaveLoadMenu+0x154>
						{
							curr_state++;
							refreshSaveLoadMenuPage(curr_state);
						}
					}
					else if(keyVal_latch == KEY_ENTER)
 2004188:	e0bfff43 	ldbu	r2,-3(fp)
 200418c:	10800398 	cmpnei	r2,r2,14
 2004190:	10000d1e 	bne	r2,zero,20041c8 <enterSaveLoadMenu+0x114>
					{
						while(keyFlag);
 2004194:	0001883a 	nop
 2004198:	00810034 	movhi	r2,1024
 200419c:	10889804 	addi	r2,r2,8800
 20041a0:	10800003 	ldbu	r2,0(r2)
 20041a4:	10803fcc 	andi	r2,r2,255
 20041a8:	103ffb1e 	bne	r2,zero,2004198 <enterSaveLoadMenu+0xe4>
						enterSaveLoadMenuPage(curr_state);
 20041ac:	e0bfff03 	ldbu	r2,-4(fp)
 20041b0:	1009883a 	mov	r4,r2
 20041b4:	2003e100 	call	2003e10 <enterSaveLoadMenuPage>
						refreshSaveLoadMenuPage(curr_state);
 20041b8:	e0bfff03 	ldbu	r2,-4(fp)
 20041bc:	1009883a 	mov	r4,r2
 20041c0:	2003cd80 	call	2003cd8 <refreshSaveLoadMenuPage>
						while(keyFlag);
						enterFireMenu();
						refreshSaveLoadMenuPage(curr_state);
					}
				}
				while(keyFlag);
 20041c4:	00001006 	br	2004208 <enterSaveLoadMenu+0x154>
					{
						while(keyFlag);
						enterSaveLoadMenuPage(curr_state);
						refreshSaveLoadMenuPage(curr_state);
					}
					else if(keyVal_latch == KEY_MENU)
 20041c8:	e0bfff43 	ldbu	r2,-3(fp)
 20041cc:	10800318 	cmpnei	r2,r2,12
 20041d0:	10001426 	beq	r2,zero,2004224 <enterSaveLoadMenu+0x170>
					{
						return;
					}
					else if(keyVal_latch == KEY_ENA)
 20041d4:	e0bfff43 	ldbu	r2,-3(fp)
 20041d8:	108003d8 	cmpnei	r2,r2,15
 20041dc:	10000a1e 	bne	r2,zero,2004208 <enterSaveLoadMenu+0x154>
					{
						while(keyFlag);
 20041e0:	0001883a 	nop
 20041e4:	00810034 	movhi	r2,1024
 20041e8:	10889804 	addi	r2,r2,8800
 20041ec:	10800003 	ldbu	r2,0(r2)
 20041f0:	10803fcc 	andi	r2,r2,255
 20041f4:	103ffb1e 	bne	r2,zero,20041e4 <enterSaveLoadMenu+0x130>
						enterFireMenu();
 20041f8:	20031c00 	call	20031c0 <enterFireMenu>
						refreshSaveLoadMenuPage(curr_state);
 20041fc:	e0bfff03 	ldbu	r2,-4(fp)
 2004200:	1009883a 	mov	r4,r2
 2004204:	2003cd80 	call	2003cd8 <refreshSaveLoadMenuPage>
					}
				}
				while(keyFlag);
 2004208:	0001883a 	nop
 200420c:	00810034 	movhi	r2,1024
 2004210:	10889804 	addi	r2,r2,8800
 2004214:	10800003 	ldbu	r2,0(r2)
 2004218:	10803fcc 	andi	r2,r2,255
 200421c:	103ffb1e 	bne	r2,zero,200420c <enterSaveLoadMenu+0x158>
			}
		}
 2004220:	003fae06 	br	20040dc <enterSaveLoadMenu+0x28>
						enterSaveLoadMenuPage(curr_state);
						refreshSaveLoadMenuPage(curr_state);
					}
					else if(keyVal_latch == KEY_MENU)
					{
						return;
 2004224:	0001883a 	nop
					}
				}
				while(keyFlag);
			}
		}
}
 2004228:	e037883a 	mov	sp,fp
 200422c:	dfc00117 	ldw	ra,4(sp)
 2004230:	df000017 	ldw	fp,0(sp)
 2004234:	dec00204 	addi	sp,sp,8
 2004238:	f800283a 	ret

0200423c <entryShotCountersMenu>:
#include "..\inc\KPLED.h"
#include "..\inc\editNum10.h"
#include "..\inc\Counter.h"

void entryShotCountersMenu(unsigned char number)
{
 200423c:	defffd04 	addi	sp,sp,-12
 2004240:	dfc00215 	stw	ra,8(sp)
 2004244:	df000115 	stw	fp,4(sp)
 2004248:	df000104 	addi	fp,sp,4
 200424c:	2005883a 	mov	r2,r4
 2004250:	e0bfff05 	stb	r2,-4(fp)
	KPLED_All_Off();
 2004254:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Enter(3);
 2004258:	010000c4 	movi	r4,3
 200425c:	20012440 	call	2001244 <KPLED_Enter>
	KPLED_Enable(1);
 2004260:	01000044 	movi	r4,1
 2004264:	20012cc0 	call	20012cc <KPLED_Enable>
	KPLED_LeftArrow(3);
 2004268:	010000c4 	movi	r4,3
 200426c:	20010ac0 	call	20010ac <KPLED_LeftArrow>

	DisClear();
 2004270:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 2004274:	0009883a 	mov	r4,zero
 2004278:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(1,1);
 200427c:	01000044 	movi	r4,1
 2004280:	01400044 	movi	r5,1
 2004284:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("       MENU         ");
 2004288:	01008074 	movhi	r4,513
 200428c:	211a9904 	addi	r4,r4,27236
 2004290:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(2,1);
 2004294:	01000084 	movi	r4,2
 2004298:	01400044 	movi	r5,1
 200429c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(Num2toStr2(number));
 20042a0:	e0bfff03 	ldbu	r2,-4(fp)
 20042a4:	1009883a 	mov	r4,r2
 20042a8:	20062640 	call	2006264 <Num2toStr2>
 20042ac:	1009883a 	mov	r4,r2
 20042b0:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(".Shot Counters");
 20042b4:	01008074 	movhi	r4,513
 20042b8:	211a9f04 	addi	r4,r4,27260
 20042bc:	20006000 	call	2000600 <DisWrStr>

	DisCurPos(4,1);
 20042c0:	01000104 	movi	r4,4
 20042c4:	01400044 	movi	r5,1
 20042c8:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("<Prev   Enter       ");
 20042cc:	01008074 	movhi	r4,513
 20042d0:	211aa304 	addi	r4,r4,27276
 20042d4:	20006000 	call	2000600 <DisWrStr>
}
 20042d8:	e037883a 	mov	sp,fp
 20042dc:	dfc00117 	ldw	ra,4(sp)
 20042e0:	df000017 	ldw	fp,0(sp)
 20042e4:	dec00204 	addi	sp,sp,8
 20042e8:	f800283a 	ret

020042ec <refreshShotCountersMenuPage>:

void refreshShotCountersMenuPage(unsigned char curr_state)
{
 20042ec:	defffd04 	addi	sp,sp,-12
 20042f0:	dfc00215 	stw	ra,8(sp)
 20042f4:	df000115 	stw	fp,4(sp)
 20042f8:	df000104 	addi	fp,sp,4
 20042fc:	2005883a 	mov	r2,r4
 2004300:	e0bfff05 	stb	r2,-4(fp)
	if(curr_state == 1)
 2004304:	e0bfff03 	ldbu	r2,-4(fp)
 2004308:	10800058 	cmpnei	r2,r2,1
 200430c:	1000281e 	bne	r2,zero,20043b0 <refreshShotCountersMenuPage+0xc4>
	{
		KPLED_All_Off();
 2004310:	2000f400 	call	2000f40 <KPLED_All_Off>
		KPLED_RightArrow(3);
 2004314:	010000c4 	movi	r4,3
 2004318:	20010200 	call	2001020 <KPLED_RightArrow>
		KPLED_Menu(3);
 200431c:	010000c4 	movi	r4,3
 2004320:	20011340 	call	2001134 <KPLED_Menu>
		KPLED_Enable(1);
 2004324:	01000044 	movi	r4,1
 2004328:	20012cc0 	call	20012cc <KPLED_Enable>

		DisClear();
 200432c:	20006780 	call	2000678 <DisClear>
		DisShowCur(0);
 2004330:	0009883a 	mov	r4,zero
 2004334:	20004fc0 	call	20004fc <DisShowCur>
		DisCurPos(1,1);
 2004338:	01000044 	movi	r4,1
 200433c:	01400044 	movi	r5,1
 2004340:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("   Shot Counters    ");
 2004344:	01008074 	movhi	r4,513
 2004348:	211aa904 	addi	r4,r4,27300
 200434c:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(2,1);
 2004350:	01000084 	movi	r4,2
 2004354:	01400044 	movi	r5,1
 2004358:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("System Counter:");
 200435c:	01008074 	movhi	r4,513
 2004360:	211aaf04 	addi	r4,r4,27324
 2004364:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(3,5);
 2004368:	010000c4 	movi	r4,3
 200436c:	01400144 	movi	r5,5
 2004370:	20005400 	call	2000540 <DisCurPos>
		DisWrStr(Num10toStr10(getCounter0Val()));
 2004374:	200026c0 	call	200026c <getCounter0Val>
 2004378:	1009883a 	mov	r4,r2
 200437c:	20054500 	call	2005450 <Num10toStr10>
 2004380:	1009883a 	mov	r4,r2
 2004384:	20006000 	call	2000600 <DisWrStr>
		DisWrStr(" Shots");
 2004388:	01008074 	movhi	r4,513
 200438c:	211ab304 	addi	r4,r4,27340
 2004390:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(4,1);
 2004394:	01000104 	movi	r4,4
 2004398:	01400044 	movi	r5,1
 200439c:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("               Next>");
 20043a0:	01008074 	movhi	r4,513
 20043a4:	211ab504 	addi	r4,r4,27348
 20043a8:	20006000 	call	2000600 <DisWrStr>
 20043ac:	00002e06 	br	2004468 <refreshShotCountersMenuPage+0x17c>
	}
	else if(curr_state == 2)
 20043b0:	e0bfff03 	ldbu	r2,-4(fp)
 20043b4:	10800098 	cmpnei	r2,r2,2
 20043b8:	10002b1e 	bne	r2,zero,2004468 <refreshShotCountersMenuPage+0x17c>
	{
		KPLED_All_Off();
 20043bc:	2000f400 	call	2000f40 <KPLED_All_Off>
		KPLED_Enter(3);
 20043c0:	010000c4 	movi	r4,3
 20043c4:	20012440 	call	2001244 <KPLED_Enter>
		KPLED_LeftArrow(3);
 20043c8:	010000c4 	movi	r4,3
 20043cc:	20010ac0 	call	20010ac <KPLED_LeftArrow>
		KPLED_Menu(3);
 20043d0:	010000c4 	movi	r4,3
 20043d4:	20011340 	call	2001134 <KPLED_Menu>
		KPLED_Edit(3);
 20043d8:	010000c4 	movi	r4,3
 20043dc:	20011bc0 	call	20011bc <KPLED_Edit>
		KPLED_Enable(1);
 20043e0:	01000044 	movi	r4,1
 20043e4:	20012cc0 	call	20012cc <KPLED_Enable>

		DisClear();
 20043e8:	20006780 	call	2000678 <DisClear>
		DisShowCur(0);
 20043ec:	0009883a 	mov	r4,zero
 20043f0:	20004fc0 	call	20004fc <DisShowCur>
		DisCurPos(1,1);
 20043f4:	01000044 	movi	r4,1
 20043f8:	01400044 	movi	r5,1
 20043fc:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("   Shot Counters    ");
 2004400:	01008074 	movhi	r4,513
 2004404:	211aa904 	addi	r4,r4,27300
 2004408:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(2,1);
 200440c:	01000084 	movi	r4,2
 2004410:	01400044 	movi	r5,1
 2004414:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("Capillary Counter:");
 2004418:	01008074 	movhi	r4,513
 200441c:	211abb04 	addi	r4,r4,27372
 2004420:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(3,5);
 2004424:	010000c4 	movi	r4,3
 2004428:	01400144 	movi	r5,5
 200442c:	20005400 	call	2000540 <DisCurPos>
		DisWrStr(Num10toStr10(getCounter1Val()));
 2004430:	200029c0 	call	200029c <getCounter1Val>
 2004434:	1009883a 	mov	r4,r2
 2004438:	20054500 	call	2005450 <Num10toStr10>
 200443c:	1009883a 	mov	r4,r2
 2004440:	20006000 	call	2000600 <DisWrStr>
		DisWrStr(" Shots");
 2004444:	01008074 	movhi	r4,513
 2004448:	211ab304 	addi	r4,r4,27340
 200444c:	20006000 	call	2000600 <DisWrStr>

		DisCurPos(4,1);
 2004450:	01000104 	movi	r4,4
 2004454:	01400044 	movi	r5,1
 2004458:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("<Prev   Edit        ");
 200445c:	01008074 	movhi	r4,513
 2004460:	211ac004 	addi	r4,r4,27392
 2004464:	20006000 	call	2000600 <DisWrStr>
	}
}
 2004468:	e037883a 	mov	sp,fp
 200446c:	dfc00117 	ldw	ra,4(sp)
 2004470:	df000017 	ldw	fp,0(sp)
 2004474:	dec00204 	addi	sp,sp,8
 2004478:	f800283a 	ret

0200447c <editShotCountersMenuPage>:

void editShotCountersMenuPage(unsigned char curr_state)
{
 200447c:	defffc04 	addi	sp,sp,-16
 2004480:	dfc00315 	stw	ra,12(sp)
 2004484:	df000215 	stw	fp,8(sp)
 2004488:	df000204 	addi	fp,sp,8
 200448c:	2005883a 	mov	r2,r4
 2004490:	e0bfff05 	stb	r2,-4(fp)
	if(curr_state == 2)
 2004494:	e0bfff03 	ldbu	r2,-4(fp)
 2004498:	10800098 	cmpnei	r2,r2,2
 200449c:	10005c1e 	bne	r2,zero,2004610 <editShotCountersMenuPage+0x194>
	{
		KPLED_All_Off();
 20044a0:	2000f400 	call	2000f40 <KPLED_All_Off>
		KPLED_Enter(3);
 20044a4:	010000c4 	movi	r4,3
 20044a8:	20012440 	call	2001244 <KPLED_Enter>
		KPLED_Menu(3);
 20044ac:	010000c4 	movi	r4,3
 20044b0:	20011340 	call	2001134 <KPLED_Menu>

		DisClear();
 20044b4:	20006780 	call	2000678 <DisClear>
		DisShowCur(0);
 20044b8:	0009883a 	mov	r4,zero
 20044bc:	20004fc0 	call	20004fc <DisShowCur>
		DisCurPos(1,1);
 20044c0:	01000044 	movi	r4,1
 20044c4:	01400044 	movi	r5,1
 20044c8:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("Reset Cap. Counter?");
 20044cc:	01008074 	movhi	r4,513
 20044d0:	211ac604 	addi	r4,r4,27416
 20044d4:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(2,1);
 20044d8:	01000084 	movi	r4,2
 20044dc:	01400044 	movi	r5,1
 20044e0:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("   Yes: Press ENTER");
 20044e4:	01008074 	movhi	r4,513
 20044e8:	211acb04 	addi	r4,r4,27436
 20044ec:	20006000 	call	2000600 <DisWrStr>
		DisCurPos(3,1);
 20044f0:	010000c4 	movi	r4,3
 20044f4:	01400044 	movi	r5,1
 20044f8:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("   No:  Press MENU");
 20044fc:	01008074 	movhi	r4,513
 2004500:	211ad004 	addi	r4,r4,27456
 2004504:	20006000 	call	2000600 <DisWrStr>
 2004508:	00000106 	br	2004510 <editShotCountersMenuPage+0x94>
						return;
					}
				}
				while(keyFlag);
			}
		}
 200450c:	0001883a 	nop
		DisWrStr("   No:  Press MENU");

		unsigned char keyVal_latch;
		while(1)
		{
			if(keyFlag)
 2004510:	00810034 	movhi	r2,1024
 2004514:	10889804 	addi	r2,r2,8800
 2004518:	10800003 	ldbu	r2,0(r2)
 200451c:	10803fcc 	andi	r2,r2,255
 2004520:	103ffa26 	beq	r2,zero,200450c <editShotCountersMenuPage+0x90>
			{
				delay(100);
 2004524:	01001904 	movi	r4,100
 2004528:	20019dc0 	call	20019dc <delay>
				if(keyFlag)
 200452c:	00810034 	movhi	r2,1024
 2004530:	10889804 	addi	r2,r2,8800
 2004534:	10800003 	ldbu	r2,0(r2)
 2004538:	10803fcc 	andi	r2,r2,255
 200453c:	10002a26 	beq	r2,zero,20045e8 <editShotCountersMenuPage+0x16c>
				{
					keyVal_latch = keyVal;
 2004540:	00810034 	movhi	r2,1024
 2004544:	10889404 	addi	r2,r2,8784
 2004548:	10800003 	ldbu	r2,0(r2)
 200454c:	e0bffe05 	stb	r2,-8(fp)
					if(keyVal_latch == KEY_MENU)
 2004550:	e0bffe03 	ldbu	r2,-8(fp)
 2004554:	10800318 	cmpnei	r2,r2,12
 2004558:	10002a26 	beq	r2,zero,2004604 <editShotCountersMenuPage+0x188>
					{
						return;
					}
					else if(keyVal_latch == KEY_ENTER)
 200455c:	e0bffe03 	ldbu	r2,-8(fp)
 2004560:	10800398 	cmpnei	r2,r2,14
 2004564:	1000201e 	bne	r2,zero,20045e8 <editShotCountersMenuPage+0x16c>
					{
						while(keyFlag);
 2004568:	0001883a 	nop
 200456c:	00810034 	movhi	r2,1024
 2004570:	10889804 	addi	r2,r2,8800
 2004574:	10800003 	ldbu	r2,0(r2)
 2004578:	10803fcc 	andi	r2,r2,255
 200457c:	103ffb1e 	bne	r2,zero,200456c <editShotCountersMenuPage+0xf0>
						if(enterPWDPage())
 2004580:	2007ee00 	call	2007ee0 <enterPWDPage>
 2004584:	10002126 	beq	r2,zero,200460c <editShotCountersMenuPage+0x190>
						{
							DisClear();
 2004588:	20006780 	call	2000678 <DisClear>
							DisCurPos(2,1);
 200458c:	01000084 	movi	r4,2
 2004590:	01400044 	movi	r5,1
 2004594:	20005400 	call	2000540 <DisCurPos>
							DisWrStr("      Resetting...  ");
 2004598:	01008074 	movhi	r4,513
 200459c:	211ad504 	addi	r4,r4,27476
 20045a0:	20006000 	call	2000600 <DisWrStr>
							DisCurPos(3,1);
 20045a4:	010000c4 	movi	r4,3
 20045a8:	01400044 	movi	r5,1
 20045ac:	20005400 	call	2000540 <DisCurPos>
							DisWrStr(" Capillary Counter  ");
 20045b0:	01008074 	movhi	r4,513
 20045b4:	211adb04 	addi	r4,r4,27500
 20045b8:	20006000 	call	2000600 <DisWrStr>
							resetCounter1();
 20045bc:	20003280 	call	2000328 <resetCounter1>
							DisClear();
 20045c0:	20006780 	call	2000678 <DisClear>
							DisCurPos(2,1);
 20045c4:	01000084 	movi	r4,2
 20045c8:	01400044 	movi	r5,1
 20045cc:	20005400 	call	2000540 <DisCurPos>
							DisWrStr("      Reseted       ");
 20045d0:	01008074 	movhi	r4,513
 20045d4:	211ae104 	addi	r4,r4,27524
 20045d8:	20006000 	call	2000600 <DisWrStr>
							delay(MSG_DELAY);
 20045dc:	01271014 	movui	r4,40000
 20045e0:	20019dc0 	call	20019dc <delay>
						}
						return;
 20045e4:	00000906 	br	200460c <editShotCountersMenuPage+0x190>
					}
				}
				while(keyFlag);
 20045e8:	0001883a 	nop
 20045ec:	00810034 	movhi	r2,1024
 20045f0:	10889804 	addi	r2,r2,8800
 20045f4:	10800003 	ldbu	r2,0(r2)
 20045f8:	10803fcc 	andi	r2,r2,255
 20045fc:	103ffb1e 	bne	r2,zero,20045ec <editShotCountersMenuPage+0x170>
			}
		}
 2004600:	003fc206 	br	200450c <editShotCountersMenuPage+0x90>
				if(keyFlag)
				{
					keyVal_latch = keyVal;
					if(keyVal_latch == KEY_MENU)
					{
						return;
 2004604:	0001883a 	nop
 2004608:	00000106 	br	2004610 <editShotCountersMenuPage+0x194>
							DisClear();
							DisCurPos(2,1);
							DisWrStr("      Reseted       ");
							delay(MSG_DELAY);
						}
						return;
 200460c:	0001883a 	nop
				}
				while(keyFlag);
			}
		}
	}
}
 2004610:	e037883a 	mov	sp,fp
 2004614:	dfc00117 	ldw	ra,4(sp)
 2004618:	df000017 	ldw	fp,0(sp)
 200461c:	dec00204 	addi	sp,sp,8
 2004620:	f800283a 	ret

02004624 <enterShotCountersMenu>:


void enterShotCountersMenu()
{
 2004624:	defffd04 	addi	sp,sp,-12
 2004628:	dfc00215 	stw	ra,8(sp)
 200462c:	df000115 	stw	fp,4(sp)
 2004630:	df000104 	addi	fp,sp,4
	unsigned char curr_state = 1;
 2004634:	00800044 	movi	r2,1
 2004638:	e0bfff05 	stb	r2,-4(fp)

	refreshShotCountersMenuPage(curr_state);
 200463c:	e0bfff03 	ldbu	r2,-4(fp)
 2004640:	1009883a 	mov	r4,r2
 2004644:	20042ec0 	call	20042ec <refreshShotCountersMenuPage>
 2004648:	00000106 	br	2004650 <enterShotCountersMenu+0x2c>
					refreshShotCountersMenuPage(curr_state);
				}
			}
			while(keyFlag);
		}
	}
 200464c:	0001883a 	nop
	refreshShotCountersMenuPage(curr_state);
	unsigned char keyVal_latch;

	while(1)
	{
		if(keyFlag)
 2004650:	00810034 	movhi	r2,1024
 2004654:	10889804 	addi	r2,r2,8800
 2004658:	10800003 	ldbu	r2,0(r2)
 200465c:	10803fcc 	andi	r2,r2,255
 2004660:	103ffa26 	beq	r2,zero,200464c <enterShotCountersMenu+0x28>
		{
			delay(100);
 2004664:	01001904 	movi	r4,100
 2004668:	20019dc0 	call	20019dc <delay>
			if(keyFlag)
 200466c:	00810034 	movhi	r2,1024
 2004670:	10889804 	addi	r2,r2,8800
 2004674:	10800003 	ldbu	r2,0(r2)
 2004678:	10803fcc 	andi	r2,r2,255
 200467c:	10003e26 	beq	r2,zero,2004778 <enterShotCountersMenu+0x154>
			{
				keyVal_latch = keyVal;
 2004680:	00810034 	movhi	r2,1024
 2004684:	10889404 	addi	r2,r2,8784
 2004688:	10800003 	ldbu	r2,0(r2)
 200468c:	e0bfff45 	stb	r2,-3(fp)
				if(keyVal_latch == KEY_LEFT)
 2004690:	e0bfff43 	ldbu	r2,-3(fp)
 2004694:	10800298 	cmpnei	r2,r2,10
 2004698:	10000a1e 	bne	r2,zero,20046c4 <enterShotCountersMenu+0xa0>
				{
					if(curr_state > 1)
 200469c:	e0bfff03 	ldbu	r2,-4(fp)
 20046a0:	108000b0 	cmpltui	r2,r2,2
 20046a4:	1000341e 	bne	r2,zero,2004778 <enterShotCountersMenu+0x154>
					{
						curr_state--;
 20046a8:	e0bfff03 	ldbu	r2,-4(fp)
 20046ac:	10bfffc4 	addi	r2,r2,-1
 20046b0:	e0bfff05 	stb	r2,-4(fp)
						refreshShotCountersMenuPage(curr_state);
 20046b4:	e0bfff03 	ldbu	r2,-4(fp)
 20046b8:	1009883a 	mov	r4,r2
 20046bc:	20042ec0 	call	20042ec <refreshShotCountersMenuPage>
					while(keyFlag);
					enterFireMenu();
					refreshShotCountersMenuPage(curr_state);
				}
			}
			while(keyFlag);
 20046c0:	00002d06 	br	2004778 <enterShotCountersMenu+0x154>
					{
						curr_state--;
						refreshShotCountersMenuPage(curr_state);
					}
				}
				else if(keyVal_latch == KEY_RIGHT)
 20046c4:	e0bfff43 	ldbu	r2,-3(fp)
 20046c8:	108002d8 	cmpnei	r2,r2,11
 20046cc:	10000a1e 	bne	r2,zero,20046f8 <enterShotCountersMenu+0xd4>
				{
					if(curr_state < 2)
 20046d0:	e0bfff03 	ldbu	r2,-4(fp)
 20046d4:	108000a8 	cmpgeui	r2,r2,2
 20046d8:	1000271e 	bne	r2,zero,2004778 <enterShotCountersMenu+0x154>
					{
						curr_state++;
 20046dc:	e0bfff03 	ldbu	r2,-4(fp)
 20046e0:	10800044 	addi	r2,r2,1
 20046e4:	e0bfff05 	stb	r2,-4(fp)
						refreshShotCountersMenuPage(curr_state);
 20046e8:	e0bfff03 	ldbu	r2,-4(fp)
 20046ec:	1009883a 	mov	r4,r2
 20046f0:	20042ec0 	call	20042ec <refreshShotCountersMenuPage>
					while(keyFlag);
					enterFireMenu();
					refreshShotCountersMenuPage(curr_state);
				}
			}
			while(keyFlag);
 20046f4:	00002006 	br	2004778 <enterShotCountersMenu+0x154>
					{
						curr_state++;
						refreshShotCountersMenuPage(curr_state);
					}
				}
				else if(keyVal_latch == KEY_EDIT)
 20046f8:	e0bfff43 	ldbu	r2,-3(fp)
 20046fc:	10800358 	cmpnei	r2,r2,13
 2004700:	10000d1e 	bne	r2,zero,2004738 <enterShotCountersMenu+0x114>
				{
					while(keyFlag);
 2004704:	0001883a 	nop
 2004708:	00810034 	movhi	r2,1024
 200470c:	10889804 	addi	r2,r2,8800
 2004710:	10800003 	ldbu	r2,0(r2)
 2004714:	10803fcc 	andi	r2,r2,255
 2004718:	103ffb1e 	bne	r2,zero,2004708 <enterShotCountersMenu+0xe4>
					editShotCountersMenuPage(curr_state);
 200471c:	e0bfff03 	ldbu	r2,-4(fp)
 2004720:	1009883a 	mov	r4,r2
 2004724:	200447c0 	call	200447c <editShotCountersMenuPage>
					refreshShotCountersMenuPage(curr_state);
 2004728:	e0bfff03 	ldbu	r2,-4(fp)
 200472c:	1009883a 	mov	r4,r2
 2004730:	20042ec0 	call	20042ec <refreshShotCountersMenuPage>
					while(keyFlag);
					enterFireMenu();
					refreshShotCountersMenuPage(curr_state);
				}
			}
			while(keyFlag);
 2004734:	00001006 	br	2004778 <enterShotCountersMenu+0x154>
				{
					while(keyFlag);
					editShotCountersMenuPage(curr_state);
					refreshShotCountersMenuPage(curr_state);
				}
				else if(keyVal_latch == KEY_MENU)
 2004738:	e0bfff43 	ldbu	r2,-3(fp)
 200473c:	10800318 	cmpnei	r2,r2,12
 2004740:	10001426 	beq	r2,zero,2004794 <enterShotCountersMenu+0x170>
				{
					return;
				}
				else if(keyVal_latch == KEY_ENA)
 2004744:	e0bfff43 	ldbu	r2,-3(fp)
 2004748:	108003d8 	cmpnei	r2,r2,15
 200474c:	10000a1e 	bne	r2,zero,2004778 <enterShotCountersMenu+0x154>
				{
					while(keyFlag);
 2004750:	0001883a 	nop
 2004754:	00810034 	movhi	r2,1024
 2004758:	10889804 	addi	r2,r2,8800
 200475c:	10800003 	ldbu	r2,0(r2)
 2004760:	10803fcc 	andi	r2,r2,255
 2004764:	103ffb1e 	bne	r2,zero,2004754 <enterShotCountersMenu+0x130>
					enterFireMenu();
 2004768:	20031c00 	call	20031c0 <enterFireMenu>
					refreshShotCountersMenuPage(curr_state);
 200476c:	e0bfff03 	ldbu	r2,-4(fp)
 2004770:	1009883a 	mov	r4,r2
 2004774:	20042ec0 	call	20042ec <refreshShotCountersMenuPage>
				}
			}
			while(keyFlag);
 2004778:	0001883a 	nop
 200477c:	00810034 	movhi	r2,1024
 2004780:	10889804 	addi	r2,r2,8800
 2004784:	10800003 	ldbu	r2,0(r2)
 2004788:	10803fcc 	andi	r2,r2,255
 200478c:	103ffb1e 	bne	r2,zero,200477c <enterShotCountersMenu+0x158>
		}
	}
 2004790:	003fae06 	br	200464c <enterShotCountersMenu+0x28>
					editShotCountersMenuPage(curr_state);
					refreshShotCountersMenuPage(curr_state);
				}
				else if(keyVal_latch == KEY_MENU)
				{
					return;
 2004794:	0001883a 	nop
				}
			}
			while(keyFlag);
		}
	}
}
 2004798:	e037883a 	mov	sp,fp
 200479c:	dfc00117 	ldw	ra,4(sp)
 20047a0:	df000017 	ldw	fp,0(sp)
 20047a4:	dec00204 	addi	sp,sp,8
 20047a8:	f800283a 	ret

020047ac <getShutdownInst>:
#define clrTimer *(unsigned char*)CLRTIMER_BASE

#define SHUTDOWN_STEP	7

char* getShutdownInst(unsigned char step, unsigned char line)
{
 20047ac:	defffd04 	addi	sp,sp,-12
 20047b0:	df000215 	stw	fp,8(sp)
 20047b4:	df000204 	addi	fp,sp,8
 20047b8:	2007883a 	mov	r3,r4
 20047bc:	2805883a 	mov	r2,r5
 20047c0:	e0fffe05 	stb	r3,-8(fp)
 20047c4:	e0bfff05 	stb	r2,-4(fp)
	switch(step)
 20047c8:	e0bffe03 	ldbu	r2,-8(fp)
 20047cc:	10c00228 	cmpgeui	r3,r2,8
 20047d0:	18004e1e 	bne	r3,zero,200490c <getShutdownInst+0x160>
 20047d4:	1085883a 	add	r2,r2,r2
 20047d8:	1087883a 	add	r3,r2,r2
 20047dc:	00808034 	movhi	r2,512
 20047e0:	1091fc04 	addi	r2,r2,18416
 20047e4:	1885883a 	add	r2,r3,r2
 20047e8:	10800017 	ldw	r2,0(r2)
 20047ec:	1000683a 	jmp	r2
 20047f0:	0200490c 	andi	r8,zero,292
 20047f4:	02004810 	cmplti	r8,zero,288
 20047f8:	02004834 	movhi	r8,288
 20047fc:	02004858 	cmpnei	r8,zero,289
 2004800:	0200487c 	xorhi	r8,zero,289
 2004804:	020048a0 	cmpeqi	r8,zero,290
 2004808:	020048c4 	movi	r8,291
 200480c:	020048e8 	cmpgeui	r8,zero,291
	{
		case 1:		return line==1	?	"Disable & turn off"	:	"main HV supply";
 2004810:	e0bfff03 	ldbu	r2,-4(fp)
 2004814:	10800058 	cmpnei	r2,r2,1
 2004818:	1000031e 	bne	r2,zero,2004828 <getShutdownInst+0x7c>
 200481c:	00808074 	movhi	r2,513
 2004820:	109ae704 	addi	r2,r2,27548
 2004824:	00000206 	br	2004830 <getShutdownInst+0x84>
 2004828:	00808074 	movhi	r2,513
 200482c:	109aec04 	addi	r2,r2,27568
 2004830:	00003806 	br	2004914 <getShutdownInst+0x168>
		case 2:		return line==1	?	"Turn off all"			:	"power units";
 2004834:	e0bfff03 	ldbu	r2,-4(fp)
 2004838:	10800058 	cmpnei	r2,r2,1
 200483c:	1000031e 	bne	r2,zero,200484c <getShutdownInst+0xa0>
 2004840:	00808074 	movhi	r2,513
 2004844:	109af004 	addi	r2,r2,27584
 2004848:	00000206 	br	2004854 <getShutdownInst+0xa8>
 200484c:	00808074 	movhi	r2,513
 2004850:	109af404 	addi	r2,r2,27600
 2004854:	00002f06 	br	2004914 <getShutdownInst+0x168>
		case 3:		return line==1	?	"Turn off turbo pump"	:	" ";
 2004858:	e0bfff03 	ldbu	r2,-4(fp)
 200485c:	10800058 	cmpnei	r2,r2,1
 2004860:	1000031e 	bne	r2,zero,2004870 <getShutdownInst+0xc4>
 2004864:	00808074 	movhi	r2,513
 2004868:	109af704 	addi	r2,r2,27612
 200486c:	00000206 	br	2004878 <getShutdownInst+0xcc>
 2004870:	00808074 	movhi	r2,513
 2004874:	109afc04 	addi	r2,r2,27632
 2004878:	00002606 	br	2004914 <getShutdownInst+0x168>
		case 4:		return line==1	?	"Turn off thyratron"	:	"heater";
 200487c:	e0bfff03 	ldbu	r2,-4(fp)
 2004880:	10800058 	cmpnei	r2,r2,1
 2004884:	1000031e 	bne	r2,zero,2004894 <getShutdownInst+0xe8>
 2004888:	00808074 	movhi	r2,513
 200488c:	109afd04 	addi	r2,r2,27636
 2004890:	00000206 	br	200489c <getShutdownInst+0xf0>
 2004894:	00808074 	movhi	r2,513
 2004898:	109b0204 	addi	r2,r2,27656
 200489c:	00001d06 	br	2004914 <getShutdownInst+0x168>
		case 5:		return line==1	?	"Turn off cooling"		:	"water";
 20048a0:	e0bfff03 	ldbu	r2,-4(fp)
 20048a4:	10800058 	cmpnei	r2,r2,1
 20048a8:	1000031e 	bne	r2,zero,20048b8 <getShutdownInst+0x10c>
 20048ac:	00808074 	movhi	r2,513
 20048b0:	109b0404 	addi	r2,r2,27664
 20048b4:	00000206 	br	20048c0 <getShutdownInst+0x114>
 20048b8:	00808074 	movhi	r2,513
 20048bc:	109b0904 	addi	r2,r2,27684
 20048c0:	00001406 	br	2004914 <getShutdownInst+0x168>
		case 6:		return line==1	?	"Turn off oil pump"		:	" ";
 20048c4:	e0bfff03 	ldbu	r2,-4(fp)
 20048c8:	10800058 	cmpnei	r2,r2,1
 20048cc:	1000031e 	bne	r2,zero,20048dc <getShutdownInst+0x130>
 20048d0:	00808074 	movhi	r2,513
 20048d4:	109b0b04 	addi	r2,r2,27692
 20048d8:	00000206 	br	20048e4 <getShutdownInst+0x138>
 20048dc:	00808074 	movhi	r2,513
 20048e0:	109afc04 	addi	r2,r2,27632
 20048e4:	00000b06 	br	2004914 <getShutdownInst+0x168>
		case 7:		return line==1	?	"Close Argon tank"		:	" ";
 20048e8:	e0bfff03 	ldbu	r2,-4(fp)
 20048ec:	10800058 	cmpnei	r2,r2,1
 20048f0:	1000031e 	bne	r2,zero,2004900 <getShutdownInst+0x154>
 20048f4:	00808074 	movhi	r2,513
 20048f8:	109b1004 	addi	r2,r2,27712
 20048fc:	00000206 	br	2004908 <getShutdownInst+0x15c>
 2004900:	00808074 	movhi	r2,513
 2004904:	109afc04 	addi	r2,r2,27632
 2004908:	00000206 	br	2004914 <getShutdownInst+0x168>
	}
	return "";
 200490c:	00808074 	movhi	r2,513
 2004910:	109b1504 	addi	r2,r2,27732
}
 2004914:	e037883a 	mov	sp,fp
 2004918:	df000017 	ldw	fp,0(sp)
 200491c:	dec00104 	addi	sp,sp,4
 2004920:	f800283a 	ret

02004924 <entryShutdownMenu>:


void entryShutdownMenu(unsigned char number)
{
 2004924:	defffd04 	addi	sp,sp,-12
 2004928:	dfc00215 	stw	ra,8(sp)
 200492c:	df000115 	stw	fp,4(sp)
 2004930:	df000104 	addi	fp,sp,4
 2004934:	2005883a 	mov	r2,r4
 2004938:	e0bfff05 	stb	r2,-4(fp)
	KPLED_All_Off();
 200493c:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Enter(3);
 2004940:	010000c4 	movi	r4,3
 2004944:	20012440 	call	2001244 <KPLED_Enter>
	KPLED_Enable(1);
 2004948:	01000044 	movi	r4,1
 200494c:	20012cc0 	call	20012cc <KPLED_Enable>
	KPLED_RightArrow(3);
 2004950:	010000c4 	movi	r4,3
 2004954:	20010200 	call	2001020 <KPLED_RightArrow>
	KPLED_LeftArrow(3);
 2004958:	010000c4 	movi	r4,3
 200495c:	20010ac0 	call	20010ac <KPLED_LeftArrow>

	DisClear();
 2004960:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 2004964:	0009883a 	mov	r4,zero
 2004968:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(1,1);
 200496c:	01000044 	movi	r4,1
 2004970:	01400044 	movi	r5,1
 2004974:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("       MENU         ");
 2004978:	01008074 	movhi	r4,513
 200497c:	211b1604 	addi	r4,r4,27736
 2004980:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(2,1);
 2004984:	01000084 	movi	r4,2
 2004988:	01400044 	movi	r5,1
 200498c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(Num2toStr2(number));
 2004990:	e0bfff03 	ldbu	r2,-4(fp)
 2004994:	1009883a 	mov	r4,r2
 2004998:	20062640 	call	2006264 <Num2toStr2>
 200499c:	1009883a 	mov	r4,r2
 20049a0:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(".Shutdown");
 20049a4:	01008074 	movhi	r4,513
 20049a8:	211b1c04 	addi	r4,r4,27760
 20049ac:	20006000 	call	2000600 <DisWrStr>

	DisCurPos(4,1);
 20049b0:	01000104 	movi	r4,4
 20049b4:	01400044 	movi	r5,1
 20049b8:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("<Prev   Enter  Next>");
 20049bc:	01008074 	movhi	r4,513
 20049c0:	211b1f04 	addi	r4,r4,27772
 20049c4:	20006000 	call	2000600 <DisWrStr>
}
 20049c8:	e037883a 	mov	sp,fp
 20049cc:	dfc00117 	ldw	ra,4(sp)
 20049d0:	df000017 	ldw	fp,0(sp)
 20049d4:	dec00204 	addi	sp,sp,8
 20049d8:	f800283a 	ret

020049dc <confirmShutdown>:

//1:Shutdown	0:Exit
unsigned char confirmShutdown()
{
 20049dc:	defffd04 	addi	sp,sp,-12
 20049e0:	dfc00215 	stw	ra,8(sp)
 20049e4:	df000115 	stw	fp,4(sp)
 20049e8:	df000104 	addi	fp,sp,4
	KPLED_All_Off();
 20049ec:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Enter(3);
 20049f0:	010000c4 	movi	r4,3
 20049f4:	20012440 	call	2001244 <KPLED_Enter>
	KPLED_Menu(3);
 20049f8:	010000c4 	movi	r4,3
 20049fc:	20011340 	call	2001134 <KPLED_Menu>

	DisClear();
 2004a00:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 2004a04:	0009883a 	mov	r4,zero
 2004a08:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(1,1);
 2004a0c:	01000044 	movi	r4,1
 2004a10:	01400044 	movi	r5,1
 2004a14:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Confirm to Shutdown?");
 2004a18:	01008074 	movhi	r4,513
 2004a1c:	211b2504 	addi	r4,r4,27796
 2004a20:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(2,4);
 2004a24:	01000084 	movi	r4,2
 2004a28:	01400104 	movi	r5,4
 2004a2c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Yes: Press ENTER");
 2004a30:	01008074 	movhi	r4,513
 2004a34:	211b2b04 	addi	r4,r4,27820
 2004a38:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(3,4);
 2004a3c:	010000c4 	movi	r4,3
 2004a40:	01400104 	movi	r5,4
 2004a44:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("No:  Press MENU");
 2004a48:	01008074 	movhi	r4,513
 2004a4c:	211b3004 	addi	r4,r4,27840
 2004a50:	20006000 	call	2000600 <DisWrStr>
 2004a54:	00000106 	br	2004a5c <confirmShutdown+0x80>
					return 1;
				}
			}
			while(keyFlag);
		}
	}
 2004a58:	0001883a 	nop
	DisWrStr("No:  Press MENU");

	unsigned char keyVal_latch;
	while(1)
	{
		if(keyFlag)
 2004a5c:	00810034 	movhi	r2,1024
 2004a60:	10889804 	addi	r2,r2,8800
 2004a64:	10800003 	ldbu	r2,0(r2)
 2004a68:	10803fcc 	andi	r2,r2,255
 2004a6c:	103ffa26 	beq	r2,zero,2004a58 <confirmShutdown+0x7c>
		{
			delay(100);
 2004a70:	01001904 	movi	r4,100
 2004a74:	20019dc0 	call	20019dc <delay>
			if(keyFlag)
 2004a78:	00810034 	movhi	r2,1024
 2004a7c:	10889804 	addi	r2,r2,8800
 2004a80:	10800003 	ldbu	r2,0(r2)
 2004a84:	10803fcc 	andi	r2,r2,255
 2004a88:	10001d26 	beq	r2,zero,2004b00 <confirmShutdown+0x124>
			{
				keyVal_latch = keyVal;
 2004a8c:	00810034 	movhi	r2,1024
 2004a90:	10889404 	addi	r2,r2,8784
 2004a94:	10800003 	ldbu	r2,0(r2)
 2004a98:	e0bfff05 	stb	r2,-4(fp)
				if(keyVal_latch == KEY_MENU)
 2004a9c:	e0bfff03 	ldbu	r2,-4(fp)
 2004aa0:	10800318 	cmpnei	r2,r2,12
 2004aa4:	1000081e 	bne	r2,zero,2004ac8 <confirmShutdown+0xec>
				{
					while(keyFlag);
 2004aa8:	0001883a 	nop
 2004aac:	00810034 	movhi	r2,1024
 2004ab0:	10889804 	addi	r2,r2,8800
 2004ab4:	10800003 	ldbu	r2,0(r2)
 2004ab8:	10803fcc 	andi	r2,r2,255
 2004abc:	103ffb1e 	bne	r2,zero,2004aac <confirmShutdown+0xd0>
					return 0;
 2004ac0:	0005883a 	mov	r2,zero
 2004ac4:	00001506 	br	2004b1c <confirmShutdown+0x140>
				}
				else if(keyVal == KEY_ENTER)
 2004ac8:	00810034 	movhi	r2,1024
 2004acc:	10889404 	addi	r2,r2,8784
 2004ad0:	10800003 	ldbu	r2,0(r2)
 2004ad4:	10803fcc 	andi	r2,r2,255
 2004ad8:	10800398 	cmpnei	r2,r2,14
 2004adc:	1000081e 	bne	r2,zero,2004b00 <confirmShutdown+0x124>
				{
					while(keyFlag);
 2004ae0:	0001883a 	nop
 2004ae4:	00810034 	movhi	r2,1024
 2004ae8:	10889804 	addi	r2,r2,8800
 2004aec:	10800003 	ldbu	r2,0(r2)
 2004af0:	10803fcc 	andi	r2,r2,255
 2004af4:	103ffb1e 	bne	r2,zero,2004ae4 <confirmShutdown+0x108>
					return 1;
 2004af8:	00800044 	movi	r2,1
 2004afc:	00000706 	br	2004b1c <confirmShutdown+0x140>
				}
			}
			while(keyFlag);
 2004b00:	0001883a 	nop
 2004b04:	00810034 	movhi	r2,1024
 2004b08:	10889804 	addi	r2,r2,8800
 2004b0c:	10800003 	ldbu	r2,0(r2)
 2004b10:	10803fcc 	andi	r2,r2,255
 2004b14:	103ffb1e 	bne	r2,zero,2004b04 <confirmShutdown+0x128>
		}
	}
 2004b18:	003fcf06 	br	2004a58 <confirmShutdown+0x7c>
	return 0;
}
 2004b1c:	e037883a 	mov	sp,fp
 2004b20:	dfc00117 	ldw	ra,4(sp)
 2004b24:	df000017 	ldw	fp,0(sp)
 2004b28:	dec00204 	addi	sp,sp,8
 2004b2c:	f800283a 	ret

02004b30 <refreshShutdownMenuPage>:

void refreshShutdownMenuPage(unsigned char curr_state)
{
 2004b30:	defffd04 	addi	sp,sp,-12
 2004b34:	dfc00215 	stw	ra,8(sp)
 2004b38:	df000115 	stw	fp,4(sp)
 2004b3c:	df000104 	addi	fp,sp,4
 2004b40:	2005883a 	mov	r2,r4
 2004b44:	e0bfff05 	stb	r2,-4(fp)
	KPLED_All_Off();
 2004b48:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Enter(3);
 2004b4c:	010000c4 	movi	r4,3
 2004b50:	20012440 	call	2001244 <KPLED_Enter>
	if(curr_state != 1) KPLED_LeftArrow(3);
 2004b54:	e0bfff03 	ldbu	r2,-4(fp)
 2004b58:	10800060 	cmpeqi	r2,r2,1
 2004b5c:	1000021e 	bne	r2,zero,2004b68 <refreshShutdownMenuPage+0x38>
 2004b60:	010000c4 	movi	r4,3
 2004b64:	20010ac0 	call	20010ac <KPLED_LeftArrow>

	DisClear();
 2004b68:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 2004b6c:	0009883a 	mov	r4,zero
 2004b70:	20004fc0 	call	20004fc <DisShowCur>

	DisCurPos(1,1);
 2004b74:	01000044 	movi	r4,1
 2004b78:	01400044 	movi	r5,1
 2004b7c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Shutdown Seq.  ");
 2004b80:	01008074 	movhi	r4,513
 2004b84:	211b3404 	addi	r4,r4,27856
 2004b88:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(Num2toStr2(curr_state));
 2004b8c:	e0bfff03 	ldbu	r2,-4(fp)
 2004b90:	1009883a 	mov	r4,r2
 2004b94:	20062640 	call	2006264 <Num2toStr2>
 2004b98:	1009883a 	mov	r4,r2
 2004b9c:	20006000 	call	2000600 <DisWrStr>
	DisWrStr("/");
 2004ba0:	01008074 	movhi	r4,513
 2004ba4:	211b3804 	addi	r4,r4,27872
 2004ba8:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(Num2toStr2(SHUTDOWN_STEP));
 2004bac:	010001c4 	movi	r4,7
 2004bb0:	20062640 	call	2006264 <Num2toStr2>
 2004bb4:	1009883a 	mov	r4,r2
 2004bb8:	20006000 	call	2000600 <DisWrStr>

	DisCurPos(2,1);
 2004bbc:	01000084 	movi	r4,2
 2004bc0:	01400044 	movi	r5,1
 2004bc4:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(getShutdownInst(curr_state,1));
 2004bc8:	e0bfff03 	ldbu	r2,-4(fp)
 2004bcc:	1009883a 	mov	r4,r2
 2004bd0:	01400044 	movi	r5,1
 2004bd4:	20047ac0 	call	20047ac <getShutdownInst>
 2004bd8:	1009883a 	mov	r4,r2
 2004bdc:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(3,1);
 2004be0:	010000c4 	movi	r4,3
 2004be4:	01400044 	movi	r5,1
 2004be8:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(getShutdownInst(curr_state,2));
 2004bec:	e0bfff03 	ldbu	r2,-4(fp)
 2004bf0:	1009883a 	mov	r4,r2
 2004bf4:	01400084 	movi	r5,2
 2004bf8:	20047ac0 	call	20047ac <getShutdownInst>
 2004bfc:	1009883a 	mov	r4,r2
 2004c00:	20006000 	call	2000600 <DisWrStr>

	DisCurPos(4,1);
 2004c04:	01000104 	movi	r4,4
 2004c08:	01400044 	movi	r5,1
 2004c0c:	20005400 	call	2000540 <DisCurPos>
	if(curr_state != 1)
 2004c10:	e0bfff03 	ldbu	r2,-4(fp)
 2004c14:	10800060 	cmpeqi	r2,r2,1
 2004c18:	1000041e 	bne	r2,zero,2004c2c <refreshShutdownMenuPage+0xfc>
		DisWrStr("<Prev  ENTER=OK     ");
 2004c1c:	01008074 	movhi	r4,513
 2004c20:	211b3904 	addi	r4,r4,27876
 2004c24:	20006000 	call	2000600 <DisWrStr>
 2004c28:	00000306 	br	2004c38 <refreshShutdownMenuPage+0x108>
	else
		DisWrStr("       ENTER=OK     ");
 2004c2c:	01008074 	movhi	r4,513
 2004c30:	211b3f04 	addi	r4,r4,27900
 2004c34:	20006000 	call	2000600 <DisWrStr>


}
 2004c38:	e037883a 	mov	sp,fp
 2004c3c:	dfc00117 	ldw	ra,4(sp)
 2004c40:	df000017 	ldw	fp,0(sp)
 2004c44:	dec00204 	addi	sp,sp,8
 2004c48:	f800283a 	ret

02004c4c <enterShutdownMenu>:

void enterShutdownMenu()
{
 2004c4c:	defffd04 	addi	sp,sp,-12
 2004c50:	dfc00215 	stw	ra,8(sp)
 2004c54:	df000115 	stw	fp,4(sp)
 2004c58:	df000104 	addi	fp,sp,4
	if(!confirmShutdown())
 2004c5c:	20049dc0 	call	20049dc <confirmShutdown>
 2004c60:	10803fcc 	andi	r2,r2,255
 2004c64:	10008626 	beq	r2,zero,2004e80 <enterShutdownMenu+0x234>
		return;

	unsigned char curr_state = 1;
 2004c68:	00800044 	movi	r2,1
 2004c6c:	e0bfff05 	stb	r2,-4(fp)
	refreshShutdownMenuPage(curr_state);
 2004c70:	e0bfff03 	ldbu	r2,-4(fp)
 2004c74:	1009883a 	mov	r4,r2
 2004c78:	2004b300 	call	2004b30 <refreshShutdownMenuPage>
 2004c7c:	00000106 	br	2004c84 <enterShutdownMenu+0x38>
					}
				}
			}
			while(keyFlag);
		}
	}
 2004c80:	0001883a 	nop
	unsigned char curr_state = 1;
	refreshShutdownMenuPage(curr_state);
	unsigned char keyVal_latch;
	while(1)
	{
		if(keyFlag)
 2004c84:	00810034 	movhi	r2,1024
 2004c88:	10889804 	addi	r2,r2,8800
 2004c8c:	10800003 	ldbu	r2,0(r2)
 2004c90:	10803fcc 	andi	r2,r2,255
 2004c94:	103ffa26 	beq	r2,zero,2004c80 <enterShutdownMenu+0x34>
		{
			delay(100);
 2004c98:	01001904 	movi	r4,100
 2004c9c:	20019dc0 	call	20019dc <delay>
			if(keyFlag)
 2004ca0:	00810034 	movhi	r2,1024
 2004ca4:	10889804 	addi	r2,r2,8800
 2004ca8:	10800003 	ldbu	r2,0(r2)
 2004cac:	10803fcc 	andi	r2,r2,255
 2004cb0:	10004f26 	beq	r2,zero,2004df0 <enterShutdownMenu+0x1a4>
			{
				keyVal_latch = keyVal;
 2004cb4:	00810034 	movhi	r2,1024
 2004cb8:	10889404 	addi	r2,r2,8784
 2004cbc:	10800003 	ldbu	r2,0(r2)
 2004cc0:	e0bfff45 	stb	r2,-3(fp)
				if(keyVal_latch == KEY_LEFT)
 2004cc4:	e0bfff43 	ldbu	r2,-3(fp)
 2004cc8:	10800298 	cmpnei	r2,r2,10
 2004ccc:	10000a1e 	bne	r2,zero,2004cf8 <enterShutdownMenu+0xac>
				{
					if(curr_state > 1)
 2004cd0:	e0bfff03 	ldbu	r2,-4(fp)
 2004cd4:	108000b0 	cmpltui	r2,r2,2
 2004cd8:	1000451e 	bne	r2,zero,2004df0 <enterShutdownMenu+0x1a4>
					{
						curr_state--;
 2004cdc:	e0bfff03 	ldbu	r2,-4(fp)
 2004ce0:	10bfffc4 	addi	r2,r2,-1
 2004ce4:	e0bfff05 	stb	r2,-4(fp)
						refreshShutdownMenuPage(curr_state);
 2004ce8:	e0bfff03 	ldbu	r2,-4(fp)
 2004cec:	1009883a 	mov	r4,r2
 2004cf0:	2004b300 	call	2004b30 <refreshShutdownMenuPage>
						delay(MSG_DELAY);
						break;
					}
				}
			}
			while(keyFlag);
 2004cf4:	00003e06 	br	2004df0 <enterShutdownMenu+0x1a4>
					{
						curr_state--;
						refreshShutdownMenuPage(curr_state);
					}
				}
				else if(keyVal_latch == KEY_ENTER)
 2004cf8:	e0bfff43 	ldbu	r2,-3(fp)
 2004cfc:	10800398 	cmpnei	r2,r2,14
 2004d00:	10003b1e 	bne	r2,zero,2004df0 <enterShutdownMenu+0x1a4>
				{
					if(curr_state < SHUTDOWN_STEP)
 2004d04:	e0bfff03 	ldbu	r2,-4(fp)
 2004d08:	108001e8 	cmpgeui	r2,r2,7
 2004d0c:	1000071e 	bne	r2,zero,2004d2c <enterShutdownMenu+0xe0>
					{
						curr_state++;
 2004d10:	e0bfff03 	ldbu	r2,-4(fp)
 2004d14:	10800044 	addi	r2,r2,1
 2004d18:	e0bfff05 	stb	r2,-4(fp)
						refreshShutdownMenuPage(curr_state);
 2004d1c:	e0bfff03 	ldbu	r2,-4(fp)
 2004d20:	1009883a 	mov	r4,r2
 2004d24:	2004b300 	call	2004b30 <refreshShutdownMenuPage>
						delay(MSG_DELAY);
						break;
					}
				}
			}
			while(keyFlag);
 2004d28:	00003106 	br	2004df0 <enterShutdownMenu+0x1a4>
					if(curr_state < SHUTDOWN_STEP)
					{
						curr_state++;
						refreshShutdownMenuPage(curr_state);
					}
					else if(curr_state == SHUTDOWN_STEP)
 2004d2c:	e0bfff03 	ldbu	r2,-4(fp)
 2004d30:	108001d8 	cmpnei	r2,r2,7
 2004d34:	10002e1e 	bne	r2,zero,2004df0 <enterShutdownMenu+0x1a4>
					{
						DisClear();
 2004d38:	20006780 	call	2000678 <DisClear>
						DisCurPos(2,8);
 2004d3c:	01000084 	movi	r4,2
 2004d40:	01400204 	movi	r5,8
 2004d44:	20005400 	call	2000540 <DisCurPos>
						DisWrStr("Done!");
 2004d48:	01008074 	movhi	r4,513
 2004d4c:	211b4504 	addi	r4,r4,27924
 2004d50:	20006000 	call	2000600 <DisWrStr>
						delay(MSG_DELAY);
 2004d54:	01271014 	movui	r4,40000
 2004d58:	20019dc0 	call	20019dc <delay>
						break;
 2004d5c:	0001883a 	nop
			}
			while(keyFlag);
		}
	}

	clrTimer=1;
 2004d60:	00810034 	movhi	r2,1024
 2004d64:	10887c04 	addi	r2,r2,8688
 2004d68:	00c00044 	movi	r3,1
 2004d6c:	10c00005 	stb	r3,0(r2)
	clrTimer=0;
 2004d70:	00810034 	movhi	r2,1024
 2004d74:	10887c04 	addi	r2,r2,8688
 2004d78:	10000005 	stb	zero,0(r2)

	KPLED_All_Off();
 2004d7c:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Menu(3);
 2004d80:	010000c4 	movi	r4,3
 2004d84:	20011340 	call	2001134 <KPLED_Menu>

	DisClear();
 2004d88:	20006780 	call	2000678 <DisClear>
	DisCurPos(1,1);
 2004d8c:	01000044 	movi	r4,1
 2004d90:	01400044 	movi	r5,1
 2004d94:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(" System is Shutdown ");
 2004d98:	01008074 	movhi	r4,513
 2004d9c:	211b4704 	addi	r4,r4,27932
 2004da0:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(2,1);
 2004da4:	01000084 	movi	r4,2
 2004da8:	01400044 	movi	r5,1
 2004dac:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Power Off Controller");
 2004db0:	01008074 	movhi	r4,513
 2004db4:	211b4d04 	addi	r4,r4,27956
 2004db8:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(3,1);
 2004dbc:	010000c4 	movi	r4,3
 2004dc0:	01400044 	movi	r5,1
 2004dc4:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("         OR         ");
 2004dc8:	01008074 	movhi	r4,513
 2004dcc:	211b5304 	addi	r4,r4,27980
 2004dd0:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(4,1);
 2004dd4:	01000104 	movi	r4,4
 2004dd8:	01400044 	movi	r5,1
 2004ddc:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Press MENU to Start ");
 2004de0:	01008074 	movhi	r4,513
 2004de4:	211b5904 	addi	r4,r4,28004
 2004de8:	20006000 	call	2000600 <DisWrStr>
 2004dec:	00000806 	br	2004e10 <enterShutdownMenu+0x1c4>
						delay(MSG_DELAY);
						break;
					}
				}
			}
			while(keyFlag);
 2004df0:	0001883a 	nop
 2004df4:	00810034 	movhi	r2,1024
 2004df8:	10889804 	addi	r2,r2,8800
 2004dfc:	10800003 	ldbu	r2,0(r2)
 2004e00:	10803fcc 	andi	r2,r2,255
 2004e04:	103ffb1e 	bne	r2,zero,2004df4 <enterShutdownMenu+0x1a8>
		}
	}
 2004e08:	003f9d06 	br	2004c80 <enterShutdownMenu+0x34>
					enterStartupMenu();
					break;
				}
			}
		}
	}
 2004e0c:	0001883a 	nop
	DisCurPos(4,1);
	DisWrStr("Press MENU to Start ");

	while(1)
	{
		if(keyFlag)
 2004e10:	00810034 	movhi	r2,1024
 2004e14:	10889804 	addi	r2,r2,8800
 2004e18:	10800003 	ldbu	r2,0(r2)
 2004e1c:	10803fcc 	andi	r2,r2,255
 2004e20:	103ffa26 	beq	r2,zero,2004e0c <enterShutdownMenu+0x1c0>
		{
			delay(100);
 2004e24:	01001904 	movi	r4,100
 2004e28:	20019dc0 	call	20019dc <delay>
			if(keyFlag)
 2004e2c:	00810034 	movhi	r2,1024
 2004e30:	10889804 	addi	r2,r2,8800
 2004e34:	10800003 	ldbu	r2,0(r2)
 2004e38:	10803fcc 	andi	r2,r2,255
 2004e3c:	103ff326 	beq	r2,zero,2004e0c <enterShutdownMenu+0x1c0>
			{
				keyVal_latch = keyVal;
 2004e40:	00810034 	movhi	r2,1024
 2004e44:	10889404 	addi	r2,r2,8784
 2004e48:	10800003 	ldbu	r2,0(r2)
 2004e4c:	e0bfff45 	stb	r2,-3(fp)
				if(keyVal_latch == KEY_MENU)
 2004e50:	e0bfff43 	ldbu	r2,-3(fp)
 2004e54:	10800318 	cmpnei	r2,r2,12
 2004e58:	103fec1e 	bne	r2,zero,2004e0c <enterShutdownMenu+0x1c0>
				{
					while(keyFlag);
 2004e5c:	0001883a 	nop
 2004e60:	00810034 	movhi	r2,1024
 2004e64:	10889804 	addi	r2,r2,8800
 2004e68:	10800003 	ldbu	r2,0(r2)
 2004e6c:	10803fcc 	andi	r2,r2,255
 2004e70:	103ffb1e 	bne	r2,zero,2004e60 <enterShutdownMenu+0x214>
					enterStartupMenu();
 2004e74:	20053000 	call	2005300 <enterStartupMenu>
					break;
 2004e78:	0001883a 	nop
 2004e7c:	00000106 	br	2004e84 <enterShutdownMenu+0x238>
}

void enterShutdownMenu()
{
	if(!confirmShutdown())
		return;
 2004e80:	0001883a 	nop
					break;
				}
			}
		}
	}
}
 2004e84:	e037883a 	mov	sp,fp
 2004e88:	dfc00117 	ldw	ra,4(sp)
 2004e8c:	df000017 	ldw	fp,0(sp)
 2004e90:	dec00204 	addi	sp,sp,8
 2004e94:	f800283a 	ret

02004e98 <getStartupInst>:
#define STARTUP_STEP	10

#define rstHeaterTimer *(unsigned char*)RSTHEATERTIMER_BASE

char* getStartupInst(unsigned char step, unsigned char line)
{
 2004e98:	defffd04 	addi	sp,sp,-12
 2004e9c:	df000215 	stw	fp,8(sp)
 2004ea0:	df000204 	addi	fp,sp,8
 2004ea4:	2007883a 	mov	r3,r4
 2004ea8:	2805883a 	mov	r2,r5
 2004eac:	e0fffe05 	stb	r3,-8(fp)
 2004eb0:	e0bfff05 	stb	r2,-4(fp)
	switch(step)
 2004eb4:	e0bffe03 	ldbu	r2,-8(fp)
 2004eb8:	10c002e8 	cmpgeui	r3,r2,11
 2004ebc:	18006c1e 	bne	r3,zero,2005070 <getStartupInst+0x1d8>
 2004ec0:	1085883a 	add	r2,r2,r2
 2004ec4:	1087883a 	add	r3,r2,r2
 2004ec8:	00808034 	movhi	r2,512
 2004ecc:	1093b704 	addi	r2,r2,20188
 2004ed0:	1885883a 	add	r2,r3,r2
 2004ed4:	10800017 	ldw	r2,0(r2)
 2004ed8:	1000683a 	jmp	r2
 2004edc:	02005070 	cmpltui	r8,zero,321
 2004ee0:	02004f08 	cmpgei	r8,zero,316
 2004ee4:	02004f2c 	andhi	r8,zero,316
 2004ee8:	02004f50 	cmplti	r8,zero,317
 2004eec:	02004f74 	movhi	r8,317
 2004ef0:	02004f98 	cmpnei	r8,zero,318
 2004ef4:	02004fbc 	xorhi	r8,zero,318
 2004ef8:	02004fe0 	cmpeqi	r8,zero,319
 2004efc:	02005004 	movi	r8,320
 2004f00:	02005028 	cmpgeui	r8,zero,320
 2004f04:	0200504c 	andi	r8,zero,321
	{
		case 1:		return line==1	?	"Check"					:	"Oil & Hoses";
 2004f08:	e0bfff03 	ldbu	r2,-4(fp)
 2004f0c:	10800058 	cmpnei	r2,r2,1
 2004f10:	1000031e 	bne	r2,zero,2004f20 <getStartupInst+0x88>
 2004f14:	00808074 	movhi	r2,513
 2004f18:	109b5f04 	addi	r2,r2,28028
 2004f1c:	00000206 	br	2004f28 <getStartupInst+0x90>
 2004f20:	00808074 	movhi	r2,513
 2004f24:	109b6104 	addi	r2,r2,28036
 2004f28:	00005306 	br	2005078 <getStartupInst+0x1e0>
		case 2:		return line==1	?	"Turn on thyratron"		:	"heater (10 minutes)";
 2004f2c:	e0bfff03 	ldbu	r2,-4(fp)
 2004f30:	10800058 	cmpnei	r2,r2,1
 2004f34:	1000031e 	bne	r2,zero,2004f44 <getStartupInst+0xac>
 2004f38:	00808074 	movhi	r2,513
 2004f3c:	109b6404 	addi	r2,r2,28048
 2004f40:	00000206 	br	2004f4c <getStartupInst+0xb4>
 2004f44:	00808074 	movhi	r2,513
 2004f48:	109b6904 	addi	r2,r2,28068
 2004f4c:	00004a06 	br	2005078 <getStartupInst+0x1e0>
		case 3:		return line==1	?	"Pump using"			:	"roughing pumps";
 2004f50:	e0bfff03 	ldbu	r2,-4(fp)
 2004f54:	10800058 	cmpnei	r2,r2,1
 2004f58:	1000031e 	bne	r2,zero,2004f68 <getStartupInst+0xd0>
 2004f5c:	00808074 	movhi	r2,513
 2004f60:	109b6e04 	addi	r2,r2,28088
 2004f64:	00000206 	br	2004f70 <getStartupInst+0xd8>
 2004f68:	00808074 	movhi	r2,513
 2004f6c:	109b7104 	addi	r2,r2,28100
 2004f70:	00004106 	br	2005078 <getStartupInst+0x1e0>
		case 4:		return line==1	?	"Run cooling water"		:	" ";
 2004f74:	e0bfff03 	ldbu	r2,-4(fp)
 2004f78:	10800058 	cmpnei	r2,r2,1
 2004f7c:	1000031e 	bne	r2,zero,2004f8c <getStartupInst+0xf4>
 2004f80:	00808074 	movhi	r2,513
 2004f84:	109b7504 	addi	r2,r2,28116
 2004f88:	00000206 	br	2004f94 <getStartupInst+0xfc>
 2004f8c:	00808074 	movhi	r2,513
 2004f90:	109b7a04 	addi	r2,r2,28136
 2004f94:	00003806 	br	2005078 <getStartupInst+0x1e0>
		case 5:		return line==1	?	"Turn on turbo pump"	:	"stabilize pressure";
 2004f98:	e0bfff03 	ldbu	r2,-4(fp)
 2004f9c:	10800058 	cmpnei	r2,r2,1
 2004fa0:	1000031e 	bne	r2,zero,2004fb0 <getStartupInst+0x118>
 2004fa4:	00808074 	movhi	r2,513
 2004fa8:	109b7b04 	addi	r2,r2,28140
 2004fac:	00000206 	br	2004fb8 <getStartupInst+0x120>
 2004fb0:	00808074 	movhi	r2,513
 2004fb4:	109b8004 	addi	r2,r2,28160
 2004fb8:	00002f06 	br	2005078 <getStartupInst+0x1e0>
		case 6:		return line==1	?	"Turn on oil pump"		:	" ";
 2004fbc:	e0bfff03 	ldbu	r2,-4(fp)
 2004fc0:	10800058 	cmpnei	r2,r2,1
 2004fc4:	1000031e 	bne	r2,zero,2004fd4 <getStartupInst+0x13c>
 2004fc8:	00808074 	movhi	r2,513
 2004fcc:	109b8504 	addi	r2,r2,28180
 2004fd0:	00000206 	br	2004fdc <getStartupInst+0x144>
 2004fd4:	00808074 	movhi	r2,513
 2004fd8:	109b7a04 	addi	r2,r2,28136
 2004fdc:	00002606 	br	2005078 <getStartupInst+0x1e0>
		case 7:		return line==1	?	"Open Argon tank"		:	"for lasing pressure";
 2004fe0:	e0bfff03 	ldbu	r2,-4(fp)
 2004fe4:	10800058 	cmpnei	r2,r2,1
 2004fe8:	1000031e 	bne	r2,zero,2004ff8 <getStartupInst+0x160>
 2004fec:	00808074 	movhi	r2,513
 2004ff0:	109b8a04 	addi	r2,r2,28200
 2004ff4:	00000206 	br	2005000 <getStartupInst+0x168>
 2004ff8:	00808074 	movhi	r2,513
 2004ffc:	109b8e04 	addi	r2,r2,28216
 2005000:	00001d06 	br	2005078 <getStartupInst+0x1e0>
		case 8:		return line==1	?	"Turn on RF unit"		:	"Check for faults";
 2005004:	e0bfff03 	ldbu	r2,-4(fp)
 2005008:	10800058 	cmpnei	r2,r2,1
 200500c:	1000031e 	bne	r2,zero,200501c <getStartupInst+0x184>
 2005010:	00808074 	movhi	r2,513
 2005014:	109b9304 	addi	r2,r2,28236
 2005018:	00000206 	br	2005024 <getStartupInst+0x18c>
 200501c:	00808074 	movhi	r2,513
 2005020:	109b9704 	addi	r2,r2,28252
 2005024:	00001406 	br	2005078 <getStartupInst+0x1e0>
		case 9:		return line==1	?	"Turn on power units"	:	"DO NOT enable HV";
 2005028:	e0bfff03 	ldbu	r2,-4(fp)
 200502c:	10800058 	cmpnei	r2,r2,1
 2005030:	1000031e 	bne	r2,zero,2005040 <getStartupInst+0x1a8>
 2005034:	00808074 	movhi	r2,513
 2005038:	109b9c04 	addi	r2,r2,28272
 200503c:	00000206 	br	2005048 <getStartupInst+0x1b0>
 2005040:	00808074 	movhi	r2,513
 2005044:	109ba104 	addi	r2,r2,28292
 2005048:	00000b06 	br	2005078 <getStartupInst+0x1e0>
		case 10:	return line==1	?	"Start to fire"			:	"Then enable HV";
 200504c:	e0bfff03 	ldbu	r2,-4(fp)
 2005050:	10800058 	cmpnei	r2,r2,1
 2005054:	1000031e 	bne	r2,zero,2005064 <getStartupInst+0x1cc>
 2005058:	00808074 	movhi	r2,513
 200505c:	109ba604 	addi	r2,r2,28312
 2005060:	00000206 	br	200506c <getStartupInst+0x1d4>
 2005064:	00808074 	movhi	r2,513
 2005068:	109baa04 	addi	r2,r2,28328
 200506c:	00000206 	br	2005078 <getStartupInst+0x1e0>
	}
	return "";
 2005070:	00808074 	movhi	r2,513
 2005074:	109bae04 	addi	r2,r2,28344
}
 2005078:	e037883a 	mov	sp,fp
 200507c:	df000017 	ldw	fp,0(sp)
 2005080:	dec00104 	addi	sp,sp,4
 2005084:	f800283a 	ret

02005088 <startupAction>:

void startupAction(unsigned char step,int flag)              //If it's first time running heater,enable that 10 minutes counter.
{
 2005088:	defffd04 	addi	sp,sp,-12
 200508c:	df000215 	stw	fp,8(sp)
 2005090:	df000204 	addi	fp,sp,8
 2005094:	2005883a 	mov	r2,r4
 2005098:	e17fff15 	stw	r5,-4(fp)
 200509c:	e0bffe05 	stb	r2,-8(fp)
	if(flag)
 20050a0:	e0bfff17 	ldw	r2,-4(fp)
 20050a4:	10001d26 	beq	r2,zero,200511c <startupAction+0x94>
	switch(step)
 20050a8:	e0bffe03 	ldbu	r2,-8(fp)
 20050ac:	10c002e8 	cmpgeui	r3,r2,11
 20050b0:	18001a1e 	bne	r3,zero,200511c <startupAction+0x94>
 20050b4:	1085883a 	add	r2,r2,r2
 20050b8:	1087883a 	add	r3,r2,r2
 20050bc:	00808034 	movhi	r2,512
 20050c0:	10943404 	addi	r2,r2,20688
 20050c4:	1885883a 	add	r2,r3,r2
 20050c8:	10800017 	ldw	r2,0(r2)
 20050cc:	1000683a 	jmp	r2
 20050d0:	0200511c 	xori	r8,zero,324
 20050d4:	0200511c 	xori	r8,zero,324
 20050d8:	020050fc 	xorhi	r8,zero,323
 20050dc:	0200511c 	xori	r8,zero,324
 20050e0:	0200511c 	xori	r8,zero,324
 20050e4:	0200511c 	xori	r8,zero,324
 20050e8:	0200511c 	xori	r8,zero,324
 20050ec:	0200511c 	xori	r8,zero,324
 20050f0:	0200511c 	xori	r8,zero,324
 20050f4:	0200511c 	xori	r8,zero,324
 20050f8:	0200511c 	xori	r8,zero,324
	{
		case 1:	break;
		case 2: {rstHeaterTimer=1; rstHeaterTimer=0; break;}
 20050fc:	00810034 	movhi	r2,1024
 2005100:	10882004 	addi	r2,r2,8320
 2005104:	00c00044 	movi	r3,1
 2005108:	10c00005 	stb	r3,0(r2)
 200510c:	00810034 	movhi	r2,1024
 2005110:	10882004 	addi	r2,r2,8320
 2005114:	10000005 	stb	zero,0(r2)
 2005118:	0001883a 	nop
		case 7: break;
		case 8: break;
		case 9: break;
		case 10: break;
	}
}
 200511c:	e037883a 	mov	sp,fp
 2005120:	df000017 	ldw	fp,0(sp)
 2005124:	dec00104 	addi	sp,sp,4
 2005128:	f800283a 	ret

0200512c <entryStartupMenu>:

void entryStartupMenu(unsigned char number)
{
 200512c:	defffd04 	addi	sp,sp,-12
 2005130:	dfc00215 	stw	ra,8(sp)
 2005134:	df000115 	stw	fp,4(sp)
 2005138:	df000104 	addi	fp,sp,4
 200513c:	2005883a 	mov	r2,r4
 2005140:	e0bfff05 	stb	r2,-4(fp)
	KPLED_All_Off();
 2005144:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Enter(3);
 2005148:	010000c4 	movi	r4,3
 200514c:	20012440 	call	2001244 <KPLED_Enter>
	KPLED_Enable(1);
 2005150:	01000044 	movi	r4,1
 2005154:	20012cc0 	call	20012cc <KPLED_Enable>
	KPLED_RightArrow(3);
 2005158:	010000c4 	movi	r4,3
 200515c:	20010200 	call	2001020 <KPLED_RightArrow>
	KPLED_LeftArrow(3);
 2005160:	010000c4 	movi	r4,3
 2005164:	20010ac0 	call	20010ac <KPLED_LeftArrow>

	DisClear();
 2005168:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 200516c:	0009883a 	mov	r4,zero
 2005170:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(1,1);
 2005174:	01000044 	movi	r4,1
 2005178:	01400044 	movi	r5,1
 200517c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("       MENU         ");
 2005180:	01008074 	movhi	r4,513
 2005184:	211baf04 	addi	r4,r4,28348
 2005188:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(2,1);
 200518c:	01000084 	movi	r4,2
 2005190:	01400044 	movi	r5,1
 2005194:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(Num2toStr2(number));
 2005198:	e0bfff03 	ldbu	r2,-4(fp)
 200519c:	1009883a 	mov	r4,r2
 20051a0:	20062640 	call	2006264 <Num2toStr2>
 20051a4:	1009883a 	mov	r4,r2
 20051a8:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(".Startup Sequence");
 20051ac:	01008074 	movhi	r4,513
 20051b0:	211bb504 	addi	r4,r4,28372
 20051b4:	20006000 	call	2000600 <DisWrStr>

	DisCurPos(4,1);
 20051b8:	01000104 	movi	r4,4
 20051bc:	01400044 	movi	r5,1
 20051c0:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("<Prev   Enter  Next>");
 20051c4:	01008074 	movhi	r4,513
 20051c8:	211bba04 	addi	r4,r4,28392
 20051cc:	20006000 	call	2000600 <DisWrStr>
}
 20051d0:	e037883a 	mov	sp,fp
 20051d4:	dfc00117 	ldw	ra,4(sp)
 20051d8:	df000017 	ldw	fp,0(sp)
 20051dc:	dec00204 	addi	sp,sp,8
 20051e0:	f800283a 	ret

020051e4 <refreshStartupMenuPage>:

void refreshStartupMenuPage(unsigned char curr_state)
{
 20051e4:	defffd04 	addi	sp,sp,-12
 20051e8:	dfc00215 	stw	ra,8(sp)
 20051ec:	df000115 	stw	fp,4(sp)
 20051f0:	df000104 	addi	fp,sp,4
 20051f4:	2005883a 	mov	r2,r4
 20051f8:	e0bfff05 	stb	r2,-4(fp)
	//static unsigned char max_state_reached;
	KPLED_All_Off();
 20051fc:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Enter(3);
 2005200:	010000c4 	movi	r4,3
 2005204:	20012440 	call	2001244 <KPLED_Enter>
	if(curr_state != 1) KPLED_LeftArrow(3);
 2005208:	e0bfff03 	ldbu	r2,-4(fp)
 200520c:	10800060 	cmpeqi	r2,r2,1
 2005210:	1000021e 	bne	r2,zero,200521c <refreshStartupMenuPage+0x38>
 2005214:	010000c4 	movi	r4,3
 2005218:	20010ac0 	call	20010ac <KPLED_LeftArrow>

	DisClear();
 200521c:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 2005220:	0009883a 	mov	r4,zero
 2005224:	20004fc0 	call	20004fc <DisShowCur>

	DisCurPos(1,1);
 2005228:	01000044 	movi	r4,1
 200522c:	01400044 	movi	r5,1
 2005230:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Startup Seq.   ");
 2005234:	01008074 	movhi	r4,513
 2005238:	211bc004 	addi	r4,r4,28416
 200523c:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(Num2toStr2(curr_state));
 2005240:	e0bfff03 	ldbu	r2,-4(fp)
 2005244:	1009883a 	mov	r4,r2
 2005248:	20062640 	call	2006264 <Num2toStr2>
 200524c:	1009883a 	mov	r4,r2
 2005250:	20006000 	call	2000600 <DisWrStr>
	DisWrStr("/");
 2005254:	01008074 	movhi	r4,513
 2005258:	211bc404 	addi	r4,r4,28432
 200525c:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(Num2toStr2(STARTUP_STEP));
 2005260:	01000284 	movi	r4,10
 2005264:	20062640 	call	2006264 <Num2toStr2>
 2005268:	1009883a 	mov	r4,r2
 200526c:	20006000 	call	2000600 <DisWrStr>

	DisCurPos(2,1);
 2005270:	01000084 	movi	r4,2
 2005274:	01400044 	movi	r5,1
 2005278:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(getStartupInst(curr_state,1));   //display instructions.
 200527c:	e0bfff03 	ldbu	r2,-4(fp)
 2005280:	1009883a 	mov	r4,r2
 2005284:	01400044 	movi	r5,1
 2005288:	2004e980 	call	2004e98 <getStartupInst>
 200528c:	1009883a 	mov	r4,r2
 2005290:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(3,1);
 2005294:	010000c4 	movi	r4,3
 2005298:	01400044 	movi	r5,1
 200529c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(getStartupInst(curr_state,2));
 20052a0:	e0bfff03 	ldbu	r2,-4(fp)
 20052a4:	1009883a 	mov	r4,r2
 20052a8:	01400084 	movi	r5,2
 20052ac:	2004e980 	call	2004e98 <getStartupInst>
 20052b0:	1009883a 	mov	r4,r2
 20052b4:	20006000 	call	2000600 <DisWrStr>

	DisCurPos(4,1);
 20052b8:	01000104 	movi	r4,4
 20052bc:	01400044 	movi	r5,1
 20052c0:	20005400 	call	2000540 <DisCurPos>
	if(curr_state != 1)
 20052c4:	e0bfff03 	ldbu	r2,-4(fp)
 20052c8:	10800060 	cmpeqi	r2,r2,1
 20052cc:	1000041e 	bne	r2,zero,20052e0 <refreshStartupMenuPage+0xfc>
		DisWrStr("<Prev  ENTER=OK     ");
 20052d0:	01008074 	movhi	r4,513
 20052d4:	211bc504 	addi	r4,r4,28436
 20052d8:	20006000 	call	2000600 <DisWrStr>
 20052dc:	00000306 	br	20052ec <refreshStartupMenuPage+0x108>
	else
		DisWrStr("       ENTER=OK     ");
 20052e0:	01008074 	movhi	r4,513
 20052e4:	211bcb04 	addi	r4,r4,28460
 20052e8:	20006000 	call	2000600 <DisWrStr>


}
 20052ec:	e037883a 	mov	sp,fp
 20052f0:	dfc00117 	ldw	ra,4(sp)
 20052f4:	df000017 	ldw	fp,0(sp)
 20052f8:	dec00204 	addi	sp,sp,8
 20052fc:	f800283a 	ret

02005300 <enterStartupMenu>:

void enterStartupMenu(int first_time)   //first_time is 1 if the heater is started one time and will hava 10 minutes count down
{
 2005300:	defffc04 	addi	sp,sp,-16
 2005304:	dfc00315 	stw	ra,12(sp)
 2005308:	df000215 	stw	fp,8(sp)
 200530c:	df000204 	addi	fp,sp,8
 2005310:	e13fff15 	stw	r4,-4(fp)
	unsigned char curr_state = 1;
 2005314:	00800044 	movi	r2,1
 2005318:	e0bffe05 	stb	r2,-8(fp)
	refreshStartupMenuPage(curr_state);
 200531c:	e0bffe03 	ldbu	r2,-8(fp)
 2005320:	1009883a 	mov	r4,r2
 2005324:	20051e40 	call	20051e4 <refreshStartupMenuPage>
 2005328:	00000106 	br	2005330 <enterStartupMenu+0x30>
					}
				}
			}
			while(keyFlag);
		}
	}
 200532c:	0001883a 	nop
	unsigned char curr_state = 1;
	refreshStartupMenuPage(curr_state);
	unsigned char keyVal_latch;
	while(1)
	{
		if(keyFlag)
 2005330:	00810034 	movhi	r2,1024
 2005334:	10889804 	addi	r2,r2,8800
 2005338:	10800003 	ldbu	r2,0(r2)
 200533c:	10803fcc 	andi	r2,r2,255
 2005340:	103ffa26 	beq	r2,zero,200532c <enterStartupMenu+0x2c>
		{
			delay(100);
 2005344:	01001904 	movi	r4,100
 2005348:	20019dc0 	call	20019dc <delay>
			if(keyFlag)
 200534c:	00810034 	movhi	r2,1024
 2005350:	10889804 	addi	r2,r2,8800
 2005354:	10800003 	ldbu	r2,0(r2)
 2005358:	10803fcc 	andi	r2,r2,255
 200535c:	10003026 	beq	r2,zero,2005420 <enterStartupMenu+0x120>
			{
				keyVal_latch = keyVal;
 2005360:	00810034 	movhi	r2,1024
 2005364:	10889404 	addi	r2,r2,8784
 2005368:	10800003 	ldbu	r2,0(r2)
 200536c:	e0bffe45 	stb	r2,-7(fp)
				if(keyVal_latch == KEY_LEFT)
 2005370:	e0bffe43 	ldbu	r2,-7(fp)
 2005374:	10800298 	cmpnei	r2,r2,10
 2005378:	10000a1e 	bne	r2,zero,20053a4 <enterStartupMenu+0xa4>
				{
					if(curr_state > 1)
 200537c:	e0bffe03 	ldbu	r2,-8(fp)
 2005380:	108000b0 	cmpltui	r2,r2,2
 2005384:	1000261e 	bne	r2,zero,2005420 <enterStartupMenu+0x120>
					{
						curr_state--;
 2005388:	e0bffe03 	ldbu	r2,-8(fp)
 200538c:	10bfffc4 	addi	r2,r2,-1
 2005390:	e0bffe05 	stb	r2,-8(fp)
						refreshStartupMenuPage(curr_state);
 2005394:	e0bffe03 	ldbu	r2,-8(fp)
 2005398:	1009883a 	mov	r4,r2
 200539c:	20051e40 	call	20051e4 <refreshStartupMenuPage>
						delay(MSG_DELAY);
						return;
					}
				}
			}
			while(keyFlag);
 20053a0:	00001f06 	br	2005420 <enterStartupMenu+0x120>
					{
						curr_state--;
						refreshStartupMenuPage(curr_state);
					}
				}
				else if(keyVal_latch == KEY_ENTER)
 20053a4:	e0bffe43 	ldbu	r2,-7(fp)
 20053a8:	10800398 	cmpnei	r2,r2,14
 20053ac:	10001c1e 	bne	r2,zero,2005420 <enterStartupMenu+0x120>
				{
					startupAction(curr_state,first_time);
 20053b0:	e0bffe03 	ldbu	r2,-8(fp)
 20053b4:	1009883a 	mov	r4,r2
 20053b8:	e17fff17 	ldw	r5,-4(fp)
 20053bc:	20050880 	call	2005088 <startupAction>
					if(curr_state < STARTUP_STEP)
 20053c0:	e0bffe03 	ldbu	r2,-8(fp)
 20053c4:	108002a8 	cmpgeui	r2,r2,10
 20053c8:	1000071e 	bne	r2,zero,20053e8 <enterStartupMenu+0xe8>
					{
						curr_state++;
 20053cc:	e0bffe03 	ldbu	r2,-8(fp)
 20053d0:	10800044 	addi	r2,r2,1
 20053d4:	e0bffe05 	stb	r2,-8(fp)
						refreshStartupMenuPage(curr_state);
 20053d8:	e0bffe03 	ldbu	r2,-8(fp)
 20053dc:	1009883a 	mov	r4,r2
 20053e0:	20051e40 	call	20051e4 <refreshStartupMenuPage>
						delay(MSG_DELAY);
						return;
					}
				}
			}
			while(keyFlag);
 20053e4:	00000e06 	br	2005420 <enterStartupMenu+0x120>
					if(curr_state < STARTUP_STEP)
					{
						curr_state++;
						refreshStartupMenuPage(curr_state);
					}
					else if(curr_state == STARTUP_STEP)
 20053e8:	e0bffe03 	ldbu	r2,-8(fp)
 20053ec:	10800298 	cmpnei	r2,r2,10
 20053f0:	10000b1e 	bne	r2,zero,2005420 <enterStartupMenu+0x120>
					{
						DisClear();
 20053f4:	20006780 	call	2000678 <DisClear>
						DisCurPos(2,8);
 20053f8:	01000084 	movi	r4,2
 20053fc:	01400204 	movi	r5,8
 2005400:	20005400 	call	2000540 <DisCurPos>
						DisWrStr("Done!");
 2005404:	01008074 	movhi	r4,513
 2005408:	211bd104 	addi	r4,r4,28484
 200540c:	20006000 	call	2000600 <DisWrStr>
						delay(MSG_DELAY);
 2005410:	01271014 	movui	r4,40000
 2005414:	20019dc0 	call	20019dc <delay>
						return;
 2005418:	0001883a 	nop
 200541c:	00000706 	br	200543c <enterStartupMenu+0x13c>
					}
				}
			}
			while(keyFlag);
 2005420:	0001883a 	nop
 2005424:	00810034 	movhi	r2,1024
 2005428:	10889804 	addi	r2,r2,8800
 200542c:	10800003 	ldbu	r2,0(r2)
 2005430:	10803fcc 	andi	r2,r2,255
 2005434:	103ffb1e 	bne	r2,zero,2005424 <enterStartupMenu+0x124>
		}
	}
 2005438:	003fbc06 	br	200532c <enterStartupMenu+0x2c>
}
 200543c:	e037883a 	mov	sp,fp
 2005440:	dfc00117 	ldw	ra,4(sp)
 2005444:	df000017 	ldw	fp,0(sp)
 2005448:	dec00204 	addi	sp,sp,8
 200544c:	f800283a 	ret

02005450 <Num10toStr10>:
#include "..\inc\comInterface.h"
#include "..\inc\errorCheck.h"
#include "..\inc\KPLED.h"

char* Num10toStr10(unsigned int num)
{
 2005450:	defffb04 	addi	sp,sp,-20
 2005454:	dfc00415 	stw	ra,16(sp)
 2005458:	df000315 	stw	fp,12(sp)
 200545c:	dc000215 	stw	r16,8(sp)
 2005460:	df000204 	addi	fp,sp,8
 2005464:	e13fff15 	stw	r4,-4(fp)
	char* num_str = "0000000000";
 2005468:	00808074 	movhi	r2,513
 200546c:	109bd304 	addi	r2,r2,28492
 2005470:	e0bffe15 	stw	r2,-8(fp)

	num_str[0] = 0x30 + num / 1000000000;	num = num % 1000000000;
 2005474:	e0bfff17 	ldw	r2,-4(fp)
 2005478:	1009883a 	mov	r4,r2
 200547c:	014ee6f4 	movhi	r5,15259
 2005480:	29728004 	addi	r5,r5,-13824
 2005484:	20093a80 	call	20093a8 <__udivsi3>
 2005488:	10800c04 	addi	r2,r2,48
 200548c:	1007883a 	mov	r3,r2
 2005490:	e0bffe17 	ldw	r2,-8(fp)
 2005494:	10c00005 	stb	r3,0(r2)
 2005498:	e0bfff17 	ldw	r2,-4(fp)
 200549c:	1009883a 	mov	r4,r2
 20054a0:	014ee6f4 	movhi	r5,15259
 20054a4:	29728004 	addi	r5,r5,-13824
 20054a8:	20093b00 	call	20093b0 <__umodsi3>
 20054ac:	e0bfff15 	stw	r2,-4(fp)
	num_str[1] = 0x30 + num / 100000000;	num = num % 100000000;
 20054b0:	e0bffe17 	ldw	r2,-8(fp)
 20054b4:	14000044 	addi	r16,r2,1
 20054b8:	e0bfff17 	ldw	r2,-4(fp)
 20054bc:	1009883a 	mov	r4,r2
 20054c0:	01417db4 	movhi	r5,1526
 20054c4:	29784004 	addi	r5,r5,-7936
 20054c8:	20093a80 	call	20093a8 <__udivsi3>
 20054cc:	10800c04 	addi	r2,r2,48
 20054d0:	80800005 	stb	r2,0(r16)
 20054d4:	e0bfff17 	ldw	r2,-4(fp)
 20054d8:	1009883a 	mov	r4,r2
 20054dc:	01417db4 	movhi	r5,1526
 20054e0:	29784004 	addi	r5,r5,-7936
 20054e4:	20093b00 	call	20093b0 <__umodsi3>
 20054e8:	e0bfff15 	stw	r2,-4(fp)
	num_str[2] = 0x30 + num / 10000000;		num = num % 10000000;
 20054ec:	e0bffe17 	ldw	r2,-8(fp)
 20054f0:	14000084 	addi	r16,r2,2
 20054f4:	e0bfff17 	ldw	r2,-4(fp)
 20054f8:	1009883a 	mov	r4,r2
 20054fc:	01402674 	movhi	r5,153
 2005500:	2965a004 	addi	r5,r5,-27008
 2005504:	20093a80 	call	20093a8 <__udivsi3>
 2005508:	10800c04 	addi	r2,r2,48
 200550c:	80800005 	stb	r2,0(r16)
 2005510:	e0bfff17 	ldw	r2,-4(fp)
 2005514:	1009883a 	mov	r4,r2
 2005518:	01402674 	movhi	r5,153
 200551c:	2965a004 	addi	r5,r5,-27008
 2005520:	20093b00 	call	20093b0 <__umodsi3>
 2005524:	e0bfff15 	stw	r2,-4(fp)
	num_str[3] = 0x30 + num / 1000000;		num = num % 1000000;
 2005528:	e0bffe17 	ldw	r2,-8(fp)
 200552c:	140000c4 	addi	r16,r2,3
 2005530:	e0bfff17 	ldw	r2,-4(fp)
 2005534:	1009883a 	mov	r4,r2
 2005538:	014003f4 	movhi	r5,15
 200553c:	29509004 	addi	r5,r5,16960
 2005540:	20093a80 	call	20093a8 <__udivsi3>
 2005544:	10800c04 	addi	r2,r2,48
 2005548:	80800005 	stb	r2,0(r16)
 200554c:	e0bfff17 	ldw	r2,-4(fp)
 2005550:	1009883a 	mov	r4,r2
 2005554:	014003f4 	movhi	r5,15
 2005558:	29509004 	addi	r5,r5,16960
 200555c:	20093b00 	call	20093b0 <__umodsi3>
 2005560:	e0bfff15 	stw	r2,-4(fp)
	num_str[4] = 0x30 + num / 100000;		num = num % 100000;
 2005564:	e0bffe17 	ldw	r2,-8(fp)
 2005568:	14000104 	addi	r16,r2,4
 200556c:	e0bfff17 	ldw	r2,-4(fp)
 2005570:	1009883a 	mov	r4,r2
 2005574:	014000b4 	movhi	r5,2
 2005578:	2961a804 	addi	r5,r5,-31072
 200557c:	20093a80 	call	20093a8 <__udivsi3>
 2005580:	10800c04 	addi	r2,r2,48
 2005584:	80800005 	stb	r2,0(r16)
 2005588:	e0bfff17 	ldw	r2,-4(fp)
 200558c:	1009883a 	mov	r4,r2
 2005590:	014000b4 	movhi	r5,2
 2005594:	2961a804 	addi	r5,r5,-31072
 2005598:	20093b00 	call	20093b0 <__umodsi3>
 200559c:	e0bfff15 	stw	r2,-4(fp)
	num_str[5] = 0x30 + num / 10000;		num = num % 10000;
 20055a0:	e0bffe17 	ldw	r2,-8(fp)
 20055a4:	14000144 	addi	r16,r2,5
 20055a8:	e0bfff17 	ldw	r2,-4(fp)
 20055ac:	1009883a 	mov	r4,r2
 20055b0:	0149c404 	movi	r5,10000
 20055b4:	20093a80 	call	20093a8 <__udivsi3>
 20055b8:	10800c04 	addi	r2,r2,48
 20055bc:	80800005 	stb	r2,0(r16)
 20055c0:	e0bfff17 	ldw	r2,-4(fp)
 20055c4:	1009883a 	mov	r4,r2
 20055c8:	0149c404 	movi	r5,10000
 20055cc:	20093b00 	call	20093b0 <__umodsi3>
 20055d0:	e0bfff15 	stw	r2,-4(fp)
	num_str[6] = 0x30 + num / 1000;			num = num % 1000;
 20055d4:	e0bffe17 	ldw	r2,-8(fp)
 20055d8:	14000184 	addi	r16,r2,6
 20055dc:	e0bfff17 	ldw	r2,-4(fp)
 20055e0:	1009883a 	mov	r4,r2
 20055e4:	0140fa04 	movi	r5,1000
 20055e8:	20093a80 	call	20093a8 <__udivsi3>
 20055ec:	10800c04 	addi	r2,r2,48
 20055f0:	80800005 	stb	r2,0(r16)
 20055f4:	e0bfff17 	ldw	r2,-4(fp)
 20055f8:	1009883a 	mov	r4,r2
 20055fc:	0140fa04 	movi	r5,1000
 2005600:	20093b00 	call	20093b0 <__umodsi3>
 2005604:	e0bfff15 	stw	r2,-4(fp)
	num_str[7] = 0x30 + num / 100;			num = num % 100;
 2005608:	e0bffe17 	ldw	r2,-8(fp)
 200560c:	140001c4 	addi	r16,r2,7
 2005610:	e0bfff17 	ldw	r2,-4(fp)
 2005614:	1009883a 	mov	r4,r2
 2005618:	01401904 	movi	r5,100
 200561c:	20093a80 	call	20093a8 <__udivsi3>
 2005620:	10800c04 	addi	r2,r2,48
 2005624:	80800005 	stb	r2,0(r16)
 2005628:	e0bfff17 	ldw	r2,-4(fp)
 200562c:	1009883a 	mov	r4,r2
 2005630:	01401904 	movi	r5,100
 2005634:	20093b00 	call	20093b0 <__umodsi3>
 2005638:	e0bfff15 	stw	r2,-4(fp)
	num_str[8] = 0x30 + num / 10;			num = num % 10;
 200563c:	e0bffe17 	ldw	r2,-8(fp)
 2005640:	14000204 	addi	r16,r2,8
 2005644:	e0bfff17 	ldw	r2,-4(fp)
 2005648:	1009883a 	mov	r4,r2
 200564c:	01400284 	movi	r5,10
 2005650:	20093a80 	call	20093a8 <__udivsi3>
 2005654:	10800c04 	addi	r2,r2,48
 2005658:	80800005 	stb	r2,0(r16)
 200565c:	e0bfff17 	ldw	r2,-4(fp)
 2005660:	1009883a 	mov	r4,r2
 2005664:	01400284 	movi	r5,10
 2005668:	20093b00 	call	20093b0 <__umodsi3>
 200566c:	e0bfff15 	stw	r2,-4(fp)
	num_str[9] = 0x30 + num;
 2005670:	e0bffe17 	ldw	r2,-8(fp)
 2005674:	10800244 	addi	r2,r2,9
 2005678:	e0ffff17 	ldw	r3,-4(fp)
 200567c:	18c00c04 	addi	r3,r3,48
 2005680:	10c00005 	stb	r3,0(r2)
	return num_str;
 2005684:	e0bffe17 	ldw	r2,-8(fp)
}
 2005688:	e037883a 	mov	sp,fp
 200568c:	dfc00217 	ldw	ra,8(sp)
 2005690:	df000117 	ldw	fp,4(sp)
 2005694:	dc000017 	ldw	r16,0(sp)
 2005698:	dec00304 	addi	sp,sp,12
 200569c:	f800283a 	ret

020056a0 <Str10toDis10>:

char* Str10toDis10(char* num_str)
{
 20056a0:	defffd04 	addi	sp,sp,-12
 20056a4:	df000215 	stw	fp,8(sp)
 20056a8:	df000204 	addi	fp,sp,8
 20056ac:	e13fff15 	stw	r4,-4(fp)
	char* num_dis = "00000000.00\xe4s"; //"\xe4" = Greek Letter "mu" for "Micro"
 20056b0:	00808074 	movhi	r2,513
 20056b4:	109bd604 	addi	r2,r2,28504
 20056b8:	e0bffe15 	stw	r2,-8(fp)
	num_dis[0] = num_str[0];
 20056bc:	e0bfff17 	ldw	r2,-4(fp)
 20056c0:	10c00003 	ldbu	r3,0(r2)
 20056c4:	e0bffe17 	ldw	r2,-8(fp)
 20056c8:	10c00005 	stb	r3,0(r2)
	num_dis[1] = num_str[1];
 20056cc:	e0bffe17 	ldw	r2,-8(fp)
 20056d0:	10800044 	addi	r2,r2,1
 20056d4:	e0ffff17 	ldw	r3,-4(fp)
 20056d8:	18c00043 	ldbu	r3,1(r3)
 20056dc:	10c00005 	stb	r3,0(r2)
	num_dis[2] = num_str[2];
 20056e0:	e0bffe17 	ldw	r2,-8(fp)
 20056e4:	10800084 	addi	r2,r2,2
 20056e8:	e0ffff17 	ldw	r3,-4(fp)
 20056ec:	18c00083 	ldbu	r3,2(r3)
 20056f0:	10c00005 	stb	r3,0(r2)
	num_dis[3] = num_str[3];
 20056f4:	e0bffe17 	ldw	r2,-8(fp)
 20056f8:	108000c4 	addi	r2,r2,3
 20056fc:	e0ffff17 	ldw	r3,-4(fp)
 2005700:	18c000c3 	ldbu	r3,3(r3)
 2005704:	10c00005 	stb	r3,0(r2)
	num_dis[4] = num_str[4];
 2005708:	e0bffe17 	ldw	r2,-8(fp)
 200570c:	10800104 	addi	r2,r2,4
 2005710:	e0ffff17 	ldw	r3,-4(fp)
 2005714:	18c00103 	ldbu	r3,4(r3)
 2005718:	10c00005 	stb	r3,0(r2)
	num_dis[5] = num_str[5];
 200571c:	e0bffe17 	ldw	r2,-8(fp)
 2005720:	10800144 	addi	r2,r2,5
 2005724:	e0ffff17 	ldw	r3,-4(fp)
 2005728:	18c00143 	ldbu	r3,5(r3)
 200572c:	10c00005 	stb	r3,0(r2)
	num_dis[6] = num_str[6];
 2005730:	e0bffe17 	ldw	r2,-8(fp)
 2005734:	10800184 	addi	r2,r2,6
 2005738:	e0ffff17 	ldw	r3,-4(fp)
 200573c:	18c00183 	ldbu	r3,6(r3)
 2005740:	10c00005 	stb	r3,0(r2)
	num_dis[7] = num_str[7];
 2005744:	e0bffe17 	ldw	r2,-8(fp)
 2005748:	108001c4 	addi	r2,r2,7
 200574c:	e0ffff17 	ldw	r3,-4(fp)
 2005750:	18c001c3 	ldbu	r3,7(r3)
 2005754:	10c00005 	stb	r3,0(r2)
	num_dis[8] = '.';
 2005758:	e0bffe17 	ldw	r2,-8(fp)
 200575c:	10800204 	addi	r2,r2,8
 2005760:	00c00b84 	movi	r3,46
 2005764:	10c00005 	stb	r3,0(r2)
	num_dis[9] = num_str[8];
 2005768:	e0bffe17 	ldw	r2,-8(fp)
 200576c:	10800244 	addi	r2,r2,9
 2005770:	e0ffff17 	ldw	r3,-4(fp)
 2005774:	18c00203 	ldbu	r3,8(r3)
 2005778:	10c00005 	stb	r3,0(r2)
	num_dis[10] = num_str[9];
 200577c:	e0bffe17 	ldw	r2,-8(fp)
 2005780:	10800284 	addi	r2,r2,10
 2005784:	e0ffff17 	ldw	r3,-4(fp)
 2005788:	18c00243 	ldbu	r3,9(r3)
 200578c:	10c00005 	stb	r3,0(r2)
	return num_dis;
 2005790:	e0bffe17 	ldw	r2,-8(fp)
}
 2005794:	e037883a 	mov	sp,fp
 2005798:	df000017 	ldw	fp,0(sp)
 200579c:	dec00104 	addi	sp,sp,4
 20057a0:	f800283a 	ret

020057a4 <Num10Check>:


unsigned char Num10Check(char* n)
{
 20057a4:	defffe04 	addi	sp,sp,-8
 20057a8:	df000115 	stw	fp,4(sp)
 20057ac:	df000104 	addi	fp,sp,4
 20057b0:	e13fff15 	stw	r4,-4(fp)
	//4,294,967,295
	if(n[0] > 0x34) return 1;
 20057b4:	e0bfff17 	ldw	r2,-4(fp)
 20057b8:	10800003 	ldbu	r2,0(r2)
 20057bc:	10803fcc 	andi	r2,r2,255
 20057c0:	1080201c 	xori	r2,r2,128
 20057c4:	10bfe004 	addi	r2,r2,-128
 20057c8:	10800d50 	cmplti	r2,r2,53
 20057cc:	1000021e 	bne	r2,zero,20057d8 <Num10Check+0x34>
 20057d0:	00800044 	movi	r2,1
 20057d4:	0000b306 	br	2005aa4 <Num10Check+0x300>
	else if(n[0] < 0x34) return 0;
 20057d8:	e0bfff17 	ldw	r2,-4(fp)
 20057dc:	10800003 	ldbu	r2,0(r2)
 20057e0:	10803fcc 	andi	r2,r2,255
 20057e4:	1080201c 	xori	r2,r2,128
 20057e8:	10bfe004 	addi	r2,r2,-128
 20057ec:	10800d08 	cmpgei	r2,r2,52
 20057f0:	1000021e 	bne	r2,zero,20057fc <Num10Check+0x58>
 20057f4:	0005883a 	mov	r2,zero
 20057f8:	0000aa06 	br	2005aa4 <Num10Check+0x300>

	if(n[1] > 0x32) return 1;
 20057fc:	e0bfff17 	ldw	r2,-4(fp)
 2005800:	10800044 	addi	r2,r2,1
 2005804:	10800003 	ldbu	r2,0(r2)
 2005808:	10803fcc 	andi	r2,r2,255
 200580c:	1080201c 	xori	r2,r2,128
 2005810:	10bfe004 	addi	r2,r2,-128
 2005814:	10800cd0 	cmplti	r2,r2,51
 2005818:	1000021e 	bne	r2,zero,2005824 <Num10Check+0x80>
 200581c:	00800044 	movi	r2,1
 2005820:	0000a006 	br	2005aa4 <Num10Check+0x300>
	else if(n[1] < 0x32) return 0;
 2005824:	e0bfff17 	ldw	r2,-4(fp)
 2005828:	10800044 	addi	r2,r2,1
 200582c:	10800003 	ldbu	r2,0(r2)
 2005830:	10803fcc 	andi	r2,r2,255
 2005834:	1080201c 	xori	r2,r2,128
 2005838:	10bfe004 	addi	r2,r2,-128
 200583c:	10800c88 	cmpgei	r2,r2,50
 2005840:	1000021e 	bne	r2,zero,200584c <Num10Check+0xa8>
 2005844:	0005883a 	mov	r2,zero
 2005848:	00009606 	br	2005aa4 <Num10Check+0x300>

	if(n[2] > 0x39) return 1;
 200584c:	e0bfff17 	ldw	r2,-4(fp)
 2005850:	10800084 	addi	r2,r2,2
 2005854:	10800003 	ldbu	r2,0(r2)
 2005858:	10803fcc 	andi	r2,r2,255
 200585c:	1080201c 	xori	r2,r2,128
 2005860:	10bfe004 	addi	r2,r2,-128
 2005864:	10800e90 	cmplti	r2,r2,58
 2005868:	1000021e 	bne	r2,zero,2005874 <Num10Check+0xd0>
 200586c:	00800044 	movi	r2,1
 2005870:	00008c06 	br	2005aa4 <Num10Check+0x300>
	else if(n[2] < 0x39) return 0;
 2005874:	e0bfff17 	ldw	r2,-4(fp)
 2005878:	10800084 	addi	r2,r2,2
 200587c:	10800003 	ldbu	r2,0(r2)
 2005880:	10803fcc 	andi	r2,r2,255
 2005884:	1080201c 	xori	r2,r2,128
 2005888:	10bfe004 	addi	r2,r2,-128
 200588c:	10800e48 	cmpgei	r2,r2,57
 2005890:	1000021e 	bne	r2,zero,200589c <Num10Check+0xf8>
 2005894:	0005883a 	mov	r2,zero
 2005898:	00008206 	br	2005aa4 <Num10Check+0x300>

	if(n[3] > 0x34) return 1;
 200589c:	e0bfff17 	ldw	r2,-4(fp)
 20058a0:	108000c4 	addi	r2,r2,3
 20058a4:	10800003 	ldbu	r2,0(r2)
 20058a8:	10803fcc 	andi	r2,r2,255
 20058ac:	1080201c 	xori	r2,r2,128
 20058b0:	10bfe004 	addi	r2,r2,-128
 20058b4:	10800d50 	cmplti	r2,r2,53
 20058b8:	1000021e 	bne	r2,zero,20058c4 <Num10Check+0x120>
 20058bc:	00800044 	movi	r2,1
 20058c0:	00007806 	br	2005aa4 <Num10Check+0x300>
	else if(n[3] < 0x34) return 0;
 20058c4:	e0bfff17 	ldw	r2,-4(fp)
 20058c8:	108000c4 	addi	r2,r2,3
 20058cc:	10800003 	ldbu	r2,0(r2)
 20058d0:	10803fcc 	andi	r2,r2,255
 20058d4:	1080201c 	xori	r2,r2,128
 20058d8:	10bfe004 	addi	r2,r2,-128
 20058dc:	10800d08 	cmpgei	r2,r2,52
 20058e0:	1000021e 	bne	r2,zero,20058ec <Num10Check+0x148>
 20058e4:	0005883a 	mov	r2,zero
 20058e8:	00006e06 	br	2005aa4 <Num10Check+0x300>

	if(n[4] > 0x39) return 1;
 20058ec:	e0bfff17 	ldw	r2,-4(fp)
 20058f0:	10800104 	addi	r2,r2,4
 20058f4:	10800003 	ldbu	r2,0(r2)
 20058f8:	10803fcc 	andi	r2,r2,255
 20058fc:	1080201c 	xori	r2,r2,128
 2005900:	10bfe004 	addi	r2,r2,-128
 2005904:	10800e90 	cmplti	r2,r2,58
 2005908:	1000021e 	bne	r2,zero,2005914 <Num10Check+0x170>
 200590c:	00800044 	movi	r2,1
 2005910:	00006406 	br	2005aa4 <Num10Check+0x300>
	else if(n[4] < 0x39) return 0;
 2005914:	e0bfff17 	ldw	r2,-4(fp)
 2005918:	10800104 	addi	r2,r2,4
 200591c:	10800003 	ldbu	r2,0(r2)
 2005920:	10803fcc 	andi	r2,r2,255
 2005924:	1080201c 	xori	r2,r2,128
 2005928:	10bfe004 	addi	r2,r2,-128
 200592c:	10800e48 	cmpgei	r2,r2,57
 2005930:	1000021e 	bne	r2,zero,200593c <Num10Check+0x198>
 2005934:	0005883a 	mov	r2,zero
 2005938:	00005a06 	br	2005aa4 <Num10Check+0x300>

	if(n[5] > 0x36) return 1;
 200593c:	e0bfff17 	ldw	r2,-4(fp)
 2005940:	10800144 	addi	r2,r2,5
 2005944:	10800003 	ldbu	r2,0(r2)
 2005948:	10803fcc 	andi	r2,r2,255
 200594c:	1080201c 	xori	r2,r2,128
 2005950:	10bfe004 	addi	r2,r2,-128
 2005954:	10800dd0 	cmplti	r2,r2,55
 2005958:	1000021e 	bne	r2,zero,2005964 <Num10Check+0x1c0>
 200595c:	00800044 	movi	r2,1
 2005960:	00005006 	br	2005aa4 <Num10Check+0x300>
	else if(n[5] < 0x36) return 0;
 2005964:	e0bfff17 	ldw	r2,-4(fp)
 2005968:	10800144 	addi	r2,r2,5
 200596c:	10800003 	ldbu	r2,0(r2)
 2005970:	10803fcc 	andi	r2,r2,255
 2005974:	1080201c 	xori	r2,r2,128
 2005978:	10bfe004 	addi	r2,r2,-128
 200597c:	10800d88 	cmpgei	r2,r2,54
 2005980:	1000021e 	bne	r2,zero,200598c <Num10Check+0x1e8>
 2005984:	0005883a 	mov	r2,zero
 2005988:	00004606 	br	2005aa4 <Num10Check+0x300>

	if(n[6] > 0x37) return 1;
 200598c:	e0bfff17 	ldw	r2,-4(fp)
 2005990:	10800184 	addi	r2,r2,6
 2005994:	10800003 	ldbu	r2,0(r2)
 2005998:	10803fcc 	andi	r2,r2,255
 200599c:	1080201c 	xori	r2,r2,128
 20059a0:	10bfe004 	addi	r2,r2,-128
 20059a4:	10800e10 	cmplti	r2,r2,56
 20059a8:	1000021e 	bne	r2,zero,20059b4 <Num10Check+0x210>
 20059ac:	00800044 	movi	r2,1
 20059b0:	00003c06 	br	2005aa4 <Num10Check+0x300>
	else if(n[6] < 0x37) return 0;
 20059b4:	e0bfff17 	ldw	r2,-4(fp)
 20059b8:	10800184 	addi	r2,r2,6
 20059bc:	10800003 	ldbu	r2,0(r2)
 20059c0:	10803fcc 	andi	r2,r2,255
 20059c4:	1080201c 	xori	r2,r2,128
 20059c8:	10bfe004 	addi	r2,r2,-128
 20059cc:	10800dc8 	cmpgei	r2,r2,55
 20059d0:	1000021e 	bne	r2,zero,20059dc <Num10Check+0x238>
 20059d4:	0005883a 	mov	r2,zero
 20059d8:	00003206 	br	2005aa4 <Num10Check+0x300>

	if(n[7] > 0x32) return 1;
 20059dc:	e0bfff17 	ldw	r2,-4(fp)
 20059e0:	108001c4 	addi	r2,r2,7
 20059e4:	10800003 	ldbu	r2,0(r2)
 20059e8:	10803fcc 	andi	r2,r2,255
 20059ec:	1080201c 	xori	r2,r2,128
 20059f0:	10bfe004 	addi	r2,r2,-128
 20059f4:	10800cd0 	cmplti	r2,r2,51
 20059f8:	1000021e 	bne	r2,zero,2005a04 <Num10Check+0x260>
 20059fc:	00800044 	movi	r2,1
 2005a00:	00002806 	br	2005aa4 <Num10Check+0x300>
	else if(n[7] < 0x32) return 0;
 2005a04:	e0bfff17 	ldw	r2,-4(fp)
 2005a08:	108001c4 	addi	r2,r2,7
 2005a0c:	10800003 	ldbu	r2,0(r2)
 2005a10:	10803fcc 	andi	r2,r2,255
 2005a14:	1080201c 	xori	r2,r2,128
 2005a18:	10bfe004 	addi	r2,r2,-128
 2005a1c:	10800c88 	cmpgei	r2,r2,50
 2005a20:	1000021e 	bne	r2,zero,2005a2c <Num10Check+0x288>
 2005a24:	0005883a 	mov	r2,zero
 2005a28:	00001e06 	br	2005aa4 <Num10Check+0x300>

	if(n[9] > 0x39) return 1;
 2005a2c:	e0bfff17 	ldw	r2,-4(fp)
 2005a30:	10800244 	addi	r2,r2,9
 2005a34:	10800003 	ldbu	r2,0(r2)
 2005a38:	10803fcc 	andi	r2,r2,255
 2005a3c:	1080201c 	xori	r2,r2,128
 2005a40:	10bfe004 	addi	r2,r2,-128
 2005a44:	10800e90 	cmplti	r2,r2,58
 2005a48:	1000021e 	bne	r2,zero,2005a54 <Num10Check+0x2b0>
 2005a4c:	00800044 	movi	r2,1
 2005a50:	00001406 	br	2005aa4 <Num10Check+0x300>
	else if(n[0] < 0x39) return 0;
 2005a54:	e0bfff17 	ldw	r2,-4(fp)
 2005a58:	10800003 	ldbu	r2,0(r2)
 2005a5c:	10803fcc 	andi	r2,r2,255
 2005a60:	1080201c 	xori	r2,r2,128
 2005a64:	10bfe004 	addi	r2,r2,-128
 2005a68:	10800e48 	cmpgei	r2,r2,57
 2005a6c:	1000021e 	bne	r2,zero,2005a78 <Num10Check+0x2d4>
 2005a70:	0005883a 	mov	r2,zero
 2005a74:	00000b06 	br	2005aa4 <Num10Check+0x300>

	if(n[10] > 0x35) return 1;
 2005a78:	e0bfff17 	ldw	r2,-4(fp)
 2005a7c:	10800284 	addi	r2,r2,10
 2005a80:	10800003 	ldbu	r2,0(r2)
 2005a84:	10803fcc 	andi	r2,r2,255
 2005a88:	1080201c 	xori	r2,r2,128
 2005a8c:	10bfe004 	addi	r2,r2,-128
 2005a90:	10800d90 	cmplti	r2,r2,54
 2005a94:	1000021e 	bne	r2,zero,2005aa0 <Num10Check+0x2fc>
 2005a98:	00800044 	movi	r2,1
 2005a9c:	00000106 	br	2005aa4 <Num10Check+0x300>

	return 0;
 2005aa0:	0005883a 	mov	r2,zero
}
 2005aa4:	e037883a 	mov	sp,fp
 2005aa8:	df000017 	ldw	fp,0(sp)
 2005aac:	dec00104 	addi	sp,sp,4
 2005ab0:	f800283a 	ret

02005ab4 <Dis10toNum10>:


unsigned int Dis10toNum10(char* n)	//Input Format: "########.##"
{
 2005ab4:	defffc04 	addi	sp,sp,-16
 2005ab8:	dfc00315 	stw	ra,12(sp)
 2005abc:	df000215 	stw	fp,8(sp)
 2005ac0:	df000204 	addi	fp,sp,8
 2005ac4:	e13fff15 	stw	r4,-4(fp)
	unsigned int num = 0;
 2005ac8:	e03ffe15 	stw	zero,-8(fp)

	num += (n[0]-0x30)*1000000000;
 2005acc:	e0bfff17 	ldw	r2,-4(fp)
 2005ad0:	10800003 	ldbu	r2,0(r2)
 2005ad4:	10803fcc 	andi	r2,r2,255
 2005ad8:	1080201c 	xori	r2,r2,128
 2005adc:	10bfe004 	addi	r2,r2,-128
 2005ae0:	10bff404 	addi	r2,r2,-48
 2005ae4:	1009883a 	mov	r4,r2
 2005ae8:	014ee6f4 	movhi	r5,15259
 2005aec:	29728004 	addi	r5,r5,-13824
 2005af0:	20093b80 	call	20093b8 <__mulsi3>
 2005af4:	e0fffe17 	ldw	r3,-8(fp)
 2005af8:	1885883a 	add	r2,r3,r2
 2005afc:	e0bffe15 	stw	r2,-8(fp)
	num += (n[1]-0x30)*100000000;
 2005b00:	e0bfff17 	ldw	r2,-4(fp)
 2005b04:	10800044 	addi	r2,r2,1
 2005b08:	10800003 	ldbu	r2,0(r2)
 2005b0c:	10803fcc 	andi	r2,r2,255
 2005b10:	1080201c 	xori	r2,r2,128
 2005b14:	10bfe004 	addi	r2,r2,-128
 2005b18:	10bff404 	addi	r2,r2,-48
 2005b1c:	1009883a 	mov	r4,r2
 2005b20:	01417db4 	movhi	r5,1526
 2005b24:	29784004 	addi	r5,r5,-7936
 2005b28:	20093b80 	call	20093b8 <__mulsi3>
 2005b2c:	e0fffe17 	ldw	r3,-8(fp)
 2005b30:	1885883a 	add	r2,r3,r2
 2005b34:	e0bffe15 	stw	r2,-8(fp)
	num += (n[2]-0x30)*10000000;
 2005b38:	e0bfff17 	ldw	r2,-4(fp)
 2005b3c:	10800084 	addi	r2,r2,2
 2005b40:	10800003 	ldbu	r2,0(r2)
 2005b44:	10803fcc 	andi	r2,r2,255
 2005b48:	1080201c 	xori	r2,r2,128
 2005b4c:	10bfe004 	addi	r2,r2,-128
 2005b50:	1009883a 	mov	r4,r2
 2005b54:	01402674 	movhi	r5,153
 2005b58:	2965a004 	addi	r5,r5,-27008
 2005b5c:	20093b80 	call	20093b8 <__mulsi3>
 2005b60:	1007883a 	mov	r3,r2
 2005b64:	e0bffe17 	ldw	r2,-8(fp)
 2005b68:	1887883a 	add	r3,r3,r2
 2005b6c:	00b8d934 	movhi	r2,58212
 2005b70:	10b20004 	addi	r2,r2,-14336
 2005b74:	1885883a 	add	r2,r3,r2
 2005b78:	e0bffe15 	stw	r2,-8(fp)
	num += (n[3]-0x30)*1000000;
 2005b7c:	e0bfff17 	ldw	r2,-4(fp)
 2005b80:	108000c4 	addi	r2,r2,3
 2005b84:	10800003 	ldbu	r2,0(r2)
 2005b88:	10803fcc 	andi	r2,r2,255
 2005b8c:	1080201c 	xori	r2,r2,128
 2005b90:	10bfe004 	addi	r2,r2,-128
 2005b94:	1009883a 	mov	r4,r2
 2005b98:	014003f4 	movhi	r5,15
 2005b9c:	29509004 	addi	r5,r5,16960
 2005ba0:	20093b80 	call	20093b8 <__mulsi3>
 2005ba4:	1007883a 	mov	r3,r2
 2005ba8:	e0bffe17 	ldw	r2,-8(fp)
 2005bac:	1887883a 	add	r3,r3,r2
 2005bb0:	00bf4934 	movhi	r2,64804
 2005bb4:	10a50004 	addi	r2,r2,-27648
 2005bb8:	1885883a 	add	r2,r3,r2
 2005bbc:	e0bffe15 	stw	r2,-8(fp)
	num += (n[4]-0x30)*100000;
 2005bc0:	e0bfff17 	ldw	r2,-4(fp)
 2005bc4:	10800104 	addi	r2,r2,4
 2005bc8:	10800003 	ldbu	r2,0(r2)
 2005bcc:	10803fcc 	andi	r2,r2,255
 2005bd0:	1080201c 	xori	r2,r2,128
 2005bd4:	10bfe004 	addi	r2,r2,-128
 2005bd8:	1009883a 	mov	r4,r2
 2005bdc:	014000b4 	movhi	r5,2
 2005be0:	2961a804 	addi	r5,r5,-31072
 2005be4:	20093b80 	call	20093b8 <__mulsi3>
 2005be8:	1007883a 	mov	r3,r2
 2005bec:	e0bffe17 	ldw	r2,-8(fp)
 2005bf0:	1887883a 	add	r3,r3,r2
 2005bf4:	00bfedf4 	movhi	r2,65463
 2005bf8:	10b08004 	addi	r2,r2,-15872
 2005bfc:	1885883a 	add	r2,r3,r2
 2005c00:	e0bffe15 	stw	r2,-8(fp)
	num += (n[5]-0x30)*10000;
 2005c04:	e0bfff17 	ldw	r2,-4(fp)
 2005c08:	10800144 	addi	r2,r2,5
 2005c0c:	10800003 	ldbu	r2,0(r2)
 2005c10:	10803fcc 	andi	r2,r2,255
 2005c14:	1080201c 	xori	r2,r2,128
 2005c18:	10bfe004 	addi	r2,r2,-128
 2005c1c:	1009883a 	mov	r4,r2
 2005c20:	0149c404 	movi	r5,10000
 2005c24:	20093b80 	call	20093b8 <__mulsi3>
 2005c28:	1007883a 	mov	r3,r2
 2005c2c:	e0bffe17 	ldw	r2,-8(fp)
 2005c30:	1887883a 	add	r3,r3,r2
 2005c34:	00bffe74 	movhi	r2,65529
 2005c38:	10ab4004 	addi	r2,r2,-21248
 2005c3c:	1885883a 	add	r2,r3,r2
 2005c40:	e0bffe15 	stw	r2,-8(fp)
	num += (n[6]-0x30)*1000;
 2005c44:	e0bfff17 	ldw	r2,-4(fp)
 2005c48:	10800184 	addi	r2,r2,6
 2005c4c:	10800003 	ldbu	r2,0(r2)
 2005c50:	10803fcc 	andi	r2,r2,255
 2005c54:	1080201c 	xori	r2,r2,128
 2005c58:	10bfe004 	addi	r2,r2,-128
 2005c5c:	1009883a 	mov	r4,r2
 2005c60:	0140fa04 	movi	r5,1000
 2005c64:	20093b80 	call	20093b8 <__mulsi3>
 2005c68:	1007883a 	mov	r3,r2
 2005c6c:	e0bffe17 	ldw	r2,-8(fp)
 2005c70:	1887883a 	add	r3,r3,r2
 2005c74:	00bffff4 	movhi	r2,65535
 2005c78:	10912004 	addi	r2,r2,17536
 2005c7c:	1885883a 	add	r2,r3,r2
 2005c80:	e0bffe15 	stw	r2,-8(fp)
	num += (n[7]-0x30)*100;
 2005c84:	e0bfff17 	ldw	r2,-4(fp)
 2005c88:	108001c4 	addi	r2,r2,7
 2005c8c:	10800003 	ldbu	r2,0(r2)
 2005c90:	10803fcc 	andi	r2,r2,255
 2005c94:	1080201c 	xori	r2,r2,128
 2005c98:	10bfe004 	addi	r2,r2,-128
 2005c9c:	1009883a 	mov	r4,r2
 2005ca0:	01401904 	movi	r5,100
 2005ca4:	20093b80 	call	20093b8 <__mulsi3>
 2005ca8:	1007883a 	mov	r3,r2
 2005cac:	e0bffe17 	ldw	r2,-8(fp)
 2005cb0:	1885883a 	add	r2,r3,r2
 2005cb4:	10bb5004 	addi	r2,r2,-4800
 2005cb8:	e0bffe15 	stw	r2,-8(fp)
	num += (n[9]-0x30)*10;
 2005cbc:	e0bfff17 	ldw	r2,-4(fp)
 2005cc0:	10800244 	addi	r2,r2,9
 2005cc4:	10800003 	ldbu	r2,0(r2)
 2005cc8:	10803fcc 	andi	r2,r2,255
 2005ccc:	1080201c 	xori	r2,r2,128
 2005cd0:	10bfe004 	addi	r2,r2,-128
 2005cd4:	1009883a 	mov	r4,r2
 2005cd8:	01400284 	movi	r5,10
 2005cdc:	20093b80 	call	20093b8 <__mulsi3>
 2005ce0:	1007883a 	mov	r3,r2
 2005ce4:	e0bffe17 	ldw	r2,-8(fp)
 2005ce8:	1885883a 	add	r2,r3,r2
 2005cec:	10bf8804 	addi	r2,r2,-480
 2005cf0:	e0bffe15 	stw	r2,-8(fp)
	num += (n[10]-0x30);
 2005cf4:	e0bfff17 	ldw	r2,-4(fp)
 2005cf8:	10800284 	addi	r2,r2,10
 2005cfc:	10800003 	ldbu	r2,0(r2)
 2005d00:	10c03fcc 	andi	r3,r2,255
 2005d04:	18c0201c 	xori	r3,r3,128
 2005d08:	18ffe004 	addi	r3,r3,-128
 2005d0c:	e0bffe17 	ldw	r2,-8(fp)
 2005d10:	1885883a 	add	r2,r3,r2
 2005d14:	10bff404 	addi	r2,r2,-48
 2005d18:	e0bffe15 	stw	r2,-8(fp)

	return num;
 2005d1c:	e0bffe17 	ldw	r2,-8(fp)
}
 2005d20:	e037883a 	mov	sp,fp
 2005d24:	dfc00117 	ldw	ra,4(sp)
 2005d28:	df000017 	ldw	fp,0(sp)
 2005d2c:	dec00204 	addi	sp,sp,8
 2005d30:	f800283a 	ret

02005d34 <refreshButtonBarNum10>:



void refreshButtonBarNum10(unsigned char curr_digit)
{
 2005d34:	defffd04 	addi	sp,sp,-12
 2005d38:	dfc00215 	stw	ra,8(sp)
 2005d3c:	df000115 	stw	fp,4(sp)
 2005d40:	df000104 	addi	fp,sp,4
 2005d44:	2005883a 	mov	r2,r4
 2005d48:	e0bfff05 	stb	r2,-4(fp)
	DisShowCur(0);
 2005d4c:	0009883a 	mov	r4,zero
 2005d50:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(4,1);
 2005d54:	01000104 	movi	r4,4
 2005d58:	01400044 	movi	r5,1
 2005d5c:	20005400 	call	2000540 <DisCurPos>
	if(curr_digit!=0 && curr_digit!=10)
 2005d60:	e0bfff03 	ldbu	r2,-4(fp)
 2005d64:	10000b26 	beq	r2,zero,2005d94 <refreshButtonBarNum10+0x60>
 2005d68:	e0bfff03 	ldbu	r2,-4(fp)
 2005d6c:	108002a0 	cmpeqi	r2,r2,10
 2005d70:	1000081e 	bne	r2,zero,2005d94 <refreshButtonBarNum10+0x60>
	{
		KPLED_LeftArrow(3);
 2005d74:	010000c4 	movi	r4,3
 2005d78:	20010ac0 	call	20010ac <KPLED_LeftArrow>
		KPLED_RightArrow(3);
 2005d7c:	010000c4 	movi	r4,3
 2005d80:	20010200 	call	2001020 <KPLED_RightArrow>
		DisWrStr("<       Ent.       >");
 2005d84:	01008074 	movhi	r4,513
 2005d88:	211bda04 	addi	r4,r4,28520
 2005d8c:	20006000 	call	2000600 <DisWrStr>
 2005d90:	00001406 	br	2005de4 <refreshButtonBarNum10+0xb0>
	}
	else if(curr_digit==0)
 2005d94:	e0bfff03 	ldbu	r2,-4(fp)
 2005d98:	1000081e 	bne	r2,zero,2005dbc <refreshButtonBarNum10+0x88>
	{
		KPLED_LeftArrow(0);
 2005d9c:	0009883a 	mov	r4,zero
 2005da0:	20010ac0 	call	20010ac <KPLED_LeftArrow>
		KPLED_RightArrow(3);
 2005da4:	010000c4 	movi	r4,3
 2005da8:	20010200 	call	2001020 <KPLED_RightArrow>
		DisWrStr("        Ent.       >");
 2005dac:	01008074 	movhi	r4,513
 2005db0:	211be004 	addi	r4,r4,28544
 2005db4:	20006000 	call	2000600 <DisWrStr>
 2005db8:	00000a06 	br	2005de4 <refreshButtonBarNum10+0xb0>
	}
	else if(curr_digit==10)
 2005dbc:	e0bfff03 	ldbu	r2,-4(fp)
 2005dc0:	10800298 	cmpnei	r2,r2,10
 2005dc4:	1000071e 	bne	r2,zero,2005de4 <refreshButtonBarNum10+0xb0>
	{
		KPLED_LeftArrow(3);
 2005dc8:	010000c4 	movi	r4,3
 2005dcc:	20010ac0 	call	20010ac <KPLED_LeftArrow>
		KPLED_RightArrow(0);
 2005dd0:	0009883a 	mov	r4,zero
 2005dd4:	20010200 	call	2001020 <KPLED_RightArrow>
		DisWrStr("<       Ent.        ");
 2005dd8:	01008074 	movhi	r4,513
 2005ddc:	211be604 	addi	r4,r4,28568
 2005de0:	20006000 	call	2000600 <DisWrStr>
	}
	DisShowCur(1);
 2005de4:	01000044 	movi	r4,1
 2005de8:	20004fc0 	call	20004fc <DisShowCur>
}
 2005dec:	e037883a 	mov	sp,fp
 2005df0:	dfc00117 	ldw	ra,4(sp)
 2005df4:	df000017 	ldw	fp,0(sp)
 2005df8:	dec00204 	addi	sp,sp,8
 2005dfc:	f800283a 	ret

02005e00 <editNum10>:

unsigned int editNum10(unsigned char chnl, unsigned char SorE, unsigned int num, unsigned char row, unsigned char col)
{
 2005e00:	defff304 	addi	sp,sp,-52
 2005e04:	dfc00c15 	stw	ra,48(sp)
 2005e08:	df000b15 	stw	fp,44(sp)
 2005e0c:	df000b04 	addi	fp,sp,44
 2005e10:	2807883a 	mov	r3,r5
 2005e14:	e1bffd15 	stw	r6,-12(fp)
 2005e18:	3805883a 	mov	r2,r7
 2005e1c:	e1400217 	ldw	r5,8(fp)
 2005e20:	e13ffb05 	stb	r4,-20(fp)
 2005e24:	e0fffc05 	stb	r3,-16(fp)
 2005e28:	e0bffe05 	stb	r2,-8(fp)
 2005e2c:	e17fff05 	stb	r5,-4(fp)
	unsigned char curr_digit = 0;
 2005e30:	e03ff505 	stb	zero,-44(fp)
	unsigned char keyVal_latch;
	char* num_str = Num10toStr10(num);
 2005e34:	e13ffd17 	ldw	r4,-12(fp)
 2005e38:	20054500 	call	2005450 <Num10toStr10>
 2005e3c:	e0bff615 	stw	r2,-40(fp)
	char* num_buff = Str10toDis10(num_str);
 2005e40:	e13ff617 	ldw	r4,-40(fp)
 2005e44:	20056a00 	call	20056a0 <Str10toDis10>
 2005e48:	e0bff715 	stw	r2,-36(fp)

	KPLED_All_Off();
 2005e4c:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Menu(3);
 2005e50:	010000c4 	movi	r4,3
 2005e54:	20011340 	call	2001134 <KPLED_Menu>
	KPLED_Edit(3);
 2005e58:	010000c4 	movi	r4,3
 2005e5c:	20011bc0 	call	20011bc <KPLED_Edit>
	KPLED_Enter(3);
 2005e60:	010000c4 	movi	r4,3
 2005e64:	20012440 	call	2001244 <KPLED_Enter>
	KPLED_Numbers(3);
 2005e68:	010000c4 	movi	r4,3
 2005e6c:	2000f9c0 	call	2000f9c <KPLED_Numbers>


	DisCurPos(row,col);
 2005e70:	e0fffe03 	ldbu	r3,-8(fp)
 2005e74:	e0bfff03 	ldbu	r2,-4(fp)
 2005e78:	1809883a 	mov	r4,r3
 2005e7c:	100b883a 	mov	r5,r2
 2005e80:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(num_buff);
 2005e84:	e13ff717 	ldw	r4,-36(fp)
 2005e88:	20006000 	call	2000600 <DisWrStr>
	//DisWrStr("us");

	/*Available Button*/
	refreshButtonBarNum10(curr_digit);
 2005e8c:	e0bff503 	ldbu	r2,-44(fp)
 2005e90:	1009883a 	mov	r4,r2
 2005e94:	2005d340 	call	2005d34 <refreshButtonBarNum10>

	DisCurPos(row,col);
 2005e98:	e0fffe03 	ldbu	r3,-8(fp)
 2005e9c:	e0bfff03 	ldbu	r2,-4(fp)
 2005ea0:	1809883a 	mov	r4,r3
 2005ea4:	100b883a 	mov	r5,r2
 2005ea8:	20005400 	call	2000540 <DisCurPos>
	DisShowCur(1);
 2005eac:	01000044 	movi	r4,1
 2005eb0:	20004fc0 	call	20004fc <DisShowCur>
 2005eb4:	00000106 	br	2005ebc <editNum10+0xbc>
					}
				}
				while(keyFlag);
			}
		}
	}
 2005eb8:	0001883a 	nop
	DisCurPos(row,col);
	DisShowCur(1);

	while(1)
	{
		if(keyFlag)
 2005ebc:	00810034 	movhi	r2,1024
 2005ec0:	10889804 	addi	r2,r2,8800
 2005ec4:	10800003 	ldbu	r2,0(r2)
 2005ec8:	10803fcc 	andi	r2,r2,255
 2005ecc:	103ffa26 	beq	r2,zero,2005eb8 <editNum10+0xb8>
		{
			delay(100);
 2005ed0:	01001904 	movi	r4,100
 2005ed4:	20019dc0 	call	20019dc <delay>
			if(keyFlag)
 2005ed8:	00810034 	movhi	r2,1024
 2005edc:	10889804 	addi	r2,r2,8800
 2005ee0:	10800003 	ldbu	r2,0(r2)
 2005ee4:	10803fcc 	andi	r2,r2,255
 2005ee8:	103ff326 	beq	r2,zero,2005eb8 <editNum10+0xb8>
			{
				keyVal_latch = keyVal;
 2005eec:	00810034 	movhi	r2,1024
 2005ef0:	10889404 	addi	r2,r2,8784
 2005ef4:	10800003 	ldbu	r2,0(r2)
 2005ef8:	e0bff805 	stb	r2,-32(fp)
				if(keyVal_latch <= 0x09 && keyVal_latch >= 0x00)
 2005efc:	e0bff803 	ldbu	r2,-32(fp)
 2005f00:	108002a8 	cmpgeui	r2,r2,10
 2005f04:	10002a1e 	bne	r2,zero,2005fb0 <editNum10+0x1b0>
				{
					DisShowCur(0);
 2005f08:	0009883a 	mov	r4,zero
 2005f0c:	20004fc0 	call	20004fc <DisShowCur>
					num_buff[curr_digit] = keyVal_latch + 0x30;
 2005f10:	e0bff503 	ldbu	r2,-44(fp)
 2005f14:	e0fff717 	ldw	r3,-36(fp)
 2005f18:	1885883a 	add	r2,r3,r2
 2005f1c:	e0fff803 	ldbu	r3,-32(fp)
 2005f20:	18c00c04 	addi	r3,r3,48
 2005f24:	10c00005 	stb	r3,0(r2)
					DisCurPos(row,col);
 2005f28:	e0fffe03 	ldbu	r3,-8(fp)
 2005f2c:	e0bfff03 	ldbu	r2,-4(fp)
 2005f30:	1809883a 	mov	r4,r3
 2005f34:	100b883a 	mov	r5,r2
 2005f38:	20005400 	call	2000540 <DisCurPos>
					DisWrStr(num_buff);
 2005f3c:	e13ff717 	ldw	r4,-36(fp)
 2005f40:	20006000 	call	2000600 <DisWrStr>
					curr_digit++;
 2005f44:	e0bff503 	ldbu	r2,-44(fp)
 2005f48:	10800044 	addi	r2,r2,1
 2005f4c:	e0bff505 	stb	r2,-44(fp)
					if(curr_digit == 8)
 2005f50:	e0bff503 	ldbu	r2,-44(fp)
 2005f54:	10800218 	cmpnei	r2,r2,8
 2005f58:	1000021e 	bne	r2,zero,2005f64 <editNum10+0x164>
						curr_digit = 9;			//Skip the decimal point
 2005f5c:	00800244 	movi	r2,9
 2005f60:	e0bff505 	stb	r2,-44(fp)
					if(curr_digit == 11)
 2005f64:	e0bff503 	ldbu	r2,-44(fp)
 2005f68:	108002d8 	cmpnei	r2,r2,11
 2005f6c:	1000021e 	bne	r2,zero,2005f78 <editNum10+0x178>
						curr_digit = 10;			//Stay at the least significant
 2005f70:	00800284 	movi	r2,10
 2005f74:	e0bff505 	stb	r2,-44(fp)

					refreshButtonBarNum10(curr_digit);
 2005f78:	e0bff503 	ldbu	r2,-44(fp)
 2005f7c:	1009883a 	mov	r4,r2
 2005f80:	2005d340 	call	2005d34 <refreshButtonBarNum10>

					DisCurPos(row,col+curr_digit);
 2005f84:	e0fffe03 	ldbu	r3,-8(fp)
 2005f88:	e13fff03 	ldbu	r4,-4(fp)
 2005f8c:	e0bff503 	ldbu	r2,-44(fp)
 2005f90:	2085883a 	add	r2,r4,r2
 2005f94:	10803fcc 	andi	r2,r2,255
 2005f98:	1809883a 	mov	r4,r3
 2005f9c:	100b883a 	mov	r5,r2
 2005fa0:	20005400 	call	2000540 <DisCurPos>
					DisShowCur(1);
 2005fa4:	01000044 	movi	r4,1
 2005fa8:	20004fc0 	call	20004fc <DisShowCur>
						refreshButtonBarNum10(curr_digit);
						DisCurPos(row,col);
						DisShowCur(1);
					}
				}
				while(keyFlag);
 2005fac:	0000a106 	br	2006234 <editNum10+0x434>
					DisCurPos(row,col+curr_digit);
					DisShowCur(1);
				}
				else
				{
					if(keyVal_latch == KEY_LEFT)
 2005fb0:	e0bff803 	ldbu	r2,-32(fp)
 2005fb4:	10800298 	cmpnei	r2,r2,10
 2005fb8:	1000181e 	bne	r2,zero,200601c <editNum10+0x21c>
					{
						if(curr_digit == 0)
 2005fbc:	e0bff503 	ldbu	r2,-44(fp)
 2005fc0:	1000021e 	bne	r2,zero,2005fcc <editNum10+0x1cc>
							curr_digit = 0;
 2005fc4:	e03ff505 	stb	zero,-44(fp)
 2005fc8:	00000306 	br	2005fd8 <editNum10+0x1d8>
						else
							curr_digit--;
 2005fcc:	e0bff503 	ldbu	r2,-44(fp)
 2005fd0:	10bfffc4 	addi	r2,r2,-1
 2005fd4:	e0bff505 	stb	r2,-44(fp)
						if(curr_digit == 8)
 2005fd8:	e0bff503 	ldbu	r2,-44(fp)
 2005fdc:	10800218 	cmpnei	r2,r2,8
 2005fe0:	1000021e 	bne	r2,zero,2005fec <editNum10+0x1ec>
							curr_digit = 7;
 2005fe4:	008001c4 	movi	r2,7
 2005fe8:	e0bff505 	stb	r2,-44(fp)

						refreshButtonBarNum10(curr_digit);
 2005fec:	e0bff503 	ldbu	r2,-44(fp)
 2005ff0:	1009883a 	mov	r4,r2
 2005ff4:	2005d340 	call	2005d34 <refreshButtonBarNum10>

						DisCurPos(row,col+curr_digit);
 2005ff8:	e0fffe03 	ldbu	r3,-8(fp)
 2005ffc:	e13fff03 	ldbu	r4,-4(fp)
 2006000:	e0bff503 	ldbu	r2,-44(fp)
 2006004:	2085883a 	add	r2,r4,r2
 2006008:	10803fcc 	andi	r2,r2,255
 200600c:	1809883a 	mov	r4,r3
 2006010:	100b883a 	mov	r5,r2
 2006014:	20005400 	call	2000540 <DisCurPos>
						refreshButtonBarNum10(curr_digit);
						DisCurPos(row,col);
						DisShowCur(1);
					}
				}
				while(keyFlag);
 2006018:	00008606 	br	2006234 <editNum10+0x434>
						refreshButtonBarNum10(curr_digit);

						DisCurPos(row,col+curr_digit);
					}

					else if(keyVal_latch == KEY_RIGHT)
 200601c:	e0bff803 	ldbu	r2,-32(fp)
 2006020:	108002d8 	cmpnei	r2,r2,11
 2006024:	10001a1e 	bne	r2,zero,2006090 <editNum10+0x290>
					{
						if(curr_digit == 10)
 2006028:	e0bff503 	ldbu	r2,-44(fp)
 200602c:	10800298 	cmpnei	r2,r2,10
 2006030:	1000031e 	bne	r2,zero,2006040 <editNum10+0x240>
							curr_digit = 10;
 2006034:	00800284 	movi	r2,10
 2006038:	e0bff505 	stb	r2,-44(fp)
 200603c:	00000306 	br	200604c <editNum10+0x24c>
						else
							curr_digit++;
 2006040:	e0bff503 	ldbu	r2,-44(fp)
 2006044:	10800044 	addi	r2,r2,1
 2006048:	e0bff505 	stb	r2,-44(fp)
						if(curr_digit == 8)
 200604c:	e0bff503 	ldbu	r2,-44(fp)
 2006050:	10800218 	cmpnei	r2,r2,8
 2006054:	1000021e 	bne	r2,zero,2006060 <editNum10+0x260>
							curr_digit = 9;
 2006058:	00800244 	movi	r2,9
 200605c:	e0bff505 	stb	r2,-44(fp)

						refreshButtonBarNum10(curr_digit);
 2006060:	e0bff503 	ldbu	r2,-44(fp)
 2006064:	1009883a 	mov	r4,r2
 2006068:	2005d340 	call	2005d34 <refreshButtonBarNum10>

						DisCurPos(row,col+curr_digit);
 200606c:	e0fffe03 	ldbu	r3,-8(fp)
 2006070:	e13fff03 	ldbu	r4,-4(fp)
 2006074:	e0bff503 	ldbu	r2,-44(fp)
 2006078:	2085883a 	add	r2,r4,r2
 200607c:	10803fcc 	andi	r2,r2,255
 2006080:	1809883a 	mov	r4,r3
 2006084:	100b883a 	mov	r5,r2
 2006088:	20005400 	call	2000540 <DisCurPos>
						refreshButtonBarNum10(curr_digit);
						DisCurPos(row,col);
						DisShowCur(1);
					}
				}
				while(keyFlag);
 200608c:	00006906 	br	2006234 <editNum10+0x434>
						refreshButtonBarNum10(curr_digit);

						DisCurPos(row,col+curr_digit);
					}

					else if(keyVal_latch == KEY_MENU)
 2006090:	e0bff803 	ldbu	r2,-32(fp)
 2006094:	10800318 	cmpnei	r2,r2,12
 2006098:	10001a1e 	bne	r2,zero,2006104 <editNum10+0x304>
					{
						KPLED_All_Off();
 200609c:	2000f400 	call	2000f40 <KPLED_All_Off>
						DisClear();
 20060a0:	20006780 	call	2000678 <DisClear>
						DisShowCur(0);
 20060a4:	0009883a 	mov	r4,zero
 20060a8:	20004fc0 	call	20004fc <DisShowCur>
						DisCurPos(2,7);
 20060ac:	01000084 	movi	r4,2
 20060b0:	014001c4 	movi	r5,7
 20060b4:	20005400 	call	2000540 <DisCurPos>
						DisWrStr("WARNING");
 20060b8:	01008074 	movhi	r4,513
 20060bc:	211bec04 	addi	r4,r4,28592
 20060c0:	20006000 	call	2000600 <DisWrStr>
						DisCurPos(3,1);
 20060c4:	010000c4 	movi	r4,3
 20060c8:	01400044 	movi	r5,1
 20060cc:	20005400 	call	2000540 <DisCurPos>
						DisWrStr("Exit Without Saving");
 20060d0:	01008074 	movhi	r4,513
 20060d4:	211bee04 	addi	r4,r4,28600
 20060d8:	20006000 	call	2000600 <DisWrStr>
						delay(MSG_DELAY);
 20060dc:	01271014 	movui	r4,40000
 20060e0:	20019dc0 	call	20019dc <delay>
						while(keyFlag);
 20060e4:	0001883a 	nop
 20060e8:	00810034 	movhi	r2,1024
 20060ec:	10889804 	addi	r2,r2,8800
 20060f0:	10800003 	ldbu	r2,0(r2)
 20060f4:	10803fcc 	andi	r2,r2,255
 20060f8:	103ffb1e 	bne	r2,zero,20060e8 <editNum10+0x2e8>
						return num;
 20060fc:	e0bffd17 	ldw	r2,-12(fp)
 2006100:	00005306 	br	2006250 <editNum10+0x450>
					}
					else if(keyVal_latch == KEY_ENTER)
 2006104:	e0bff803 	ldbu	r2,-32(fp)
 2006108:	10800398 	cmpnei	r2,r2,14
 200610c:	10002c1e 	bne	r2,zero,20061c0 <editNum10+0x3c0>
					{
						//if(! Num10Check(num_buff))
						if(! chkEditedParameter(chnl,SorE,num_buff))
 2006110:	e0fffb03 	ldbu	r3,-20(fp)
 2006114:	e0bffc03 	ldbu	r2,-16(fp)
 2006118:	1809883a 	mov	r4,r3
 200611c:	100b883a 	mov	r5,r2
 2006120:	e1bff717 	ldw	r6,-36(fp)
 2006124:	20075000 	call	2007500 <chkEditedParameter>
 2006128:	10803fcc 	andi	r2,r2,255
 200612c:	1000131e 	bne	r2,zero,200617c <editNum10+0x37c>
						{
							DisShowCur(0);
 2006130:	0009883a 	mov	r4,zero
 2006134:	20004fc0 	call	20004fc <DisShowCur>
							DisCurPos(row,col);
 2006138:	e0fffe03 	ldbu	r3,-8(fp)
 200613c:	e0bfff03 	ldbu	r2,-4(fp)
 2006140:	1809883a 	mov	r4,r3
 2006144:	100b883a 	mov	r5,r2
 2006148:	20005400 	call	2000540 <DisCurPos>
							while(keyFlag);
 200614c:	0001883a 	nop
 2006150:	00810034 	movhi	r2,1024
 2006154:	10889804 	addi	r2,r2,8800
 2006158:	10800003 	ldbu	r2,0(r2)
 200615c:	10803fcc 	andi	r2,r2,255
 2006160:	103ffb1e 	bne	r2,zero,2006150 <editNum10+0x350>
							DisWrStr("Checking...  ");
 2006164:	01008074 	movhi	r4,513
 2006168:	211bf304 	addi	r4,r4,28620
 200616c:	20006000 	call	2000600 <DisWrStr>
							return Dis10toNum10(num_buff);
 2006170:	e13ff717 	ldw	r4,-36(fp)
 2006174:	2005ab40 	call	2005ab4 <Dis10toNum10>
 2006178:	00003506 	br	2006250 <editNum10+0x450>
						}
						else
						{
							DisShowCur(0);
 200617c:	0009883a 	mov	r4,zero
 2006180:	20004fc0 	call	20004fc <DisShowCur>
							DisClearRow(4);
 2006184:	01000104 	movi	r4,4
 2006188:	20006ac0 	call	20006ac <DisClearRow>
							DisCurPos(row,col);
 200618c:	e0fffe03 	ldbu	r3,-8(fp)
 2006190:	e0bfff03 	ldbu	r2,-4(fp)
 2006194:	1809883a 	mov	r4,r3
 2006198:	100b883a 	mov	r5,r2
 200619c:	20005400 	call	2000540 <DisCurPos>
							DisWrStr("ERR:OutOfRng ");
 20061a0:	01008074 	movhi	r4,513
 20061a4:	211bf704 	addi	r4,r4,28636
 20061a8:	20006000 	call	2000600 <DisWrStr>
							delay(MSG_DELAY);
 20061ac:	01271014 	movui	r4,40000
 20061b0:	20019dc0 	call	20019dc <delay>
							return Dis10toNum10(num_buff); //allow change without match all condition
 20061b4:	e13ff717 	ldw	r4,-36(fp)
 20061b8:	2005ab40 	call	2005ab4 <Dis10toNum10>
 20061bc:	00002406 	br	2006250 <editNum10+0x450>
							refreshButtonBarNum10(curr_digit);
							DisCurPos(row,col);
							DisShowCur(1);
						}
					}
					else if(keyVal_latch == KEY_EDIT)
 20061c0:	e0bff803 	ldbu	r2,-32(fp)
 20061c4:	10800358 	cmpnei	r2,r2,13
 20061c8:	10001a1e 	bne	r2,zero,2006234 <editNum10+0x434>
					{
						DisShowCur(0);
 20061cc:	0009883a 	mov	r4,zero
 20061d0:	20004fc0 	call	20004fc <DisShowCur>

						char* num_str = Num10toStr10(num);
 20061d4:	e13ffd17 	ldw	r4,-12(fp)
 20061d8:	20054500 	call	2005450 <Num10toStr10>
 20061dc:	e0bff915 	stw	r2,-28(fp)
						char* num_buff = Str10toDis10(num_str);
 20061e0:	e13ff917 	ldw	r4,-28(fp)
 20061e4:	20056a00 	call	20056a0 <Str10toDis10>
 20061e8:	e0bffa15 	stw	r2,-24(fp)

						DisCurPos(row,col);
 20061ec:	e0fffe03 	ldbu	r3,-8(fp)
 20061f0:	e0bfff03 	ldbu	r2,-4(fp)
 20061f4:	1809883a 	mov	r4,r3
 20061f8:	100b883a 	mov	r5,r2
 20061fc:	20005400 	call	2000540 <DisCurPos>
						DisWrStr(num_buff);
 2006200:	e13ffa17 	ldw	r4,-24(fp)
 2006204:	20006000 	call	2000600 <DisWrStr>
						curr_digit = 0;
 2006208:	e03ff505 	stb	zero,-44(fp)
						refreshButtonBarNum10(curr_digit);
 200620c:	e0bff503 	ldbu	r2,-44(fp)
 2006210:	1009883a 	mov	r4,r2
 2006214:	2005d340 	call	2005d34 <refreshButtonBarNum10>
						DisCurPos(row,col);
 2006218:	e0fffe03 	ldbu	r3,-8(fp)
 200621c:	e0bfff03 	ldbu	r2,-4(fp)
 2006220:	1809883a 	mov	r4,r3
 2006224:	100b883a 	mov	r5,r2
 2006228:	20005400 	call	2000540 <DisCurPos>
						DisShowCur(1);
 200622c:	01000044 	movi	r4,1
 2006230:	20004fc0 	call	20004fc <DisShowCur>
					}
				}
				while(keyFlag);
 2006234:	0001883a 	nop
 2006238:	00810034 	movhi	r2,1024
 200623c:	10889804 	addi	r2,r2,8800
 2006240:	10800003 	ldbu	r2,0(r2)
 2006244:	10803fcc 	andi	r2,r2,255
 2006248:	103ffb1e 	bne	r2,zero,2006238 <editNum10+0x438>
			}
		}
	}
 200624c:	003f1a06 	br	2005eb8 <editNum10+0xb8>
	return 0;
}
 2006250:	e037883a 	mov	sp,fp
 2006254:	dfc00117 	ldw	ra,4(sp)
 2006258:	df000017 	ldw	fp,0(sp)
 200625c:	dec00204 	addi	sp,sp,8
 2006260:	f800283a 	ret

02006264 <Num2toStr2>:
#include "..\inc\KPLED.h"



char* Num2toStr2(unsigned int num)
{
 2006264:	defffc04 	addi	sp,sp,-16
 2006268:	dfc00315 	stw	ra,12(sp)
 200626c:	df000215 	stw	fp,8(sp)
 2006270:	df000204 	addi	fp,sp,8
 2006274:	e13fff15 	stw	r4,-4(fp)
	char* num_str = "00";
 2006278:	00808074 	movhi	r2,513
 200627c:	109bfb04 	addi	r2,r2,28652
 2006280:	e0bffe15 	stw	r2,-8(fp)

	num = num % 100;		//Ignore higher digits
 2006284:	e0bfff17 	ldw	r2,-4(fp)
 2006288:	1009883a 	mov	r4,r2
 200628c:	01401904 	movi	r5,100
 2006290:	20093b00 	call	20093b0 <__umodsi3>
 2006294:	e0bfff15 	stw	r2,-4(fp)
	num_str[0] = 0x30 + num / 10;
 2006298:	e0bfff17 	ldw	r2,-4(fp)
 200629c:	1009883a 	mov	r4,r2
 20062a0:	01400284 	movi	r5,10
 20062a4:	20093a80 	call	20093a8 <__udivsi3>
 20062a8:	10800c04 	addi	r2,r2,48
 20062ac:	1007883a 	mov	r3,r2
 20062b0:	e0bffe17 	ldw	r2,-8(fp)
 20062b4:	10c00005 	stb	r3,0(r2)
	num = num % 10;
 20062b8:	e0bfff17 	ldw	r2,-4(fp)
 20062bc:	1009883a 	mov	r4,r2
 20062c0:	01400284 	movi	r5,10
 20062c4:	20093b00 	call	20093b0 <__umodsi3>
 20062c8:	e0bfff15 	stw	r2,-4(fp)
	num_str[1] = 0x30 + num;
 20062cc:	e0bffe17 	ldw	r2,-8(fp)
 20062d0:	10800044 	addi	r2,r2,1
 20062d4:	e0ffff17 	ldw	r3,-4(fp)
 20062d8:	18c00c04 	addi	r3,r3,48
 20062dc:	10c00005 	stb	r3,0(r2)
	return num_str;
 20062e0:	e0bffe17 	ldw	r2,-8(fp)
}
 20062e4:	e037883a 	mov	sp,fp
 20062e8:	dfc00117 	ldw	ra,4(sp)
 20062ec:	df000017 	ldw	fp,0(sp)
 20062f0:	dec00204 	addi	sp,sp,8
 20062f4:	f800283a 	ret

020062f8 <Str2toNum2>:

unsigned int Str2toNum2(char* n)
{
 20062f8:	defffc04 	addi	sp,sp,-16
 20062fc:	dfc00315 	stw	ra,12(sp)
 2006300:	df000215 	stw	fp,8(sp)
 2006304:	df000204 	addi	fp,sp,8
 2006308:	e13fff15 	stw	r4,-4(fp)
	unsigned int num = 0;
 200630c:	e03ffe15 	stw	zero,-8(fp)

	num += (n[0]-0x30)*10;
 2006310:	e0bfff17 	ldw	r2,-4(fp)
 2006314:	10800003 	ldbu	r2,0(r2)
 2006318:	10803fcc 	andi	r2,r2,255
 200631c:	1080201c 	xori	r2,r2,128
 2006320:	10bfe004 	addi	r2,r2,-128
 2006324:	1009883a 	mov	r4,r2
 2006328:	01400284 	movi	r5,10
 200632c:	20093b80 	call	20093b8 <__mulsi3>
 2006330:	1007883a 	mov	r3,r2
 2006334:	e0bffe17 	ldw	r2,-8(fp)
 2006338:	1885883a 	add	r2,r3,r2
 200633c:	10bf8804 	addi	r2,r2,-480
 2006340:	e0bffe15 	stw	r2,-8(fp)
	num += (n[1]-0x30);
 2006344:	e0bfff17 	ldw	r2,-4(fp)
 2006348:	10800044 	addi	r2,r2,1
 200634c:	10800003 	ldbu	r2,0(r2)
 2006350:	10c03fcc 	andi	r3,r2,255
 2006354:	18c0201c 	xori	r3,r3,128
 2006358:	18ffe004 	addi	r3,r3,-128
 200635c:	e0bffe17 	ldw	r2,-8(fp)
 2006360:	1885883a 	add	r2,r3,r2
 2006364:	10bff404 	addi	r2,r2,-48
 2006368:	e0bffe15 	stw	r2,-8(fp)

	return num;
 200636c:	e0bffe17 	ldw	r2,-8(fp)
}
 2006370:	e037883a 	mov	sp,fp
 2006374:	dfc00117 	ldw	ra,4(sp)
 2006378:	df000017 	ldw	fp,0(sp)
 200637c:	dec00204 	addi	sp,sp,8
 2006380:	f800283a 	ret

02006384 <refreshButtonBarNum2>:

void refreshButtonBarNum2(unsigned char curr_digit)
{
 2006384:	defffd04 	addi	sp,sp,-12
 2006388:	dfc00215 	stw	ra,8(sp)
 200638c:	df000115 	stw	fp,4(sp)
 2006390:	df000104 	addi	fp,sp,4
 2006394:	2005883a 	mov	r2,r4
 2006398:	e0bfff05 	stb	r2,-4(fp)
	DisShowCur(0);
 200639c:	0009883a 	mov	r4,zero
 20063a0:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(4,1);
 20063a4:	01000104 	movi	r4,4
 20063a8:	01400044 	movi	r5,1
 20063ac:	20005400 	call	2000540 <DisCurPos>
	if(curr_digit!=0 && curr_digit!=1)
 20063b0:	e0bfff03 	ldbu	r2,-4(fp)
 20063b4:	10000b26 	beq	r2,zero,20063e4 <refreshButtonBarNum2+0x60>
 20063b8:	e0bfff03 	ldbu	r2,-4(fp)
 20063bc:	10800060 	cmpeqi	r2,r2,1
 20063c0:	1000081e 	bne	r2,zero,20063e4 <refreshButtonBarNum2+0x60>
	{
		KPLED_LeftArrow(3);
 20063c4:	010000c4 	movi	r4,3
 20063c8:	20010ac0 	call	20010ac <KPLED_LeftArrow>
		KPLED_RightArrow(3);
 20063cc:	010000c4 	movi	r4,3
 20063d0:	20010200 	call	2001020 <KPLED_RightArrow>

		DisWrStr("<       Ent.       >");
 20063d4:	01008074 	movhi	r4,513
 20063d8:	211bfc04 	addi	r4,r4,28656
 20063dc:	20006000 	call	2000600 <DisWrStr>
 20063e0:	00001406 	br	2006434 <refreshButtonBarNum2+0xb0>
	}
	else if(curr_digit==0)
 20063e4:	e0bfff03 	ldbu	r2,-4(fp)
 20063e8:	1000081e 	bne	r2,zero,200640c <refreshButtonBarNum2+0x88>
	{
		KPLED_LeftArrow(0);
 20063ec:	0009883a 	mov	r4,zero
 20063f0:	20010ac0 	call	20010ac <KPLED_LeftArrow>
		KPLED_RightArrow(3);
 20063f4:	010000c4 	movi	r4,3
 20063f8:	20010200 	call	2001020 <KPLED_RightArrow>

		DisWrStr("        Ent.       >");
 20063fc:	01008074 	movhi	r4,513
 2006400:	211c0204 	addi	r4,r4,28680
 2006404:	20006000 	call	2000600 <DisWrStr>
 2006408:	00000a06 	br	2006434 <refreshButtonBarNum2+0xb0>
	}
	else if(curr_digit==1)
 200640c:	e0bfff03 	ldbu	r2,-4(fp)
 2006410:	10800058 	cmpnei	r2,r2,1
 2006414:	1000071e 	bne	r2,zero,2006434 <refreshButtonBarNum2+0xb0>
	{
		KPLED_LeftArrow(3);
 2006418:	010000c4 	movi	r4,3
 200641c:	20010ac0 	call	20010ac <KPLED_LeftArrow>
		KPLED_RightArrow(0);
 2006420:	0009883a 	mov	r4,zero
 2006424:	20010200 	call	2001020 <KPLED_RightArrow>

		DisWrStr("<       Ent.        ");
 2006428:	01008074 	movhi	r4,513
 200642c:	211c0804 	addi	r4,r4,28704
 2006430:	20006000 	call	2000600 <DisWrStr>
	}
	DisShowCur(1);
 2006434:	01000044 	movi	r4,1
 2006438:	20004fc0 	call	20004fc <DisShowCur>
}
 200643c:	e037883a 	mov	sp,fp
 2006440:	dfc00117 	ldw	ra,4(sp)
 2006444:	df000017 	ldw	fp,0(sp)
 2006448:	dec00204 	addi	sp,sp,8
 200644c:	f800283a 	ret

02006450 <editNum2>:

unsigned int editNum2(unsigned int num, unsigned char row, unsigned char col)
{
 2006450:	defff804 	addi	sp,sp,-32
 2006454:	dfc00715 	stw	ra,28(sp)
 2006458:	df000615 	stw	fp,24(sp)
 200645c:	df000604 	addi	fp,sp,24
 2006460:	e13ffd15 	stw	r4,-12(fp)
 2006464:	2807883a 	mov	r3,r5
 2006468:	3005883a 	mov	r2,r6
 200646c:	e0fffe05 	stb	r3,-8(fp)
 2006470:	e0bfff05 	stb	r2,-4(fp)
	unsigned char curr_digit = 0;
 2006474:	e03ffa05 	stb	zero,-24(fp)
	unsigned char keyVal_latch;
	char* num_buff = Num2toStr2(num);
 2006478:	e13ffd17 	ldw	r4,-12(fp)
 200647c:	20062640 	call	2006264 <Num2toStr2>
 2006480:	e0bffb15 	stw	r2,-20(fp)

	KPLED_All_Off();
 2006484:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Menu(3);
 2006488:	010000c4 	movi	r4,3
 200648c:	20011340 	call	2001134 <KPLED_Menu>
	KPLED_Edit(3);
 2006490:	010000c4 	movi	r4,3
 2006494:	20011bc0 	call	20011bc <KPLED_Edit>
	KPLED_Enter(3);
 2006498:	010000c4 	movi	r4,3
 200649c:	20012440 	call	2001244 <KPLED_Enter>
	KPLED_Numbers(3);
 20064a0:	010000c4 	movi	r4,3
 20064a4:	2000f9c0 	call	2000f9c <KPLED_Numbers>

	DisCurPos(row,col);
 20064a8:	e0fffe03 	ldbu	r3,-8(fp)
 20064ac:	e0bfff03 	ldbu	r2,-4(fp)
 20064b0:	1809883a 	mov	r4,r3
 20064b4:	100b883a 	mov	r5,r2
 20064b8:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(num_buff);
 20064bc:	e13ffb17 	ldw	r4,-20(fp)
 20064c0:	20006000 	call	2000600 <DisWrStr>

	refreshButtonBarNum2(curr_digit);
 20064c4:	e0bffa03 	ldbu	r2,-24(fp)
 20064c8:	1009883a 	mov	r4,r2
 20064cc:	20063840 	call	2006384 <refreshButtonBarNum2>

	DisCurPos(row,col);
 20064d0:	e0fffe03 	ldbu	r3,-8(fp)
 20064d4:	e0bfff03 	ldbu	r2,-4(fp)
 20064d8:	1809883a 	mov	r4,r3
 20064dc:	100b883a 	mov	r5,r2
 20064e0:	20005400 	call	2000540 <DisCurPos>
	DisShowCur(1);
 20064e4:	01000044 	movi	r4,1
 20064e8:	20004fc0 	call	20004fc <DisShowCur>
 20064ec:	00000106 	br	20064f4 <editNum2+0xa4>
					}
				}
				while(keyFlag);
			}
		}
	}
 20064f0:	0001883a 	nop



	while(1)
	{
		if(keyFlag)
 20064f4:	00810034 	movhi	r2,1024
 20064f8:	10889804 	addi	r2,r2,8800
 20064fc:	10800003 	ldbu	r2,0(r2)
 2006500:	10803fcc 	andi	r2,r2,255
 2006504:	103ffa26 	beq	r2,zero,20064f0 <editNum2+0xa0>
		{
			delay(100);
 2006508:	01001904 	movi	r4,100
 200650c:	20019dc0 	call	20019dc <delay>
			if(keyFlag)
 2006510:	00810034 	movhi	r2,1024
 2006514:	10889804 	addi	r2,r2,8800
 2006518:	10800003 	ldbu	r2,0(r2)
 200651c:	10803fcc 	andi	r2,r2,255
 2006520:	103ff326 	beq	r2,zero,20064f0 <editNum2+0xa0>
			{
				keyVal_latch = keyVal;
 2006524:	00810034 	movhi	r2,1024
 2006528:	10889404 	addi	r2,r2,8784
 200652c:	10800003 	ldbu	r2,0(r2)
 2006530:	e0bffc05 	stb	r2,-16(fp)
				if(keyVal_latch <= 0x09 && keyVal_latch >= 0x00)
 2006534:	e0bffc03 	ldbu	r2,-16(fp)
 2006538:	108002a8 	cmpgeui	r2,r2,10
 200653c:	1000251e 	bne	r2,zero,20065d4 <editNum2+0x184>
				{
					DisShowCur(0);
 2006540:	0009883a 	mov	r4,zero
 2006544:	20004fc0 	call	20004fc <DisShowCur>
					num_buff[curr_digit] = keyVal_latch + 0x30;
 2006548:	e0bffa03 	ldbu	r2,-24(fp)
 200654c:	e0fffb17 	ldw	r3,-20(fp)
 2006550:	1885883a 	add	r2,r3,r2
 2006554:	e0fffc03 	ldbu	r3,-16(fp)
 2006558:	18c00c04 	addi	r3,r3,48
 200655c:	10c00005 	stb	r3,0(r2)
					DisCurPos(row,col);
 2006560:	e0fffe03 	ldbu	r3,-8(fp)
 2006564:	e0bfff03 	ldbu	r2,-4(fp)
 2006568:	1809883a 	mov	r4,r3
 200656c:	100b883a 	mov	r5,r2
 2006570:	20005400 	call	2000540 <DisCurPos>
					DisWrStr(num_buff);
 2006574:	e13ffb17 	ldw	r4,-20(fp)
 2006578:	20006000 	call	2000600 <DisWrStr>
					curr_digit++;
 200657c:	e0bffa03 	ldbu	r2,-24(fp)
 2006580:	10800044 	addi	r2,r2,1
 2006584:	e0bffa05 	stb	r2,-24(fp)
					if(curr_digit == 2)
 2006588:	e0bffa03 	ldbu	r2,-24(fp)
 200658c:	10800098 	cmpnei	r2,r2,2
 2006590:	1000021e 	bne	r2,zero,200659c <editNum2+0x14c>
						curr_digit = 1;			//Stay at the least significant
 2006594:	00800044 	movi	r2,1
 2006598:	e0bffa05 	stb	r2,-24(fp)
					refreshButtonBarNum2(curr_digit);
 200659c:	e0bffa03 	ldbu	r2,-24(fp)
 20065a0:	1009883a 	mov	r4,r2
 20065a4:	20063840 	call	2006384 <refreshButtonBarNum2>
					DisCurPos(row,col+curr_digit);
 20065a8:	e0fffe03 	ldbu	r3,-8(fp)
 20065ac:	e13fff03 	ldbu	r4,-4(fp)
 20065b0:	e0bffa03 	ldbu	r2,-24(fp)
 20065b4:	2085883a 	add	r2,r4,r2
 20065b8:	10803fcc 	andi	r2,r2,255
 20065bc:	1809883a 	mov	r4,r3
 20065c0:	100b883a 	mov	r5,r2
 20065c4:	20005400 	call	2000540 <DisCurPos>
					DisShowCur(1);
 20065c8:	01000044 	movi	r4,1
 20065cc:	20004fc0 	call	20004fc <DisShowCur>
						refreshButtonBarNum2(curr_digit);
						DisCurPos(row,col);
						DisShowCur(1);
					}
				}
				while(keyFlag);
 20065d0:	00006506 	br	2006768 <editNum2+0x318>
					DisCurPos(row,col+curr_digit);
					DisShowCur(1);
				}
				else
				{
					if(keyVal_latch == KEY_LEFT)
 20065d4:	e0bffc03 	ldbu	r2,-16(fp)
 20065d8:	10800298 	cmpnei	r2,r2,10
 20065dc:	1000131e 	bne	r2,zero,200662c <editNum2+0x1dc>
					{
						if(curr_digit == 0)
 20065e0:	e0bffa03 	ldbu	r2,-24(fp)
 20065e4:	1000021e 	bne	r2,zero,20065f0 <editNum2+0x1a0>
							curr_digit = 0;
 20065e8:	e03ffa05 	stb	zero,-24(fp)
 20065ec:	00000306 	br	20065fc <editNum2+0x1ac>
						else
							curr_digit--;
 20065f0:	e0bffa03 	ldbu	r2,-24(fp)
 20065f4:	10bfffc4 	addi	r2,r2,-1
 20065f8:	e0bffa05 	stb	r2,-24(fp)
						refreshButtonBarNum2(curr_digit);
 20065fc:	e0bffa03 	ldbu	r2,-24(fp)
 2006600:	1009883a 	mov	r4,r2
 2006604:	20063840 	call	2006384 <refreshButtonBarNum2>
						DisCurPos(row,col+curr_digit);
 2006608:	e0fffe03 	ldbu	r3,-8(fp)
 200660c:	e13fff03 	ldbu	r4,-4(fp)
 2006610:	e0bffa03 	ldbu	r2,-24(fp)
 2006614:	2085883a 	add	r2,r4,r2
 2006618:	10803fcc 	andi	r2,r2,255
 200661c:	1809883a 	mov	r4,r3
 2006620:	100b883a 	mov	r5,r2
 2006624:	20005400 	call	2000540 <DisCurPos>
						refreshButtonBarNum2(curr_digit);
						DisCurPos(row,col);
						DisShowCur(1);
					}
				}
				while(keyFlag);
 2006628:	00004f06 	br	2006768 <editNum2+0x318>
							curr_digit--;
						refreshButtonBarNum2(curr_digit);
						DisCurPos(row,col+curr_digit);
					}

					else if(keyVal_latch == KEY_RIGHT)
 200662c:	e0bffc03 	ldbu	r2,-16(fp)
 2006630:	108002d8 	cmpnei	r2,r2,11
 2006634:	1000151e 	bne	r2,zero,200668c <editNum2+0x23c>
					{
						if(curr_digit == 1)
 2006638:	e0bffa03 	ldbu	r2,-24(fp)
 200663c:	10800058 	cmpnei	r2,r2,1
 2006640:	1000031e 	bne	r2,zero,2006650 <editNum2+0x200>
							curr_digit = 1;
 2006644:	00800044 	movi	r2,1
 2006648:	e0bffa05 	stb	r2,-24(fp)
 200664c:	00000306 	br	200665c <editNum2+0x20c>
						else
							curr_digit++;
 2006650:	e0bffa03 	ldbu	r2,-24(fp)
 2006654:	10800044 	addi	r2,r2,1
 2006658:	e0bffa05 	stb	r2,-24(fp)
						refreshButtonBarNum2(curr_digit);
 200665c:	e0bffa03 	ldbu	r2,-24(fp)
 2006660:	1009883a 	mov	r4,r2
 2006664:	20063840 	call	2006384 <refreshButtonBarNum2>
						DisCurPos(row,col+curr_digit);
 2006668:	e0fffe03 	ldbu	r3,-8(fp)
 200666c:	e13fff03 	ldbu	r4,-4(fp)
 2006670:	e0bffa03 	ldbu	r2,-24(fp)
 2006674:	2085883a 	add	r2,r4,r2
 2006678:	10803fcc 	andi	r2,r2,255
 200667c:	1809883a 	mov	r4,r3
 2006680:	100b883a 	mov	r5,r2
 2006684:	20005400 	call	2000540 <DisCurPos>
						refreshButtonBarNum2(curr_digit);
						DisCurPos(row,col);
						DisShowCur(1);
					}
				}
				while(keyFlag);
 2006688:	00003706 	br	2006768 <editNum2+0x318>
							curr_digit++;
						refreshButtonBarNum2(curr_digit);
						DisCurPos(row,col+curr_digit);
					}

					else if(keyVal_latch == KEY_MENU)
 200668c:	e0bffc03 	ldbu	r2,-16(fp)
 2006690:	10800318 	cmpnei	r2,r2,12
 2006694:	1000141e 	bne	r2,zero,20066e8 <editNum2+0x298>
					{
						KPLED_All_Off();
 2006698:	2000f400 	call	2000f40 <KPLED_All_Off>
						DisClear();
 200669c:	20006780 	call	2000678 <DisClear>
						DisShowCur(0);
 20066a0:	0009883a 	mov	r4,zero
 20066a4:	20004fc0 	call	20004fc <DisShowCur>
						DisCurPos(2,7);
 20066a8:	01000084 	movi	r4,2
 20066ac:	014001c4 	movi	r5,7
 20066b0:	20005400 	call	2000540 <DisCurPos>
						DisWrStr("WARNING");
 20066b4:	01008074 	movhi	r4,513
 20066b8:	211c0e04 	addi	r4,r4,28728
 20066bc:	20006000 	call	2000600 <DisWrStr>
						DisCurPos(3,1);
 20066c0:	010000c4 	movi	r4,3
 20066c4:	01400044 	movi	r5,1
 20066c8:	20005400 	call	2000540 <DisCurPos>
						DisWrStr("Exit Without Saving");
 20066cc:	01008074 	movhi	r4,513
 20066d0:	211c1004 	addi	r4,r4,28736
 20066d4:	20006000 	call	2000600 <DisWrStr>
						delay(MSG_DELAY);
 20066d8:	01271014 	movui	r4,40000
 20066dc:	20019dc0 	call	20019dc <delay>
						return num;
 20066e0:	e0bffd17 	ldw	r2,-12(fp)
 20066e4:	00002706 	br	2006784 <editNum2+0x334>
					}
					else if(keyVal_latch == KEY_ENTER)
 20066e8:	e0bffc03 	ldbu	r2,-16(fp)
 20066ec:	10800398 	cmpnei	r2,r2,14
 20066f0:	1000031e 	bne	r2,zero,2006700 <editNum2+0x2b0>
					{
						return Str2toNum2(num_buff);
 20066f4:	e13ffb17 	ldw	r4,-20(fp)
 20066f8:	20062f80 	call	20062f8 <Str2toNum2>
 20066fc:	00002106 	br	2006784 <editNum2+0x334>
					}
					else if(keyVal_latch == KEY_EDIT)
 2006700:	e0bffc03 	ldbu	r2,-16(fp)
 2006704:	10800358 	cmpnei	r2,r2,13
 2006708:	1000171e 	bne	r2,zero,2006768 <editNum2+0x318>
					{
						DisShowCur(0);
 200670c:	0009883a 	mov	r4,zero
 2006710:	20004fc0 	call	20004fc <DisShowCur>

						num_buff = Num2toStr2(num);
 2006714:	e13ffd17 	ldw	r4,-12(fp)
 2006718:	20062640 	call	2006264 <Num2toStr2>
 200671c:	e0bffb15 	stw	r2,-20(fp)

						DisCurPos(row,col);
 2006720:	e0fffe03 	ldbu	r3,-8(fp)
 2006724:	e0bfff03 	ldbu	r2,-4(fp)
 2006728:	1809883a 	mov	r4,r3
 200672c:	100b883a 	mov	r5,r2
 2006730:	20005400 	call	2000540 <DisCurPos>
						DisWrStr(num_buff);
 2006734:	e13ffb17 	ldw	r4,-20(fp)
 2006738:	20006000 	call	2000600 <DisWrStr>

						curr_digit = 0;
 200673c:	e03ffa05 	stb	zero,-24(fp)
						refreshButtonBarNum2(curr_digit);
 2006740:	e0bffa03 	ldbu	r2,-24(fp)
 2006744:	1009883a 	mov	r4,r2
 2006748:	20063840 	call	2006384 <refreshButtonBarNum2>
						DisCurPos(row,col);
 200674c:	e0fffe03 	ldbu	r3,-8(fp)
 2006750:	e0bfff03 	ldbu	r2,-4(fp)
 2006754:	1809883a 	mov	r4,r3
 2006758:	100b883a 	mov	r5,r2
 200675c:	20005400 	call	2000540 <DisCurPos>
						DisShowCur(1);
 2006760:	01000044 	movi	r4,1
 2006764:	20004fc0 	call	20004fc <DisShowCur>
					}
				}
				while(keyFlag);
 2006768:	0001883a 	nop
 200676c:	00810034 	movhi	r2,1024
 2006770:	10889804 	addi	r2,r2,8800
 2006774:	10800003 	ldbu	r2,0(r2)
 2006778:	10803fcc 	andi	r2,r2,255
 200677c:	103ffb1e 	bne	r2,zero,200676c <editNum2+0x31c>
			}
		}
	}
 2006780:	003f5b06 	br	20064f0 <editNum2+0xa0>
	return 0;
}
 2006784:	e037883a 	mov	sp,fp
 2006788:	dfc00117 	ldw	ra,4(sp)
 200678c:	df000017 	ldw	fp,0(sp)
 2006790:	dec00204 	addi	sp,sp,8
 2006794:	f800283a 	ret

02006798 <Num5toStr5>:
#include "..\inc\KPLED.h"



char* Num5toStr5(unsigned int num)
{
 2006798:	defffb04 	addi	sp,sp,-20
 200679c:	dfc00415 	stw	ra,16(sp)
 20067a0:	df000315 	stw	fp,12(sp)
 20067a4:	dc000215 	stw	r16,8(sp)
 20067a8:	df000204 	addi	fp,sp,8
 20067ac:	e13fff15 	stw	r4,-4(fp)
	char* num_str = "00000";
 20067b0:	00808074 	movhi	r2,513
 20067b4:	109c1504 	addi	r2,r2,28756
 20067b8:	e0bffe15 	stw	r2,-8(fp)

	num = num % 100000;		//Ignore higher digits
 20067bc:	e0bfff17 	ldw	r2,-4(fp)
 20067c0:	1009883a 	mov	r4,r2
 20067c4:	014000b4 	movhi	r5,2
 20067c8:	2961a804 	addi	r5,r5,-31072
 20067cc:	20093b00 	call	20093b0 <__umodsi3>
 20067d0:	e0bfff15 	stw	r2,-4(fp)
	num_str[0] = 0x30 + num / 10000;		num = num % 10000;
 20067d4:	e0bfff17 	ldw	r2,-4(fp)
 20067d8:	1009883a 	mov	r4,r2
 20067dc:	0149c404 	movi	r5,10000
 20067e0:	20093a80 	call	20093a8 <__udivsi3>
 20067e4:	10800c04 	addi	r2,r2,48
 20067e8:	1007883a 	mov	r3,r2
 20067ec:	e0bffe17 	ldw	r2,-8(fp)
 20067f0:	10c00005 	stb	r3,0(r2)
 20067f4:	e0bfff17 	ldw	r2,-4(fp)
 20067f8:	1009883a 	mov	r4,r2
 20067fc:	0149c404 	movi	r5,10000
 2006800:	20093b00 	call	20093b0 <__umodsi3>
 2006804:	e0bfff15 	stw	r2,-4(fp)
	num_str[1] = 0x30 + num / 1000;			num = num % 1000;
 2006808:	e0bffe17 	ldw	r2,-8(fp)
 200680c:	14000044 	addi	r16,r2,1
 2006810:	e0bfff17 	ldw	r2,-4(fp)
 2006814:	1009883a 	mov	r4,r2
 2006818:	0140fa04 	movi	r5,1000
 200681c:	20093a80 	call	20093a8 <__udivsi3>
 2006820:	10800c04 	addi	r2,r2,48
 2006824:	80800005 	stb	r2,0(r16)
 2006828:	e0bfff17 	ldw	r2,-4(fp)
 200682c:	1009883a 	mov	r4,r2
 2006830:	0140fa04 	movi	r5,1000
 2006834:	20093b00 	call	20093b0 <__umodsi3>
 2006838:	e0bfff15 	stw	r2,-4(fp)
	num_str[2] = 0x30 + num / 100;			num = num % 100;
 200683c:	e0bffe17 	ldw	r2,-8(fp)
 2006840:	14000084 	addi	r16,r2,2
 2006844:	e0bfff17 	ldw	r2,-4(fp)
 2006848:	1009883a 	mov	r4,r2
 200684c:	01401904 	movi	r5,100
 2006850:	20093a80 	call	20093a8 <__udivsi3>
 2006854:	10800c04 	addi	r2,r2,48
 2006858:	80800005 	stb	r2,0(r16)
 200685c:	e0bfff17 	ldw	r2,-4(fp)
 2006860:	1009883a 	mov	r4,r2
 2006864:	01401904 	movi	r5,100
 2006868:	20093b00 	call	20093b0 <__umodsi3>
 200686c:	e0bfff15 	stw	r2,-4(fp)
	num_str[3] = 0x30 + num / 10;			num = num % 10;
 2006870:	e0bffe17 	ldw	r2,-8(fp)
 2006874:	140000c4 	addi	r16,r2,3
 2006878:	e0bfff17 	ldw	r2,-4(fp)
 200687c:	1009883a 	mov	r4,r2
 2006880:	01400284 	movi	r5,10
 2006884:	20093a80 	call	20093a8 <__udivsi3>
 2006888:	10800c04 	addi	r2,r2,48
 200688c:	80800005 	stb	r2,0(r16)
 2006890:	e0bfff17 	ldw	r2,-4(fp)
 2006894:	1009883a 	mov	r4,r2
 2006898:	01400284 	movi	r5,10
 200689c:	20093b00 	call	20093b0 <__umodsi3>
 20068a0:	e0bfff15 	stw	r2,-4(fp)
	num_str[4] = 0x30 + num;
 20068a4:	e0bffe17 	ldw	r2,-8(fp)
 20068a8:	10800104 	addi	r2,r2,4
 20068ac:	e0ffff17 	ldw	r3,-4(fp)
 20068b0:	18c00c04 	addi	r3,r3,48
 20068b4:	10c00005 	stb	r3,0(r2)
	return num_str;
 20068b8:	e0bffe17 	ldw	r2,-8(fp)
}
 20068bc:	e037883a 	mov	sp,fp
 20068c0:	dfc00217 	ldw	ra,8(sp)
 20068c4:	df000117 	ldw	fp,4(sp)
 20068c8:	dc000017 	ldw	r16,0(sp)
 20068cc:	dec00304 	addi	sp,sp,12
 20068d0:	f800283a 	ret

020068d4 <Str5toNum5>:

unsigned int Str5toNum5(char* n)
{
 20068d4:	defffc04 	addi	sp,sp,-16
 20068d8:	dfc00315 	stw	ra,12(sp)
 20068dc:	df000215 	stw	fp,8(sp)
 20068e0:	df000204 	addi	fp,sp,8
 20068e4:	e13fff15 	stw	r4,-4(fp)
	unsigned int num = 0;
 20068e8:	e03ffe15 	stw	zero,-8(fp)

	num += (n[0]-0x30)*10000;
 20068ec:	e0bfff17 	ldw	r2,-4(fp)
 20068f0:	10800003 	ldbu	r2,0(r2)
 20068f4:	10803fcc 	andi	r2,r2,255
 20068f8:	1080201c 	xori	r2,r2,128
 20068fc:	10bfe004 	addi	r2,r2,-128
 2006900:	1009883a 	mov	r4,r2
 2006904:	0149c404 	movi	r5,10000
 2006908:	20093b80 	call	20093b8 <__mulsi3>
 200690c:	1007883a 	mov	r3,r2
 2006910:	e0bffe17 	ldw	r2,-8(fp)
 2006914:	1887883a 	add	r3,r3,r2
 2006918:	00bffe74 	movhi	r2,65529
 200691c:	10ab4004 	addi	r2,r2,-21248
 2006920:	1885883a 	add	r2,r3,r2
 2006924:	e0bffe15 	stw	r2,-8(fp)
	num += (n[1]-0x30)*1000;
 2006928:	e0bfff17 	ldw	r2,-4(fp)
 200692c:	10800044 	addi	r2,r2,1
 2006930:	10800003 	ldbu	r2,0(r2)
 2006934:	10803fcc 	andi	r2,r2,255
 2006938:	1080201c 	xori	r2,r2,128
 200693c:	10bfe004 	addi	r2,r2,-128
 2006940:	1009883a 	mov	r4,r2
 2006944:	0140fa04 	movi	r5,1000
 2006948:	20093b80 	call	20093b8 <__mulsi3>
 200694c:	1007883a 	mov	r3,r2
 2006950:	e0bffe17 	ldw	r2,-8(fp)
 2006954:	1887883a 	add	r3,r3,r2
 2006958:	00bffff4 	movhi	r2,65535
 200695c:	10912004 	addi	r2,r2,17536
 2006960:	1885883a 	add	r2,r3,r2
 2006964:	e0bffe15 	stw	r2,-8(fp)
	num += (n[2]-0x30)*100;
 2006968:	e0bfff17 	ldw	r2,-4(fp)
 200696c:	10800084 	addi	r2,r2,2
 2006970:	10800003 	ldbu	r2,0(r2)
 2006974:	10803fcc 	andi	r2,r2,255
 2006978:	1080201c 	xori	r2,r2,128
 200697c:	10bfe004 	addi	r2,r2,-128
 2006980:	1009883a 	mov	r4,r2
 2006984:	01401904 	movi	r5,100
 2006988:	20093b80 	call	20093b8 <__mulsi3>
 200698c:	1007883a 	mov	r3,r2
 2006990:	e0bffe17 	ldw	r2,-8(fp)
 2006994:	1885883a 	add	r2,r3,r2
 2006998:	10bb5004 	addi	r2,r2,-4800
 200699c:	e0bffe15 	stw	r2,-8(fp)
	num += (n[3]-0x30)*10;
 20069a0:	e0bfff17 	ldw	r2,-4(fp)
 20069a4:	108000c4 	addi	r2,r2,3
 20069a8:	10800003 	ldbu	r2,0(r2)
 20069ac:	10803fcc 	andi	r2,r2,255
 20069b0:	1080201c 	xori	r2,r2,128
 20069b4:	10bfe004 	addi	r2,r2,-128
 20069b8:	1009883a 	mov	r4,r2
 20069bc:	01400284 	movi	r5,10
 20069c0:	20093b80 	call	20093b8 <__mulsi3>
 20069c4:	1007883a 	mov	r3,r2
 20069c8:	e0bffe17 	ldw	r2,-8(fp)
 20069cc:	1885883a 	add	r2,r3,r2
 20069d0:	10bf8804 	addi	r2,r2,-480
 20069d4:	e0bffe15 	stw	r2,-8(fp)
	num += (n[4]-0x30);
 20069d8:	e0bfff17 	ldw	r2,-4(fp)
 20069dc:	10800104 	addi	r2,r2,4
 20069e0:	10800003 	ldbu	r2,0(r2)
 20069e4:	10c03fcc 	andi	r3,r2,255
 20069e8:	18c0201c 	xori	r3,r3,128
 20069ec:	18ffe004 	addi	r3,r3,-128
 20069f0:	e0bffe17 	ldw	r2,-8(fp)
 20069f4:	1885883a 	add	r2,r3,r2
 20069f8:	10bff404 	addi	r2,r2,-48
 20069fc:	e0bffe15 	stw	r2,-8(fp)

	return num;
 2006a00:	e0bffe17 	ldw	r2,-8(fp)
}
 2006a04:	e037883a 	mov	sp,fp
 2006a08:	dfc00117 	ldw	ra,4(sp)
 2006a0c:	df000017 	ldw	fp,0(sp)
 2006a10:	dec00204 	addi	sp,sp,8
 2006a14:	f800283a 	ret

02006a18 <refreshButtonBarNum5>:

void refreshButtonBarNum5(unsigned char curr_digit)
{
 2006a18:	defffd04 	addi	sp,sp,-12
 2006a1c:	dfc00215 	stw	ra,8(sp)
 2006a20:	df000115 	stw	fp,4(sp)
 2006a24:	df000104 	addi	fp,sp,4
 2006a28:	2005883a 	mov	r2,r4
 2006a2c:	e0bfff05 	stb	r2,-4(fp)
	DisShowCur(0);
 2006a30:	0009883a 	mov	r4,zero
 2006a34:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(4,1);
 2006a38:	01000104 	movi	r4,4
 2006a3c:	01400044 	movi	r5,1
 2006a40:	20005400 	call	2000540 <DisCurPos>
	if(curr_digit!=0 && curr_digit!=4)
 2006a44:	e0bfff03 	ldbu	r2,-4(fp)
 2006a48:	10000b26 	beq	r2,zero,2006a78 <refreshButtonBarNum5+0x60>
 2006a4c:	e0bfff03 	ldbu	r2,-4(fp)
 2006a50:	10800120 	cmpeqi	r2,r2,4
 2006a54:	1000081e 	bne	r2,zero,2006a78 <refreshButtonBarNum5+0x60>
	{
		KPLED_LeftArrow(3);
 2006a58:	010000c4 	movi	r4,3
 2006a5c:	20010ac0 	call	20010ac <KPLED_LeftArrow>
		KPLED_RightArrow(3);
 2006a60:	010000c4 	movi	r4,3
 2006a64:	20010200 	call	2001020 <KPLED_RightArrow>
		DisWrStr("<       Ent.       >");
 2006a68:	01008074 	movhi	r4,513
 2006a6c:	211c1704 	addi	r4,r4,28764
 2006a70:	20006000 	call	2000600 <DisWrStr>
 2006a74:	00001406 	br	2006ac8 <refreshButtonBarNum5+0xb0>
	}
	else if(curr_digit==0)
 2006a78:	e0bfff03 	ldbu	r2,-4(fp)
 2006a7c:	1000081e 	bne	r2,zero,2006aa0 <refreshButtonBarNum5+0x88>
	{
		KPLED_LeftArrow(0);
 2006a80:	0009883a 	mov	r4,zero
 2006a84:	20010ac0 	call	20010ac <KPLED_LeftArrow>
		KPLED_RightArrow(3);
 2006a88:	010000c4 	movi	r4,3
 2006a8c:	20010200 	call	2001020 <KPLED_RightArrow>
		DisWrStr("        Ent.       >");
 2006a90:	01008074 	movhi	r4,513
 2006a94:	211c1d04 	addi	r4,r4,28788
 2006a98:	20006000 	call	2000600 <DisWrStr>
 2006a9c:	00000a06 	br	2006ac8 <refreshButtonBarNum5+0xb0>
	}
	else if(curr_digit==4)
 2006aa0:	e0bfff03 	ldbu	r2,-4(fp)
 2006aa4:	10800118 	cmpnei	r2,r2,4
 2006aa8:	1000071e 	bne	r2,zero,2006ac8 <refreshButtonBarNum5+0xb0>
	{
		KPLED_LeftArrow(3);
 2006aac:	010000c4 	movi	r4,3
 2006ab0:	20010ac0 	call	20010ac <KPLED_LeftArrow>
		KPLED_RightArrow(0);
 2006ab4:	0009883a 	mov	r4,zero
 2006ab8:	20010200 	call	2001020 <KPLED_RightArrow>
		DisWrStr("<       Ent.        ");
 2006abc:	01008074 	movhi	r4,513
 2006ac0:	211c2304 	addi	r4,r4,28812
 2006ac4:	20006000 	call	2000600 <DisWrStr>
	}
	DisShowCur(1);
 2006ac8:	01000044 	movi	r4,1
 2006acc:	20004fc0 	call	20004fc <DisShowCur>
}
 2006ad0:	e037883a 	mov	sp,fp
 2006ad4:	dfc00117 	ldw	ra,4(sp)
 2006ad8:	df000017 	ldw	fp,0(sp)
 2006adc:	dec00204 	addi	sp,sp,8
 2006ae0:	f800283a 	ret

02006ae4 <editNum5>:

unsigned int editNum5(unsigned int num, unsigned char row, unsigned char col)
{
 2006ae4:	defff804 	addi	sp,sp,-32
 2006ae8:	dfc00715 	stw	ra,28(sp)
 2006aec:	df000615 	stw	fp,24(sp)
 2006af0:	df000604 	addi	fp,sp,24
 2006af4:	e13ffd15 	stw	r4,-12(fp)
 2006af8:	2807883a 	mov	r3,r5
 2006afc:	3005883a 	mov	r2,r6
 2006b00:	e0fffe05 	stb	r3,-8(fp)
 2006b04:	e0bfff05 	stb	r2,-4(fp)
	unsigned char curr_digit = 0;
 2006b08:	e03ffa05 	stb	zero,-24(fp)
	unsigned char keyVal_latch;
	char* num_buff = Num5toStr5(num);
 2006b0c:	e13ffd17 	ldw	r4,-12(fp)
 2006b10:	20067980 	call	2006798 <Num5toStr5>
 2006b14:	e0bffb15 	stw	r2,-20(fp)

	KPLED_All_Off();
 2006b18:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Menu(3);
 2006b1c:	010000c4 	movi	r4,3
 2006b20:	20011340 	call	2001134 <KPLED_Menu>
	KPLED_Edit(3);
 2006b24:	010000c4 	movi	r4,3
 2006b28:	20011bc0 	call	20011bc <KPLED_Edit>
	KPLED_Enter(3);
 2006b2c:	010000c4 	movi	r4,3
 2006b30:	20012440 	call	2001244 <KPLED_Enter>
	KPLED_Numbers(3);
 2006b34:	010000c4 	movi	r4,3
 2006b38:	2000f9c0 	call	2000f9c <KPLED_Numbers>

	DisCurPos(row,col);
 2006b3c:	e0fffe03 	ldbu	r3,-8(fp)
 2006b40:	e0bfff03 	ldbu	r2,-4(fp)
 2006b44:	1809883a 	mov	r4,r3
 2006b48:	100b883a 	mov	r5,r2
 2006b4c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(num_buff);
 2006b50:	e13ffb17 	ldw	r4,-20(fp)
 2006b54:	20006000 	call	2000600 <DisWrStr>
	refreshButtonBarNum5(curr_digit);
 2006b58:	e0bffa03 	ldbu	r2,-24(fp)
 2006b5c:	1009883a 	mov	r4,r2
 2006b60:	2006a180 	call	2006a18 <refreshButtonBarNum5>
	DisCurPos(row,col);
 2006b64:	e0fffe03 	ldbu	r3,-8(fp)
 2006b68:	e0bfff03 	ldbu	r2,-4(fp)
 2006b6c:	1809883a 	mov	r4,r3
 2006b70:	100b883a 	mov	r5,r2
 2006b74:	20005400 	call	2000540 <DisCurPos>
	DisShowCur(1);
 2006b78:	01000044 	movi	r4,1
 2006b7c:	20004fc0 	call	20004fc <DisShowCur>
 2006b80:	00000106 	br	2006b88 <editNum5+0xa4>
					}
				}
				while(keyFlag);
			}
		}
	}
 2006b84:	0001883a 	nop
	DisCurPos(row,col);
	DisShowCur(1);

	while(1)
	{
		if(keyFlag)
 2006b88:	00810034 	movhi	r2,1024
 2006b8c:	10889804 	addi	r2,r2,8800
 2006b90:	10800003 	ldbu	r2,0(r2)
 2006b94:	10803fcc 	andi	r2,r2,255
 2006b98:	103ffa26 	beq	r2,zero,2006b84 <editNum5+0xa0>
		{
			delay(100);
 2006b9c:	01001904 	movi	r4,100
 2006ba0:	20019dc0 	call	20019dc <delay>
			if(keyFlag)
 2006ba4:	00810034 	movhi	r2,1024
 2006ba8:	10889804 	addi	r2,r2,8800
 2006bac:	10800003 	ldbu	r2,0(r2)
 2006bb0:	10803fcc 	andi	r2,r2,255
 2006bb4:	103ff326 	beq	r2,zero,2006b84 <editNum5+0xa0>
			{
				keyVal_latch = keyVal;
 2006bb8:	00810034 	movhi	r2,1024
 2006bbc:	10889404 	addi	r2,r2,8784
 2006bc0:	10800003 	ldbu	r2,0(r2)
 2006bc4:	e0bffc05 	stb	r2,-16(fp)
				if(keyVal_latch <= 0x09 && keyVal_latch >= 0x00)
 2006bc8:	e0bffc03 	ldbu	r2,-16(fp)
 2006bcc:	108002a8 	cmpgeui	r2,r2,10
 2006bd0:	1000251e 	bne	r2,zero,2006c68 <editNum5+0x184>
				{
					DisShowCur(0);
 2006bd4:	0009883a 	mov	r4,zero
 2006bd8:	20004fc0 	call	20004fc <DisShowCur>
					num_buff[curr_digit] = keyVal_latch + 0x30;
 2006bdc:	e0bffa03 	ldbu	r2,-24(fp)
 2006be0:	e0fffb17 	ldw	r3,-20(fp)
 2006be4:	1885883a 	add	r2,r3,r2
 2006be8:	e0fffc03 	ldbu	r3,-16(fp)
 2006bec:	18c00c04 	addi	r3,r3,48
 2006bf0:	10c00005 	stb	r3,0(r2)
					DisCurPos(row,col);
 2006bf4:	e0fffe03 	ldbu	r3,-8(fp)
 2006bf8:	e0bfff03 	ldbu	r2,-4(fp)
 2006bfc:	1809883a 	mov	r4,r3
 2006c00:	100b883a 	mov	r5,r2
 2006c04:	20005400 	call	2000540 <DisCurPos>
					DisWrStr(num_buff);
 2006c08:	e13ffb17 	ldw	r4,-20(fp)
 2006c0c:	20006000 	call	2000600 <DisWrStr>
					curr_digit++;
 2006c10:	e0bffa03 	ldbu	r2,-24(fp)
 2006c14:	10800044 	addi	r2,r2,1
 2006c18:	e0bffa05 	stb	r2,-24(fp)
					if(curr_digit == 5)
 2006c1c:	e0bffa03 	ldbu	r2,-24(fp)
 2006c20:	10800158 	cmpnei	r2,r2,5
 2006c24:	1000021e 	bne	r2,zero,2006c30 <editNum5+0x14c>
						curr_digit = 4;			//Stay at the least significant
 2006c28:	00800104 	movi	r2,4
 2006c2c:	e0bffa05 	stb	r2,-24(fp)
					refreshButtonBarNum5(curr_digit);
 2006c30:	e0bffa03 	ldbu	r2,-24(fp)
 2006c34:	1009883a 	mov	r4,r2
 2006c38:	2006a180 	call	2006a18 <refreshButtonBarNum5>
					DisCurPos(row,col+curr_digit);
 2006c3c:	e0fffe03 	ldbu	r3,-8(fp)
 2006c40:	e13fff03 	ldbu	r4,-4(fp)
 2006c44:	e0bffa03 	ldbu	r2,-24(fp)
 2006c48:	2085883a 	add	r2,r4,r2
 2006c4c:	10803fcc 	andi	r2,r2,255
 2006c50:	1809883a 	mov	r4,r3
 2006c54:	100b883a 	mov	r5,r2
 2006c58:	20005400 	call	2000540 <DisCurPos>
					DisShowCur(1);
 2006c5c:	01000044 	movi	r4,1
 2006c60:	20004fc0 	call	20004fc <DisShowCur>
						refreshButtonBarNum5(curr_digit);
						DisCurPos(row,col);
						DisShowCur(1);
					}
				}
				while(keyFlag);
 2006c64:	00006506 	br	2006dfc <editNum5+0x318>
					DisCurPos(row,col+curr_digit);
					DisShowCur(1);
				}
				else
				{
					if(keyVal_latch == KEY_LEFT)
 2006c68:	e0bffc03 	ldbu	r2,-16(fp)
 2006c6c:	10800298 	cmpnei	r2,r2,10
 2006c70:	1000131e 	bne	r2,zero,2006cc0 <editNum5+0x1dc>
					{
						if(curr_digit == 0)
 2006c74:	e0bffa03 	ldbu	r2,-24(fp)
 2006c78:	1000021e 	bne	r2,zero,2006c84 <editNum5+0x1a0>
							curr_digit = 0;
 2006c7c:	e03ffa05 	stb	zero,-24(fp)
 2006c80:	00000306 	br	2006c90 <editNum5+0x1ac>
						else
							curr_digit--;
 2006c84:	e0bffa03 	ldbu	r2,-24(fp)
 2006c88:	10bfffc4 	addi	r2,r2,-1
 2006c8c:	e0bffa05 	stb	r2,-24(fp)
						refreshButtonBarNum5(curr_digit);
 2006c90:	e0bffa03 	ldbu	r2,-24(fp)
 2006c94:	1009883a 	mov	r4,r2
 2006c98:	2006a180 	call	2006a18 <refreshButtonBarNum5>
						DisCurPos(row,col+curr_digit);
 2006c9c:	e0fffe03 	ldbu	r3,-8(fp)
 2006ca0:	e13fff03 	ldbu	r4,-4(fp)
 2006ca4:	e0bffa03 	ldbu	r2,-24(fp)
 2006ca8:	2085883a 	add	r2,r4,r2
 2006cac:	10803fcc 	andi	r2,r2,255
 2006cb0:	1809883a 	mov	r4,r3
 2006cb4:	100b883a 	mov	r5,r2
 2006cb8:	20005400 	call	2000540 <DisCurPos>
						refreshButtonBarNum5(curr_digit);
						DisCurPos(row,col);
						DisShowCur(1);
					}
				}
				while(keyFlag);
 2006cbc:	00004f06 	br	2006dfc <editNum5+0x318>
							curr_digit--;
						refreshButtonBarNum5(curr_digit);
						DisCurPos(row,col+curr_digit);
					}

					else if(keyVal_latch == KEY_RIGHT)
 2006cc0:	e0bffc03 	ldbu	r2,-16(fp)
 2006cc4:	108002d8 	cmpnei	r2,r2,11
 2006cc8:	1000151e 	bne	r2,zero,2006d20 <editNum5+0x23c>
					{
						if(curr_digit == 4)
 2006ccc:	e0bffa03 	ldbu	r2,-24(fp)
 2006cd0:	10800118 	cmpnei	r2,r2,4
 2006cd4:	1000031e 	bne	r2,zero,2006ce4 <editNum5+0x200>
							curr_digit = 4;
 2006cd8:	00800104 	movi	r2,4
 2006cdc:	e0bffa05 	stb	r2,-24(fp)
 2006ce0:	00000306 	br	2006cf0 <editNum5+0x20c>
						else
							curr_digit++;
 2006ce4:	e0bffa03 	ldbu	r2,-24(fp)
 2006ce8:	10800044 	addi	r2,r2,1
 2006cec:	e0bffa05 	stb	r2,-24(fp)
						refreshButtonBarNum5(curr_digit);
 2006cf0:	e0bffa03 	ldbu	r2,-24(fp)
 2006cf4:	1009883a 	mov	r4,r2
 2006cf8:	2006a180 	call	2006a18 <refreshButtonBarNum5>
						DisCurPos(row,col+curr_digit);
 2006cfc:	e0fffe03 	ldbu	r3,-8(fp)
 2006d00:	e13fff03 	ldbu	r4,-4(fp)
 2006d04:	e0bffa03 	ldbu	r2,-24(fp)
 2006d08:	2085883a 	add	r2,r4,r2
 2006d0c:	10803fcc 	andi	r2,r2,255
 2006d10:	1809883a 	mov	r4,r3
 2006d14:	100b883a 	mov	r5,r2
 2006d18:	20005400 	call	2000540 <DisCurPos>
						refreshButtonBarNum5(curr_digit);
						DisCurPos(row,col);
						DisShowCur(1);
					}
				}
				while(keyFlag);
 2006d1c:	00003706 	br	2006dfc <editNum5+0x318>
							curr_digit++;
						refreshButtonBarNum5(curr_digit);
						DisCurPos(row,col+curr_digit);
					}

					else if(keyVal_latch == KEY_MENU)
 2006d20:	e0bffc03 	ldbu	r2,-16(fp)
 2006d24:	10800318 	cmpnei	r2,r2,12
 2006d28:	1000141e 	bne	r2,zero,2006d7c <editNum5+0x298>
					{
						KPLED_All_Off();
 2006d2c:	2000f400 	call	2000f40 <KPLED_All_Off>
						DisClear();
 2006d30:	20006780 	call	2000678 <DisClear>
						DisShowCur(0);
 2006d34:	0009883a 	mov	r4,zero
 2006d38:	20004fc0 	call	20004fc <DisShowCur>
						DisCurPos(2,7);
 2006d3c:	01000084 	movi	r4,2
 2006d40:	014001c4 	movi	r5,7
 2006d44:	20005400 	call	2000540 <DisCurPos>
						DisWrStr("WARNING");
 2006d48:	01008074 	movhi	r4,513
 2006d4c:	211c2904 	addi	r4,r4,28836
 2006d50:	20006000 	call	2000600 <DisWrStr>
						DisCurPos(3,1);
 2006d54:	010000c4 	movi	r4,3
 2006d58:	01400044 	movi	r5,1
 2006d5c:	20005400 	call	2000540 <DisCurPos>
						DisWrStr("Exit Without Saving");
 2006d60:	01008074 	movhi	r4,513
 2006d64:	211c2b04 	addi	r4,r4,28844
 2006d68:	20006000 	call	2000600 <DisWrStr>
						delay(MSG_DELAY);
 2006d6c:	01271014 	movui	r4,40000
 2006d70:	20019dc0 	call	20019dc <delay>
						return num;
 2006d74:	e0bffd17 	ldw	r2,-12(fp)
 2006d78:	00002706 	br	2006e18 <editNum5+0x334>
					}
					else if(keyVal_latch == KEY_ENTER)
 2006d7c:	e0bffc03 	ldbu	r2,-16(fp)
 2006d80:	10800398 	cmpnei	r2,r2,14
 2006d84:	1000031e 	bne	r2,zero,2006d94 <editNum5+0x2b0>
					{
						return Str5toNum5(num_buff);
 2006d88:	e13ffb17 	ldw	r4,-20(fp)
 2006d8c:	20068d40 	call	20068d4 <Str5toNum5>
 2006d90:	00002106 	br	2006e18 <editNum5+0x334>
					}
					else if(keyVal_latch == KEY_EDIT)
 2006d94:	e0bffc03 	ldbu	r2,-16(fp)
 2006d98:	10800358 	cmpnei	r2,r2,13
 2006d9c:	1000171e 	bne	r2,zero,2006dfc <editNum5+0x318>
					{
						DisShowCur(0);
 2006da0:	0009883a 	mov	r4,zero
 2006da4:	20004fc0 	call	20004fc <DisShowCur>

						num_buff = Num5toStr5(num);
 2006da8:	e13ffd17 	ldw	r4,-12(fp)
 2006dac:	20067980 	call	2006798 <Num5toStr5>
 2006db0:	e0bffb15 	stw	r2,-20(fp)

						DisCurPos(row,col);
 2006db4:	e0fffe03 	ldbu	r3,-8(fp)
 2006db8:	e0bfff03 	ldbu	r2,-4(fp)
 2006dbc:	1809883a 	mov	r4,r3
 2006dc0:	100b883a 	mov	r5,r2
 2006dc4:	20005400 	call	2000540 <DisCurPos>
						DisWrStr(num_buff);
 2006dc8:	e13ffb17 	ldw	r4,-20(fp)
 2006dcc:	20006000 	call	2000600 <DisWrStr>

						curr_digit = 0;
 2006dd0:	e03ffa05 	stb	zero,-24(fp)
						refreshButtonBarNum5(curr_digit);
 2006dd4:	e0bffa03 	ldbu	r2,-24(fp)
 2006dd8:	1009883a 	mov	r4,r2
 2006ddc:	2006a180 	call	2006a18 <refreshButtonBarNum5>
						DisCurPos(row,col);
 2006de0:	e0fffe03 	ldbu	r3,-8(fp)
 2006de4:	e0bfff03 	ldbu	r2,-4(fp)
 2006de8:	1809883a 	mov	r4,r3
 2006dec:	100b883a 	mov	r5,r2
 2006df0:	20005400 	call	2000540 <DisCurPos>
						DisShowCur(1);
 2006df4:	01000044 	movi	r4,1
 2006df8:	20004fc0 	call	20004fc <DisShowCur>
					}
				}
				while(keyFlag);
 2006dfc:	0001883a 	nop
 2006e00:	00810034 	movhi	r2,1024
 2006e04:	10889804 	addi	r2,r2,8800
 2006e08:	10800003 	ldbu	r2,0(r2)
 2006e0c:	10803fcc 	andi	r2,r2,255
 2006e10:	103ffb1e 	bne	r2,zero,2006e00 <editNum5+0x31c>
			}
		}
	}
 2006e14:	003f5b06 	br	2006b84 <editNum5+0xa0>
	return 0;
}
 2006e18:	e037883a 	mov	sp,fp
 2006e1c:	dfc00117 	ldw	ra,4(sp)
 2006e20:	df000017 	ldw	fp,0(sp)
 2006e24:	dec00204 	addi	sp,sp,8
 2006e28:	f800283a 	ret

02006e2c <checkPWD>:
#include "..\inc\delay.h"
#include "..\inc\config.h"
#include "..\inc\KPLED.h"

unsigned char checkPWD(char* pwd)
{
 2006e2c:	defffd04 	addi	sp,sp,-12
 2006e30:	df000215 	stw	fp,8(sp)
 2006e34:	df000204 	addi	fp,sp,8
 2006e38:	e13fff15 	stw	r4,-4(fp)
	char* std_pwd = STD_PWD;
 2006e3c:	00808074 	movhi	r2,513
 2006e40:	109c3004 	addi	r2,r2,28864
 2006e44:	e0bffe15 	stw	r2,-8(fp)
	if((pwd[0] == std_pwd[0]) && (pwd[1] == std_pwd[1])
 2006e48:	e0bfff17 	ldw	r2,-4(fp)
 2006e4c:	10c00003 	ldbu	r3,0(r2)
 2006e50:	e0bffe17 	ldw	r2,-8(fp)
 2006e54:	10800003 	ldbu	r2,0(r2)
 2006e58:	18c03fcc 	andi	r3,r3,255
 2006e5c:	18c0201c 	xori	r3,r3,128
 2006e60:	18ffe004 	addi	r3,r3,-128
 2006e64:	10803fcc 	andi	r2,r2,255
 2006e68:	1080201c 	xori	r2,r2,128
 2006e6c:	10bfe004 	addi	r2,r2,-128
 2006e70:	1880291e 	bne	r3,r2,2006f18 <checkPWD+0xec>
 2006e74:	e0bfff17 	ldw	r2,-4(fp)
 2006e78:	10800044 	addi	r2,r2,1
 2006e7c:	10c00003 	ldbu	r3,0(r2)
 2006e80:	e0bffe17 	ldw	r2,-8(fp)
 2006e84:	10800044 	addi	r2,r2,1
 2006e88:	10800003 	ldbu	r2,0(r2)
 2006e8c:	18c03fcc 	andi	r3,r3,255
 2006e90:	18c0201c 	xori	r3,r3,128
 2006e94:	18ffe004 	addi	r3,r3,-128
 2006e98:	10803fcc 	andi	r2,r2,255
 2006e9c:	1080201c 	xori	r2,r2,128
 2006ea0:	10bfe004 	addi	r2,r2,-128
 2006ea4:	18801c1e 	bne	r3,r2,2006f18 <checkPWD+0xec>
			&&(pwd[2] == std_pwd[2]) && (pwd[3] == std_pwd[3]))
 2006ea8:	e0bfff17 	ldw	r2,-4(fp)
 2006eac:	10800084 	addi	r2,r2,2
 2006eb0:	10c00003 	ldbu	r3,0(r2)
 2006eb4:	e0bffe17 	ldw	r2,-8(fp)
 2006eb8:	10800084 	addi	r2,r2,2
 2006ebc:	10800003 	ldbu	r2,0(r2)
 2006ec0:	18c03fcc 	andi	r3,r3,255
 2006ec4:	18c0201c 	xori	r3,r3,128
 2006ec8:	18ffe004 	addi	r3,r3,-128
 2006ecc:	10803fcc 	andi	r2,r2,255
 2006ed0:	1080201c 	xori	r2,r2,128
 2006ed4:	10bfe004 	addi	r2,r2,-128
 2006ed8:	18800f1e 	bne	r3,r2,2006f18 <checkPWD+0xec>
 2006edc:	e0bfff17 	ldw	r2,-4(fp)
 2006ee0:	108000c4 	addi	r2,r2,3
 2006ee4:	10c00003 	ldbu	r3,0(r2)
 2006ee8:	e0bffe17 	ldw	r2,-8(fp)
 2006eec:	108000c4 	addi	r2,r2,3
 2006ef0:	10800003 	ldbu	r2,0(r2)
 2006ef4:	18c03fcc 	andi	r3,r3,255
 2006ef8:	18c0201c 	xori	r3,r3,128
 2006efc:	18ffe004 	addi	r3,r3,-128
 2006f00:	10803fcc 	andi	r2,r2,255
 2006f04:	1080201c 	xori	r2,r2,128
 2006f08:	10bfe004 	addi	r2,r2,-128
 2006f0c:	1880021e 	bne	r3,r2,2006f18 <checkPWD+0xec>
		return 1;
 2006f10:	00800044 	movi	r2,1
 2006f14:	00000106 	br	2006f1c <checkPWD+0xf0>
	else
		return 0;
 2006f18:	0005883a 	mov	r2,zero
}
 2006f1c:	e037883a 	mov	sp,fp
 2006f20:	df000017 	ldw	fp,0(sp)
 2006f24:	dec00104 	addi	sp,sp,4
 2006f28:	f800283a 	ret

02006f2c <refreshButtonBarPWD>:

void refreshButtonBarPWD(unsigned char curr_digit)
{
 2006f2c:	defffd04 	addi	sp,sp,-12
 2006f30:	dfc00215 	stw	ra,8(sp)
 2006f34:	df000115 	stw	fp,4(sp)
 2006f38:	df000104 	addi	fp,sp,4
 2006f3c:	2005883a 	mov	r2,r4
 2006f40:	e0bfff05 	stb	r2,-4(fp)
	DisShowCur(0);
 2006f44:	0009883a 	mov	r4,zero
 2006f48:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(4,1);
 2006f4c:	01000104 	movi	r4,4
 2006f50:	01400044 	movi	r5,1
 2006f54:	20005400 	call	2000540 <DisCurPos>
	if(curr_digit!=0 && curr_digit!=3)
 2006f58:	e0bfff03 	ldbu	r2,-4(fp)
 2006f5c:	10000b26 	beq	r2,zero,2006f8c <refreshButtonBarPWD+0x60>
 2006f60:	e0bfff03 	ldbu	r2,-4(fp)
 2006f64:	108000e0 	cmpeqi	r2,r2,3
 2006f68:	1000081e 	bne	r2,zero,2006f8c <refreshButtonBarPWD+0x60>
	{
		KPLED_LeftArrow(3);
 2006f6c:	010000c4 	movi	r4,3
 2006f70:	20010ac0 	call	20010ac <KPLED_LeftArrow>
		KPLED_RightArrow(3);
 2006f74:	010000c4 	movi	r4,3
 2006f78:	20010200 	call	2001020 <KPLED_RightArrow>
		DisWrStr("<       Ent.       >");
 2006f7c:	01008074 	movhi	r4,513
 2006f80:	211c3204 	addi	r4,r4,28872
 2006f84:	20006000 	call	2000600 <DisWrStr>
 2006f88:	00001406 	br	2006fdc <refreshButtonBarPWD+0xb0>
	}
	else if(curr_digit==0)
 2006f8c:	e0bfff03 	ldbu	r2,-4(fp)
 2006f90:	1000081e 	bne	r2,zero,2006fb4 <refreshButtonBarPWD+0x88>
	{
		KPLED_LeftArrow(0);
 2006f94:	0009883a 	mov	r4,zero
 2006f98:	20010ac0 	call	20010ac <KPLED_LeftArrow>
		KPLED_RightArrow(3);
 2006f9c:	010000c4 	movi	r4,3
 2006fa0:	20010200 	call	2001020 <KPLED_RightArrow>
		DisWrStr("        Ent.       >");
 2006fa4:	01008074 	movhi	r4,513
 2006fa8:	211c3804 	addi	r4,r4,28896
 2006fac:	20006000 	call	2000600 <DisWrStr>
 2006fb0:	00000a06 	br	2006fdc <refreshButtonBarPWD+0xb0>
	}
	else if(curr_digit==3)
 2006fb4:	e0bfff03 	ldbu	r2,-4(fp)
 2006fb8:	108000d8 	cmpnei	r2,r2,3
 2006fbc:	1000071e 	bne	r2,zero,2006fdc <refreshButtonBarPWD+0xb0>
	{
		KPLED_LeftArrow(3);
 2006fc0:	010000c4 	movi	r4,3
 2006fc4:	20010ac0 	call	20010ac <KPLED_LeftArrow>
		KPLED_RightArrow(0);
 2006fc8:	0009883a 	mov	r4,zero
 2006fcc:	20010200 	call	2001020 <KPLED_RightArrow>
		DisWrStr("<       Ent.        ");
 2006fd0:	01008074 	movhi	r4,513
 2006fd4:	211c3e04 	addi	r4,r4,28920
 2006fd8:	20006000 	call	2000600 <DisWrStr>
	}
	DisShowCur(1);
 2006fdc:	01000044 	movi	r4,1
 2006fe0:	20004fc0 	call	20004fc <DisShowCur>
}
 2006fe4:	e037883a 	mov	sp,fp
 2006fe8:	dfc00117 	ldw	ra,4(sp)
 2006fec:	df000017 	ldw	fp,0(sp)
 2006ff0:	dec00204 	addi	sp,sp,8
 2006ff4:	f800283a 	ret

02006ff8 <enterPWD>:

unsigned char enterPWD(unsigned char row, unsigned char col)
{
 2006ff8:	defff904 	addi	sp,sp,-28
 2006ffc:	dfc00615 	stw	ra,24(sp)
 2007000:	df000515 	stw	fp,20(sp)
 2007004:	df000504 	addi	fp,sp,20
 2007008:	2007883a 	mov	r3,r4
 200700c:	2805883a 	mov	r2,r5
 2007010:	e0fffe05 	stb	r3,-8(fp)
 2007014:	e0bfff05 	stb	r2,-4(fp)
	unsigned char curr_digit = 0;
 2007018:	e03ffb05 	stb	zero,-20(fp)
	unsigned char keyVal_latch;
	char* num_buff = "____";
 200701c:	00808074 	movhi	r2,513
 2007020:	109c4404 	addi	r2,r2,28944
 2007024:	e0bffc15 	stw	r2,-16(fp)


	KPLED_All_Off();
 2007028:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Numbers(3);
 200702c:	010000c4 	movi	r4,3
 2007030:	2000f9c0 	call	2000f9c <KPLED_Numbers>
	KPLED_Enter(3);
 2007034:	010000c4 	movi	r4,3
 2007038:	20012440 	call	2001244 <KPLED_Enter>
	KPLED_Menu(3);
 200703c:	010000c4 	movi	r4,3
 2007040:	20011340 	call	2001134 <KPLED_Menu>
	KPLED_Edit(3);
 2007044:	010000c4 	movi	r4,3
 2007048:	20011bc0 	call	20011bc <KPLED_Edit>

	DisCurPos(row,col);
 200704c:	e0fffe03 	ldbu	r3,-8(fp)
 2007050:	e0bfff03 	ldbu	r2,-4(fp)
 2007054:	1809883a 	mov	r4,r3
 2007058:	100b883a 	mov	r5,r2
 200705c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(num_buff);
 2007060:	e13ffc17 	ldw	r4,-16(fp)
 2007064:	20006000 	call	2000600 <DisWrStr>
	refreshButtonBarPWD(curr_digit);
 2007068:	e0bffb03 	ldbu	r2,-20(fp)
 200706c:	1009883a 	mov	r4,r2
 2007070:	2006f2c0 	call	2006f2c <refreshButtonBarPWD>
	DisCurPos(row,col);
 2007074:	e0fffe03 	ldbu	r3,-8(fp)
 2007078:	e0bfff03 	ldbu	r2,-4(fp)
 200707c:	1809883a 	mov	r4,r3
 2007080:	100b883a 	mov	r5,r2
 2007084:	20005400 	call	2000540 <DisCurPos>
	DisShowCur(1);
 2007088:	01000044 	movi	r4,1
 200708c:	20004fc0 	call	20004fc <DisShowCur>
 2007090:	00000106 	br	2007098 <enterPWD+0xa0>
					}
				}
				while(keyFlag);
			}
		}
	}
 2007094:	0001883a 	nop
	DisCurPos(row,col);
	DisShowCur(1);

	while(1)
	{
		if(keyFlag)
 2007098:	00810034 	movhi	r2,1024
 200709c:	10889804 	addi	r2,r2,8800
 20070a0:	10800003 	ldbu	r2,0(r2)
 20070a4:	10803fcc 	andi	r2,r2,255
 20070a8:	103ffa26 	beq	r2,zero,2007094 <enterPWD+0x9c>
		{
			delay(100);
 20070ac:	01001904 	movi	r4,100
 20070b0:	20019dc0 	call	20019dc <delay>
			if(keyFlag)
 20070b4:	00810034 	movhi	r2,1024
 20070b8:	10889804 	addi	r2,r2,8800
 20070bc:	10800003 	ldbu	r2,0(r2)
 20070c0:	10803fcc 	andi	r2,r2,255
 20070c4:	103ff326 	beq	r2,zero,2007094 <enterPWD+0x9c>
			{
				keyVal_latch = keyVal;
 20070c8:	00810034 	movhi	r2,1024
 20070cc:	10889404 	addi	r2,r2,8784
 20070d0:	10800003 	ldbu	r2,0(r2)
 20070d4:	e0bffd05 	stb	r2,-12(fp)
				if(keyVal_latch <= 0x09 && keyVal_latch >= 0x00)
 20070d8:	e0bffd03 	ldbu	r2,-12(fp)
 20070dc:	108002a8 	cmpgeui	r2,r2,10
 20070e0:	1000251e 	bne	r2,zero,2007178 <enterPWD+0x180>
				{
					DisShowCur(0);
 20070e4:	0009883a 	mov	r4,zero
 20070e8:	20004fc0 	call	20004fc <DisShowCur>
					num_buff[curr_digit] = keyVal_latch + 0x30;
 20070ec:	e0bffb03 	ldbu	r2,-20(fp)
 20070f0:	e0fffc17 	ldw	r3,-16(fp)
 20070f4:	1885883a 	add	r2,r3,r2
 20070f8:	e0fffd03 	ldbu	r3,-12(fp)
 20070fc:	18c00c04 	addi	r3,r3,48
 2007100:	10c00005 	stb	r3,0(r2)
					DisCurPos(row,col);
 2007104:	e0fffe03 	ldbu	r3,-8(fp)
 2007108:	e0bfff03 	ldbu	r2,-4(fp)
 200710c:	1809883a 	mov	r4,r3
 2007110:	100b883a 	mov	r5,r2
 2007114:	20005400 	call	2000540 <DisCurPos>
					DisWrStr(num_buff);
 2007118:	e13ffc17 	ldw	r4,-16(fp)
 200711c:	20006000 	call	2000600 <DisWrStr>
					curr_digit++;
 2007120:	e0bffb03 	ldbu	r2,-20(fp)
 2007124:	10800044 	addi	r2,r2,1
 2007128:	e0bffb05 	stb	r2,-20(fp)
					if(curr_digit == 4)
 200712c:	e0bffb03 	ldbu	r2,-20(fp)
 2007130:	10800118 	cmpnei	r2,r2,4
 2007134:	1000021e 	bne	r2,zero,2007140 <enterPWD+0x148>
						curr_digit = 3;			//Stay at the least significant
 2007138:	008000c4 	movi	r2,3
 200713c:	e0bffb05 	stb	r2,-20(fp)
					refreshButtonBarPWD(curr_digit);
 2007140:	e0bffb03 	ldbu	r2,-20(fp)
 2007144:	1009883a 	mov	r4,r2
 2007148:	2006f2c0 	call	2006f2c <refreshButtonBarPWD>
					DisCurPos(row,col+curr_digit);
 200714c:	e0fffe03 	ldbu	r3,-8(fp)
 2007150:	e13fff03 	ldbu	r4,-4(fp)
 2007154:	e0bffb03 	ldbu	r2,-20(fp)
 2007158:	2085883a 	add	r2,r4,r2
 200715c:	10803fcc 	andi	r2,r2,255
 2007160:	1809883a 	mov	r4,r3
 2007164:	100b883a 	mov	r5,r2
 2007168:	20005400 	call	2000540 <DisCurPos>
					DisShowCur(1);
 200716c:	01000044 	movi	r4,1
 2007170:	20004fc0 	call	20004fc <DisShowCur>
						refreshButtonBarPWD(curr_digit);
						DisCurPos(row,col);
						DisShowCur(1);
					}
				}
				while(keyFlag);
 2007174:	0000ae06 	br	2007430 <enterPWD+0x438>
					DisCurPos(row,col+curr_digit);
					DisShowCur(1);
				}
				else
				{
					if(keyVal_latch == KEY_LEFT)
 2007178:	e0bffd03 	ldbu	r2,-12(fp)
 200717c:	10800298 	cmpnei	r2,r2,10
 2007180:	1000131e 	bne	r2,zero,20071d0 <enterPWD+0x1d8>
					{
						if(curr_digit == 0)
 2007184:	e0bffb03 	ldbu	r2,-20(fp)
 2007188:	1000021e 	bne	r2,zero,2007194 <enterPWD+0x19c>
							curr_digit = 0;
 200718c:	e03ffb05 	stb	zero,-20(fp)
 2007190:	00000306 	br	20071a0 <enterPWD+0x1a8>
						else
							curr_digit--;
 2007194:	e0bffb03 	ldbu	r2,-20(fp)
 2007198:	10bfffc4 	addi	r2,r2,-1
 200719c:	e0bffb05 	stb	r2,-20(fp)
						refreshButtonBarPWD(curr_digit);
 20071a0:	e0bffb03 	ldbu	r2,-20(fp)
 20071a4:	1009883a 	mov	r4,r2
 20071a8:	2006f2c0 	call	2006f2c <refreshButtonBarPWD>
						DisCurPos(row,col+curr_digit);
 20071ac:	e0fffe03 	ldbu	r3,-8(fp)
 20071b0:	e13fff03 	ldbu	r4,-4(fp)
 20071b4:	e0bffb03 	ldbu	r2,-20(fp)
 20071b8:	2085883a 	add	r2,r4,r2
 20071bc:	10803fcc 	andi	r2,r2,255
 20071c0:	1809883a 	mov	r4,r3
 20071c4:	100b883a 	mov	r5,r2
 20071c8:	20005400 	call	2000540 <DisCurPos>
						refreshButtonBarPWD(curr_digit);
						DisCurPos(row,col);
						DisShowCur(1);
					}
				}
				while(keyFlag);
 20071cc:	00009806 	br	2007430 <enterPWD+0x438>
							curr_digit--;
						refreshButtonBarPWD(curr_digit);
						DisCurPos(row,col+curr_digit);
					}

					else if(keyVal_latch == KEY_RIGHT)
 20071d0:	e0bffd03 	ldbu	r2,-12(fp)
 20071d4:	108002d8 	cmpnei	r2,r2,11
 20071d8:	1000151e 	bne	r2,zero,2007230 <enterPWD+0x238>
					{
						if(curr_digit == 3)
 20071dc:	e0bffb03 	ldbu	r2,-20(fp)
 20071e0:	108000d8 	cmpnei	r2,r2,3
 20071e4:	1000031e 	bne	r2,zero,20071f4 <enterPWD+0x1fc>
							curr_digit = 3;
 20071e8:	008000c4 	movi	r2,3
 20071ec:	e0bffb05 	stb	r2,-20(fp)
 20071f0:	00000306 	br	2007200 <enterPWD+0x208>
						else
							curr_digit++;
 20071f4:	e0bffb03 	ldbu	r2,-20(fp)
 20071f8:	10800044 	addi	r2,r2,1
 20071fc:	e0bffb05 	stb	r2,-20(fp)
						refreshButtonBarPWD(curr_digit);
 2007200:	e0bffb03 	ldbu	r2,-20(fp)
 2007204:	1009883a 	mov	r4,r2
 2007208:	2006f2c0 	call	2006f2c <refreshButtonBarPWD>
						DisCurPos(row,col+curr_digit);
 200720c:	e0fffe03 	ldbu	r3,-8(fp)
 2007210:	e13fff03 	ldbu	r4,-4(fp)
 2007214:	e0bffb03 	ldbu	r2,-20(fp)
 2007218:	2085883a 	add	r2,r4,r2
 200721c:	10803fcc 	andi	r2,r2,255
 2007220:	1809883a 	mov	r4,r3
 2007224:	100b883a 	mov	r5,r2
 2007228:	20005400 	call	2000540 <DisCurPos>
						refreshButtonBarPWD(curr_digit);
						DisCurPos(row,col);
						DisShowCur(1);
					}
				}
				while(keyFlag);
 200722c:	00008006 	br	2007430 <enterPWD+0x438>
							curr_digit++;
						refreshButtonBarPWD(curr_digit);
						DisCurPos(row,col+curr_digit);
					}

					else if(keyVal_latch == KEY_MENU)
 2007230:	e0bffd03 	ldbu	r2,-12(fp)
 2007234:	10800318 	cmpnei	r2,r2,12
 2007238:	1000031e 	bne	r2,zero,2007248 <enterPWD+0x250>
					{

						DisClear();
 200723c:	20006780 	call	2000678 <DisClear>
						return 0;
 2007240:	0005883a 	mov	r2,zero
 2007244:	00008106 	br	200744c <enterPWD+0x454>
					}
					else if(keyVal_latch == KEY_ENTER)
 2007248:	e0bffd03 	ldbu	r2,-12(fp)
 200724c:	10800398 	cmpnei	r2,r2,14
 2007250:	10004a1e 	bne	r2,zero,200737c <enterPWD+0x384>
					{
						unsigned char v = checkPWD(num_buff);
 2007254:	e13ffc17 	ldw	r4,-16(fp)
 2007258:	2006e2c0 	call	2006e2c <checkPWD>
 200725c:	e0bffd45 	stb	r2,-11(fp)
						if(v)
 2007260:	e0bffd43 	ldbu	r2,-11(fp)
 2007264:	10001326 	beq	r2,zero,20072b4 <enterPWD+0x2bc>
						{
							num_buff[0] = '_';
 2007268:	e0bffc17 	ldw	r2,-16(fp)
 200726c:	00c017c4 	movi	r3,95
 2007270:	10c00005 	stb	r3,0(r2)
							num_buff[1] = '_';
 2007274:	e0bffc17 	ldw	r2,-16(fp)
 2007278:	10800044 	addi	r2,r2,1
 200727c:	00c017c4 	movi	r3,95
 2007280:	10c00005 	stb	r3,0(r2)
							num_buff[2] = '_';
 2007284:	e0bffc17 	ldw	r2,-16(fp)
 2007288:	10800084 	addi	r2,r2,2
 200728c:	00c017c4 	movi	r3,95
 2007290:	10c00005 	stb	r3,0(r2)
							num_buff[3] = '_';
 2007294:	e0bffc17 	ldw	r2,-16(fp)
 2007298:	108000c4 	addi	r2,r2,3
 200729c:	00c017c4 	movi	r3,95
 20072a0:	10c00005 	stb	r3,0(r2)
							DisShowCur(0);
 20072a4:	0009883a 	mov	r4,zero
 20072a8:	20004fc0 	call	20004fc <DisShowCur>
							return 1;
 20072ac:	00800044 	movi	r2,1
 20072b0:	00006606 	br	200744c <enterPWD+0x454>
						}
						else
						{
							DisShowCur(0);
 20072b4:	0009883a 	mov	r4,zero
 20072b8:	20004fc0 	call	20004fc <DisShowCur>
							DisCurPos(row,1);
 20072bc:	e0bffe03 	ldbu	r2,-8(fp)
 20072c0:	1009883a 	mov	r4,r2
 20072c4:	01400044 	movi	r5,1
 20072c8:	20005400 	call	2000540 <DisCurPos>
							DisWrStr("Invalid Access Code");
 20072cc:	01008074 	movhi	r4,513
 20072d0:	211c4604 	addi	r4,r4,28952
 20072d4:	20006000 	call	2000600 <DisWrStr>
							DisClearRow(4);
 20072d8:	01000104 	movi	r4,4
 20072dc:	20006ac0 	call	20006ac <DisClearRow>
							delay(MSG_DELAY);
 20072e0:	01271014 	movui	r4,40000
 20072e4:	20019dc0 	call	20019dc <delay>
							DisClearRow(row);
 20072e8:	e0bffe03 	ldbu	r2,-8(fp)
 20072ec:	1009883a 	mov	r4,r2
 20072f0:	20006ac0 	call	20006ac <DisClearRow>


							num_buff[0] = '_';
 20072f4:	e0bffc17 	ldw	r2,-16(fp)
 20072f8:	00c017c4 	movi	r3,95
 20072fc:	10c00005 	stb	r3,0(r2)
							num_buff[1] = '_';
 2007300:	e0bffc17 	ldw	r2,-16(fp)
 2007304:	10800044 	addi	r2,r2,1
 2007308:	00c017c4 	movi	r3,95
 200730c:	10c00005 	stb	r3,0(r2)
							num_buff[2] = '_';
 2007310:	e0bffc17 	ldw	r2,-16(fp)
 2007314:	10800084 	addi	r2,r2,2
 2007318:	00c017c4 	movi	r3,95
 200731c:	10c00005 	stb	r3,0(r2)
							num_buff[3] = '_';
 2007320:	e0bffc17 	ldw	r2,-16(fp)
 2007324:	108000c4 	addi	r2,r2,3
 2007328:	00c017c4 	movi	r3,95
 200732c:	10c00005 	stb	r3,0(r2)
							DisCurPos(row,col);
 2007330:	e0fffe03 	ldbu	r3,-8(fp)
 2007334:	e0bfff03 	ldbu	r2,-4(fp)
 2007338:	1809883a 	mov	r4,r3
 200733c:	100b883a 	mov	r5,r2
 2007340:	20005400 	call	2000540 <DisCurPos>
							DisWrStr(num_buff);
 2007344:	e13ffc17 	ldw	r4,-16(fp)
 2007348:	20006000 	call	2000600 <DisWrStr>
							curr_digit = 0;
 200734c:	e03ffb05 	stb	zero,-20(fp)
							refreshButtonBarPWD(curr_digit);
 2007350:	e0bffb03 	ldbu	r2,-20(fp)
 2007354:	1009883a 	mov	r4,r2
 2007358:	2006f2c0 	call	2006f2c <refreshButtonBarPWD>
							DisCurPos(row,col);
 200735c:	e0fffe03 	ldbu	r3,-8(fp)
 2007360:	e0bfff03 	ldbu	r2,-4(fp)
 2007364:	1809883a 	mov	r4,r3
 2007368:	100b883a 	mov	r5,r2
 200736c:	20005400 	call	2000540 <DisCurPos>
							DisShowCur(1);
 2007370:	01000044 	movi	r4,1
 2007374:	20004fc0 	call	20004fc <DisShowCur>
						refreshButtonBarPWD(curr_digit);
						DisCurPos(row,col);
						DisShowCur(1);
					}
				}
				while(keyFlag);
 2007378:	00002d06 	br	2007430 <enterPWD+0x438>
							refreshButtonBarPWD(curr_digit);
							DisCurPos(row,col);
							DisShowCur(1);
						}
					}
					else if(keyVal_latch == KEY_EDIT)
 200737c:	e0bffd03 	ldbu	r2,-12(fp)
 2007380:	10800358 	cmpnei	r2,r2,13
 2007384:	10002a1e 	bne	r2,zero,2007430 <enterPWD+0x438>
					{
						DisShowCur(0);
 2007388:	0009883a 	mov	r4,zero
 200738c:	20004fc0 	call	20004fc <DisShowCur>
						DisCurPos(row,1);
 2007390:	e0bffe03 	ldbu	r2,-8(fp)
 2007394:	1009883a 	mov	r4,r2
 2007398:	01400044 	movi	r5,1
 200739c:	20005400 	call	2000540 <DisCurPos>
						DisWrStr("                    ");
 20073a0:	01008074 	movhi	r4,513
 20073a4:	211c4b04 	addi	r4,r4,28972
 20073a8:	20006000 	call	2000600 <DisWrStr>

						num_buff[0] = '_';
 20073ac:	e0bffc17 	ldw	r2,-16(fp)
 20073b0:	00c017c4 	movi	r3,95
 20073b4:	10c00005 	stb	r3,0(r2)
						num_buff[1] = '_';
 20073b8:	e0bffc17 	ldw	r2,-16(fp)
 20073bc:	10800044 	addi	r2,r2,1
 20073c0:	00c017c4 	movi	r3,95
 20073c4:	10c00005 	stb	r3,0(r2)
						num_buff[2] = '_';
 20073c8:	e0bffc17 	ldw	r2,-16(fp)
 20073cc:	10800084 	addi	r2,r2,2
 20073d0:	00c017c4 	movi	r3,95
 20073d4:	10c00005 	stb	r3,0(r2)
						num_buff[3] = '_';
 20073d8:	e0bffc17 	ldw	r2,-16(fp)
 20073dc:	108000c4 	addi	r2,r2,3
 20073e0:	00c017c4 	movi	r3,95
 20073e4:	10c00005 	stb	r3,0(r2)

						DisCurPos(row,col);
 20073e8:	e0fffe03 	ldbu	r3,-8(fp)
 20073ec:	e0bfff03 	ldbu	r2,-4(fp)
 20073f0:	1809883a 	mov	r4,r3
 20073f4:	100b883a 	mov	r5,r2
 20073f8:	20005400 	call	2000540 <DisCurPos>
						DisWrStr(num_buff);
 20073fc:	e13ffc17 	ldw	r4,-16(fp)
 2007400:	20006000 	call	2000600 <DisWrStr>
						curr_digit = 0;
 2007404:	e03ffb05 	stb	zero,-20(fp)
						refreshButtonBarPWD(curr_digit);
 2007408:	e0bffb03 	ldbu	r2,-20(fp)
 200740c:	1009883a 	mov	r4,r2
 2007410:	2006f2c0 	call	2006f2c <refreshButtonBarPWD>
						DisCurPos(row,col);
 2007414:	e0fffe03 	ldbu	r3,-8(fp)
 2007418:	e0bfff03 	ldbu	r2,-4(fp)
 200741c:	1809883a 	mov	r4,r3
 2007420:	100b883a 	mov	r5,r2
 2007424:	20005400 	call	2000540 <DisCurPos>
						DisShowCur(1);
 2007428:	01000044 	movi	r4,1
 200742c:	20004fc0 	call	20004fc <DisShowCur>
					}
				}
				while(keyFlag);
 2007430:	0001883a 	nop
 2007434:	00810034 	movhi	r2,1024
 2007438:	10889804 	addi	r2,r2,8800
 200743c:	10800003 	ldbu	r2,0(r2)
 2007440:	10803fcc 	andi	r2,r2,255
 2007444:	103ffb1e 	bne	r2,zero,2007434 <enterPWD+0x43c>
			}
		}
	}
 2007448:	003f1206 	br	2007094 <enterPWD+0x9c>
	return 0;
}
 200744c:	e037883a 	mov	sp,fp
 2007450:	dfc00117 	ldw	ra,4(sp)
 2007454:	df000017 	ldw	fp,0(sp)
 2007458:	dec00204 	addi	sp,sp,8
 200745c:	f800283a 	ret

02007460 <getErrFlag>:

//SorE=0: Start Time; SorE=1: End Time; SorE=2: Both
//Return==0: No error
//Return!=0: Error exists
unsigned char getErrFlag(unsigned char chnl, unsigned char SorE)
{
 2007460:	defffd04 	addi	sp,sp,-12
 2007464:	df000215 	stw	fp,8(sp)
 2007468:	df000204 	addi	fp,sp,8
 200746c:	2007883a 	mov	r3,r4
 2007470:	2805883a 	mov	r2,r5
 2007474:	e0fffe05 	stb	r3,-8(fp)
 2007478:	e0bfff05 	stb	r2,-4(fp)

	if(SorE == 2)
 200747c:	e0bfff03 	ldbu	r2,-4(fp)
 2007480:	10800098 	cmpnei	r2,r2,2
 2007484:	1000111e 	bne	r2,zero,20074cc <getErrFlag+0x6c>
		return err_flag[chnl-1][0] + err_flag[chnl-1][1];
 2007488:	e0bffe03 	ldbu	r2,-8(fp)
 200748c:	10bfffc4 	addi	r2,r2,-1
 2007490:	00c080b4 	movhi	r3,514
 2007494:	18e50c04 	addi	r3,r3,-27600
 2007498:	1085883a 	add	r2,r2,r2
 200749c:	1885883a 	add	r2,r3,r2
 20074a0:	10c00003 	ldbu	r3,0(r2)
 20074a4:	e0bffe03 	ldbu	r2,-8(fp)
 20074a8:	10bfffc4 	addi	r2,r2,-1
 20074ac:	010080b4 	movhi	r4,514
 20074b0:	21250c04 	addi	r4,r4,-27600
 20074b4:	1085883a 	add	r2,r2,r2
 20074b8:	2085883a 	add	r2,r4,r2
 20074bc:	10800044 	addi	r2,r2,1
 20074c0:	10800003 	ldbu	r2,0(r2)
 20074c4:	1885883a 	add	r2,r3,r2
 20074c8:	00000906 	br	20074f0 <getErrFlag+0x90>
	else
		return err_flag[chnl-1][SorE];
 20074cc:	e0bffe03 	ldbu	r2,-8(fp)
 20074d0:	10bfffc4 	addi	r2,r2,-1
 20074d4:	e13fff03 	ldbu	r4,-4(fp)
 20074d8:	00c080b4 	movhi	r3,514
 20074dc:	18e50c04 	addi	r3,r3,-27600
 20074e0:	1085883a 	add	r2,r2,r2
 20074e4:	1105883a 	add	r2,r2,r4
 20074e8:	1885883a 	add	r2,r3,r2
 20074ec:	10800003 	ldbu	r2,0(r2)
}
 20074f0:	e037883a 	mov	sp,fp
 20074f4:	df000017 	ldw	fp,0(sp)
 20074f8:	dec00104 	addi	sp,sp,4
 20074fc:	f800283a 	ret

02007500 <chkEditedParameter>:

//Return 1: Error detected; Return 0: No error
//Input Format: "########.##"
//SorE=0: Start Time; SorE=1: End Time
unsigned char chkEditedParameter(unsigned char chnl, unsigned char SorE, char* data)
{
 2007500:	defffa04 	addi	sp,sp,-24
 2007504:	dfc00515 	stw	ra,20(sp)
 2007508:	df000415 	stw	fp,16(sp)
 200750c:	df000404 	addi	fp,sp,16
 2007510:	2007883a 	mov	r3,r4
 2007514:	2805883a 	mov	r2,r5
 2007518:	e1bfff15 	stw	r6,-4(fp)
 200751c:	e0fffd05 	stb	r3,-12(fp)
 2007520:	e0bffe05 	stb	r2,-8(fp)

	if(! Num10Check(data))
 2007524:	e13fff17 	ldw	r4,-4(fp)
 2007528:	20057a40 	call	20057a4 <Num10Check>
 200752c:	10803fcc 	andi	r2,r2,255
 2007530:	10000a1e 	bne	r2,zero,200755c <chkEditedParameter+0x5c>
	{
		unsigned int data_new = Dis10toNum10(data);
 2007534:	e13fff17 	ldw	r4,-4(fp)
 2007538:	2005ab40 	call	2005ab4 <Dis10toNum10>
 200753c:	e0bffc15 	stw	r2,-16(fp)
		return chkSingleTiming(chnl,SorE,data_new);
 2007540:	e0fffd03 	ldbu	r3,-12(fp)
 2007544:	e0bffe03 	ldbu	r2,-8(fp)
 2007548:	1809883a 	mov	r4,r3
 200754c:	100b883a 	mov	r5,r2
 2007550:	e1bffc17 	ldw	r6,-16(fp)
 2007554:	20075740 	call	2007574 <chkSingleTiming>
 2007558:	00000106 	br	2007560 <chkEditedParameter+0x60>
	}
	else
		return 1;
 200755c:	00800044 	movi	r2,1
}
 2007560:	e037883a 	mov	sp,fp
 2007564:	dfc00117 	ldw	ra,4(sp)
 2007568:	df000017 	ldw	fp,0(sp)
 200756c:	dec00204 	addi	sp,sp,8
 2007570:	f800283a 	ret

02007574 <chkSingleTiming>:


//Return 1: Error detected; Return 0: No error
//SorE=0: Start Time; SorE=1: End Time
unsigned char chkSingleTiming(unsigned char chnl, unsigned char SorE, unsigned int data)
{
 2007574:	defff804 	addi	sp,sp,-32
 2007578:	dfc00715 	stw	ra,28(sp)
 200757c:	df000615 	stw	fp,24(sp)
 2007580:	df000604 	addi	fp,sp,24
 2007584:	2007883a 	mov	r3,r4
 2007588:	2805883a 	mov	r2,r5
 200758c:	e1bfff15 	stw	r6,-4(fp)
 2007590:	e0fffd05 	stb	r3,-12(fp)
 2007594:	e0bffe05 	stb	r2,-8(fp)
	switch(chnl)
 2007598:	e0bffd03 	ldbu	r2,-12(fp)
 200759c:	10c002a8 	cmpgeui	r3,r2,10
 20075a0:	18018f1e 	bne	r3,zero,2007be0 <chkSingleTiming+0x66c>
 20075a4:	1085883a 	add	r2,r2,r2
 20075a8:	1087883a 	add	r3,r2,r2
 20075ac:	00808034 	movhi	r2,512
 20075b0:	109d7004 	addi	r2,r2,30144
 20075b4:	1885883a 	add	r2,r3,r2
 20075b8:	10800017 	ldw	r2,0(r2)
 20075bc:	1000683a 	jmp	r2
 20075c0:	02007be0 	cmpeqi	r8,zero,495
 20075c4:	020075e8 	cmpgeui	r8,zero,471
 20075c8:	02007678 	rdprs	r8,zero,473
 20075cc:	02007708 	cmpgei	r8,zero,476
 20075d0:	020077e0 	cmpeqi	r8,zero,479
 20075d4:	020078c0 	call	20078c <__alt_mem_sdram-0x1dff874>
 20075d8:	020079a0 	cmpeqi	r8,zero,486
 20075dc:	02007a30 	cmpltui	r8,zero,488
 20075e0:	02007ac0 	call	2007ac <__alt_mem_sdram-0x1dff854>
 20075e4:	02007b50 	cmplti	r8,zero,493
	{
		//Chnl 1
		//Start:	Min=0, 			Max=1s/RepRate - Break between two shots - 1
		//End:		Min=Start+1, 	Max=1s/RepRate - Break between two shots
		case 1:
			if(SorE == 0)
 20075e8:	e0bffe03 	ldbu	r2,-8(fp)
 20075ec:	10000f1e 	bne	r2,zero,200762c <chkSingleTiming+0xb8>
			{
				if(data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW-1)
 20075f0:	2001a680 	call	2001a68 <LoadRAMRepRate>
 20075f4:	01017db4 	movhi	r4,1526
 20075f8:	21384004 	addi	r4,r4,-7936
 20075fc:	100b883a 	mov	r5,r2
 2007600:	20093a80 	call	20093a8 <__udivsi3>
 2007604:	1007883a 	mov	r3,r2
 2007608:	00bffa74 	movhi	r2,65513
 200760c:	108727c4 	addi	r2,r2,7327
 2007610:	1887883a 	add	r3,r3,r2
 2007614:	e0bfff17 	ldw	r2,-4(fp)
 2007618:	18800236 	bltu	r3,r2,2007624 <chkSingleTiming+0xb0>
					return 0;
 200761c:	0005883a 	mov	r2,zero
 2007620:	00017006 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007624:	00800044 	movi	r2,1
 2007628:	00016e06 	br	2007be4 <chkSingleTiming+0x670>
			}
			else
			{
				if(data > LoadRAMStartTime(1) && data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW )
 200762c:	01000044 	movi	r4,1
 2007630:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 2007634:	e0ffff17 	ldw	r3,-4(fp)
 2007638:	10c00d2e 	bgeu	r2,r3,2007670 <chkSingleTiming+0xfc>
 200763c:	2001a680 	call	2001a68 <LoadRAMRepRate>
 2007640:	01017db4 	movhi	r4,1526
 2007644:	21384004 	addi	r4,r4,-7936
 2007648:	100b883a 	mov	r5,r2
 200764c:	20093a80 	call	20093a8 <__udivsi3>
 2007650:	1007883a 	mov	r3,r2
 2007654:	00bffa74 	movhi	r2,65513
 2007658:	10872804 	addi	r2,r2,7328
 200765c:	1887883a 	add	r3,r3,r2
 2007660:	e0bfff17 	ldw	r2,-4(fp)
 2007664:	18800236 	bltu	r3,r2,2007670 <chkSingleTiming+0xfc>
					return 0;
 2007668:	0005883a 	mov	r2,zero
 200766c:	00015d06 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007670:	00800044 	movi	r2,1
 2007674:	00015b06 	br	2007be4 <chkSingleTiming+0x670>
			}
		//Chnl 2
		//Start:	Min=0, 			Max=LHV (Chnl 1) Stop
		//End:		Min=Start+1,	Max=min{1s/RepRate - Break between two shots,LHV (Chnl 1) Stop + 1000*100}
		case 2:
			if(SorE == 0)
 2007678:	e0bffe03 	ldbu	r2,-8(fp)
 200767c:	1000081e 	bne	r2,zero,20076a0 <chkSingleTiming+0x12c>
			{
				if(data <= LoadRAMEndTime(1))
 2007680:	01000044 	movi	r4,1
 2007684:	2001b000 	call	2001b00 <LoadRAMEndTime>
 2007688:	e0ffff17 	ldw	r3,-4(fp)
 200768c:	10c00236 	bltu	r2,r3,2007698 <chkSingleTiming+0x124>
					return 0;
 2007690:	0005883a 	mov	r2,zero
 2007694:	00015306 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007698:	00800044 	movi	r2,1
 200769c:	00015106 	br	2007be4 <chkSingleTiming+0x670>
			}
			else
			{

				if(data > LoadRAMStartTime(2) && data <= LoadRAMEndTime(1) + 100000 && data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW)
 20076a0:	01000084 	movi	r4,2
 20076a4:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 20076a8:	e0ffff17 	ldw	r3,-4(fp)
 20076ac:	10c0142e 	bgeu	r2,r3,2007700 <chkSingleTiming+0x18c>
 20076b0:	01000044 	movi	r4,1
 20076b4:	2001b000 	call	2001b00 <LoadRAMEndTime>
 20076b8:	00c000b4 	movhi	r3,2
 20076bc:	18e1a804 	addi	r3,r3,-31072
 20076c0:	10c7883a 	add	r3,r2,r3
 20076c4:	e0bfff17 	ldw	r2,-4(fp)
 20076c8:	18800d36 	bltu	r3,r2,2007700 <chkSingleTiming+0x18c>
 20076cc:	2001a680 	call	2001a68 <LoadRAMRepRate>
 20076d0:	01017db4 	movhi	r4,1526
 20076d4:	21384004 	addi	r4,r4,-7936
 20076d8:	100b883a 	mov	r5,r2
 20076dc:	20093a80 	call	20093a8 <__udivsi3>
 20076e0:	1007883a 	mov	r3,r2
 20076e4:	00bffa74 	movhi	r2,65513
 20076e8:	10872804 	addi	r2,r2,7328
 20076ec:	1887883a 	add	r3,r3,r2
 20076f0:	e0bfff17 	ldw	r2,-4(fp)
 20076f4:	18800236 	bltu	r3,r2,2007700 <chkSingleTiming+0x18c>
					return 0;
 20076f8:	0005883a 	mov	r2,zero
 20076fc:	00013906 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007700:	00800044 	movi	r2,1
 2007704:	00013706 	br	2007be4 <chkSingleTiming+0x670>
			}
		//Chnl 3
		//Start:	Min=LHV(39ms)+9us(max of DC Preion Start),			Max=1s/RepRate - Break between two shots - 1
		//End:		Min=Start+1,	Max=min{1s/RepRate - Break between two shots, Start+10000*100} Exact equal starttime+1ms
		case 3:
			if(SorE == 0)
 2007708:	e0bffe03 	ldbu	r2,-8(fp)
 200770c:	1000131e 	bne	r2,zero,200775c <chkSingleTiming+0x1e8>
			{
				if(data>=3900900 &&data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW-1)
 2007710:	e0bfff17 	ldw	r2,-4(fp)
 2007714:	00c00f34 	movhi	r3,60
 2007718:	18e178c4 	addi	r3,r3,-31261
 200771c:	18800d2e 	bgeu	r3,r2,2007754 <chkSingleTiming+0x1e0>
 2007720:	2001a680 	call	2001a68 <LoadRAMRepRate>
 2007724:	01017db4 	movhi	r4,1526
 2007728:	21384004 	addi	r4,r4,-7936
 200772c:	100b883a 	mov	r5,r2
 2007730:	20093a80 	call	20093a8 <__udivsi3>
 2007734:	1007883a 	mov	r3,r2
 2007738:	00bffa74 	movhi	r2,65513
 200773c:	108727c4 	addi	r2,r2,7327
 2007740:	1887883a 	add	r3,r3,r2
 2007744:	e0bfff17 	ldw	r2,-4(fp)
 2007748:	18800236 	bltu	r3,r2,2007754 <chkSingleTiming+0x1e0>
					return 0;
 200774c:	0005883a 	mov	r2,zero
 2007750:	00012406 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007754:	00800044 	movi	r2,1
 2007758:	00012206 	br	2007be4 <chkSingleTiming+0x670>
			}
			else
			{
				unsigned int chnl3Start = LoadRAMStartTime(3);
 200775c:	010000c4 	movi	r4,3
 2007760:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 2007764:	e0bffa15 	stw	r2,-24(fp)
				if(data==chnl3Start+100000 && data > chnl3Start && data<= chnl3Start + 1000000 && data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW )
 2007768:	e0fffa17 	ldw	r3,-24(fp)
 200776c:	008000b4 	movhi	r2,2
 2007770:	10a1a804 	addi	r2,r2,-31072
 2007774:	1887883a 	add	r3,r3,r2
 2007778:	e0bfff17 	ldw	r2,-4(fp)
 200777c:	1880161e 	bne	r3,r2,20077d8 <chkSingleTiming+0x264>
 2007780:	e0bfff17 	ldw	r2,-4(fp)
 2007784:	e0fffa17 	ldw	r3,-24(fp)
 2007788:	1880132e 	bgeu	r3,r2,20077d8 <chkSingleTiming+0x264>
 200778c:	e0fffa17 	ldw	r3,-24(fp)
 2007790:	008003f4 	movhi	r2,15
 2007794:	10909004 	addi	r2,r2,16960
 2007798:	1887883a 	add	r3,r3,r2
 200779c:	e0bfff17 	ldw	r2,-4(fp)
 20077a0:	18800d36 	bltu	r3,r2,20077d8 <chkSingleTiming+0x264>
 20077a4:	2001a680 	call	2001a68 <LoadRAMRepRate>
 20077a8:	01017db4 	movhi	r4,1526
 20077ac:	21384004 	addi	r4,r4,-7936
 20077b0:	100b883a 	mov	r5,r2
 20077b4:	20093a80 	call	20093a8 <__udivsi3>
 20077b8:	1007883a 	mov	r3,r2
 20077bc:	00bffa74 	movhi	r2,65513
 20077c0:	10872804 	addi	r2,r2,7328
 20077c4:	1887883a 	add	r3,r3,r2
 20077c8:	e0bfff17 	ldw	r2,-4(fp)
 20077cc:	18800236 	bltu	r3,r2,20077d8 <chkSingleTiming+0x264>
					return 0;
 20077d0:	0005883a 	mov	r2,zero
 20077d4:	00010306 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 20077d8:	00800044 	movi	r2,1
 20077dc:	00010106 	br	2007be4 <chkSingleTiming+0x670>
			}
		//Chnl 4
		//Start:	Min=Max(HV(Chnl2) Stop, RF(Chnl3) Stop-9us)			Max=Min{1s/RepRate - Break between two shots - 1,RF(Chnl3) Stop-1us)
		//End:		Min=Start+1,				Max=min{1s/RepRate - Break between two shots, Start+100*100}
		case 4:
			if(SorE == 0)
 20077e0:	e0bffe03 	ldbu	r2,-8(fp)
 20077e4:	10001d1e 	bne	r2,zero,200785c <chkSingleTiming+0x2e8>
			{
				if(data>= LoadRAMEndTime(3)-900 && data<= LoadRAMEndTime(3)-100 && data >= LoadRAMEndTime(2) && data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW-1)
 20077e8:	010000c4 	movi	r4,3
 20077ec:	2001b000 	call	2001b00 <LoadRAMEndTime>
 20077f0:	10bf1f04 	addi	r2,r2,-900
 20077f4:	e0ffff17 	ldw	r3,-4(fp)
 20077f8:	18801636 	bltu	r3,r2,2007854 <chkSingleTiming+0x2e0>
 20077fc:	010000c4 	movi	r4,3
 2007800:	2001b000 	call	2001b00 <LoadRAMEndTime>
 2007804:	10ffe704 	addi	r3,r2,-100
 2007808:	e0bfff17 	ldw	r2,-4(fp)
 200780c:	18801136 	bltu	r3,r2,2007854 <chkSingleTiming+0x2e0>
 2007810:	01000084 	movi	r4,2
 2007814:	2001b000 	call	2001b00 <LoadRAMEndTime>
 2007818:	e0ffff17 	ldw	r3,-4(fp)
 200781c:	18800d36 	bltu	r3,r2,2007854 <chkSingleTiming+0x2e0>
 2007820:	2001a680 	call	2001a68 <LoadRAMRepRate>
 2007824:	01017db4 	movhi	r4,1526
 2007828:	21384004 	addi	r4,r4,-7936
 200782c:	100b883a 	mov	r5,r2
 2007830:	20093a80 	call	20093a8 <__udivsi3>
 2007834:	1007883a 	mov	r3,r2
 2007838:	00bffa74 	movhi	r2,65513
 200783c:	108727c4 	addi	r2,r2,7327
 2007840:	1887883a 	add	r3,r3,r2
 2007844:	e0bfff17 	ldw	r2,-4(fp)
 2007848:	18800236 	bltu	r3,r2,2007854 <chkSingleTiming+0x2e0>
					return 0;
 200784c:	0005883a 	mov	r2,zero
 2007850:	0000e406 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007854:	00800044 	movi	r2,1
 2007858:	0000e206 	br	2007be4 <chkSingleTiming+0x670>
			}
			else
			{
				unsigned int chnl4Start = LoadRAMStartTime(4);
 200785c:	01000104 	movi	r4,4
 2007860:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 2007864:	e0bffb15 	stw	r2,-20(fp)
				if(data > chnl4Start && data<= chnl4Start + 10000 && data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW )
 2007868:	e0bfff17 	ldw	r2,-4(fp)
 200786c:	e0fffb17 	ldw	r3,-20(fp)
 2007870:	1880112e 	bgeu	r3,r2,20078b8 <chkSingleTiming+0x344>
 2007874:	e0bffb17 	ldw	r2,-20(fp)
 2007878:	10c9c404 	addi	r3,r2,10000
 200787c:	e0bfff17 	ldw	r2,-4(fp)
 2007880:	18800d36 	bltu	r3,r2,20078b8 <chkSingleTiming+0x344>
 2007884:	2001a680 	call	2001a68 <LoadRAMRepRate>
 2007888:	01017db4 	movhi	r4,1526
 200788c:	21384004 	addi	r4,r4,-7936
 2007890:	100b883a 	mov	r5,r2
 2007894:	20093a80 	call	20093a8 <__udivsi3>
 2007898:	1007883a 	mov	r3,r2
 200789c:	00bffa74 	movhi	r2,65513
 20078a0:	10872804 	addi	r2,r2,7328
 20078a4:	1887883a 	add	r3,r3,r2
 20078a8:	e0bfff17 	ldw	r2,-4(fp)
 20078ac:	18800236 	bltu	r3,r2,20078b8 <chkSingleTiming+0x344>
					return 0;
 20078b0:	0005883a 	mov	r2,zero
 20078b4:	0000cb06 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 20078b8:	00800044 	movi	r2,1
 20078bc:	0000c906 	br	2007be4 <chkSingleTiming+0x670>

		//Chnl 5
		//Start:	Min=DC Pre (Chnl4) Start,			Max=DC Pre (Chnl4) Stop + 100*100
		//End:		Min=Start+2,						Max=min{1s/RepRate - Break between two shots, Start+100*100}
		case 5:
			if(SorE == 0)
 20078c0:	e0bffe03 	ldbu	r2,-8(fp)
 20078c4:	10001c1e 	bne	r2,zero,2007938 <chkSingleTiming+0x3c4>
			{
				if(data>=1800100 && data >= LoadRAMStartTime(4) && data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW-1 && data<=LoadRAMStartTime(4)+10000)
 20078c8:	e0bfff17 	ldw	r2,-4(fp)
 20078cc:	00c006f4 	movhi	r3,27
 20078d0:	18dde8c4 	addi	r3,r3,30627
 20078d4:	1880162e 	bgeu	r3,r2,2007930 <chkSingleTiming+0x3bc>
 20078d8:	01000104 	movi	r4,4
 20078dc:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 20078e0:	e0ffff17 	ldw	r3,-4(fp)
 20078e4:	18801236 	bltu	r3,r2,2007930 <chkSingleTiming+0x3bc>
 20078e8:	2001a680 	call	2001a68 <LoadRAMRepRate>
 20078ec:	01017db4 	movhi	r4,1526
 20078f0:	21384004 	addi	r4,r4,-7936
 20078f4:	100b883a 	mov	r5,r2
 20078f8:	20093a80 	call	20093a8 <__udivsi3>
 20078fc:	1007883a 	mov	r3,r2
 2007900:	00bffa74 	movhi	r2,65513
 2007904:	108727c4 	addi	r2,r2,7327
 2007908:	1887883a 	add	r3,r3,r2
 200790c:	e0bfff17 	ldw	r2,-4(fp)
 2007910:	18800736 	bltu	r3,r2,2007930 <chkSingleTiming+0x3bc>
 2007914:	01000104 	movi	r4,4
 2007918:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 200791c:	10c9c404 	addi	r3,r2,10000
 2007920:	e0bfff17 	ldw	r2,-4(fp)
 2007924:	18800236 	bltu	r3,r2,2007930 <chkSingleTiming+0x3bc>
					return 0;
 2007928:	0005883a 	mov	r2,zero
 200792c:	0000ad06 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007930:	00800044 	movi	r2,1
 2007934:	0000ab06 	br	2007be4 <chkSingleTiming+0x670>
			}
			else
			{
				unsigned int chnl5Start = LoadRAMStartTime(5);
 2007938:	01000144 	movi	r4,5
 200793c:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 2007940:	e0bffc15 	stw	r2,-16(fp)
				if(data > chnl5Start+1 && data<= chnl5Start + 10000 && data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW )
 2007944:	e0bffc17 	ldw	r2,-16(fp)
 2007948:	10c00044 	addi	r3,r2,1
 200794c:	e0bfff17 	ldw	r2,-4(fp)
 2007950:	1880112e 	bgeu	r3,r2,2007998 <chkSingleTiming+0x424>
 2007954:	e0bffc17 	ldw	r2,-16(fp)
 2007958:	10c9c404 	addi	r3,r2,10000
 200795c:	e0bfff17 	ldw	r2,-4(fp)
 2007960:	18800d36 	bltu	r3,r2,2007998 <chkSingleTiming+0x424>
 2007964:	2001a680 	call	2001a68 <LoadRAMRepRate>
 2007968:	01017db4 	movhi	r4,1526
 200796c:	21384004 	addi	r4,r4,-7936
 2007970:	100b883a 	mov	r5,r2
 2007974:	20093a80 	call	20093a8 <__udivsi3>
 2007978:	1007883a 	mov	r3,r2
 200797c:	00bffa74 	movhi	r2,65513
 2007980:	10872804 	addi	r2,r2,7328
 2007984:	1887883a 	add	r3,r3,r2
 2007988:	e0bfff17 	ldw	r2,-4(fp)
 200798c:	18800236 	bltu	r3,r2,2007998 <chkSingleTiming+0x424>
					return 0;
 2007990:	0005883a 	mov	r2,zero
 2007994:	00009306 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007998:	00800044 	movi	r2,1
 200799c:	00009106 	br	2007be4 <chkSingleTiming+0x670>
			}
        //chnl 6(9ms before RF preion start time, Set automatically)
		case 6:
			if(SorE == 0)
 20079a0:	e0bffe03 	ldbu	r2,-8(fp)
 20079a4:	10000f1e 	bne	r2,zero,20079e4 <chkSingleTiming+0x470>
			{
				if(data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW-1)
 20079a8:	2001a680 	call	2001a68 <LoadRAMRepRate>
 20079ac:	01017db4 	movhi	r4,1526
 20079b0:	21384004 	addi	r4,r4,-7936
 20079b4:	100b883a 	mov	r5,r2
 20079b8:	20093a80 	call	20093a8 <__udivsi3>
 20079bc:	1007883a 	mov	r3,r2
 20079c0:	00bffa74 	movhi	r2,65513
 20079c4:	108727c4 	addi	r2,r2,7327
 20079c8:	1887883a 	add	r3,r3,r2
 20079cc:	e0bfff17 	ldw	r2,-4(fp)
 20079d0:	18800236 	bltu	r3,r2,20079dc <chkSingleTiming+0x468>
					return 0;
 20079d4:	0005883a 	mov	r2,zero
 20079d8:	00008206 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 20079dc:	00800044 	movi	r2,1
 20079e0:	00008006 	br	2007be4 <chkSingleTiming+0x670>
			}
			else
			{
				if(data > LoadRAMStartTime(6) && data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW )
 20079e4:	01000184 	movi	r4,6
 20079e8:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 20079ec:	e0ffff17 	ldw	r3,-4(fp)
 20079f0:	10c00d2e 	bgeu	r2,r3,2007a28 <chkSingleTiming+0x4b4>
 20079f4:	2001a680 	call	2001a68 <LoadRAMRepRate>
 20079f8:	01017db4 	movhi	r4,1526
 20079fc:	21384004 	addi	r4,r4,-7936
 2007a00:	100b883a 	mov	r5,r2
 2007a04:	20093a80 	call	20093a8 <__udivsi3>
 2007a08:	1007883a 	mov	r3,r2
 2007a0c:	00bffa74 	movhi	r2,65513
 2007a10:	10872804 	addi	r2,r2,7328
 2007a14:	1887883a 	add	r3,r3,r2
 2007a18:	e0bfff17 	ldw	r2,-4(fp)
 2007a1c:	18800236 	bltu	r3,r2,2007a28 <chkSingleTiming+0x4b4>
					return 0;
 2007a20:	0005883a 	mov	r2,zero
 2007a24:	00006f06 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007a28:	00800044 	movi	r2,1
 2007a2c:	00006d06 	br	2007be4 <chkSingleTiming+0x670>
			}
			//Chnl 7,8,9
			//Start:	Min=0;				Max=1s/RepRate - Break between two shots - 1
			//End:		Min=Start+1;		Max=1s/RepRate - Break between two shots
		case 7:
			if(SorE == 0)
 2007a30:	e0bffe03 	ldbu	r2,-8(fp)
 2007a34:	10000f1e 	bne	r2,zero,2007a74 <chkSingleTiming+0x500>
			{
				if(data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW-1)
 2007a38:	2001a680 	call	2001a68 <LoadRAMRepRate>
 2007a3c:	01017db4 	movhi	r4,1526
 2007a40:	21384004 	addi	r4,r4,-7936
 2007a44:	100b883a 	mov	r5,r2
 2007a48:	20093a80 	call	20093a8 <__udivsi3>
 2007a4c:	1007883a 	mov	r3,r2
 2007a50:	00bffa74 	movhi	r2,65513
 2007a54:	108727c4 	addi	r2,r2,7327
 2007a58:	1887883a 	add	r3,r3,r2
 2007a5c:	e0bfff17 	ldw	r2,-4(fp)
 2007a60:	18800236 	bltu	r3,r2,2007a6c <chkSingleTiming+0x4f8>
					return 0;
 2007a64:	0005883a 	mov	r2,zero
 2007a68:	00005e06 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007a6c:	00800044 	movi	r2,1
 2007a70:	00005c06 	br	2007be4 <chkSingleTiming+0x670>
			}
			else
			{
				if(data > LoadRAMStartTime(7) && data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW )
 2007a74:	010001c4 	movi	r4,7
 2007a78:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 2007a7c:	e0ffff17 	ldw	r3,-4(fp)
 2007a80:	10c00d2e 	bgeu	r2,r3,2007ab8 <chkSingleTiming+0x544>
 2007a84:	2001a680 	call	2001a68 <LoadRAMRepRate>
 2007a88:	01017db4 	movhi	r4,1526
 2007a8c:	21384004 	addi	r4,r4,-7936
 2007a90:	100b883a 	mov	r5,r2
 2007a94:	20093a80 	call	20093a8 <__udivsi3>
 2007a98:	1007883a 	mov	r3,r2
 2007a9c:	00bffa74 	movhi	r2,65513
 2007aa0:	10872804 	addi	r2,r2,7328
 2007aa4:	1887883a 	add	r3,r3,r2
 2007aa8:	e0bfff17 	ldw	r2,-4(fp)
 2007aac:	18800236 	bltu	r3,r2,2007ab8 <chkSingleTiming+0x544>
					return 0;
 2007ab0:	0005883a 	mov	r2,zero
 2007ab4:	00004b06 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007ab8:	00800044 	movi	r2,1
 2007abc:	00004906 	br	2007be4 <chkSingleTiming+0x670>
			}
		case 8:
			if(SorE == 0)
 2007ac0:	e0bffe03 	ldbu	r2,-8(fp)
 2007ac4:	10000f1e 	bne	r2,zero,2007b04 <chkSingleTiming+0x590>
			{
				if(data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW-1)
 2007ac8:	2001a680 	call	2001a68 <LoadRAMRepRate>
 2007acc:	01017db4 	movhi	r4,1526
 2007ad0:	21384004 	addi	r4,r4,-7936
 2007ad4:	100b883a 	mov	r5,r2
 2007ad8:	20093a80 	call	20093a8 <__udivsi3>
 2007adc:	1007883a 	mov	r3,r2
 2007ae0:	00bffa74 	movhi	r2,65513
 2007ae4:	108727c4 	addi	r2,r2,7327
 2007ae8:	1887883a 	add	r3,r3,r2
 2007aec:	e0bfff17 	ldw	r2,-4(fp)
 2007af0:	18800236 	bltu	r3,r2,2007afc <chkSingleTiming+0x588>
					return 0;
 2007af4:	0005883a 	mov	r2,zero
 2007af8:	00003a06 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007afc:	00800044 	movi	r2,1
 2007b00:	00003806 	br	2007be4 <chkSingleTiming+0x670>
			}
			else
			{
				if(data > LoadRAMStartTime(8) && data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW )
 2007b04:	01000204 	movi	r4,8
 2007b08:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 2007b0c:	e0ffff17 	ldw	r3,-4(fp)
 2007b10:	10c00d2e 	bgeu	r2,r3,2007b48 <chkSingleTiming+0x5d4>
 2007b14:	2001a680 	call	2001a68 <LoadRAMRepRate>
 2007b18:	01017db4 	movhi	r4,1526
 2007b1c:	21384004 	addi	r4,r4,-7936
 2007b20:	100b883a 	mov	r5,r2
 2007b24:	20093a80 	call	20093a8 <__udivsi3>
 2007b28:	1007883a 	mov	r3,r2
 2007b2c:	00bffa74 	movhi	r2,65513
 2007b30:	10872804 	addi	r2,r2,7328
 2007b34:	1887883a 	add	r3,r3,r2
 2007b38:	e0bfff17 	ldw	r2,-4(fp)
 2007b3c:	18800236 	bltu	r3,r2,2007b48 <chkSingleTiming+0x5d4>
					return 0;
 2007b40:	0005883a 	mov	r2,zero
 2007b44:	00002706 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007b48:	00800044 	movi	r2,1
 2007b4c:	00002506 	br	2007be4 <chkSingleTiming+0x670>
			}
		case 9:
			if(SorE == 0)
 2007b50:	e0bffe03 	ldbu	r2,-8(fp)
 2007b54:	10000f1e 	bne	r2,zero,2007b94 <chkSingleTiming+0x620>
			{
				if(data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW-1)
 2007b58:	2001a680 	call	2001a68 <LoadRAMRepRate>
 2007b5c:	01017db4 	movhi	r4,1526
 2007b60:	21384004 	addi	r4,r4,-7936
 2007b64:	100b883a 	mov	r5,r2
 2007b68:	20093a80 	call	20093a8 <__udivsi3>
 2007b6c:	1007883a 	mov	r3,r2
 2007b70:	00bffa74 	movhi	r2,65513
 2007b74:	108727c4 	addi	r2,r2,7327
 2007b78:	1887883a 	add	r3,r3,r2
 2007b7c:	e0bfff17 	ldw	r2,-4(fp)
 2007b80:	18800236 	bltu	r3,r2,2007b8c <chkSingleTiming+0x618>
					return 0;
 2007b84:	0005883a 	mov	r2,zero
 2007b88:	00001606 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007b8c:	00800044 	movi	r2,1
 2007b90:	00001406 	br	2007be4 <chkSingleTiming+0x670>
			}
			else
			{
				if(data > LoadRAMStartTime(9) && data <= 100000000/LoadRAMRepRate()-IDLE_WINDOW )
 2007b94:	01000244 	movi	r4,9
 2007b98:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 2007b9c:	e0ffff17 	ldw	r3,-4(fp)
 2007ba0:	10c00d2e 	bgeu	r2,r3,2007bd8 <chkSingleTiming+0x664>
 2007ba4:	2001a680 	call	2001a68 <LoadRAMRepRate>
 2007ba8:	01017db4 	movhi	r4,1526
 2007bac:	21384004 	addi	r4,r4,-7936
 2007bb0:	100b883a 	mov	r5,r2
 2007bb4:	20093a80 	call	20093a8 <__udivsi3>
 2007bb8:	1007883a 	mov	r3,r2
 2007bbc:	00bffa74 	movhi	r2,65513
 2007bc0:	10872804 	addi	r2,r2,7328
 2007bc4:	1887883a 	add	r3,r3,r2
 2007bc8:	e0bfff17 	ldw	r2,-4(fp)
 2007bcc:	18800236 	bltu	r3,r2,2007bd8 <chkSingleTiming+0x664>
					return 0;
 2007bd0:	0005883a 	mov	r2,zero
 2007bd4:	00000306 	br	2007be4 <chkSingleTiming+0x670>
				else
					return 1;
 2007bd8:	00800044 	movi	r2,1
 2007bdc:	00000106 	br	2007be4 <chkSingleTiming+0x670>
			}
	}
	return 1;
 2007be0:	00800044 	movi	r2,1
}
 2007be4:	e037883a 	mov	sp,fp
 2007be8:	dfc00117 	ldw	ra,4(sp)
 2007bec:	df000017 	ldw	fp,0(sp)
 2007bf0:	dec00204 	addi	sp,sp,8
 2007bf4:	f800283a 	ret

02007bf8 <refreshErrFlags>:

//Go through all timing parameters, refresh errors marks in err_flag
void refreshErrFlags()
{
 2007bf8:	defffb04 	addi	sp,sp,-20
 2007bfc:	dfc00415 	stw	ra,16(sp)
 2007c00:	df000315 	stw	fp,12(sp)
 2007c04:	dc400215 	stw	r17,8(sp)
 2007c08:	dc000115 	stw	r16,4(sp)
 2007c0c:	df000104 	addi	fp,sp,4
	int i;
	for(i=1;i<=CHNL_NUM;i++)
 2007c10:	00800044 	movi	r2,1
 2007c14:	e0bfff15 	stw	r2,-4(fp)
 2007c18:	00002606 	br	2007cb4 <refreshErrFlags+0xbc>
	{
		err_flag[i-1][0] = chkSingleTiming(i,0,LoadRAMStartTime(i));
 2007c1c:	e0bfff17 	ldw	r2,-4(fp)
 2007c20:	143fffc4 	addi	r16,r2,-1
 2007c24:	e0bfff17 	ldw	r2,-4(fp)
 2007c28:	14403fcc 	andi	r17,r2,255
 2007c2c:	e0bfff17 	ldw	r2,-4(fp)
 2007c30:	10803fcc 	andi	r2,r2,255
 2007c34:	1009883a 	mov	r4,r2
 2007c38:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 2007c3c:	8809883a 	mov	r4,r17
 2007c40:	000b883a 	mov	r5,zero
 2007c44:	100d883a 	mov	r6,r2
 2007c48:	20075740 	call	2007574 <chkSingleTiming>
 2007c4c:	010080b4 	movhi	r4,514
 2007c50:	21250c04 	addi	r4,r4,-27600
 2007c54:	8407883a 	add	r3,r16,r16
 2007c58:	20c7883a 	add	r3,r4,r3
 2007c5c:	18800005 	stb	r2,0(r3)
		err_flag[i-1][1] = chkSingleTiming(i,1,LoadRAMEndTime(i));
 2007c60:	e0bfff17 	ldw	r2,-4(fp)
 2007c64:	143fffc4 	addi	r16,r2,-1
 2007c68:	e0bfff17 	ldw	r2,-4(fp)
 2007c6c:	14403fcc 	andi	r17,r2,255
 2007c70:	e0bfff17 	ldw	r2,-4(fp)
 2007c74:	10803fcc 	andi	r2,r2,255
 2007c78:	1009883a 	mov	r4,r2
 2007c7c:	2001b000 	call	2001b00 <LoadRAMEndTime>
 2007c80:	8809883a 	mov	r4,r17
 2007c84:	01400044 	movi	r5,1
 2007c88:	100d883a 	mov	r6,r2
 2007c8c:	20075740 	call	2007574 <chkSingleTiming>
 2007c90:	010080b4 	movhi	r4,514
 2007c94:	21250c04 	addi	r4,r4,-27600
 2007c98:	8407883a 	add	r3,r16,r16
 2007c9c:	20c7883a 	add	r3,r4,r3
 2007ca0:	18c00044 	addi	r3,r3,1
 2007ca4:	18800005 	stb	r2,0(r3)

//Go through all timing parameters, refresh errors marks in err_flag
void refreshErrFlags()
{
	int i;
	for(i=1;i<=CHNL_NUM;i++)
 2007ca8:	e0bfff17 	ldw	r2,-4(fp)
 2007cac:	10800044 	addi	r2,r2,1
 2007cb0:	e0bfff15 	stw	r2,-4(fp)
 2007cb4:	e0bfff17 	ldw	r2,-4(fp)
 2007cb8:	10800290 	cmplti	r2,r2,10
 2007cbc:	103fd71e 	bne	r2,zero,2007c1c <refreshErrFlags+0x24>
	{
		err_flag[i-1][0] = chkSingleTiming(i,0,LoadRAMStartTime(i));
		err_flag[i-1][1] = chkSingleTiming(i,1,LoadRAMEndTime(i));
	}
}
 2007cc0:	e037883a 	mov	sp,fp
 2007cc4:	dfc00317 	ldw	ra,12(sp)
 2007cc8:	df000217 	ldw	fp,8(sp)
 2007ccc:	dc400117 	ldw	r17,4(sp)
 2007cd0:	dc000017 	ldw	r16,0(sp)
 2007cd4:	dec00404 	addi	sp,sp,16
 2007cd8:	f800283a 	ret

02007cdc <chkAllTiming>:

//Return channel number if an error is detected, otherwise return 0
unsigned char chkAllTiming()
{
 2007cdc:	defffe04 	addi	sp,sp,-8
 2007ce0:	df000115 	stw	fp,4(sp)
 2007ce4:	df000104 	addi	fp,sp,4
	int i;
	for(i=1;i<=CHNL_NUM;i++)
 2007ce8:	00800044 	movi	r2,1
 2007cec:	e0bfff15 	stw	r2,-4(fp)
 2007cf0:	00001a06 	br	2007d5c <chkAllTiming+0x80>
	{
		if(err_flag[i-1][0])
 2007cf4:	e0bfff17 	ldw	r2,-4(fp)
 2007cf8:	10bfffc4 	addi	r2,r2,-1
 2007cfc:	00c080b4 	movhi	r3,514
 2007d00:	18e50c04 	addi	r3,r3,-27600
 2007d04:	1085883a 	add	r2,r2,r2
 2007d08:	1885883a 	add	r2,r3,r2
 2007d0c:	10800003 	ldbu	r2,0(r2)
 2007d10:	10803fcc 	andi	r2,r2,255
 2007d14:	10000226 	beq	r2,zero,2007d20 <chkAllTiming+0x44>
			return i;
 2007d18:	e0bfff17 	ldw	r2,-4(fp)
 2007d1c:	00001306 	br	2007d6c <chkAllTiming+0x90>
		if(err_flag[i-1][1])
 2007d20:	e0bfff17 	ldw	r2,-4(fp)
 2007d24:	10bfffc4 	addi	r2,r2,-1
 2007d28:	00c080b4 	movhi	r3,514
 2007d2c:	18e50c04 	addi	r3,r3,-27600
 2007d30:	1085883a 	add	r2,r2,r2
 2007d34:	1885883a 	add	r2,r3,r2
 2007d38:	10800044 	addi	r2,r2,1
 2007d3c:	10800003 	ldbu	r2,0(r2)
 2007d40:	10803fcc 	andi	r2,r2,255
 2007d44:	10000226 	beq	r2,zero,2007d50 <chkAllTiming+0x74>
			return i;
 2007d48:	e0bfff17 	ldw	r2,-4(fp)
 2007d4c:	00000706 	br	2007d6c <chkAllTiming+0x90>

//Return channel number if an error is detected, otherwise return 0
unsigned char chkAllTiming()
{
	int i;
	for(i=1;i<=CHNL_NUM;i++)
 2007d50:	e0bfff17 	ldw	r2,-4(fp)
 2007d54:	10800044 	addi	r2,r2,1
 2007d58:	e0bfff15 	stw	r2,-4(fp)
 2007d5c:	e0bfff17 	ldw	r2,-4(fp)
 2007d60:	10800290 	cmplti	r2,r2,10
 2007d64:	103fe31e 	bne	r2,zero,2007cf4 <chkAllTiming+0x18>
		if(err_flag[i-1][0])
			return i;
		if(err_flag[i-1][1])
			return i;
	}
	return 0;
 2007d68:	0005883a 	mov	r2,zero
}
 2007d6c:	e037883a 	mov	sp,fp
 2007d70:	df000017 	ldw	fp,0(sp)
 2007d74:	dec00104 	addi	sp,sp,4
 2007d78:	f800283a 	ret

02007d7c <chkLeftTiming>:

//Return channel number if an error is detected on the left of current channel, otherwise return 0
//NOTE: The argument type is "char" instead of "unsigned char" because negative value is possible here
//      However, the caller of this function can pass a unsigned char to it (255 will be interpreted as -1)
unsigned char chkLeftTiming(char chnl)
{
 2007d7c:	defffc04 	addi	sp,sp,-16
 2007d80:	dfc00315 	stw	ra,12(sp)
 2007d84:	df000215 	stw	fp,8(sp)
 2007d88:	df000204 	addi	fp,sp,8
 2007d8c:	2005883a 	mov	r2,r4
 2007d90:	e0bfff05 	stb	r2,-4(fp)
	if(chnl<=1)
 2007d94:	e0bfff07 	ldb	r2,-4(fp)
 2007d98:	10800088 	cmpgei	r2,r2,2
 2007d9c:	1000021e 	bne	r2,zero,2007da8 <chkLeftTiming+0x2c>
		return 0;
 2007da0:	0005883a 	mov	r2,zero
 2007da4:	00001b06 	br	2007e14 <chkLeftTiming+0x98>
	else
	{
		int i;
		for(i=1;i<=chnl-1;i++)
 2007da8:	00800044 	movi	r2,1
 2007dac:	e0bffe15 	stw	r2,-8(fp)
 2007db0:	00001306 	br	2007e00 <chkLeftTiming+0x84>
		{
			if(getErrFlag(i,0) || getErrFlag(i,1))
 2007db4:	e0bffe17 	ldw	r2,-8(fp)
 2007db8:	10803fcc 	andi	r2,r2,255
 2007dbc:	1009883a 	mov	r4,r2
 2007dc0:	000b883a 	mov	r5,zero
 2007dc4:	20074600 	call	2007460 <getErrFlag>
 2007dc8:	10803fcc 	andi	r2,r2,255
 2007dcc:	1000071e 	bne	r2,zero,2007dec <chkLeftTiming+0x70>
 2007dd0:	e0bffe17 	ldw	r2,-8(fp)
 2007dd4:	10803fcc 	andi	r2,r2,255
 2007dd8:	1009883a 	mov	r4,r2
 2007ddc:	01400044 	movi	r5,1
 2007de0:	20074600 	call	2007460 <getErrFlag>
 2007de4:	10803fcc 	andi	r2,r2,255
 2007de8:	10000226 	beq	r2,zero,2007df4 <chkLeftTiming+0x78>
				return i;
 2007dec:	e0bffe17 	ldw	r2,-8(fp)
 2007df0:	00000806 	br	2007e14 <chkLeftTiming+0x98>
	if(chnl<=1)
		return 0;
	else
	{
		int i;
		for(i=1;i<=chnl-1;i++)
 2007df4:	e0bffe17 	ldw	r2,-8(fp)
 2007df8:	10800044 	addi	r2,r2,1
 2007dfc:	e0bffe15 	stw	r2,-8(fp)
 2007e00:	e0bfff07 	ldb	r2,-4(fp)
 2007e04:	10ffffc4 	addi	r3,r2,-1
 2007e08:	e0bffe17 	ldw	r2,-8(fp)
 2007e0c:	18bfe90e 	bge	r3,r2,2007db4 <chkLeftTiming+0x38>
		{
			if(getErrFlag(i,0) || getErrFlag(i,1))
				return i;
		}
		return 0;
 2007e10:	0005883a 	mov	r2,zero
	}
}
 2007e14:	e037883a 	mov	sp,fp
 2007e18:	dfc00117 	ldw	ra,4(sp)
 2007e1c:	df000017 	ldw	fp,0(sp)
 2007e20:	dec00204 	addi	sp,sp,8
 2007e24:	f800283a 	ret

02007e28 <chkRightTiming>:

//Return channel number if an error is detected on the right of current channel, otherwise return 0
//NOTE: The argument type is "char" instead of "unsigned char" because negative value is possible here
//      However, the caller of this function can pass a unsigned char to it (255 will be interpreted as -1)
unsigned char chkRightTiming(char chnl)
{
 2007e28:	defffc04 	addi	sp,sp,-16
 2007e2c:	dfc00315 	stw	ra,12(sp)
 2007e30:	df000215 	stw	fp,8(sp)
 2007e34:	df000204 	addi	fp,sp,8
 2007e38:	2005883a 	mov	r2,r4
 2007e3c:	e0bfff05 	stb	r2,-4(fp)
	if(chnl>=CHNL_NUM)
 2007e40:	e0bfff07 	ldb	r2,-4(fp)
 2007e44:	10800250 	cmplti	r2,r2,9
 2007e48:	1000021e 	bne	r2,zero,2007e54 <chkRightTiming+0x2c>
		return 0;
 2007e4c:	0005883a 	mov	r2,zero
 2007e50:	00001e06 	br	2007ecc <chkRightTiming+0xa4>
	else
	{
		if(chnl<0) chnl = 0;
 2007e54:	e0bfff07 	ldb	r2,-4(fp)
 2007e58:	1000010e 	bge	r2,zero,2007e60 <chkRightTiming+0x38>
 2007e5c:	e03fff05 	stb	zero,-4(fp)
		int i;
		for(i=chnl+1;i<=CHNL_NUM;i++)
 2007e60:	e0bfff07 	ldb	r2,-4(fp)
 2007e64:	10800044 	addi	r2,r2,1
 2007e68:	e0bffe15 	stw	r2,-8(fp)
 2007e6c:	00001306 	br	2007ebc <chkRightTiming+0x94>
		{
			if(getErrFlag(i,0) || getErrFlag(i,1))
 2007e70:	e0bffe17 	ldw	r2,-8(fp)
 2007e74:	10803fcc 	andi	r2,r2,255
 2007e78:	1009883a 	mov	r4,r2
 2007e7c:	000b883a 	mov	r5,zero
 2007e80:	20074600 	call	2007460 <getErrFlag>
 2007e84:	10803fcc 	andi	r2,r2,255
 2007e88:	1000071e 	bne	r2,zero,2007ea8 <chkRightTiming+0x80>
 2007e8c:	e0bffe17 	ldw	r2,-8(fp)
 2007e90:	10803fcc 	andi	r2,r2,255
 2007e94:	1009883a 	mov	r4,r2
 2007e98:	01400044 	movi	r5,1
 2007e9c:	20074600 	call	2007460 <getErrFlag>
 2007ea0:	10803fcc 	andi	r2,r2,255
 2007ea4:	10000226 	beq	r2,zero,2007eb0 <chkRightTiming+0x88>
				return i;
 2007ea8:	e0bffe17 	ldw	r2,-8(fp)
 2007eac:	00000706 	br	2007ecc <chkRightTiming+0xa4>
		return 0;
	else
	{
		if(chnl<0) chnl = 0;
		int i;
		for(i=chnl+1;i<=CHNL_NUM;i++)
 2007eb0:	e0bffe17 	ldw	r2,-8(fp)
 2007eb4:	10800044 	addi	r2,r2,1
 2007eb8:	e0bffe15 	stw	r2,-8(fp)
 2007ebc:	e0bffe17 	ldw	r2,-8(fp)
 2007ec0:	10800290 	cmplti	r2,r2,10
 2007ec4:	103fea1e 	bne	r2,zero,2007e70 <chkRightTiming+0x48>
		{
			if(getErrFlag(i,0) || getErrFlag(i,1))
				return i;
		}
		return 0;
 2007ec8:	0005883a 	mov	r2,zero
	}
}
 2007ecc:	e037883a 	mov	sp,fp
 2007ed0:	dfc00117 	ldw	ra,4(sp)
 2007ed4:	df000017 	ldw	fp,0(sp)
 2007ed8:	dec00204 	addi	sp,sp,8
 2007edc:	f800283a 	ret

02007ee0 <enterPWDPage>:
#define rstPwdTimer *(unsigned char*)RSTPWDTIMER_BASE
#define pwdTimerExp *(unsigned char*)PWDTIMEREXP_BASE


unsigned char enterPWDPage()
{
 2007ee0:	defffe04 	addi	sp,sp,-8
 2007ee4:	dfc00115 	stw	ra,4(sp)
 2007ee8:	df000015 	stw	fp,0(sp)
 2007eec:	d839883a 	mov	fp,sp
	if(!pwdTimerExp)
 2007ef0:	00810034 	movhi	r2,1024
 2007ef4:	10888004 	addi	r2,r2,8704
 2007ef8:	10800003 	ldbu	r2,0(r2)
 2007efc:	10803fcc 	andi	r2,r2,255
 2007f00:	1000021e 	bne	r2,zero,2007f0c <enterPWDPage+0x2c>
		return 1;
 2007f04:	00800044 	movi	r2,1
 2007f08:	00002306 	br	2007f98 <enterPWDPage+0xb8>
	DisClear();
 2007f0c:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 2007f10:	0009883a 	mov	r4,zero
 2007f14:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(1,1);
 2007f18:	01000044 	movi	r4,1
 2007f1c:	01400044 	movi	r5,1
 2007f20:	20005400 	call	2000540 <DisCurPos>
	//        12345678901234567890
	DisWrStr("Restricted Parameter");
 2007f24:	01008074 	movhi	r4,513
 2007f28:	211c5104 	addi	r4,r4,28996
 2007f2c:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(2,1);
 2007f30:	01000084 	movi	r4,2
 2007f34:	01400044 	movi	r5,1
 2007f38:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Enter Access Code:  ");
 2007f3c:	01008074 	movhi	r4,513
 2007f40:	211c5704 	addi	r4,r4,29020
 2007f44:	20006000 	call	2000600 <DisWrStr>

	if(enterPWD(3,8))
 2007f48:	010000c4 	movi	r4,3
 2007f4c:	01400204 	movi	r5,8
 2007f50:	2006ff80 	call	2006ff8 <enterPWD>
 2007f54:	10000f26 	beq	r2,zero,2007f94 <enterPWDPage+0xb4>
	{
		rstPwdTimer = 1;
 2007f58:	00810034 	movhi	r2,1024
 2007f5c:	10888404 	addi	r2,r2,8720
 2007f60:	00c00044 	movi	r3,1
 2007f64:	10c00005 	stb	r3,0(r2)
		rstPwdTimer = 0;
 2007f68:	00810034 	movhi	r2,1024
 2007f6c:	10888404 	addi	r2,r2,8720
 2007f70:	10000005 	stb	zero,0(r2)
		while(keyFlag);
 2007f74:	0001883a 	nop
 2007f78:	00810034 	movhi	r2,1024
 2007f7c:	10889804 	addi	r2,r2,8800
 2007f80:	10800003 	ldbu	r2,0(r2)
 2007f84:	10803fcc 	andi	r2,r2,255
 2007f88:	103ffb1e 	bne	r2,zero,2007f78 <enterPWDPage+0x98>
		return 1;
 2007f8c:	00800044 	movi	r2,1
 2007f90:	00000106 	br	2007f98 <enterPWDPage+0xb8>
	}
	else
		return 0;
 2007f94:	0005883a 	mov	r2,zero
}
 2007f98:	e037883a 	mov	sp,fp
 2007f9c:	dfc00117 	ldw	ra,4(sp)
 2007fa0:	df000017 	ldw	fp,0(sp)
 2007fa4:	dec00204 	addi	sp,sp,8
 2007fa8:	f800283a 	ret

02007fac <entryParameterRepRate>:
#include "..\inc\loadWriteData.h"
#include "..\inc\errorCheck.h"
#include "..\inc\KPLED.h"

void entryParameterRepRate()
{
 2007fac:	defffd04 	addi	sp,sp,-12
 2007fb0:	dfc00215 	stw	ra,8(sp)
 2007fb4:	df000115 	stw	fp,4(sp)
 2007fb8:	df000104 	addi	fp,sp,4
	KPLED_All_Off();
 2007fbc:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Edit(3);
 2007fc0:	010000c4 	movi	r4,3
 2007fc4:	20011bc0 	call	20011bc <KPLED_Edit>
	KPLED_Menu(3);
 2007fc8:	010000c4 	movi	r4,3
 2007fcc:	20011340 	call	2001134 <KPLED_Menu>
	KPLED_Enable(1);
 2007fd0:	01000044 	movi	r4,1
 2007fd4:	20012cc0 	call	20012cc <KPLED_Enable>
	KPLED_RightArrow(3);
 2007fd8:	010000c4 	movi	r4,3
 2007fdc:	20010200 	call	2001020 <KPLED_RightArrow>

	DisClear();
 2007fe0:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 2007fe4:	0009883a 	mov	r4,zero
 2007fe8:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(1,1);
 2007fec:	01000044 	movi	r4,1
 2007ff0:	01400044 	movi	r5,1
 2007ff4:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Repetition Rate:");
 2007ff8:	01008074 	movhi	r4,513
 2007ffc:	211c5d04 	addi	r4,r4,29044
 2008000:	20006000 	call	2000600 <DisWrStr>

	unsigned int rep=LoadRAMRepRate();
 2008004:	2001a680 	call	2001a68 <LoadRAMRepRate>
 2008008:	e0bfff15 	stw	r2,-4(fp)
	DisCurPos(2,16);
 200800c:	01000084 	movi	r4,2
 2008010:	01400404 	movi	r5,16
 2008014:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(Num2toStr2(rep));
 2008018:	e13fff17 	ldw	r4,-4(fp)
 200801c:	20062640 	call	2006264 <Num2toStr2>
 2008020:	1009883a 	mov	r4,r2
 2008024:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(" Hz");
 2008028:	01008074 	movhi	r4,513
 200802c:	211c6204 	addi	r4,r4,29064
 2008030:	20006000 	call	2000600 <DisWrStr>

	DisCurPos(4,1);
 2008034:	01000104 	movi	r4,4
 2008038:	01400044 	movi	r5,1
 200803c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("        Edit   Next>");
 2008040:	01008074 	movhi	r4,513
 2008044:	211c6304 	addi	r4,r4,29068
 2008048:	20006000 	call	2000600 <DisWrStr>

	/*Timing Error Navigation*/
	if(chkRightTiming(-1))
 200804c:	013fffc4 	movi	r4,-1
 2008050:	2007e280 	call	2007e28 <chkRightTiming>
 2008054:	10803fcc 	andi	r2,r2,255
 2008058:	10000626 	beq	r2,zero,2008074 <entryParameterRepRate+0xc8>
	{
		DisCurPos(4,15);
 200805c:	01000104 	movi	r4,4
 2008060:	014003c4 	movi	r5,15
 2008064:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("*");
 2008068:	01008074 	movhi	r4,513
 200806c:	211c6904 	addi	r4,r4,29092
 2008070:	20006000 	call	2000600 <DisWrStr>
	}
}
 2008074:	e037883a 	mov	sp,fp
 2008078:	dfc00117 	ldw	ra,4(sp)
 200807c:	df000017 	ldw	fp,0(sp)
 2008080:	dec00204 	addi	sp,sp,8
 2008084:	f800283a 	ret

02008088 <editParameterRepRate>:

void editParameterRepRate()
{
 2008088:	defffc04 	addi	sp,sp,-16
 200808c:	dfc00315 	stw	ra,12(sp)
 2008090:	df000215 	stw	fp,8(sp)
 2008094:	df000204 	addi	fp,sp,8
	entryParameterRepRate();
 2008098:	2007fac0 	call	2007fac <entryParameterRepRate>
	unsigned int rep=LoadRAMRepRate();
 200809c:	2001a680 	call	2001a68 <LoadRAMRepRate>
 20080a0:	e0bffe15 	stw	r2,-8(fp)

	unsigned int rep_new;
	while(1)
	{
		rep_new = editNum2(rep,2,16);
 20080a4:	e13ffe17 	ldw	r4,-8(fp)
 20080a8:	01400084 	movi	r5,2
 20080ac:	01800404 	movi	r6,16
 20080b0:	20064500 	call	2006450 <editNum2>
 20080b4:	e0bfff15 	stw	r2,-4(fp)
		if(rep_new>=REP_RATE_MIN && rep_new<=REP_RATE_MAX)
 20080b8:	e0bfff17 	ldw	r2,-4(fp)
 20080bc:	10000326 	beq	r2,zero,20080cc <editParameterRepRate+0x44>
 20080c0:	e0bfff17 	ldw	r2,-4(fp)
 20080c4:	10800430 	cmpltui	r2,r2,16
 20080c8:	1000111e 	bne	r2,zero,2008110 <editParameterRepRate+0x88>
			break;
		else
		{
			DisShowCur(0);
 20080cc:	0009883a 	mov	r4,zero
 20080d0:	20004fc0 	call	20004fc <DisShowCur>
			DisCurPos(2,1);
 20080d4:	01000084 	movi	r4,2
 20080d8:	01400044 	movi	r5,1
 20080dc:	20005400 	call	2000540 <DisCurPos>
			DisWrStr("        ERR:OutOfRng");
 20080e0:	01008074 	movhi	r4,513
 20080e4:	211c6a04 	addi	r4,r4,29096
 20080e8:	20006000 	call	2000600 <DisWrStr>
			delay(MSG_DELAY);
 20080ec:	01271014 	movui	r4,40000
 20080f0:	20019dc0 	call	20019dc <delay>
			DisCurPos(2,1);
 20080f4:	01000084 	movi	r4,2
 20080f8:	01400044 	movi	r5,1
 20080fc:	20005400 	call	2000540 <DisCurPos>
			DisWrStr("                  Hz");
 2008100:	01008074 	movhi	r4,513
 2008104:	211c7004 	addi	r4,r4,29120
 2008108:	20006000 	call	2000600 <DisWrStr>
		}
	}
 200810c:	003fe506 	br	20080a4 <editParameterRepRate+0x1c>

	WriteRAMRepRate(rep_new);
 2008110:	e13fff17 	ldw	r4,-4(fp)
 2008114:	2001b980 	call	2001b98 <WriteRAMRepRate>
	entryParameterRepRate();
 2008118:	2007fac0 	call	2007fac <entryParameterRepRate>
	DisShowCur(0);
 200811c:	0009883a 	mov	r4,zero
 2008120:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(2,1);
 2008124:	01000084 	movi	r4,2
 2008128:	01400044 	movi	r5,1
 200812c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("         Checking...");
 2008130:	01008074 	movhi	r4,513
 2008134:	211c7604 	addi	r4,r4,29144
 2008138:	20006000 	call	2000600 <DisWrStr>
	refreshErrFlags();
 200813c:	2007bf80 	call	2007bf8 <refreshErrFlags>
	entryParameterRepRate();
 2008140:	2007fac0 	call	2007fac <entryParameterRepRate>
}
 2008144:	e037883a 	mov	sp,fp
 2008148:	dfc00117 	ldw	ra,4(sp)
 200814c:	df000017 	ldw	fp,0(sp)
 2008150:	dec00204 	addi	sp,sp,8
 2008154:	f800283a 	ret

02008158 <entryParameterNumOfShots>:
#include "..\inc\editNum5.h"
#include "..\inc\loadWriteData.h"
#include "..\inc\KPLED.h"

void entryParameterNumOfShots()
{
 2008158:	defffd04 	addi	sp,sp,-12
 200815c:	dfc00215 	stw	ra,8(sp)
 2008160:	df000115 	stw	fp,4(sp)
 2008164:	df000104 	addi	fp,sp,4
	KPLED_All_Off();
 2008168:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Edit(3);
 200816c:	010000c4 	movi	r4,3
 2008170:	20011bc0 	call	20011bc <KPLED_Edit>
	KPLED_Menu(3);
 2008174:	010000c4 	movi	r4,3
 2008178:	20011340 	call	2001134 <KPLED_Menu>
	KPLED_Enable(1);
 200817c:	01000044 	movi	r4,1
 2008180:	20012cc0 	call	20012cc <KPLED_Enable>
	KPLED_RightArrow(3);
 2008184:	010000c4 	movi	r4,3
 2008188:	20010200 	call	2001020 <KPLED_RightArrow>
	KPLED_LeftArrow(3);
 200818c:	010000c4 	movi	r4,3
 2008190:	20010ac0 	call	20010ac <KPLED_LeftArrow>

	DisClear();
 2008194:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 2008198:	0009883a 	mov	r4,zero
 200819c:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(1,1);
 20081a0:	01000044 	movi	r4,1
 20081a4:	01400044 	movi	r5,1
 20081a8:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("Number of Shots:");
 20081ac:	01008074 	movhi	r4,513
 20081b0:	211c7c04 	addi	r4,r4,29168
 20081b4:	20006000 	call	2000600 <DisWrStr>

	unsigned int shot=LoadRAMShots();
 20081b8:	2001a940 	call	2001a94 <LoadRAMShots>
 20081bc:	e0bfff15 	stw	r2,-4(fp)
	DisCurPos(2,10);
 20081c0:	01000084 	movi	r4,2
 20081c4:	01400284 	movi	r5,10
 20081c8:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(Num5toStr5(shot));
 20081cc:	e13fff17 	ldw	r4,-4(fp)
 20081d0:	20067980 	call	2006798 <Num5toStr5>
 20081d4:	1009883a 	mov	r4,r2
 20081d8:	20006000 	call	2000600 <DisWrStr>
	DisWrStr(" Shots");
 20081dc:	01008074 	movhi	r4,513
 20081e0:	211c8104 	addi	r4,r4,29188
 20081e4:	20006000 	call	2000600 <DisWrStr>

	DisCurPos(4,1);
 20081e8:	01000104 	movi	r4,4
 20081ec:	01400044 	movi	r5,1
 20081f0:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("<Prev   Edit   Next>");
 20081f4:	01008074 	movhi	r4,513
 20081f8:	211c8304 	addi	r4,r4,29196
 20081fc:	20006000 	call	2000600 <DisWrStr>

	/*Timing Error Navigation*/
	if(chkRightTiming(-1))
 2008200:	013fffc4 	movi	r4,-1
 2008204:	2007e280 	call	2007e28 <chkRightTiming>
 2008208:	10000626 	beq	r2,zero,2008224 <entryParameterNumOfShots+0xcc>
	{
		DisCurPos(4,15);
 200820c:	01000104 	movi	r4,4
 2008210:	014003c4 	movi	r5,15
 2008214:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("*");
 2008218:	01008074 	movhi	r4,513
 200821c:	211c8904 	addi	r4,r4,29220
 2008220:	20006000 	call	2000600 <DisWrStr>
	}
}
 2008224:	e037883a 	mov	sp,fp
 2008228:	dfc00117 	ldw	ra,4(sp)
 200822c:	df000017 	ldw	fp,0(sp)
 2008230:	dec00204 	addi	sp,sp,8
 2008234:	f800283a 	ret

02008238 <editParameterNumOfShot>:

void editParameterNumOfShot()
{
 2008238:	defffc04 	addi	sp,sp,-16
 200823c:	dfc00315 	stw	ra,12(sp)
 2008240:	df000215 	stw	fp,8(sp)
 2008244:	df000204 	addi	fp,sp,8
	entryParameterNumOfShots();
 2008248:	20081580 	call	2008158 <entryParameterNumOfShots>
	unsigned int shot=LoadRAMShots();
 200824c:	2001a940 	call	2001a94 <LoadRAMShots>
 2008250:	e0bffe15 	stw	r2,-8(fp)

	unsigned int shot_new;
	while(1)
	{
		shot_new = editNum5(shot,2,10);
 2008254:	e13ffe17 	ldw	r4,-8(fp)
 2008258:	01400084 	movi	r5,2
 200825c:	01800284 	movi	r6,10
 2008260:	2006ae40 	call	2006ae4 <editNum5>
 2008264:	e0bfff15 	stw	r2,-4(fp)
		if(shot_new>=SHOTS_MIN && shot_new<=SHOTS_MAX)
 2008268:	e0bfff17 	ldw	r2,-4(fp)
 200826c:	10000426 	beq	r2,zero,2008280 <editParameterNumOfShot+0x48>
 2008270:	e0bfff17 	ldw	r2,-4(fp)
 2008274:	00c000b4 	movhi	r3,2
 2008278:	18e1a7c4 	addi	r3,r3,-31073
 200827c:	1880112e 	bgeu	r3,r2,20082c4 <editParameterNumOfShot+0x8c>
			break;
		else
		{
			DisShowCur(0);
 2008280:	0009883a 	mov	r4,zero
 2008284:	20004fc0 	call	20004fc <DisShowCur>
			DisCurPos(2,1);
 2008288:	01000084 	movi	r4,2
 200828c:	01400044 	movi	r5,1
 2008290:	20005400 	call	2000540 <DisCurPos>
			DisWrStr("        ERR:OutOfRng");
 2008294:	01008074 	movhi	r4,513
 2008298:	211c8a04 	addi	r4,r4,29224
 200829c:	20006000 	call	2000600 <DisWrStr>
			delay(MSG_DELAY);
 20082a0:	01271014 	movui	r4,40000
 20082a4:	20019dc0 	call	20019dc <delay>
			DisCurPos(2,1);
 20082a8:	01000084 	movi	r4,2
 20082ac:	01400044 	movi	r5,1
 20082b0:	20005400 	call	2000540 <DisCurPos>
			DisWrStr("               Shots");
 20082b4:	01008074 	movhi	r4,513
 20082b8:	211c9004 	addi	r4,r4,29248
 20082bc:	20006000 	call	2000600 <DisWrStr>
		}
	}
 20082c0:	003fe406 	br	2008254 <editParameterNumOfShot+0x1c>
	WriteRAMShots(shot_new);
 20082c4:	e13fff17 	ldw	r4,-4(fp)
 20082c8:	2001bcc0 	call	2001bcc <WriteRAMShots>
	entryParameterNumOfShots();
 20082cc:	20081580 	call	2008158 <entryParameterNumOfShots>
}
 20082d0:	e037883a 	mov	sp,fp
 20082d4:	dfc00117 	ldw	ra,4(sp)
 20082d8:	df000017 	ldw	fp,0(sp)
 20082dc:	dec00204 	addi	sp,sp,8
 20082e0:	f800283a 	ret

020082e4 <convertChnlTitle>:

#include "..\inc\KPLED.h"


char* convertChnlTitle(unsigned char num)
{
 20082e4:	defffe04 	addi	sp,sp,-8
 20082e8:	df000115 	stw	fp,4(sp)
 20082ec:	df000104 	addi	fp,sp,4
 20082f0:	2005883a 	mov	r2,r4
 20082f4:	e0bfff05 	stb	r2,-4(fp)
	num = num % 10;
	num_str[1] = 0x30 + num;
	return num_str;
	*/

	switch(num)
 20082f8:	e0bfff03 	ldbu	r2,-4(fp)
 20082fc:	10c002a8 	cmpgeui	r3,r2,10
 2008300:	18002c1e 	bne	r3,zero,20083b4 <convertChnlTitle+0xd0>
 2008304:	1085883a 	add	r2,r2,r2
 2008308:	1087883a 	add	r3,r2,r2
 200830c:	00808074 	movhi	r2,513
 2008310:	10a0c804 	addi	r2,r2,-31968
 2008314:	1885883a 	add	r2,r3,r2
 2008318:	10800017 	ldw	r2,0(r2)
 200831c:	1000683a 	jmp	r2
 2008320:	020083b4 	movhi	r8,526
 2008324:	02008348 	cmpgei	r8,zero,525
 2008328:	02008354 	movui	r8,525
 200832c:	02008360 	cmpeqi	r8,zero,525
 2008330:	0200836c 	andhi	r8,zero,525
 2008334:	02008378 	rdprs	r8,zero,525
 2008338:	02008384 	movi	r8,526
 200833c:	02008390 	cmplti	r8,zero,526
 2008340:	0200839c 	xori	r8,zero,526
 2008344:	020083a8 	cmpgeui	r8,zero,526
	{
		case 1: return "01.LHV";
 2008348:	00808074 	movhi	r2,513
 200834c:	109c9604 	addi	r2,r2,29272
 2008350:	00001a06 	br	20083bc <convertChnlTitle+0xd8>
		case 2: return "02.HV";
 2008354:	00808074 	movhi	r2,513
 2008358:	109c9804 	addi	r2,r2,29280
 200835c:	00001706 	br	20083bc <convertChnlTitle+0xd8>
		case 3: return "03.RF Preion";
 2008360:	00808074 	movhi	r2,513
 2008364:	109c9a04 	addi	r2,r2,29288
 2008368:	00001406 	br	20083bc <convertChnlTitle+0xd8>
		case 4: return "04.DC Preion Trig.";
 200836c:	00808074 	movhi	r2,513
 2008370:	109c9e04 	addi	r2,r2,29304
 2008374:	00001106 	br	20083bc <convertChnlTitle+0xd8>
		case 5: return "05.Thy Trig.";
 2008378:	00808074 	movhi	r2,513
 200837c:	109ca304 	addi	r2,r2,29324
 2008380:	00000e06 	br	20083bc <convertChnlTitle+0xd8>
		case 6: return "06.Aux1";
 2008384:	00808074 	movhi	r2,513
 2008388:	109ca704 	addi	r2,r2,29340
 200838c:	00000b06 	br	20083bc <convertChnlTitle+0xd8>
		case 7: return "07.Aux2";
 2008390:	00808074 	movhi	r2,513
 2008394:	109ca904 	addi	r2,r2,29348
 2008398:	00000806 	br	20083bc <convertChnlTitle+0xd8>
		case 8: return "08.RF CW";
 200839c:	00808074 	movhi	r2,513
 20083a0:	109cab04 	addi	r2,r2,29356
 20083a4:	00000506 	br	20083bc <convertChnlTitle+0xd8>
		case 9: return "09.Aux4";
 20083a8:	00808074 	movhi	r2,513
 20083ac:	109cae04 	addi	r2,r2,29368
 20083b0:	00000206 	br	20083bc <convertChnlTitle+0xd8>
	}
	return "";
 20083b4:	00808074 	movhi	r2,513
 20083b8:	109cb004 	addi	r2,r2,29376
}
 20083bc:	e037883a 	mov	sp,fp
 20083c0:	df000017 	ldw	fp,0(sp)
 20083c4:	dec00104 	addi	sp,sp,4
 20083c8:	f800283a 	ret

020083cc <entryParameterTiming>:


void entryParameterTiming(unsigned char chnl)
{
 20083cc:	defffb04 	addi	sp,sp,-20
 20083d0:	dfc00415 	stw	ra,16(sp)
 20083d4:	df000315 	stw	fp,12(sp)
 20083d8:	df000304 	addi	fp,sp,12
 20083dc:	2005883a 	mov	r2,r4
 20083e0:	e0bfff05 	stb	r2,-4(fp)
	KPLED_All_Off();
 20083e4:	2000f400 	call	2000f40 <KPLED_All_Off>
	KPLED_Edit(3);
 20083e8:	010000c4 	movi	r4,3
 20083ec:	20011bc0 	call	20011bc <KPLED_Edit>
	KPLED_Menu(3);
 20083f0:	010000c4 	movi	r4,3
 20083f4:	20011340 	call	2001134 <KPLED_Menu>
	KPLED_Enable(1);
 20083f8:	01000044 	movi	r4,1
 20083fc:	20012cc0 	call	20012cc <KPLED_Enable>
	if(chnl == CHNL_NUM)
 2008400:	e0bfff03 	ldbu	r2,-4(fp)
 2008404:	10800258 	cmpnei	r2,r2,9
 2008408:	1000031e 	bne	r2,zero,2008418 <entryParameterTiming+0x4c>
		KPLED_LeftArrow(3);
 200840c:	010000c4 	movi	r4,3
 2008410:	20010ac0 	call	20010ac <KPLED_LeftArrow>
 2008414:	00000406 	br	2008428 <entryParameterTiming+0x5c>
	else
	{
		KPLED_RightArrow(3);
 2008418:	010000c4 	movi	r4,3
 200841c:	20010200 	call	2001020 <KPLED_RightArrow>
		KPLED_LeftArrow(3);
 2008420:	010000c4 	movi	r4,3
 2008424:	20010ac0 	call	20010ac <KPLED_LeftArrow>
	}

	/*Print Title*/
	DisClear();
 2008428:	20006780 	call	2000678 <DisClear>
	DisShowCur(0);
 200842c:	0009883a 	mov	r4,zero
 2008430:	20004fc0 	call	20004fc <DisShowCur>
	DisCurPos(1,1);
 2008434:	01000044 	movi	r4,1
 2008438:	01400044 	movi	r5,1
 200843c:	20005400 	call	2000540 <DisCurPos>
	//DisWrStr("Channel ");
	DisWrStr(convertChnlTitle(chnl));
 2008440:	e0bfff03 	ldbu	r2,-4(fp)
 2008444:	1009883a 	mov	r4,r2
 2008448:	20082e40 	call	20082e4 <convertChnlTitle>
 200844c:	1009883a 	mov	r4,r2
 2008450:	20006000 	call	2000600 <DisWrStr>
	//DisWrStr(" Timing");

	DisCurPos(2,1);
 2008454:	01000084 	movi	r4,2
 2008458:	01400044 	movi	r5,1
 200845c:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("START:");
 2008460:	01008074 	movhi	r4,513
 2008464:	211cb104 	addi	r4,r4,29380
 2008468:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(3,1);
 200846c:	010000c4 	movi	r4,3
 2008470:	01400044 	movi	r5,1
 2008474:	20005400 	call	2000540 <DisCurPos>
	DisWrStr("STOP:");
 2008478:	01008074 	movhi	r4,513
 200847c:	211cb304 	addi	r4,r4,29388
 2008480:	20006000 	call	2000600 <DisWrStr>

	/*Print Data*/
	unsigned int start = LoadRAMStartTime(chnl);
 2008484:	e0bfff03 	ldbu	r2,-4(fp)
 2008488:	1009883a 	mov	r4,r2
 200848c:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 2008490:	e0bffd15 	stw	r2,-12(fp)
	unsigned int end = LoadRAMEndTime(chnl);
 2008494:	e0bfff03 	ldbu	r2,-4(fp)
 2008498:	1009883a 	mov	r4,r2
 200849c:	2001b000 	call	2001b00 <LoadRAMEndTime>
 20084a0:	e0bffe15 	stw	r2,-8(fp)

	DisCurPos(2,8);
 20084a4:	01000084 	movi	r4,2
 20084a8:	01400204 	movi	r5,8
 20084ac:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(Str10toDis10(Num10toStr10(start)));
 20084b0:	e13ffd17 	ldw	r4,-12(fp)
 20084b4:	20054500 	call	2005450 <Num10toStr10>
 20084b8:	1009883a 	mov	r4,r2
 20084bc:	20056a00 	call	20056a0 <Str10toDis10>
 20084c0:	1009883a 	mov	r4,r2
 20084c4:	20006000 	call	2000600 <DisWrStr>
	DisCurPos(3,8);
 20084c8:	010000c4 	movi	r4,3
 20084cc:	01400204 	movi	r5,8
 20084d0:	20005400 	call	2000540 <DisCurPos>
	DisWrStr(Str10toDis10(Num10toStr10(end)));
 20084d4:	e13ffe17 	ldw	r4,-8(fp)
 20084d8:	20054500 	call	2005450 <Num10toStr10>
 20084dc:	1009883a 	mov	r4,r2
 20084e0:	20056a00 	call	20056a0 <Str10toDis10>
 20084e4:	1009883a 	mov	r4,r2
 20084e8:	20006000 	call	2000600 <DisWrStr>



	/*Available Button*/
	DisCurPos(4,1);
 20084ec:	01000104 	movi	r4,4
 20084f0:	01400044 	movi	r5,1
 20084f4:	20005400 	call	2000540 <DisCurPos>
	if(chnl==CHNL_NUM)
 20084f8:	e0bfff03 	ldbu	r2,-4(fp)
 20084fc:	10800258 	cmpnei	r2,r2,9
 2008500:	1000041e 	bne	r2,zero,2008514 <entryParameterTiming+0x148>
		DisWrStr("<Prev   Edit        ");
 2008504:	01008074 	movhi	r4,513
 2008508:	211cb504 	addi	r4,r4,29396
 200850c:	20006000 	call	2000600 <DisWrStr>
 2008510:	00000306 	br	2008520 <entryParameterTiming+0x154>
	else
		DisWrStr("<Prev   Edit   Next>");
 2008514:	01008074 	movhi	r4,513
 2008518:	211cbb04 	addi	r4,r4,29420
 200851c:	20006000 	call	2000600 <DisWrStr>

	/*Error Check*/
	//Current Channel
	if(getErrFlag(chnl, 0))
 2008520:	e0bfff03 	ldbu	r2,-4(fp)
 2008524:	1009883a 	mov	r4,r2
 2008528:	000b883a 	mov	r5,zero
 200852c:	20074600 	call	2007460 <getErrFlag>
 2008530:	10803fcc 	andi	r2,r2,255
 2008534:	10000626 	beq	r2,zero,2008550 <entryParameterTiming+0x184>
	{
		DisCurPos(2,7);
 2008538:	01000084 	movi	r4,2
 200853c:	014001c4 	movi	r5,7
 2008540:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("*");
 2008544:	01008074 	movhi	r4,513
 2008548:	211cc104 	addi	r4,r4,29444
 200854c:	20006000 	call	2000600 <DisWrStr>
	}
	if(getErrFlag(chnl, 1))
 2008550:	e0bfff03 	ldbu	r2,-4(fp)
 2008554:	1009883a 	mov	r4,r2
 2008558:	01400044 	movi	r5,1
 200855c:	20074600 	call	2007460 <getErrFlag>
 2008560:	10803fcc 	andi	r2,r2,255
 2008564:	10000626 	beq	r2,zero,2008580 <entryParameterTiming+0x1b4>
	{
		DisCurPos(3,7);
 2008568:	010000c4 	movi	r4,3
 200856c:	014001c4 	movi	r5,7
 2008570:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("*");
 2008574:	01008074 	movhi	r4,513
 2008578:	211cc104 	addi	r4,r4,29444
 200857c:	20006000 	call	2000600 <DisWrStr>
	}

	/*Timing Error Navigation*/
	//See also ParameterMenu.c --> refreshParameterMenuPage
	if(chkLeftTiming(chnl))
 2008580:	e0bfff03 	ldbu	r2,-4(fp)
 2008584:	10803fcc 	andi	r2,r2,255
 2008588:	1080201c 	xori	r2,r2,128
 200858c:	10bfe004 	addi	r2,r2,-128
 2008590:	1009883a 	mov	r4,r2
 2008594:	2007d7c0 	call	2007d7c <chkLeftTiming>
 2008598:	10803fcc 	andi	r2,r2,255
 200859c:	10000626 	beq	r2,zero,20085b8 <entryParameterTiming+0x1ec>
	{
		DisCurPos(4,6);
 20085a0:	01000104 	movi	r4,4
 20085a4:	01400184 	movi	r5,6
 20085a8:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("*");
 20085ac:	01008074 	movhi	r4,513
 20085b0:	211cc104 	addi	r4,r4,29444
 20085b4:	20006000 	call	2000600 <DisWrStr>
	}
	if(chkRightTiming(chnl))
 20085b8:	e0bfff03 	ldbu	r2,-4(fp)
 20085bc:	10803fcc 	andi	r2,r2,255
 20085c0:	1080201c 	xori	r2,r2,128
 20085c4:	10bfe004 	addi	r2,r2,-128
 20085c8:	1009883a 	mov	r4,r2
 20085cc:	2007e280 	call	2007e28 <chkRightTiming>
 20085d0:	10803fcc 	andi	r2,r2,255
 20085d4:	10000626 	beq	r2,zero,20085f0 <entryParameterTiming+0x224>
	{
		DisCurPos(4,15);
 20085d8:	01000104 	movi	r4,4
 20085dc:	014003c4 	movi	r5,15
 20085e0:	20005400 	call	2000540 <DisCurPos>
		DisWrStr("*");
 20085e4:	01008074 	movhi	r4,513
 20085e8:	211cc104 	addi	r4,r4,29444
 20085ec:	20006000 	call	2000600 <DisWrStr>
	}

}
 20085f0:	e037883a 	mov	sp,fp
 20085f4:	dfc00117 	ldw	ra,4(sp)
 20085f8:	df000017 	ldw	fp,0(sp)
 20085fc:	dec00204 	addi	sp,sp,8
 2008600:	f800283a 	ret

02008604 <editParamterTiming>:



void editParamterTiming(unsigned char chnl)
{
 2008604:	defff404 	addi	sp,sp,-48
 2008608:	dfc00b15 	stw	ra,44(sp)
 200860c:	df000a15 	stw	fp,40(sp)
 2008610:	dc000915 	stw	r16,36(sp)
 2008614:	df000904 	addi	fp,sp,36
 2008618:	2005883a 	mov	r2,r4
 200861c:	e0bfff05 	stb	r2,-4(fp)
	if(enterPWDPage())
 2008620:	2007ee00 	call	2007ee0 <enterPWDPage>
 2008624:	10015726 	beq	r2,zero,2008b84 <editParamterTiming+0x580>
	{
		entryParameterTiming(chnl);
 2008628:	e0bfff03 	ldbu	r2,-4(fp)
 200862c:	1009883a 	mov	r4,r2
 2008630:	20083cc0 	call	20083cc <entryParameterTiming>
		unsigned int start = LoadRAMStartTime(chnl);
 2008634:	e0bfff03 	ldbu	r2,-4(fp)
 2008638:	1009883a 	mov	r4,r2
 200863c:	2001ac00 	call	2001ac0 <LoadRAMStartTime>
 2008640:	e0bff815 	stw	r2,-32(fp)
		unsigned int end = LoadRAMEndTime(chnl);
 2008644:	e0bfff03 	ldbu	r2,-4(fp)
 2008648:	1009883a 	mov	r4,r2
 200864c:	2001b000 	call	2001b00 <LoadRAMEndTime>
 2008650:	e0bff915 	stw	r2,-28(fp)
        if(chnl==2||chnl==8||chnl==1||chnl==5){
 2008654:	e0bfff03 	ldbu	r2,-4(fp)
 2008658:	108000a0 	cmpeqi	r2,r2,2
 200865c:	1000091e 	bne	r2,zero,2008684 <editParamterTiming+0x80>
 2008660:	e0bfff03 	ldbu	r2,-4(fp)
 2008664:	10800220 	cmpeqi	r2,r2,8
 2008668:	1000061e 	bne	r2,zero,2008684 <editParamterTiming+0x80>
 200866c:	e0bfff03 	ldbu	r2,-4(fp)
 2008670:	10800060 	cmpeqi	r2,r2,1
 2008674:	1000031e 	bne	r2,zero,2008684 <editParamterTiming+0x80>
 2008678:	e0bfff03 	ldbu	r2,-4(fp)
 200867c:	10800158 	cmpnei	r2,r2,5
 2008680:	1000481e 	bne	r2,zero,20087a4 <editParamterTiming+0x1a0>
        		DisClear();
 2008684:	20006780 	call	2000678 <DisClear>
        		DisCurPos(1,1);
 2008688:	01000044 	movi	r4,1
 200868c:	01400044 	movi	r5,1
 2008690:	20005400 	call	2000540 <DisCurPos>
        	    DisWrStr("Locked Parameter");
 2008694:	01008074 	movhi	r4,513
 2008698:	211cc204 	addi	r4,r4,29448
 200869c:	20006000 	call	2000600 <DisWrStr>
        	    DisCurPos(2,1);
 20086a0:	01000084 	movi	r4,2
 20086a4:	01400044 	movi	r5,1
 20086a8:	20005400 	call	2000540 <DisCurPos>
        	    if(chnl==2){
 20086ac:	e0bfff03 	ldbu	r2,-4(fp)
 20086b0:	10800098 	cmpnei	r2,r2,2
 20086b4:	10000b1e 	bne	r2,zero,20086e4 <editParamterTiming+0xe0>
        	    	DisWrStr("You can adjust by ad");
 20086b8:	01008074 	movhi	r4,513
 20086bc:	211cc704 	addi	r4,r4,29468
 20086c0:	20006000 	call	2000600 <DisWrStr>
        	    	DisCurPos(3,1);
 20086c4:	010000c4 	movi	r4,3
 20086c8:	01400044 	movi	r5,1
 20086cc:	20005400 	call	2000540 <DisCurPos>
		            DisWrStr("justing Thy Trig");
 20086d0:	01008074 	movhi	r4,513
 20086d4:	211ccd04 	addi	r4,r4,29492
 20086d8:	20006000 	call	2000600 <DisWrStr>
		            KPLED_All_Off();
 20086dc:	2000f400 	call	2000f40 <KPLED_All_Off>
 20086e0:	00002906 	br	2008788 <editParamterTiming+0x184>
        	    }
        	    else if(chnl==1){
 20086e4:	e0bfff03 	ldbu	r2,-4(fp)
 20086e8:	10800058 	cmpnei	r2,r2,1
 20086ec:	10000b1e 	bne	r2,zero,200871c <editParamterTiming+0x118>
        	    	DisWrStr("You can adjust by ad");
 20086f0:	01008074 	movhi	r4,513
 20086f4:	211cc704 	addi	r4,r4,29468
 20086f8:	20006000 	call	2000600 <DisWrStr>
        	    	DisCurPos(3,1);
 20086fc:	010000c4 	movi	r4,3
 2008700:	01400044 	movi	r5,1
 2008704:	20005400 	call	2000540 <DisCurPos>
        	    	DisWrStr("justing DC Preion");
 2008708:	01008074 	movhi	r4,513
 200870c:	211cd204 	addi	r4,r4,29512
 2008710:	20006000 	call	2000600 <DisWrStr>
        	    	KPLED_All_Off();
 2008714:	2000f400 	call	2000f40 <KPLED_All_Off>
 2008718:	00001b06 	br	2008788 <editParamterTiming+0x184>
        	    }
        	    else if(chnl==8){
 200871c:	e0bfff03 	ldbu	r2,-4(fp)
 2008720:	10800218 	cmpnei	r2,r2,8
 2008724:	10000b1e 	bne	r2,zero,2008754 <editParamterTiming+0x150>
        	        DisWrStr("You can adjust by ad");
 2008728:	01008074 	movhi	r4,513
 200872c:	211cc704 	addi	r4,r4,29468
 2008730:	20006000 	call	2000600 <DisWrStr>
        	        DisCurPos(3,1);
 2008734:	010000c4 	movi	r4,3
 2008738:	01400044 	movi	r5,1
 200873c:	20005400 	call	2000540 <DisCurPos>
        	        DisWrStr("justing RF Preion");
 2008740:	01008074 	movhi	r4,513
 2008744:	211cd704 	addi	r4,r4,29532
 2008748:	20006000 	call	2000600 <DisWrStr>
        	        KPLED_All_Off();
 200874c:	2000f400 	call	2000f40 <KPLED_All_Off>
 2008750:	00000d06 	br	2008788 <editParamterTiming+0x184>
        	    }
        	    else if(chnl==5){
 2008754:	e0bfff03 	ldbu	r2,-4(fp)
 2008758:	10800158 	cmpnei	r2,r2,5
 200875c:	10000a1e 	bne	r2,zero,2008788 <editParamterTiming+0x184>
        	        DisWrStr("You can adjust by ad");
 2008760:	01008074 	movhi	r4,513
 2008764:	211cc704 	addi	r4,r4,29468
 2008768:	20006000 	call	2000600 <DisWrStr>
        	        DisCurPos(3,1);
 200876c:	010000c4 	movi	r4,3
 2008770:	01400044 	movi	r5,1
 2008774:	20005400 	call	2000540 <DisCurPos>
        	        DisWrStr("justing RF Preion");
 2008778:	01008074 	movhi	r4,513
 200877c:	211cd704 	addi	r4,r4,29532
 2008780:	20006000 	call	2000600 <DisWrStr>
        	        KPLED_All_Off();
 2008784:	2000f400 	call	2000f40 <KPLED_All_Off>
        	    }
        	    delay(100000);
 2008788:	010000b4 	movhi	r4,2
 200878c:	2121a804 	addi	r4,r4,-31072
 2008790:	20019dc0 	call	20019dc <delay>
        	    entryParameterTiming(chnl);
 2008794:	e0bfff03 	ldbu	r2,-4(fp)
 2008798:	1009883a 	mov	r4,r2
 200879c:	20083cc0 	call	20083cc <entryParameterTiming>
        	    return;
 20087a0:	0000fb06 	br	2008b90 <editParamterTiming+0x58c>
        }
		/*Edit Start Time*/
        if(chnl==3||chnl==4){
 20087a4:	e0bfff03 	ldbu	r2,-4(fp)
 20087a8:	108000e0 	cmpeqi	r2,r2,3
 20087ac:	1000031e 	bne	r2,zero,20087bc <editParamterTiming+0x1b8>
 20087b0:	e0bfff03 	ldbu	r2,-4(fp)
 20087b4:	10800118 	cmpnei	r2,r2,4
 20087b8:	1000d51e 	bne	r2,zero,2008b10 <editParamterTiming+0x50c>
        	if (chnl==3){
 20087bc:	e0bfff03 	ldbu	r2,-4(fp)
 20087c0:	108000d8 	cmpnei	r2,r2,3
 20087c4:	1000141e 	bne	r2,zero,2008818 <editParamterTiming+0x214>
        		DisClear();
 20087c8:	20006780 	call	2000678 <DisClear>
        		DisCurPos(1,1);
 20087cc:	01000044 	movi	r4,1
 20087d0:	01400044 	movi	r5,1
 20087d4:	20005400 	call	2000540 <DisCurPos>
        		DisWrStr("Starttime of RF must");                      //Display instruction for user when they want to make change
 20087d8:	01008074 	movhi	r4,513
 20087dc:	211cdc04 	addi	r4,r4,29552
 20087e0:	20006000 	call	2000600 <DisWrStr>
        		DisCurPos(2,1);                                        // to RF preion time or DC preion time.
 20087e4:	01000084 	movi	r4,2
 20087e8:	01400044 	movi	r5,1
 20087ec:	20005400 	call	2000540 <DisCurPos>
        		DisWrStr("be greater than ");
 20087f0:	01008074 	movhi	r4,513
 20087f4:	211ce204 	addi	r4,r4,29576
 20087f8:	20006000 	call	2000600 <DisWrStr>
        		DisCurPos(3,1);
 20087fc:	010000c4 	movi	r4,3
 2008800:	01400044 	movi	r5,1
 2008804:	20005400 	call	2000540 <DisCurPos>
        		DisWrStr("39009 us.");
 2008808:	01008074 	movhi	r4,513
 200880c:	211ce704 	addi	r4,r4,29596
 2008810:	20006000 	call	2000600 <DisWrStr>
        		KPLED_All_Off();
 2008814:	2000f400 	call	2000f40 <KPLED_All_Off>
        	}
        	if (chnl==4){
 2008818:	e0bfff03 	ldbu	r2,-4(fp)
 200881c:	10800118 	cmpnei	r2,r2,4
 2008820:	1000441e 	bne	r2,zero,2008934 <editParamterTiming+0x330>
        		unsigned int RF_Start=LoadRAMEndTime(3);
 2008824:	010000c4 	movi	r4,3
 2008828:	2001b000 	call	2001b00 <LoadRAMEndTime>
 200882c:	e0bffa15 	stw	r2,-24(fp)
        		char upperlimit[6];
        		char lowerlimit[6];
        		RF_Start/=100;
 2008830:	e0bffa17 	ldw	r2,-24(fp)
 2008834:	1009883a 	mov	r4,r2
 2008838:	01401904 	movi	r5,100
 200883c:	20093a80 	call	20093a8 <__udivsi3>
 2008840:	e0bffa15 	stw	r2,-24(fp)
        	    sprintf(upperlimit,"%d",RF_Start-9);
 2008844:	e0bffa17 	ldw	r2,-24(fp)
 2008848:	10bffdc4 	addi	r2,r2,-9
 200884c:	e0fffc04 	addi	r3,fp,-16
 2008850:	1809883a 	mov	r4,r3
 2008854:	01408074 	movhi	r5,513
 2008858:	295cea04 	addi	r5,r5,29608
 200885c:	100d883a 	mov	r6,r2
 2008860:	2009a640 	call	2009a64 <sprintf>
        	    sprintf(lowerlimit,"%d",RF_Start-1);
 2008864:	e0bffa17 	ldw	r2,-24(fp)
 2008868:	10bfffc4 	addi	r2,r2,-1
 200886c:	e0fffd84 	addi	r3,fp,-10
 2008870:	1809883a 	mov	r4,r3
 2008874:	01408074 	movhi	r5,513
 2008878:	295cea04 	addi	r5,r5,29608
 200887c:	100d883a 	mov	r6,r2
 2008880:	2009a640 	call	2009a64 <sprintf>
        	    DisClear();
 2008884:	20006780 	call	2000678 <DisClear>
        	    DisCurPos(1,1);
 2008888:	01000044 	movi	r4,1
 200888c:	01400044 	movi	r5,1
 2008890:	20005400 	call	2000540 <DisCurPos>
        	    DisWrStr("Starttime of DC is ");
 2008894:	01008074 	movhi	r4,513
 2008898:	211ceb04 	addi	r4,r4,29612
 200889c:	20006000 	call	2000600 <DisWrStr>
        	    DisCurPos(2,1);
 20088a0:	01000084 	movi	r4,2
 20088a4:	01400044 	movi	r5,1
 20088a8:	20005400 	call	2000540 <DisCurPos>
        	    DisWrStr("in range of ");
 20088ac:	01008074 	movhi	r4,513
 20088b0:	211cf004 	addi	r4,r4,29632
 20088b4:	20006000 	call	2000600 <DisWrStr>
        	    DisCurPos(2,13);
 20088b8:	01000084 	movi	r4,2
 20088bc:	01400344 	movi	r5,13
 20088c0:	20005400 	call	2000540 <DisCurPos>
        	    DisWrStr(upperlimit);
 20088c4:	e0bffc04 	addi	r2,fp,-16
 20088c8:	1009883a 	mov	r4,r2
 20088cc:	20006000 	call	2000600 <DisWrStr>
        	    DisCurPos(3,1);
 20088d0:	010000c4 	movi	r4,3
 20088d4:	01400044 	movi	r5,1
 20088d8:	20005400 	call	2000540 <DisCurPos>
        	    DisWrStr(" us");
 20088dc:	01008074 	movhi	r4,513
 20088e0:	211cf404 	addi	r4,r4,29648
 20088e4:	20006000 	call	2000600 <DisWrStr>
        	    DisCurPos(3,5);
 20088e8:	010000c4 	movi	r4,3
 20088ec:	01400144 	movi	r5,5
 20088f0:	20005400 	call	2000540 <DisCurPos>
        	    DisWrStr("to ");
 20088f4:	01008074 	movhi	r4,513
 20088f8:	211cf504 	addi	r4,r4,29652
 20088fc:	20006000 	call	2000600 <DisWrStr>
        	    DisCurPos(3,7);
 2008900:	010000c4 	movi	r4,3
 2008904:	014001c4 	movi	r5,7
 2008908:	20005400 	call	2000540 <DisCurPos>
        	    DisWrStr(lowerlimit);
 200890c:	e0bffd84 	addi	r2,fp,-10
 2008910:	1009883a 	mov	r4,r2
 2008914:	20006000 	call	2000600 <DisWrStr>
        	    DisCurPos(3,12);
 2008918:	010000c4 	movi	r4,3
 200891c:	01400304 	movi	r5,12
 2008920:	20005400 	call	2000540 <DisCurPos>
        	    DisWrStr(" us.");
 2008924:	01008074 	movhi	r4,513
 2008928:	211cf604 	addi	r4,r4,29656
 200892c:	20006000 	call	2000600 <DisWrStr>
        	    KPLED_All_Off();
 2008930:	2000f400 	call	2000f40 <KPLED_All_Off>
        	        	}
        	delay(100000);
 2008934:	010000b4 	movhi	r4,2
 2008938:	2121a804 	addi	r4,r4,-31072
 200893c:	20019dc0 	call	20019dc <delay>
        	entryParameterTiming(chnl);
 2008940:	e0bfff03 	ldbu	r2,-4(fp)
 2008944:	1009883a 	mov	r4,r2
 2008948:	20083cc0 	call	20083cc <entryParameterTiming>
        	unsigned int StartTime=editNum10(chnl,0,start,2,8);
 200894c:	e0bfff03 	ldbu	r2,-4(fp)
 2008950:	00c00204 	movi	r3,8
 2008954:	d8c00015 	stw	r3,0(sp)
 2008958:	1009883a 	mov	r4,r2
 200895c:	000b883a 	mov	r5,zero
 2008960:	e1bff817 	ldw	r6,-32(fp)
 2008964:	01c00084 	movi	r7,2
 2008968:	2005e000 	call	2005e00 <editNum10>
 200896c:	e0bffb15 	stw	r2,-20(fp)
        	if(chnl==3){
 2008970:	e0bfff03 	ldbu	r2,-4(fp)
 2008974:	108000d8 	cmpnei	r2,r2,3
 2008978:	10003b1e 	bne	r2,zero,2008a68 <editParamterTiming+0x464>
        		WriteRAMStartTime(8,StartTime-900000);             //adjust Chnl8(RF CW) automatically when RF preion changes
 200897c:	e0fffb17 	ldw	r3,-20(fp)
 2008980:	00bffcb4 	movhi	r2,65522
 2008984:	10911804 	addi	r2,r2,17504
 2008988:	1885883a 	add	r2,r3,r2
 200898c:	01000204 	movi	r4,8
 2008990:	100b883a 	mov	r5,r2
 2008994:	2001c000 	call	2001c00 <WriteRAMStartTime>
        		WriteRAMEndTime(8,StartTime+100000);               //It will triggered 9ms before RF preion boost signal  and end 10ms after.
 2008998:	e0fffb17 	ldw	r3,-20(fp)
 200899c:	008000b4 	movhi	r2,2
 20089a0:	10a1a804 	addi	r2,r2,-31072
 20089a4:	1885883a 	add	r2,r3,r2
 20089a8:	01000204 	movi	r4,8
 20089ac:	100b883a 	mov	r5,r2
 20089b0:	2001c4c0 	call	2001c4c <WriteRAMEndTime>
        		WriteRAMStartTime(chnl,StartTime);
 20089b4:	e0bfff03 	ldbu	r2,-4(fp)
 20089b8:	1009883a 	mov	r4,r2
 20089bc:	e17ffb17 	ldw	r5,-20(fp)
 20089c0:	2001c000 	call	2001c00 <WriteRAMStartTime>
        		WriteRAMEndTime(chnl,StartTime+100000);            //Endtime of RF Boost will be adjusted as 1ms after starttime.
 20089c4:	e0ffff03 	ldbu	r3,-4(fp)
 20089c8:	e13ffb17 	ldw	r4,-20(fp)
 20089cc:	008000b4 	movhi	r2,2
 20089d0:	10a1a804 	addi	r2,r2,-31072
 20089d4:	2085883a 	add	r2,r4,r2
 20089d8:	1809883a 	mov	r4,r3
 20089dc:	100b883a 	mov	r5,r2
 20089e0:	2001c4c0 	call	2001c4c <WriteRAMEndTime>
        		WriteRAMStartTime(5,StartTime+100100);             //adjust Chnl5(Main Trigger) automatically when RF preion changes
 20089e4:	e0fffb17 	ldw	r3,-20(fp)
 20089e8:	008000b4 	movhi	r2,2
 20089ec:	10a1c104 	addi	r2,r2,-30972
 20089f0:	1885883a 	add	r2,r3,r2
 20089f4:	01000144 	movi	r4,5
 20089f8:	100b883a 	mov	r5,r2
 20089fc:	2001c000 	call	2001c00 <WriteRAMStartTime>
        		WriteRAMEndTime(5,StartTime+100200);
 2008a00:	e0fffb17 	ldw	r3,-20(fp)
 2008a04:	008000b4 	movhi	r2,2
 2008a08:	10a1da04 	addi	r2,r2,-30872
 2008a0c:	1885883a 	add	r2,r3,r2
 2008a10:	01000144 	movi	r4,5
 2008a14:	100b883a 	mov	r5,r2
 2008a18:	2001c4c0 	call	2001c4c <WriteRAMEndTime>
        	    WriteRAMStartTime(2,StartTime-1700900);            //adjust HV automatically  when RF preion changes
 2008a1c:	e0fffb17 	ldw	r3,-20(fp)
 2008a20:	00bff9b4 	movhi	r2,65510
 2008a24:	1082f704 	addi	r2,r2,3036
 2008a28:	1885883a 	add	r2,r3,r2
 2008a2c:	01000084 	movi	r4,2
 2008a30:	100b883a 	mov	r5,r2
 2008a34:	2001c000 	call	2001c00 <WriteRAMStartTime>
        	    WriteRAMEndTime(2,StartTime+99100);
 2008a38:	e0fffb17 	ldw	r3,-20(fp)
 2008a3c:	008000b4 	movhi	r2,2
 2008a40:	10a0c704 	addi	r2,r2,-31972
 2008a44:	1885883a 	add	r2,r3,r2
 2008a48:	01000084 	movi	r4,2
 2008a4c:	100b883a 	mov	r5,r2
 2008a50:	2001c4c0 	call	2001c4c <WriteRAMEndTime>
        	    refreshErrFlags();
 2008a54:	2007bf80 	call	2007bf8 <refreshErrFlags>
        	    entryParameterTiming(chnl);
 2008a58:	e0bfff03 	ldbu	r2,-4(fp)
 2008a5c:	1009883a 	mov	r4,r2
 2008a60:	20083cc0 	call	20083cc <entryParameterTiming>
        		return;
 2008a64:	00004a06 	br	2008b90 <editParamterTiming+0x58c>
        	}
        	if(chnl==4){
 2008a68:	e0bfff03 	ldbu	r2,-4(fp)
 2008a6c:	10800118 	cmpnei	r2,r2,4
 2008a70:	1000121e 	bne	r2,zero,2008abc <editParamterTiming+0x4b8>
        		WriteRAMStartTime(1,StartTime-4000000);             //adjust LHV automatically when DC preion changes
 2008a74:	e0fffb17 	ldw	r3,-20(fp)
 2008a78:	00bff0f4 	movhi	r2,65475
 2008a7c:	10bdc004 	addi	r2,r2,-2304
 2008a80:	1885883a 	add	r2,r3,r2
 2008a84:	01000044 	movi	r4,1
 2008a88:	100b883a 	mov	r5,r2
 2008a8c:	2001c000 	call	2001c00 <WriteRAMStartTime>
        		WriteRAMEndTime(1,StartTime-100000);
 2008a90:	e0fffb17 	ldw	r3,-20(fp)
 2008a94:	00bfffb4 	movhi	r2,65534
 2008a98:	109e5804 	addi	r2,r2,31072
 2008a9c:	1885883a 	add	r2,r3,r2
 2008aa0:	01000044 	movi	r4,1
 2008aa4:	100b883a 	mov	r5,r2
 2008aa8:	2001c4c0 	call	2001c4c <WriteRAMEndTime>
        		WriteRAMStartTime(chnl,StartTime);
 2008aac:	e0bfff03 	ldbu	r2,-4(fp)
 2008ab0:	1009883a 	mov	r4,r2
 2008ab4:	e17ffb17 	ldw	r5,-20(fp)
 2008ab8:	2001c000 	call	2001c00 <WriteRAMStartTime>
        	}
    	    refreshErrFlags();
 2008abc:	2007bf80 	call	2007bf8 <refreshErrFlags>
    	    entryParameterTiming(chnl);
 2008ac0:	e0bfff03 	ldbu	r2,-4(fp)
 2008ac4:	1009883a 	mov	r4,r2
 2008ac8:	20083cc0 	call	20083cc <entryParameterTiming>
    		WriteRAMEndTime(chnl,editNum10(chnl,1,end,3,8));
 2008acc:	e43fff03 	ldbu	r16,-4(fp)
 2008ad0:	e0bfff03 	ldbu	r2,-4(fp)
 2008ad4:	00c00204 	movi	r3,8
 2008ad8:	d8c00015 	stw	r3,0(sp)
 2008adc:	1009883a 	mov	r4,r2
 2008ae0:	01400044 	movi	r5,1
 2008ae4:	e1bff917 	ldw	r6,-28(fp)
 2008ae8:	01c000c4 	movi	r7,3
 2008aec:	2005e000 	call	2005e00 <editNum10>
 2008af0:	8009883a 	mov	r4,r16
 2008af4:	100b883a 	mov	r5,r2
 2008af8:	2001c4c0 	call	2001c4c <WriteRAMEndTime>
    		refreshErrFlags();
 2008afc:	2007bf80 	call	2007bf8 <refreshErrFlags>
    		entryParameterTiming(chnl);
 2008b00:	e0bfff03 	ldbu	r2,-4(fp)
 2008b04:	1009883a 	mov	r4,r2
 2008b08:	20083cc0 	call	20083cc <entryParameterTiming>
    		return;
 2008b0c:	00002006 	br	2008b90 <editParamterTiming+0x58c>
        }
		WriteRAMStartTime(chnl,editNum10(chnl,0,start,2,8));
 2008b10:	e43fff03 	ldbu	r16,-4(fp)
 2008b14:	e0bfff03 	ldbu	r2,-4(fp)
 2008b18:	00c00204 	movi	r3,8
 2008b1c:	d8c00015 	stw	r3,0(sp)
 2008b20:	1009883a 	mov	r4,r2
 2008b24:	000b883a 	mov	r5,zero
 2008b28:	e1bff817 	ldw	r6,-32(fp)
 2008b2c:	01c00084 	movi	r7,2
 2008b30:	2005e000 	call	2005e00 <editNum10>
 2008b34:	8009883a 	mov	r4,r16
 2008b38:	100b883a 	mov	r5,r2
 2008b3c:	2001c000 	call	2001c00 <WriteRAMStartTime>
		refreshErrFlags();
 2008b40:	2007bf80 	call	2007bf8 <refreshErrFlags>
		entryParameterTiming(chnl);  //Don't remove, the warning message may clear the screen
 2008b44:	e0bfff03 	ldbu	r2,-4(fp)
 2008b48:	1009883a 	mov	r4,r2
 2008b4c:	20083cc0 	call	20083cc <entryParameterTiming>

		/*Edit End Time*/
		WriteRAMEndTime(chnl,editNum10(chnl,1,end,3,8));
 2008b50:	e43fff03 	ldbu	r16,-4(fp)
 2008b54:	e0bfff03 	ldbu	r2,-4(fp)
 2008b58:	00c00204 	movi	r3,8
 2008b5c:	d8c00015 	stw	r3,0(sp)
 2008b60:	1009883a 	mov	r4,r2
 2008b64:	01400044 	movi	r5,1
 2008b68:	e1bff917 	ldw	r6,-28(fp)
 2008b6c:	01c000c4 	movi	r7,3
 2008b70:	2005e000 	call	2005e00 <editNum10>
 2008b74:	8009883a 	mov	r4,r16
 2008b78:	100b883a 	mov	r5,r2
 2008b7c:	2001c4c0 	call	2001c4c <WriteRAMEndTime>
		refreshErrFlags();
 2008b80:	2007bf80 	call	2007bf8 <refreshErrFlags>
	}
	entryParameterTiming(chnl);
 2008b84:	e0bfff03 	ldbu	r2,-4(fp)
 2008b88:	1009883a 	mov	r4,r2
 2008b8c:	20083cc0 	call	20083cc <entryParameterTiming>


}
 2008b90:	e037883a 	mov	sp,fp
 2008b94:	dfc00217 	ldw	ra,8(sp)
 2008b98:	df000117 	ldw	fp,4(sp)
 2008b9c:	dc000017 	ldw	r16,0(sp)
 2008ba0:	dec00304 	addi	sp,sp,12
 2008ba4:	f800283a 	ret

02008ba8 <__fixunsdfsi>:
 2008ba8:	defffd04 	addi	sp,sp,-12
 2008bac:	000d883a 	mov	r6,zero
 2008bb0:	01d07834 	movhi	r7,16864
 2008bb4:	dc400115 	stw	r17,4(sp)
 2008bb8:	dc000015 	stw	r16,0(sp)
 2008bbc:	dfc00215 	stw	ra,8(sp)
 2008bc0:	2023883a 	mov	r17,r4
 2008bc4:	2821883a 	mov	r16,r5
 2008bc8:	20090340 	call	2009034 <__gedf2>
 2008bcc:	1000080e 	bge	r2,zero,2008bf0 <__fixunsdfsi+0x48>
 2008bd0:	8809883a 	mov	r4,r17
 2008bd4:	800b883a 	mov	r5,r16
 2008bd8:	20090980 	call	2009098 <__fixdfsi>
 2008bdc:	dfc00217 	ldw	ra,8(sp)
 2008be0:	dc400117 	ldw	r17,4(sp)
 2008be4:	dc000017 	ldw	r16,0(sp)
 2008be8:	dec00304 	addi	sp,sp,12
 2008bec:	f800283a 	ret
 2008bf0:	000d883a 	mov	r6,zero
 2008bf4:	01d07834 	movhi	r7,16864
 2008bf8:	8809883a 	mov	r4,r17
 2008bfc:	800b883a 	mov	r5,r16
 2008c00:	2008fd40 	call	2008fd4 <__subdf3>
 2008c04:	180b883a 	mov	r5,r3
 2008c08:	1009883a 	mov	r4,r2
 2008c0c:	20090980 	call	2009098 <__fixdfsi>
 2008c10:	00e00034 	movhi	r3,32768
 2008c14:	10c5883a 	add	r2,r2,r3
 2008c18:	dfc00217 	ldw	ra,8(sp)
 2008c1c:	dc400117 	ldw	r17,4(sp)
 2008c20:	dc000017 	ldw	r16,0(sp)
 2008c24:	dec00304 	addi	sp,sp,12
 2008c28:	f800283a 	ret

02008c2c <_fpadd_parts>:
 2008c2c:	2005883a 	mov	r2,r4
 2008c30:	21000017 	ldw	r4,0(r4)
 2008c34:	01c00044 	movi	r7,1
 2008c38:	3900622e 	bgeu	r7,r4,2008dc4 <_fpadd_parts+0x198>
 2008c3c:	28c00017 	ldw	r3,0(r5)
 2008c40:	38c05f2e 	bgeu	r7,r3,2008dc0 <_fpadd_parts+0x194>
 2008c44:	01c00104 	movi	r7,4
 2008c48:	21c0c626 	beq	r4,r7,2008f64 <_fpadd_parts+0x338>
 2008c4c:	19c05c26 	beq	r3,r7,2008dc0 <_fpadd_parts+0x194>
 2008c50:	01c00084 	movi	r7,2
 2008c54:	19c06b26 	beq	r3,r7,2008e04 <_fpadd_parts+0x1d8>
 2008c58:	21c05926 	beq	r4,r7,2008dc0 <_fpadd_parts+0x194>
 2008c5c:	11c00217 	ldw	r7,8(r2)
 2008c60:	2ac00217 	ldw	r11,8(r5)
 2008c64:	13000317 	ldw	r12,12(r2)
 2008c68:	13400417 	ldw	r13,16(r2)
 2008c6c:	3ac9c83a 	sub	r4,r7,r11
 2008c70:	2a000317 	ldw	r8,12(r5)
 2008c74:	2a400417 	ldw	r9,16(r5)
 2008c78:	2015883a 	mov	r10,r4
 2008c7c:	20007516 	blt	r4,zero,2008e54 <_fpadd_parts+0x228>
 2008c80:	00c00fc4 	movi	r3,63
 2008c84:	1a805016 	blt	r3,r10,2008dc8 <_fpadd_parts+0x19c>
 2008c88:	0100870e 	bge	zero,r4,2008ea8 <_fpadd_parts+0x27c>
 2008c8c:	50fff804 	addi	r3,r10,-32
 2008c90:	18009916 	blt	r3,zero,2008ef8 <_fpadd_parts+0x2cc>
 2008c94:	48d6d83a 	srl	r11,r9,r3
 2008c98:	001d883a 	mov	r14,zero
 2008c9c:	18009e16 	blt	r3,zero,2008f18 <_fpadd_parts+0x2ec>
 2008ca0:	01000044 	movi	r4,1
 2008ca4:	20c6983a 	sll	r3,r4,r3
 2008ca8:	0015883a 	mov	r10,zero
 2008cac:	513fffc4 	addi	r4,r10,-1
 2008cb0:	2295403a 	cmpgeu	r10,r4,r10
 2008cb4:	1a87c83a 	sub	r3,r3,r10
 2008cb8:	1a52703a 	and	r9,r3,r9
 2008cbc:	2210703a 	and	r8,r4,r8
 2008cc0:	4250b03a 	or	r8,r8,r9
 2008cc4:	4010c03a 	cmpne	r8,r8,zero
 2008cc8:	42d0b03a 	or	r8,r8,r11
 2008ccc:	7013883a 	mov	r9,r14
 2008cd0:	11000117 	ldw	r4,4(r2)
 2008cd4:	28800117 	ldw	r2,4(r5)
 2008cd8:	20804126 	beq	r4,r2,2008de0 <_fpadd_parts+0x1b4>
 2008cdc:	20006326 	beq	r4,zero,2008e6c <_fpadd_parts+0x240>
 2008ce0:	4305c83a 	sub	r2,r8,r12
 2008ce4:	4091803a 	cmpltu	r8,r8,r2
 2008ce8:	4b47c83a 	sub	r3,r9,r13
 2008cec:	1a07c83a 	sub	r3,r3,r8
 2008cf0:	18006316 	blt	r3,zero,2008e80 <_fpadd_parts+0x254>
 2008cf4:	30000115 	stw	zero,4(r6)
 2008cf8:	31c00215 	stw	r7,8(r6)
 2008cfc:	30800315 	stw	r2,12(r6)
 2008d00:	30c00415 	stw	r3,16(r6)
 2008d04:	11ffffc4 	addi	r7,r2,-1
 2008d08:	388b403a 	cmpgeu	r5,r7,r2
 2008d0c:	194bc83a 	sub	r5,r3,r5
 2008d10:	01040034 	movhi	r4,4096
 2008d14:	213fffc4 	addi	r4,r4,-1
 2008d18:	21401736 	bltu	r4,r5,2008d78 <_fpadd_parts+0x14c>
 2008d1c:	29008226 	beq	r5,r4,2008f28 <_fpadd_parts+0x2fc>
 2008d20:	31400217 	ldw	r5,8(r6)
 2008d24:	02840034 	movhi	r10,4096
 2008d28:	52bfffc4 	addi	r10,r10,-1
 2008d2c:	033fff84 	movi	r12,-2
 2008d30:	297fffc4 	addi	r5,r5,-1
 2008d34:	00000106 	br	2008d3c <_fpadd_parts+0x110>
 2008d38:	3a804a26 	beq	r7,r10,2008e64 <_fpadd_parts+0x238>
 2008d3c:	1089883a 	add	r4,r2,r2
 2008d40:	2091803a 	cmpltu	r8,r4,r2
 2008d44:	18c7883a 	add	r3,r3,r3
 2008d48:	227fffc4 	addi	r9,r4,-1
 2008d4c:	40d1883a 	add	r8,r8,r3
 2008d50:	490f403a 	cmpgeu	r7,r9,r4
 2008d54:	41cfc83a 	sub	r7,r8,r7
 2008d58:	2817883a 	mov	r11,r5
 2008d5c:	2005883a 	mov	r2,r4
 2008d60:	4007883a 	mov	r3,r8
 2008d64:	297fffc4 	addi	r5,r5,-1
 2008d68:	51fff32e 	bgeu	r10,r7,2008d38 <_fpadd_parts+0x10c>
 2008d6c:	31000315 	stw	r4,12(r6)
 2008d70:	32000415 	stw	r8,16(r6)
 2008d74:	32c00215 	stw	r11,8(r6)
 2008d78:	010000c4 	movi	r4,3
 2008d7c:	31000015 	stw	r4,0(r6)
 2008d80:	01080034 	movhi	r4,8192
 2008d84:	213fffc4 	addi	r4,r4,-1
 2008d88:	20c00b2e 	bgeu	r4,r3,2008db8 <_fpadd_parts+0x18c>
 2008d8c:	180e97fa 	slli	r7,r3,31
 2008d90:	1008d07a 	srli	r4,r2,1
 2008d94:	31400217 	ldw	r5,8(r6)
 2008d98:	1806d07a 	srli	r3,r3,1
 2008d9c:	1080004c 	andi	r2,r2,1
 2008da0:	3908b03a 	or	r4,r7,r4
 2008da4:	1108b03a 	or	r4,r2,r4
 2008da8:	29400044 	addi	r5,r5,1
 2008dac:	31000315 	stw	r4,12(r6)
 2008db0:	30c00415 	stw	r3,16(r6)
 2008db4:	31400215 	stw	r5,8(r6)
 2008db8:	3005883a 	mov	r2,r6
 2008dbc:	f800283a 	ret
 2008dc0:	2805883a 	mov	r2,r5
 2008dc4:	f800283a 	ret
 2008dc8:	59c01e0e 	bge	r11,r7,2008e44 <_fpadd_parts+0x218>
 2008dcc:	11000117 	ldw	r4,4(r2)
 2008dd0:	28800117 	ldw	r2,4(r5)
 2008dd4:	0011883a 	mov	r8,zero
 2008dd8:	0013883a 	mov	r9,zero
 2008ddc:	20bfbf1e 	bne	r4,r2,2008cdc <_fpadd_parts+0xb0>
 2008de0:	4305883a 	add	r2,r8,r12
 2008de4:	1207803a 	cmpltu	r3,r2,r8
 2008de8:	4b53883a 	add	r9,r9,r13
 2008dec:	1a47883a 	add	r3,r3,r9
 2008df0:	31000115 	stw	r4,4(r6)
 2008df4:	31c00215 	stw	r7,8(r6)
 2008df8:	30800315 	stw	r2,12(r6)
 2008dfc:	30c00415 	stw	r3,16(r6)
 2008e00:	003fdd06 	br	2008d78 <_fpadd_parts+0x14c>
 2008e04:	20ffef1e 	bne	r4,r3,2008dc4 <_fpadd_parts+0x198>
 2008e08:	31000015 	stw	r4,0(r6)
 2008e0c:	10c00117 	ldw	r3,4(r2)
 2008e10:	30c00115 	stw	r3,4(r6)
 2008e14:	10c00217 	ldw	r3,8(r2)
 2008e18:	11000117 	ldw	r4,4(r2)
 2008e1c:	29400117 	ldw	r5,4(r5)
 2008e20:	30c00215 	stw	r3,8(r6)
 2008e24:	10c00317 	ldw	r3,12(r2)
 2008e28:	2908703a 	and	r4,r5,r4
 2008e2c:	30c00315 	stw	r3,12(r6)
 2008e30:	10c00417 	ldw	r3,16(r2)
 2008e34:	31000115 	stw	r4,4(r6)
 2008e38:	3005883a 	mov	r2,r6
 2008e3c:	30c00415 	stw	r3,16(r6)
 2008e40:	f800283a 	ret
 2008e44:	580f883a 	mov	r7,r11
 2008e48:	0019883a 	mov	r12,zero
 2008e4c:	001b883a 	mov	r13,zero
 2008e50:	003f9f06 	br	2008cd0 <_fpadd_parts+0xa4>
 2008e54:	0115c83a 	sub	r10,zero,r4
 2008e58:	00c00fc4 	movi	r3,63
 2008e5c:	1abfda16 	blt	r3,r10,2008dc8 <_fpadd_parts+0x19c>
 2008e60:	003f8906 	br	2008c88 <_fpadd_parts+0x5c>
 2008e64:	627fb52e 	bgeu	r12,r9,2008d3c <_fpadd_parts+0x110>
 2008e68:	003fc006 	br	2008d6c <_fpadd_parts+0x140>
 2008e6c:	6205c83a 	sub	r2,r12,r8
 2008e70:	6099803a 	cmpltu	r12,r12,r2
 2008e74:	6a47c83a 	sub	r3,r13,r9
 2008e78:	1b07c83a 	sub	r3,r3,r12
 2008e7c:	183f9d0e 	bge	r3,zero,2008cf4 <_fpadd_parts+0xc8>
 2008e80:	0085c83a 	sub	r2,zero,r2
 2008e84:	1008c03a 	cmpne	r4,r2,zero
 2008e88:	00c7c83a 	sub	r3,zero,r3
 2008e8c:	1907c83a 	sub	r3,r3,r4
 2008e90:	01000044 	movi	r4,1
 2008e94:	31000115 	stw	r4,4(r6)
 2008e98:	31c00215 	stw	r7,8(r6)
 2008e9c:	30800315 	stw	r2,12(r6)
 2008ea0:	30c00415 	stw	r3,16(r6)
 2008ea4:	003f9706 	br	2008d04 <_fpadd_parts+0xd8>
 2008ea8:	203f8926 	beq	r4,zero,2008cd0 <_fpadd_parts+0xa4>
 2008eac:	50fff804 	addi	r3,r10,-32
 2008eb0:	3a8f883a 	add	r7,r7,r10
 2008eb4:	18002316 	blt	r3,zero,2008f44 <_fpadd_parts+0x318>
 2008eb8:	68d6d83a 	srl	r11,r13,r3
 2008ebc:	001d883a 	mov	r14,zero
 2008ec0:	18001c16 	blt	r3,zero,2008f34 <_fpadd_parts+0x308>
 2008ec4:	01000044 	movi	r4,1
 2008ec8:	20c6983a 	sll	r3,r4,r3
 2008ecc:	0015883a 	mov	r10,zero
 2008ed0:	513fffc4 	addi	r4,r10,-1
 2008ed4:	2295403a 	cmpgeu	r10,r4,r10
 2008ed8:	1a87c83a 	sub	r3,r3,r10
 2008edc:	1b5a703a 	and	r13,r3,r13
 2008ee0:	2318703a 	and	r12,r4,r12
 2008ee4:	6358b03a 	or	r12,r12,r13
 2008ee8:	6018c03a 	cmpne	r12,r12,zero
 2008eec:	62d8b03a 	or	r12,r12,r11
 2008ef0:	701b883a 	mov	r13,r14
 2008ef4:	003f7606 	br	2008cd0 <_fpadd_parts+0xa4>
 2008ef8:	4808907a 	slli	r4,r9,1
 2008efc:	02c007c4 	movi	r11,31
 2008f00:	5a97c83a 	sub	r11,r11,r10
 2008f04:	22c8983a 	sll	r4,r4,r11
 2008f08:	4296d83a 	srl	r11,r8,r10
 2008f0c:	4a9cd83a 	srl	r14,r9,r10
 2008f10:	22d6b03a 	or	r11,r4,r11
 2008f14:	003f6106 	br	2008c9c <_fpadd_parts+0x70>
 2008f18:	00c00044 	movi	r3,1
 2008f1c:	1a94983a 	sll	r10,r3,r10
 2008f20:	0007883a 	mov	r3,zero
 2008f24:	003f6106 	br	2008cac <_fpadd_parts+0x80>
 2008f28:	013fff84 	movi	r4,-2
 2008f2c:	21ff7c2e 	bgeu	r4,r7,2008d20 <_fpadd_parts+0xf4>
 2008f30:	003f9106 	br	2008d78 <_fpadd_parts+0x14c>
 2008f34:	00c00044 	movi	r3,1
 2008f38:	1a94983a 	sll	r10,r3,r10
 2008f3c:	0007883a 	mov	r3,zero
 2008f40:	003fe306 	br	2008ed0 <_fpadd_parts+0x2a4>
 2008f44:	6816907a 	slli	r11,r13,1
 2008f48:	010007c4 	movi	r4,31
 2008f4c:	2289c83a 	sub	r4,r4,r10
 2008f50:	5908983a 	sll	r4,r11,r4
 2008f54:	6296d83a 	srl	r11,r12,r10
 2008f58:	6a9cd83a 	srl	r14,r13,r10
 2008f5c:	22d6b03a 	or	r11,r4,r11
 2008f60:	003fd706 	br	2008ec0 <_fpadd_parts+0x294>
 2008f64:	193f971e 	bne	r3,r4,2008dc4 <_fpadd_parts+0x198>
 2008f68:	11000117 	ldw	r4,4(r2)
 2008f6c:	28c00117 	ldw	r3,4(r5)
 2008f70:	20ff9426 	beq	r4,r3,2008dc4 <_fpadd_parts+0x198>
 2008f74:	00808074 	movhi	r2,513
 2008f78:	109cf804 	addi	r2,r2,29664
 2008f7c:	f800283a 	ret

02008f80 <__adddf3>:
 2008f80:	deffec04 	addi	sp,sp,-80
 2008f84:	d9001115 	stw	r4,68(sp)
 2008f88:	d9401215 	stw	r5,72(sp)
 2008f8c:	d9001104 	addi	r4,sp,68
 2008f90:	d9400a04 	addi	r5,sp,40
 2008f94:	dfc01315 	stw	ra,76(sp)
 2008f98:	d9c01015 	stw	r7,64(sp)
 2008f9c:	d9800f15 	stw	r6,60(sp)
 2008fa0:	20096b00 	call	20096b0 <__unpack_d>
 2008fa4:	d9000f04 	addi	r4,sp,60
 2008fa8:	d9400504 	addi	r5,sp,20
 2008fac:	20096b00 	call	20096b0 <__unpack_d>
 2008fb0:	d9000a04 	addi	r4,sp,40
 2008fb4:	d9400504 	addi	r5,sp,20
 2008fb8:	d80d883a 	mov	r6,sp
 2008fbc:	2008c2c0 	call	2008c2c <_fpadd_parts>
 2008fc0:	1009883a 	mov	r4,r2
 2008fc4:	200948c0 	call	200948c <__pack_d>
 2008fc8:	dfc01317 	ldw	ra,76(sp)
 2008fcc:	dec01404 	addi	sp,sp,80
 2008fd0:	f800283a 	ret

02008fd4 <__subdf3>:
 2008fd4:	deffec04 	addi	sp,sp,-80
 2008fd8:	d9001115 	stw	r4,68(sp)
 2008fdc:	d9401215 	stw	r5,72(sp)
 2008fe0:	d9001104 	addi	r4,sp,68
 2008fe4:	d9400a04 	addi	r5,sp,40
 2008fe8:	dfc01315 	stw	ra,76(sp)
 2008fec:	d9c01015 	stw	r7,64(sp)
 2008ff0:	d9800f15 	stw	r6,60(sp)
 2008ff4:	20096b00 	call	20096b0 <__unpack_d>
 2008ff8:	d9000f04 	addi	r4,sp,60
 2008ffc:	d9400504 	addi	r5,sp,20
 2009000:	20096b00 	call	20096b0 <__unpack_d>
 2009004:	d8800617 	ldw	r2,24(sp)
 2009008:	d9000a04 	addi	r4,sp,40
 200900c:	d9400504 	addi	r5,sp,20
 2009010:	d80d883a 	mov	r6,sp
 2009014:	1080005c 	xori	r2,r2,1
 2009018:	d8800615 	stw	r2,24(sp)
 200901c:	2008c2c0 	call	2008c2c <_fpadd_parts>
 2009020:	1009883a 	mov	r4,r2
 2009024:	200948c0 	call	200948c <__pack_d>
 2009028:	dfc01317 	ldw	ra,76(sp)
 200902c:	dec01404 	addi	sp,sp,80
 2009030:	f800283a 	ret

02009034 <__gedf2>:
 2009034:	defff104 	addi	sp,sp,-60
 2009038:	d9000c15 	stw	r4,48(sp)
 200903c:	d9400d15 	stw	r5,52(sp)
 2009040:	d9000c04 	addi	r4,sp,48
 2009044:	d9400504 	addi	r5,sp,20
 2009048:	dfc00e15 	stw	ra,56(sp)
 200904c:	d9800a15 	stw	r6,40(sp)
 2009050:	d9c00b15 	stw	r7,44(sp)
 2009054:	20096b00 	call	20096b0 <__unpack_d>
 2009058:	d9000a04 	addi	r4,sp,40
 200905c:	d80b883a 	mov	r5,sp
 2009060:	20096b00 	call	20096b0 <__unpack_d>
 2009064:	d8c00517 	ldw	r3,20(sp)
 2009068:	00800044 	movi	r2,1
 200906c:	10c0082e 	bgeu	r2,r3,2009090 <__gedf2+0x5c>
 2009070:	d8c00017 	ldw	r3,0(sp)
 2009074:	10c0062e 	bgeu	r2,r3,2009090 <__gedf2+0x5c>
 2009078:	d9000504 	addi	r4,sp,20
 200907c:	d80b883a 	mov	r5,sp
 2009080:	20097b40 	call	20097b4 <__fpcmp_parts_d>
 2009084:	dfc00e17 	ldw	ra,56(sp)
 2009088:	dec00f04 	addi	sp,sp,60
 200908c:	f800283a 	ret
 2009090:	00bfffc4 	movi	r2,-1
 2009094:	003ffb06 	br	2009084 <__gedf2+0x50>

02009098 <__fixdfsi>:
 2009098:	defff804 	addi	sp,sp,-32
 200909c:	d9000515 	stw	r4,20(sp)
 20090a0:	d9400615 	stw	r5,24(sp)
 20090a4:	d9000504 	addi	r4,sp,20
 20090a8:	d80b883a 	mov	r5,sp
 20090ac:	dfc00715 	stw	ra,28(sp)
 20090b0:	20096b00 	call	20096b0 <__unpack_d>
 20090b4:	d8800017 	ldw	r2,0(sp)
 20090b8:	00c00084 	movi	r3,2
 20090bc:	10c01c26 	beq	r2,r3,2009130 <__fixdfsi+0x98>
 20090c0:	00c00044 	movi	r3,1
 20090c4:	18801a2e 	bgeu	r3,r2,2009130 <__fixdfsi+0x98>
 20090c8:	00c00104 	movi	r3,4
 20090cc:	10c01126 	beq	r2,r3,2009114 <__fixdfsi+0x7c>
 20090d0:	d8800217 	ldw	r2,8(sp)
 20090d4:	10001616 	blt	r2,zero,2009130 <__fixdfsi+0x98>
 20090d8:	00c00784 	movi	r3,30
 20090dc:	18800d16 	blt	r3,r2,2009114 <__fixdfsi+0x7c>
 20090e0:	00c00f04 	movi	r3,60
 20090e4:	1885c83a 	sub	r2,r3,r2
 20090e8:	10fff804 	addi	r3,r2,-32
 20090ec:	d9400317 	ldw	r5,12(sp)
 20090f0:	d9000417 	ldw	r4,16(sp)
 20090f4:	18001616 	blt	r3,zero,2009150 <__fixdfsi+0xb8>
 20090f8:	20c4d83a 	srl	r2,r4,r3
 20090fc:	d8c00117 	ldw	r3,4(sp)
 2009100:	18000126 	beq	r3,zero,2009108 <__fixdfsi+0x70>
 2009104:	0085c83a 	sub	r2,zero,r2
 2009108:	dfc00717 	ldw	ra,28(sp)
 200910c:	dec00804 	addi	sp,sp,32
 2009110:	f800283a 	ret
 2009114:	d8800117 	ldw	r2,4(sp)
 2009118:	1000091e 	bne	r2,zero,2009140 <__fixdfsi+0xa8>
 200911c:	00a00034 	movhi	r2,32768
 2009120:	10bfffc4 	addi	r2,r2,-1
 2009124:	dfc00717 	ldw	ra,28(sp)
 2009128:	dec00804 	addi	sp,sp,32
 200912c:	f800283a 	ret
 2009130:	0005883a 	mov	r2,zero
 2009134:	dfc00717 	ldw	ra,28(sp)
 2009138:	dec00804 	addi	sp,sp,32
 200913c:	f800283a 	ret
 2009140:	00a00034 	movhi	r2,32768
 2009144:	dfc00717 	ldw	ra,28(sp)
 2009148:	dec00804 	addi	sp,sp,32
 200914c:	f800283a 	ret
 2009150:	2008907a 	slli	r4,r4,1
 2009154:	018007c4 	movi	r6,31
 2009158:	308dc83a 	sub	r6,r6,r2
 200915c:	2188983a 	sll	r4,r4,r6
 2009160:	2884d83a 	srl	r2,r5,r2
 2009164:	2084b03a 	or	r2,r4,r2
 2009168:	003fe406 	br	20090fc <__fixdfsi+0x64>

0200916c <__floatunsidf>:
 200916c:	defff904 	addi	sp,sp,-28
 2009170:	dc000515 	stw	r16,20(sp)
 2009174:	dfc00615 	stw	ra,24(sp)
 2009178:	d8000115 	stw	zero,4(sp)
 200917c:	2021883a 	mov	r16,r4
 2009180:	20001726 	beq	r4,zero,20091e0 <__floatunsidf+0x74>
 2009184:	008000c4 	movi	r2,3
 2009188:	d8800015 	stw	r2,0(sp)
 200918c:	00800f04 	movi	r2,60
 2009190:	d8800215 	stw	r2,8(sp)
 2009194:	20093e00 	call	20093e0 <__clzsi2>
 2009198:	10c00744 	addi	r3,r2,29
 200919c:	18001816 	blt	r3,zero,2009200 <__floatunsidf+0x94>
 20091a0:	18002d26 	beq	r3,zero,2009258 <__floatunsidf+0xec>
 20091a4:	113fff44 	addi	r4,r2,-3
 20091a8:	20002e16 	blt	r4,zero,2009264 <__floatunsidf+0xf8>
 20091ac:	8108983a 	sll	r4,r16,r4
 20091b0:	0021883a 	mov	r16,zero
 20091b4:	014007c4 	movi	r5,31
 20091b8:	2885c83a 	sub	r2,r5,r2
 20091bc:	dc000315 	stw	r16,12(sp)
 20091c0:	d9000415 	stw	r4,16(sp)
 20091c4:	d8800215 	stw	r2,8(sp)
 20091c8:	d809883a 	mov	r4,sp
 20091cc:	200948c0 	call	200948c <__pack_d>
 20091d0:	dfc00617 	ldw	ra,24(sp)
 20091d4:	dc000517 	ldw	r16,20(sp)
 20091d8:	dec00704 	addi	sp,sp,28
 20091dc:	f800283a 	ret
 20091e0:	00800084 	movi	r2,2
 20091e4:	d809883a 	mov	r4,sp
 20091e8:	d8800015 	stw	r2,0(sp)
 20091ec:	200948c0 	call	200948c <__pack_d>
 20091f0:	dfc00617 	ldw	ra,24(sp)
 20091f4:	dc000517 	ldw	r16,20(sp)
 20091f8:	dec00704 	addi	sp,sp,28
 20091fc:	f800283a 	ret
 2009200:	00c7c83a 	sub	r3,zero,r3
 2009204:	193ff804 	addi	r4,r3,-32
 2009208:	20001c16 	blt	r4,zero,200927c <__floatunsidf+0x110>
 200920c:	000b883a 	mov	r5,zero
 2009210:	2009d7fa 	srai	r4,r4,31
 2009214:	80c6d83a 	srl	r3,r16,r3
 2009218:	297fffc4 	addi	r5,r5,-1
 200921c:	2c20703a 	and	r16,r5,r16
 2009220:	8020c03a 	cmpne	r16,r16,zero
 2009224:	1906703a 	and	r3,r3,r4
 2009228:	010007c4 	movi	r4,31
 200922c:	80c6b03a 	or	r3,r16,r3
 2009230:	2085c83a 	sub	r2,r4,r2
 2009234:	d809883a 	mov	r4,sp
 2009238:	d8c00315 	stw	r3,12(sp)
 200923c:	d8000415 	stw	zero,16(sp)
 2009240:	d8800215 	stw	r2,8(sp)
 2009244:	200948c0 	call	200948c <__pack_d>
 2009248:	dfc00617 	ldw	ra,24(sp)
 200924c:	dc000517 	ldw	r16,20(sp)
 2009250:	dec00704 	addi	sp,sp,28
 2009254:	f800283a 	ret
 2009258:	dc000315 	stw	r16,12(sp)
 200925c:	d8000415 	stw	zero,16(sp)
 2009260:	003fd906 	br	20091c8 <__floatunsidf+0x5c>
 2009264:	800ad07a 	srli	r5,r16,1
 2009268:	010007c4 	movi	r4,31
 200926c:	20c9c83a 	sub	r4,r4,r3
 2009270:	2908d83a 	srl	r4,r5,r4
 2009274:	80e0983a 	sll	r16,r16,r3
 2009278:	003fce06 	br	20091b4 <__floatunsidf+0x48>
 200927c:	01400044 	movi	r5,1
 2009280:	28ca983a 	sll	r5,r5,r3
 2009284:	003fe206 	br	2009210 <__floatunsidf+0xa4>

02009288 <udivmodsi4>:
 2009288:	2005883a 	mov	r2,r4
 200928c:	2900182e 	bgeu	r5,r4,20092f0 <udivmodsi4+0x68>
 2009290:	28001716 	blt	r5,zero,20092f0 <udivmodsi4+0x68>
 2009294:	01000804 	movi	r4,32
 2009298:	00c00044 	movi	r3,1
 200929c:	00000206 	br	20092a8 <udivmodsi4+0x20>
 20092a0:	20001126 	beq	r4,zero,20092e8 <udivmodsi4+0x60>
 20092a4:	28000516 	blt	r5,zero,20092bc <udivmodsi4+0x34>
 20092a8:	294b883a 	add	r5,r5,r5
 20092ac:	213fffc4 	addi	r4,r4,-1
 20092b0:	18c7883a 	add	r3,r3,r3
 20092b4:	28bffa36 	bltu	r5,r2,20092a0 <udivmodsi4+0x18>
 20092b8:	18000b26 	beq	r3,zero,20092e8 <udivmodsi4+0x60>
 20092bc:	0009883a 	mov	r4,zero
 20092c0:	11400236 	bltu	r2,r5,20092cc <udivmodsi4+0x44>
 20092c4:	1145c83a 	sub	r2,r2,r5
 20092c8:	20c8b03a 	or	r4,r4,r3
 20092cc:	1806d07a 	srli	r3,r3,1
 20092d0:	280ad07a 	srli	r5,r5,1
 20092d4:	183ffa1e 	bne	r3,zero,20092c0 <udivmodsi4+0x38>
 20092d8:	3000021e 	bne	r6,zero,20092e4 <udivmodsi4+0x5c>
 20092dc:	2005883a 	mov	r2,r4
 20092e0:	f800283a 	ret
 20092e4:	f800283a 	ret
 20092e8:	0009883a 	mov	r4,zero
 20092ec:	003ffa06 	br	20092d8 <udivmodsi4+0x50>
 20092f0:	00c00044 	movi	r3,1
 20092f4:	0009883a 	mov	r4,zero
 20092f8:	003ff106 	br	20092c0 <udivmodsi4+0x38>

020092fc <__divsi3>:
 20092fc:	defffe04 	addi	sp,sp,-8
 2009300:	dfc00115 	stw	ra,4(sp)
 2009304:	dc000015 	stw	r16,0(sp)
 2009308:	20000a16 	blt	r4,zero,2009334 <__divsi3+0x38>
 200930c:	0021883a 	mov	r16,zero
 2009310:	28000b16 	blt	r5,zero,2009340 <__divsi3+0x44>
 2009314:	000d883a 	mov	r6,zero
 2009318:	20092880 	call	2009288 <udivmodsi4>
 200931c:	80000126 	beq	r16,zero,2009324 <__divsi3+0x28>
 2009320:	0085c83a 	sub	r2,zero,r2
 2009324:	dfc00117 	ldw	ra,4(sp)
 2009328:	dc000017 	ldw	r16,0(sp)
 200932c:	dec00204 	addi	sp,sp,8
 2009330:	f800283a 	ret
 2009334:	0109c83a 	sub	r4,zero,r4
 2009338:	04000044 	movi	r16,1
 200933c:	283ff50e 	bge	r5,zero,2009314 <__divsi3+0x18>
 2009340:	014bc83a 	sub	r5,zero,r5
 2009344:	8400005c 	xori	r16,r16,1
 2009348:	003ff206 	br	2009314 <__divsi3+0x18>

0200934c <__modsi3>:
 200934c:	deffff04 	addi	sp,sp,-4
 2009350:	dfc00015 	stw	ra,0(sp)
 2009354:	20000516 	blt	r4,zero,200936c <__modsi3+0x20>
 2009358:	28000c16 	blt	r5,zero,200938c <__modsi3+0x40>
 200935c:	01800044 	movi	r6,1
 2009360:	dfc00017 	ldw	ra,0(sp)
 2009364:	dec00104 	addi	sp,sp,4
 2009368:	20092881 	jmpi	2009288 <udivmodsi4>
 200936c:	0109c83a 	sub	r4,zero,r4
 2009370:	28000b16 	blt	r5,zero,20093a0 <__modsi3+0x54>
 2009374:	01800044 	movi	r6,1
 2009378:	20092880 	call	2009288 <udivmodsi4>
 200937c:	0085c83a 	sub	r2,zero,r2
 2009380:	dfc00017 	ldw	ra,0(sp)
 2009384:	dec00104 	addi	sp,sp,4
 2009388:	f800283a 	ret
 200938c:	014bc83a 	sub	r5,zero,r5
 2009390:	01800044 	movi	r6,1
 2009394:	dfc00017 	ldw	ra,0(sp)
 2009398:	dec00104 	addi	sp,sp,4
 200939c:	20092881 	jmpi	2009288 <udivmodsi4>
 20093a0:	014bc83a 	sub	r5,zero,r5
 20093a4:	003ff306 	br	2009374 <__modsi3+0x28>

020093a8 <__udivsi3>:
 20093a8:	000d883a 	mov	r6,zero
 20093ac:	20092881 	jmpi	2009288 <udivmodsi4>

020093b0 <__umodsi3>:
 20093b0:	01800044 	movi	r6,1
 20093b4:	20092881 	jmpi	2009288 <udivmodsi4>

020093b8 <__mulsi3>:
 20093b8:	0005883a 	mov	r2,zero
 20093bc:	20000726 	beq	r4,zero,20093dc <__mulsi3+0x24>
 20093c0:	20c0004c 	andi	r3,r4,1
 20093c4:	2008d07a 	srli	r4,r4,1
 20093c8:	18000126 	beq	r3,zero,20093d0 <__mulsi3+0x18>
 20093cc:	1145883a 	add	r2,r2,r5
 20093d0:	294b883a 	add	r5,r5,r5
 20093d4:	203ffa1e 	bne	r4,zero,20093c0 <__mulsi3+0x8>
 20093d8:	f800283a 	ret
 20093dc:	f800283a 	ret

020093e0 <__clzsi2>:
 20093e0:	00bfffd4 	movui	r2,65535
 20093e4:	11000b36 	bltu	r2,r4,2009414 <__clzsi2+0x34>
 20093e8:	00803fc4 	movi	r2,255
 20093ec:	11001e2e 	bgeu	r2,r4,2009468 <__clzsi2+0x88>
 20093f0:	00c00204 	movi	r3,8
 20093f4:	20c8d83a 	srl	r4,r4,r3
 20093f8:	00c08074 	movhi	r3,513
 20093fc:	18dcfd04 	addi	r3,r3,29684
 2009400:	00800604 	movi	r2,24
 2009404:	1909883a 	add	r4,r3,r4
 2009408:	20c00003 	ldbu	r3,0(r4)
 200940c:	10c5c83a 	sub	r2,r2,r3
 2009410:	f800283a 	ret
 2009414:	00804034 	movhi	r2,256
 2009418:	10bfffc4 	addi	r2,r2,-1
 200941c:	11000936 	bltu	r2,r4,2009444 <__clzsi2+0x64>
 2009420:	00800404 	movi	r2,16
 2009424:	1007883a 	mov	r3,r2
 2009428:	20c8d83a 	srl	r4,r4,r3
 200942c:	00c08074 	movhi	r3,513
 2009430:	18dcfd04 	addi	r3,r3,29684
 2009434:	1909883a 	add	r4,r3,r4
 2009438:	20c00003 	ldbu	r3,0(r4)
 200943c:	10c5c83a 	sub	r2,r2,r3
 2009440:	f800283a 	ret
 2009444:	00c00604 	movi	r3,24
 2009448:	20c8d83a 	srl	r4,r4,r3
 200944c:	00c08074 	movhi	r3,513
 2009450:	18dcfd04 	addi	r3,r3,29684
 2009454:	00800204 	movi	r2,8
 2009458:	1909883a 	add	r4,r3,r4
 200945c:	20c00003 	ldbu	r3,0(r4)
 2009460:	10c5c83a 	sub	r2,r2,r3
 2009464:	f800283a 	ret
 2009468:	0007883a 	mov	r3,zero
 200946c:	20c8d83a 	srl	r4,r4,r3
 2009470:	00c08074 	movhi	r3,513
 2009474:	18dcfd04 	addi	r3,r3,29684
 2009478:	00800804 	movi	r2,32
 200947c:	1909883a 	add	r4,r3,r4
 2009480:	20c00003 	ldbu	r3,0(r4)
 2009484:	10c5c83a 	sub	r2,r2,r3
 2009488:	f800283a 	ret

0200948c <__pack_d>:
 200948c:	20800017 	ldw	r2,0(r4)
 2009490:	defff804 	addi	sp,sp,-32
 2009494:	dcc00315 	stw	r19,12(sp)
 2009498:	dc800215 	stw	r18,8(sp)
 200949c:	dfc00715 	stw	ra,28(sp)
 20094a0:	dd800615 	stw	r22,24(sp)
 20094a4:	dd400515 	stw	r21,20(sp)
 20094a8:	dd000415 	stw	r20,16(sp)
 20094ac:	dc400115 	stw	r17,4(sp)
 20094b0:	dc000015 	stw	r16,0(sp)
 20094b4:	04800044 	movi	r18,1
 20094b8:	24400317 	ldw	r17,12(r4)
 20094bc:	24000417 	ldw	r16,16(r4)
 20094c0:	24c00117 	ldw	r19,4(r4)
 20094c4:	9080422e 	bgeu	r18,r2,20095d0 <__pack_d+0x144>
 20094c8:	00c00104 	movi	r3,4
 20094cc:	10c03c26 	beq	r2,r3,20095c0 <__pack_d+0x134>
 20094d0:	00c00084 	movi	r3,2
 20094d4:	10c01926 	beq	r2,r3,200953c <__pack_d+0xb0>
 20094d8:	8c04b03a 	or	r2,r17,r16
 20094dc:	10001726 	beq	r2,zero,200953c <__pack_d+0xb0>
 20094e0:	21000217 	ldw	r4,8(r4)
 20094e4:	00bf0084 	movi	r2,-1022
 20094e8:	20804016 	blt	r4,r2,20095ec <__pack_d+0x160>
 20094ec:	0080ffc4 	movi	r2,1023
 20094f0:	11003316 	blt	r2,r4,20095c0 <__pack_d+0x134>
 20094f4:	88803fcc 	andi	r2,r17,255
 20094f8:	00c02004 	movi	r3,128
 20094fc:	10c02926 	beq	r2,r3,20095a4 <__pack_d+0x118>
 2009500:	88801fc4 	addi	r2,r17,127
 2009504:	1463803a 	cmpltu	r17,r2,r17
 2009508:	8c21883a 	add	r16,r17,r16
 200950c:	1023883a 	mov	r17,r2
 2009510:	00880034 	movhi	r2,8192
 2009514:	10bfffc4 	addi	r2,r2,-1
 2009518:	14001c36 	bltu	r2,r16,200958c <__pack_d+0x100>
 200951c:	2100ffc4 	addi	r4,r4,1023
 2009520:	8006963a 	slli	r3,r16,24
 2009524:	8804d23a 	srli	r2,r17,8
 2009528:	8020913a 	slli	r16,r16,4
 200952c:	2101ffcc 	andi	r4,r4,2047
 2009530:	1884b03a 	or	r2,r3,r2
 2009534:	8020d33a 	srli	r16,r16,12
 2009538:	00000306 	br	2009548 <__pack_d+0xbc>
 200953c:	0009883a 	mov	r4,zero
 2009540:	0005883a 	mov	r2,zero
 2009544:	0021883a 	mov	r16,zero
 2009548:	2008953a 	slli	r4,r4,20
 200954c:	982697fa 	slli	r19,r19,31
 2009550:	00c00434 	movhi	r3,16
 2009554:	18ffffc4 	addi	r3,r3,-1
 2009558:	80e0703a 	and	r16,r16,r3
 200955c:	8106b03a 	or	r3,r16,r4
 2009560:	1cc6b03a 	or	r3,r3,r19
 2009564:	dfc00717 	ldw	ra,28(sp)
 2009568:	dd800617 	ldw	r22,24(sp)
 200956c:	dd400517 	ldw	r21,20(sp)
 2009570:	dd000417 	ldw	r20,16(sp)
 2009574:	dcc00317 	ldw	r19,12(sp)
 2009578:	dc800217 	ldw	r18,8(sp)
 200957c:	dc400117 	ldw	r17,4(sp)
 2009580:	dc000017 	ldw	r16,0(sp)
 2009584:	dec00804 	addi	sp,sp,32
 2009588:	f800283a 	ret
 200958c:	800697fa 	slli	r3,r16,31
 2009590:	8804d07a 	srli	r2,r17,1
 2009594:	21010004 	addi	r4,r4,1024
 2009598:	8020d07a 	srli	r16,r16,1
 200959c:	18a2b03a 	or	r17,r3,r2
 20095a0:	003fdf06 	br	2009520 <__pack_d+0x94>
 20095a4:	88c0400c 	andi	r3,r17,256
 20095a8:	183fd926 	beq	r3,zero,2009510 <__pack_d+0x84>
 20095ac:	8885883a 	add	r2,r17,r2
 20095b0:	1463803a 	cmpltu	r17,r2,r17
 20095b4:	8c21883a 	add	r16,r17,r16
 20095b8:	1023883a 	mov	r17,r2
 20095bc:	003fd406 	br	2009510 <__pack_d+0x84>
 20095c0:	0101ffc4 	movi	r4,2047
 20095c4:	0005883a 	mov	r2,zero
 20095c8:	0021883a 	mov	r16,zero
 20095cc:	003fde06 	br	2009548 <__pack_d+0xbc>
 20095d0:	84000234 	orhi	r16,r16,8
 20095d4:	00c00434 	movhi	r3,16
 20095d8:	18ffffc4 	addi	r3,r3,-1
 20095dc:	8805883a 	mov	r2,r17
 20095e0:	80e0703a 	and	r16,r16,r3
 20095e4:	0101ffc4 	movi	r4,2047
 20095e8:	003fd706 	br	2009548 <__pack_d+0xbc>
 20095ec:	1129c83a 	sub	r20,r2,r4
 20095f0:	00800e04 	movi	r2,56
 20095f4:	15002716 	blt	r2,r20,2009694 <__pack_d+0x208>
 20095f8:	800b883a 	mov	r5,r16
 20095fc:	a00d883a 	mov	r6,r20
 2009600:	8809883a 	mov	r4,r17
 2009604:	20098840 	call	2009884 <__lshrdi3>
 2009608:	9009883a 	mov	r4,r18
 200960c:	000b883a 	mov	r5,zero
 2009610:	a00d883a 	mov	r6,r20
 2009614:	102d883a 	mov	r22,r2
 2009618:	182b883a 	mov	r21,r3
 200961c:	20098c80 	call	20098c8 <__ashldi3>
 2009620:	1009003a 	cmpeq	r4,r2,zero
 2009624:	1907c83a 	sub	r3,r3,r4
 2009628:	10bfffc4 	addi	r2,r2,-1
 200962c:	1c20703a 	and	r16,r3,r16
 2009630:	1444703a 	and	r2,r2,r17
 2009634:	1404b03a 	or	r2,r2,r16
 2009638:	1004c03a 	cmpne	r2,r2,zero
 200963c:	1584b03a 	or	r2,r2,r22
 2009640:	11003fcc 	andi	r4,r2,255
 2009644:	01402004 	movi	r5,128
 2009648:	a807883a 	mov	r3,r21
 200964c:	2140131e 	bne	r4,r5,200969c <__pack_d+0x210>
 2009650:	1140400c 	andi	r5,r2,256
 2009654:	28000426 	beq	r5,zero,2009668 <__pack_d+0x1dc>
 2009658:	1109883a 	add	r4,r2,r4
 200965c:	2085803a 	cmpltu	r2,r4,r2
 2009660:	1547883a 	add	r3,r2,r21
 2009664:	2005883a 	mov	r2,r4
 2009668:	1808963a 	slli	r4,r3,24
 200966c:	1004d23a 	srli	r2,r2,8
 2009670:	1820913a 	slli	r16,r3,4
 2009674:	01440034 	movhi	r5,4096
 2009678:	297fffc4 	addi	r5,r5,-1
 200967c:	2084b03a 	or	r2,r4,r2
 2009680:	8020d33a 	srli	r16,r16,12
 2009684:	01000044 	movi	r4,1
 2009688:	28ffaf36 	bltu	r5,r3,2009548 <__pack_d+0xbc>
 200968c:	0009883a 	mov	r4,zero
 2009690:	003fad06 	br	2009548 <__pack_d+0xbc>
 2009694:	0005883a 	mov	r2,zero
 2009698:	0007883a 	mov	r3,zero
 200969c:	11001fc4 	addi	r4,r2,127
 20096a0:	2085803a 	cmpltu	r2,r4,r2
 20096a4:	10c7883a 	add	r3,r2,r3
 20096a8:	2005883a 	mov	r2,r4
 20096ac:	003fee06 	br	2009668 <__pack_d+0x1dc>

020096b0 <__unpack_d>:
 20096b0:	21800117 	ldw	r6,4(r4)
 20096b4:	20c00017 	ldw	r3,0(r4)
 20096b8:	3004d7fa 	srli	r2,r6,31
 20096bc:	3008d53a 	srli	r4,r6,20
 20096c0:	28800115 	stw	r2,4(r5)
 20096c4:	2101ffcc 	andi	r4,r4,2047
 20096c8:	00800434 	movhi	r2,16
 20096cc:	10bfffc4 	addi	r2,r2,-1
 20096d0:	3084703a 	and	r2,r6,r2
 20096d4:	20001a1e 	bne	r4,zero,2009740 <__unpack_d+0x90>
 20096d8:	1888b03a 	or	r4,r3,r2
 20096dc:	20002626 	beq	r4,zero,2009778 <__unpack_d+0xc8>
 20096e0:	1808d63a 	srli	r4,r3,24
 20096e4:	1004923a 	slli	r2,r2,8
 20096e8:	01bf0084 	movi	r6,-1022
 20096ec:	29800215 	stw	r6,8(r5)
 20096f0:	2084b03a 	or	r2,r4,r2
 20096f4:	010000c4 	movi	r4,3
 20096f8:	29000015 	stw	r4,0(r5)
 20096fc:	02040034 	movhi	r8,4096
 2009700:	423fffc4 	addi	r8,r8,-1
 2009704:	1806923a 	slli	r3,r3,8
 2009708:	40801836 	bltu	r8,r2,200976c <__unpack_d+0xbc>
 200970c:	013f0044 	movi	r4,-1023
 2009710:	18cd883a 	add	r6,r3,r3
 2009714:	30c7803a 	cmpltu	r3,r6,r3
 2009718:	1085883a 	add	r2,r2,r2
 200971c:	1885883a 	add	r2,r3,r2
 2009720:	200f883a 	mov	r7,r4
 2009724:	3007883a 	mov	r3,r6
 2009728:	213fffc4 	addi	r4,r4,-1
 200972c:	40bff82e 	bgeu	r8,r2,2009710 <__unpack_d+0x60>
 2009730:	29c00215 	stw	r7,8(r5)
 2009734:	28c00315 	stw	r3,12(r5)
 2009738:	28800415 	stw	r2,16(r5)
 200973c:	f800283a 	ret
 2009740:	01c1ffc4 	movi	r7,2047
 2009744:	21c00f26 	beq	r4,r7,2009784 <__unpack_d+0xd4>
 2009748:	180cd63a 	srli	r6,r3,24
 200974c:	1004923a 	slli	r2,r2,8
 2009750:	213f0044 	addi	r4,r4,-1023
 2009754:	1806923a 	slli	r3,r3,8
 2009758:	3084b03a 	or	r2,r6,r2
 200975c:	29000215 	stw	r4,8(r5)
 2009760:	010000c4 	movi	r4,3
 2009764:	10840034 	orhi	r2,r2,4096
 2009768:	29000015 	stw	r4,0(r5)
 200976c:	28c00315 	stw	r3,12(r5)
 2009770:	28800415 	stw	r2,16(r5)
 2009774:	f800283a 	ret
 2009778:	00800084 	movi	r2,2
 200977c:	28800015 	stw	r2,0(r5)
 2009780:	f800283a 	ret
 2009784:	1888b03a 	or	r4,r3,r2
 2009788:	20000526 	beq	r4,zero,20097a0 <__unpack_d+0xf0>
 200978c:	3180022c 	andhi	r6,r6,8
 2009790:	30000626 	beq	r6,zero,20097ac <__unpack_d+0xfc>
 2009794:	01000044 	movi	r4,1
 2009798:	29000015 	stw	r4,0(r5)
 200979c:	003ff306 	br	200976c <__unpack_d+0xbc>
 20097a0:	00800104 	movi	r2,4
 20097a4:	28800015 	stw	r2,0(r5)
 20097a8:	f800283a 	ret
 20097ac:	28000015 	stw	zero,0(r5)
 20097b0:	003fee06 	br	200976c <__unpack_d+0xbc>

020097b4 <__fpcmp_parts_d>:
 20097b4:	20c00017 	ldw	r3,0(r4)
 20097b8:	00800044 	movi	r2,1
 20097bc:	10c0142e 	bgeu	r2,r3,2009810 <__fpcmp_parts_d+0x5c>
 20097c0:	29800017 	ldw	r6,0(r5)
 20097c4:	1180122e 	bgeu	r2,r6,2009810 <__fpcmp_parts_d+0x5c>
 20097c8:	01c00104 	movi	r7,4
 20097cc:	19c02826 	beq	r3,r7,2009870 <__fpcmp_parts_d+0xbc>
 20097d0:	31c00926 	beq	r6,r7,20097f8 <__fpcmp_parts_d+0x44>
 20097d4:	01c00084 	movi	r7,2
 20097d8:	19c00626 	beq	r3,r7,20097f4 <__fpcmp_parts_d+0x40>
 20097dc:	31c00a26 	beq	r6,r7,2009808 <__fpcmp_parts_d+0x54>
 20097e0:	20c00117 	ldw	r3,4(r4)
 20097e4:	29800117 	ldw	r6,4(r5)
 20097e8:	19800b26 	beq	r3,r6,2009818 <__fpcmp_parts_d+0x64>
 20097ec:	1800041e 	bne	r3,zero,2009800 <__fpcmp_parts_d+0x4c>
 20097f0:	f800283a 	ret
 20097f4:	30c01a26 	beq	r6,r3,2009860 <__fpcmp_parts_d+0xac>
 20097f8:	28800117 	ldw	r2,4(r5)
 20097fc:	1000041e 	bne	r2,zero,2009810 <__fpcmp_parts_d+0x5c>
 2009800:	00bfffc4 	movi	r2,-1
 2009804:	f800283a 	ret
 2009808:	20800117 	ldw	r2,4(r4)
 200980c:	103ffc1e 	bne	r2,zero,2009800 <__fpcmp_parts_d+0x4c>
 2009810:	00800044 	movi	r2,1
 2009814:	f800283a 	ret
 2009818:	21c00217 	ldw	r7,8(r4)
 200981c:	29800217 	ldw	r6,8(r5)
 2009820:	31c0020e 	bge	r6,r7,200982c <__fpcmp_parts_d+0x78>
 2009824:	183ff61e 	bne	r3,zero,2009800 <__fpcmp_parts_d+0x4c>
 2009828:	f800283a 	ret
 200982c:	39800a16 	blt	r7,r6,2009858 <__fpcmp_parts_d+0xa4>
 2009830:	20800417 	ldw	r2,16(r4)
 2009834:	29800417 	ldw	r6,16(r5)
 2009838:	21c00317 	ldw	r7,12(r4)
 200983c:	29000317 	ldw	r4,12(r5)
 2009840:	30800936 	bltu	r6,r2,2009868 <__fpcmp_parts_d+0xb4>
 2009844:	1180011e 	bne	r2,r6,200984c <__fpcmp_parts_d+0x98>
 2009848:	21c00736 	bltu	r4,r7,2009868 <__fpcmp_parts_d+0xb4>
 200984c:	11800236 	bltu	r2,r6,2009858 <__fpcmp_parts_d+0xa4>
 2009850:	3080031e 	bne	r6,r2,2009860 <__fpcmp_parts_d+0xac>
 2009854:	3900022e 	bgeu	r7,r4,2009860 <__fpcmp_parts_d+0xac>
 2009858:	183fe926 	beq	r3,zero,2009800 <__fpcmp_parts_d+0x4c>
 200985c:	003fec06 	br	2009810 <__fpcmp_parts_d+0x5c>
 2009860:	0005883a 	mov	r2,zero
 2009864:	f800283a 	ret
 2009868:	183fe926 	beq	r3,zero,2009810 <__fpcmp_parts_d+0x5c>
 200986c:	003fe406 	br	2009800 <__fpcmp_parts_d+0x4c>
 2009870:	30ffe51e 	bne	r6,r3,2009808 <__fpcmp_parts_d+0x54>
 2009874:	28c00117 	ldw	r3,4(r5)
 2009878:	20800117 	ldw	r2,4(r4)
 200987c:	1885c83a 	sub	r2,r3,r2
 2009880:	f800283a 	ret

02009884 <__lshrdi3>:
 2009884:	2005883a 	mov	r2,r4
 2009888:	2807883a 	mov	r3,r5
 200988c:	30000826 	beq	r6,zero,20098b0 <__lshrdi3+0x2c>
 2009890:	01000804 	movi	r4,32
 2009894:	2189c83a 	sub	r4,r4,r6
 2009898:	0100060e 	bge	zero,r4,20098b4 <__lshrdi3+0x30>
 200989c:	1184d83a 	srl	r2,r2,r6
 20098a0:	2908983a 	sll	r4,r5,r4
 20098a4:	298cd83a 	srl	r6,r5,r6
 20098a8:	2084b03a 	or	r2,r4,r2
 20098ac:	3007883a 	mov	r3,r6
 20098b0:	f800283a 	ret
 20098b4:	0105c83a 	sub	r2,zero,r4
 20098b8:	000d883a 	mov	r6,zero
 20098bc:	2884d83a 	srl	r2,r5,r2
 20098c0:	3007883a 	mov	r3,r6
 20098c4:	003ffa06 	br	20098b0 <__lshrdi3+0x2c>

020098c8 <__ashldi3>:
 20098c8:	2005883a 	mov	r2,r4
 20098cc:	2807883a 	mov	r3,r5
 20098d0:	30000826 	beq	r6,zero,20098f4 <__ashldi3+0x2c>
 20098d4:	01000804 	movi	r4,32
 20098d8:	2189c83a 	sub	r4,r4,r6
 20098dc:	0100060e 	bge	zero,r4,20098f8 <__ashldi3+0x30>
 20098e0:	1108d83a 	srl	r4,r2,r4
 20098e4:	2986983a 	sll	r3,r5,r6
 20098e8:	118c983a 	sll	r6,r2,r6
 20098ec:	20c6b03a 	or	r3,r4,r3
 20098f0:	3005883a 	mov	r2,r6
 20098f4:	f800283a 	ret
 20098f8:	0107c83a 	sub	r3,zero,r4
 20098fc:	000d883a 	mov	r6,zero
 2009900:	10c6983a 	sll	r3,r2,r3
 2009904:	3005883a 	mov	r2,r6
 2009908:	003ffa06 	br	20098f4 <__ashldi3+0x2c>

0200990c <_printf_r>:
 200990c:	defffd04 	addi	sp,sp,-12
 2009910:	dfc00015 	stw	ra,0(sp)
 2009914:	d9800115 	stw	r6,4(sp)
 2009918:	d9c00215 	stw	r7,8(sp)
 200991c:	280d883a 	mov	r6,r5
 2009920:	21400217 	ldw	r5,8(r4)
 2009924:	d9c00104 	addi	r7,sp,4
 2009928:	2009b900 	call	2009b90 <___vfprintf_internal_r>
 200992c:	dfc00017 	ldw	ra,0(sp)
 2009930:	dec00304 	addi	sp,sp,12
 2009934:	f800283a 	ret

02009938 <printf>:
 2009938:	defffc04 	addi	sp,sp,-16
 200993c:	dfc00015 	stw	ra,0(sp)
 2009940:	d9400115 	stw	r5,4(sp)
 2009944:	d9800215 	stw	r6,8(sp)
 2009948:	d9c00315 	stw	r7,12(sp)
 200994c:	008080b4 	movhi	r2,514
 2009950:	10a4ee04 	addi	r2,r2,-27720
 2009954:	10800017 	ldw	r2,0(r2)
 2009958:	200b883a 	mov	r5,r4
 200995c:	d9800104 	addi	r6,sp,4
 2009960:	11000217 	ldw	r4,8(r2)
 2009964:	200ba0c0 	call	200ba0c <__vfprintf_internal>
 2009968:	dfc00017 	ldw	ra,0(sp)
 200996c:	dec00404 	addi	sp,sp,16
 2009970:	f800283a 	ret

02009974 <_puts_r>:
 2009974:	defff604 	addi	sp,sp,-40
 2009978:	dc400815 	stw	r17,32(sp)
 200997c:	2023883a 	mov	r17,r4
 2009980:	2809883a 	mov	r4,r5
 2009984:	dc000715 	stw	r16,28(sp)
 2009988:	dfc00915 	stw	ra,36(sp)
 200998c:	2821883a 	mov	r16,r5
 2009990:	2009ad00 	call	2009ad0 <strlen>
 2009994:	10c00044 	addi	r3,r2,1
 2009998:	d8800115 	stw	r2,4(sp)
 200999c:	89400217 	ldw	r5,8(r17)
 20099a0:	00808074 	movhi	r2,513
 20099a4:	109d3d04 	addi	r2,r2,29940
 20099a8:	d8800215 	stw	r2,8(sp)
 20099ac:	00800044 	movi	r2,1
 20099b0:	d8800315 	stw	r2,12(sp)
 20099b4:	8809883a 	mov	r4,r17
 20099b8:	00800084 	movi	r2,2
 20099bc:	d9800404 	addi	r6,sp,16
 20099c0:	dc000015 	stw	r16,0(sp)
 20099c4:	d8c00615 	stw	r3,24(sp)
 20099c8:	dec00415 	stw	sp,16(sp)
 20099cc:	d8800515 	stw	r2,20(sp)
 20099d0:	200dd0c0 	call	200dd0c <__sfvwrite_r>
 20099d4:	1000061e 	bne	r2,zero,20099f0 <_puts_r+0x7c>
 20099d8:	00800284 	movi	r2,10
 20099dc:	dfc00917 	ldw	ra,36(sp)
 20099e0:	dc400817 	ldw	r17,32(sp)
 20099e4:	dc000717 	ldw	r16,28(sp)
 20099e8:	dec00a04 	addi	sp,sp,40
 20099ec:	f800283a 	ret
 20099f0:	00bfffc4 	movi	r2,-1
 20099f4:	003ff906 	br	20099dc <_puts_r+0x68>

020099f8 <puts>:
 20099f8:	008080b4 	movhi	r2,514
 20099fc:	10a4ee04 	addi	r2,r2,-27720
 2009a00:	200b883a 	mov	r5,r4
 2009a04:	11000017 	ldw	r4,0(r2)
 2009a08:	20099741 	jmpi	2009974 <_puts_r>

02009a0c <_sprintf_r>:
 2009a0c:	deffe704 	addi	sp,sp,-100
 2009a10:	2807883a 	mov	r3,r5
 2009a14:	dfc01715 	stw	ra,92(sp)
 2009a18:	d9c01815 	stw	r7,96(sp)
 2009a1c:	00a00034 	movhi	r2,32768
 2009a20:	10bfffc4 	addi	r2,r2,-1
 2009a24:	02008204 	movi	r8,520
 2009a28:	d8800215 	stw	r2,8(sp)
 2009a2c:	d8800515 	stw	r2,20(sp)
 2009a30:	d80b883a 	mov	r5,sp
 2009a34:	d9c01804 	addi	r7,sp,96
 2009a38:	00bfffc4 	movi	r2,-1
 2009a3c:	d8c00015 	stw	r3,0(sp)
 2009a40:	d8c00415 	stw	r3,16(sp)
 2009a44:	da00030d 	sth	r8,12(sp)
 2009a48:	d880038d 	sth	r2,14(sp)
 2009a4c:	2009b900 	call	2009b90 <___vfprintf_internal_r>
 2009a50:	d8c00017 	ldw	r3,0(sp)
 2009a54:	18000005 	stb	zero,0(r3)
 2009a58:	dfc01717 	ldw	ra,92(sp)
 2009a5c:	dec01904 	addi	sp,sp,100
 2009a60:	f800283a 	ret

02009a64 <sprintf>:
 2009a64:	deffe604 	addi	sp,sp,-104
 2009a68:	2007883a 	mov	r3,r4
 2009a6c:	dfc01715 	stw	ra,92(sp)
 2009a70:	d9801815 	stw	r6,96(sp)
 2009a74:	d9c01915 	stw	r7,100(sp)
 2009a78:	008080b4 	movhi	r2,514
 2009a7c:	10a4ee04 	addi	r2,r2,-27720
 2009a80:	11000017 	ldw	r4,0(r2)
 2009a84:	00a00034 	movhi	r2,32768
 2009a88:	10bfffc4 	addi	r2,r2,-1
 2009a8c:	280d883a 	mov	r6,r5
 2009a90:	02008204 	movi	r8,520
 2009a94:	d8800215 	stw	r2,8(sp)
 2009a98:	d8800515 	stw	r2,20(sp)
 2009a9c:	d80b883a 	mov	r5,sp
 2009aa0:	d9c01804 	addi	r7,sp,96
 2009aa4:	00bfffc4 	movi	r2,-1
 2009aa8:	d8c00015 	stw	r3,0(sp)
 2009aac:	d8c00415 	stw	r3,16(sp)
 2009ab0:	da00030d 	sth	r8,12(sp)
 2009ab4:	d880038d 	sth	r2,14(sp)
 2009ab8:	2009b900 	call	2009b90 <___vfprintf_internal_r>
 2009abc:	d8c00017 	ldw	r3,0(sp)
 2009ac0:	18000005 	stb	zero,0(r3)
 2009ac4:	dfc01717 	ldw	ra,92(sp)
 2009ac8:	dec01a04 	addi	sp,sp,104
 2009acc:	f800283a 	ret

02009ad0 <strlen>:
 2009ad0:	208000cc 	andi	r2,r4,3
 2009ad4:	10001f1e 	bne	r2,zero,2009b54 <strlen+0x84>
 2009ad8:	20800017 	ldw	r2,0(r4)
 2009adc:	01ffbff4 	movhi	r7,65279
 2009ae0:	39ffbfc4 	addi	r7,r7,-257
 2009ae4:	01a02074 	movhi	r6,32897
 2009ae8:	31a02004 	addi	r6,r6,-32640
 2009aec:	11c7883a 	add	r3,r2,r7
 2009af0:	0084303a 	nor	r2,zero,r2
 2009af4:	1886703a 	and	r3,r3,r2
 2009af8:	1986703a 	and	r3,r3,r6
 2009afc:	2005883a 	mov	r2,r4
 2009b00:	1800101e 	bne	r3,zero,2009b44 <strlen+0x74>
 2009b04:	10800104 	addi	r2,r2,4
 2009b08:	10c00017 	ldw	r3,0(r2)
 2009b0c:	19cb883a 	add	r5,r3,r7
 2009b10:	00c6303a 	nor	r3,zero,r3
 2009b14:	28c6703a 	and	r3,r5,r3
 2009b18:	1986703a 	and	r3,r3,r6
 2009b1c:	1800091e 	bne	r3,zero,2009b44 <strlen+0x74>
 2009b20:	10800104 	addi	r2,r2,4
 2009b24:	10c00017 	ldw	r3,0(r2)
 2009b28:	19cb883a 	add	r5,r3,r7
 2009b2c:	00c6303a 	nor	r3,zero,r3
 2009b30:	28c6703a 	and	r3,r5,r3
 2009b34:	1986703a 	and	r3,r3,r6
 2009b38:	183ff226 	beq	r3,zero,2009b04 <strlen+0x34>
 2009b3c:	00000106 	br	2009b44 <strlen+0x74>
 2009b40:	10800044 	addi	r2,r2,1
 2009b44:	10c00007 	ldb	r3,0(r2)
 2009b48:	183ffd1e 	bne	r3,zero,2009b40 <strlen+0x70>
 2009b4c:	1105c83a 	sub	r2,r2,r4
 2009b50:	f800283a 	ret
 2009b54:	2005883a 	mov	r2,r4
 2009b58:	003ffa06 	br	2009b44 <strlen+0x74>

02009b5c <__sprint_r>:
 2009b5c:	30800217 	ldw	r2,8(r6)
 2009b60:	defffe04 	addi	sp,sp,-8
 2009b64:	dc000015 	stw	r16,0(sp)
 2009b68:	dfc00115 	stw	ra,4(sp)
 2009b6c:	3021883a 	mov	r16,r6
 2009b70:	10000226 	beq	r2,zero,2009b7c <__sprint_r+0x20>
 2009b74:	200dd0c0 	call	200dd0c <__sfvwrite_r>
 2009b78:	80000215 	stw	zero,8(r16)
 2009b7c:	80000115 	stw	zero,4(r16)
 2009b80:	dfc00117 	ldw	ra,4(sp)
 2009b84:	dc000017 	ldw	r16,0(sp)
 2009b88:	dec00204 	addi	sp,sp,8
 2009b8c:	f800283a 	ret

02009b90 <___vfprintf_internal_r>:
 2009b90:	defeb904 	addi	sp,sp,-1308
 2009b94:	dc013d15 	stw	r16,1268(sp)
 2009b98:	d9013015 	stw	r4,1216(sp)
 2009b9c:	dfc14615 	stw	ra,1304(sp)
 2009ba0:	df014515 	stw	fp,1300(sp)
 2009ba4:	ddc14415 	stw	r23,1296(sp)
 2009ba8:	dd814315 	stw	r22,1292(sp)
 2009bac:	dd414215 	stw	r21,1288(sp)
 2009bb0:	dd014115 	stw	r20,1284(sp)
 2009bb4:	dcc14015 	stw	r19,1280(sp)
 2009bb8:	dc813f15 	stw	r18,1276(sp)
 2009bbc:	dc413e15 	stw	r17,1272(sp)
 2009bc0:	d9412915 	stw	r5,1188(sp)
 2009bc4:	3021883a 	mov	r16,r6
 2009bc8:	d9c12d15 	stw	r7,1204(sp)
 2009bcc:	200e3f80 	call	200e3f8 <_localeconv_r>
 2009bd0:	10800017 	ldw	r2,0(r2)
 2009bd4:	d9013017 	ldw	r4,1216(sp)
 2009bd8:	d8013315 	stw	zero,1228(sp)
 2009bdc:	d8813715 	stw	r2,1244(sp)
 2009be0:	d8013415 	stw	zero,1232(sp)
 2009be4:	20000226 	beq	r4,zero,2009bf0 <___vfprintf_internal_r+0x60>
 2009be8:	20800e17 	ldw	r2,56(r4)
 2009bec:	10014b26 	beq	r2,zero,200a11c <___vfprintf_internal_r+0x58c>
 2009bf0:	d8c12917 	ldw	r3,1188(sp)
 2009bf4:	1880030b 	ldhu	r2,12(r3)
 2009bf8:	10c0020c 	andi	r3,r2,8
 2009bfc:	18ffffcc 	andi	r3,r3,65535
 2009c00:	18e0001c 	xori	r3,r3,32768
 2009c04:	18e00004 	addi	r3,r3,-32768
 2009c08:	1800ed26 	beq	r3,zero,2009fc0 <___vfprintf_internal_r+0x430>
 2009c0c:	d9012917 	ldw	r4,1188(sp)
 2009c10:	20c00417 	ldw	r3,16(r4)
 2009c14:	1800ea26 	beq	r3,zero,2009fc0 <___vfprintf_internal_r+0x430>
 2009c18:	1100068c 	andi	r4,r2,26
 2009c1c:	00c00284 	movi	r3,10
 2009c20:	20c0f026 	beq	r4,r3,2009fe4 <___vfprintf_internal_r+0x454>
 2009c24:	d9010dc4 	addi	r4,sp,1079
 2009c28:	d8810e04 	addi	r2,sp,1080
 2009c2c:	dc413017 	ldw	r17,1216(sp)
 2009c30:	d8c00404 	addi	r3,sp,16
 2009c34:	d9012615 	stw	r4,1176(sp)
 2009c38:	1109c83a 	sub	r4,r2,r4
 2009c3c:	d8812715 	stw	r2,1180(sp)
 2009c40:	d8c11b15 	stw	r3,1132(sp)
 2009c44:	d8011d15 	stw	zero,1140(sp)
 2009c48:	d8011c15 	stw	zero,1136(sp)
 2009c4c:	802b883a 	mov	r21,r16
 2009c50:	d8013215 	stw	zero,1224(sp)
 2009c54:	d8013615 	stw	zero,1240(sp)
 2009c58:	d8013515 	stw	zero,1236(sp)
 2009c5c:	d8012c15 	stw	zero,1200(sp)
 2009c60:	1813883a 	mov	r9,r3
 2009c64:	d9013915 	stw	r4,1252(sp)
 2009c68:	a8800007 	ldb	r2,0(r21)
 2009c6c:	1002f326 	beq	r2,zero,200a83c <___vfprintf_internal_r+0xcac>
 2009c70:	00c00944 	movi	r3,37
 2009c74:	a825883a 	mov	r18,r21
 2009c78:	10c0021e 	bne	r2,r3,2009c84 <___vfprintf_internal_r+0xf4>
 2009c7c:	00001406 	br	2009cd0 <___vfprintf_internal_r+0x140>
 2009c80:	10c00326 	beq	r2,r3,2009c90 <___vfprintf_internal_r+0x100>
 2009c84:	94800044 	addi	r18,r18,1
 2009c88:	90800007 	ldb	r2,0(r18)
 2009c8c:	103ffc1e 	bne	r2,zero,2009c80 <___vfprintf_internal_r+0xf0>
 2009c90:	9561c83a 	sub	r16,r18,r21
 2009c94:	80000e26 	beq	r16,zero,2009cd0 <___vfprintf_internal_r+0x140>
 2009c98:	da011d17 	ldw	r8,1140(sp)
 2009c9c:	d8c11c17 	ldw	r3,1136(sp)
 2009ca0:	4d400015 	stw	r21,0(r9)
 2009ca4:	4c000115 	stw	r16,4(r9)
 2009ca8:	4411883a 	add	r8,r8,r16
 2009cac:	18c00044 	addi	r3,r3,1
 2009cb0:	da011d15 	stw	r8,1140(sp)
 2009cb4:	d8c11c15 	stw	r3,1136(sp)
 2009cb8:	008001c4 	movi	r2,7
 2009cbc:	10c11016 	blt	r2,r3,200a100 <___vfprintf_internal_r+0x570>
 2009cc0:	4a400204 	addi	r9,r9,8
 2009cc4:	d8812c17 	ldw	r2,1200(sp)
 2009cc8:	1405883a 	add	r2,r2,r16
 2009ccc:	d8812c15 	stw	r2,1200(sp)
 2009cd0:	90800007 	ldb	r2,0(r18)
 2009cd4:	1000ee26 	beq	r2,zero,200a090 <___vfprintf_internal_r+0x500>
 2009cd8:	95400044 	addi	r21,r18,1
 2009cdc:	94800047 	ldb	r18,1(r18)
 2009ce0:	073fffc4 	movi	fp,-1
 2009ce4:	e007883a 	mov	r3,fp
 2009ce8:	d8012585 	stb	zero,1174(sp)
 2009cec:	d8012e15 	stw	zero,1208(sp)
 2009cf0:	0021883a 	mov	r16,zero
 2009cf4:	05001604 	movi	r20,88
 2009cf8:	04c00244 	movi	r19,9
 2009cfc:	4839883a 	mov	fp,r9
 2009d00:	ad400044 	addi	r21,r21,1
 2009d04:	90bff804 	addi	r2,r18,-32
 2009d08:	a080462e 	bgeu	r20,r2,2009e24 <___vfprintf_internal_r+0x294>
 2009d0c:	e013883a 	mov	r9,fp
 2009d10:	9000df26 	beq	r18,zero,200a090 <___vfprintf_internal_r+0x500>
 2009d14:	00c00044 	movi	r3,1
 2009d18:	d8c12815 	stw	r3,1184(sp)
 2009d1c:	dc810405 	stb	r18,1040(sp)
 2009d20:	d8012585 	stb	zero,1174(sp)
 2009d24:	d8c12b15 	stw	r3,1196(sp)
 2009d28:	dcc10404 	addi	r19,sp,1040
 2009d2c:	d8013115 	stw	zero,1220(sp)
 2009d30:	80c0008c 	andi	r3,r16,2
 2009d34:	d8c12a15 	stw	r3,1192(sp)
 2009d38:	18000326 	beq	r3,zero,2009d48 <___vfprintf_internal_r+0x1b8>
 2009d3c:	d8c12817 	ldw	r3,1184(sp)
 2009d40:	18c00084 	addi	r3,r3,2
 2009d44:	d8c12815 	stw	r3,1184(sp)
 2009d48:	80c0210c 	andi	r3,r16,132
 2009d4c:	d8c12f15 	stw	r3,1212(sp)
 2009d50:	1802251e 	bne	r3,zero,200a5e8 <___vfprintf_internal_r+0xa58>
 2009d54:	d9012e17 	ldw	r4,1208(sp)
 2009d58:	d8c12817 	ldw	r3,1184(sp)
 2009d5c:	20edc83a 	sub	r22,r4,r3
 2009d60:	0582210e 	bge	zero,r22,200a5e8 <___vfprintf_internal_r+0xa58>
 2009d64:	02800404 	movi	r10,16
 2009d68:	da011d17 	ldw	r8,1140(sp)
 2009d6c:	d8c11c17 	ldw	r3,1136(sp)
 2009d70:	05c08074 	movhi	r23,513
 2009d74:	bddd4e84 	addi	r23,r23,30010
 2009d78:	5580200e 	bge	r10,r22,2009dfc <___vfprintf_internal_r+0x26c>
 2009d7c:	dc813815 	stw	r18,1248(sp)
 2009d80:	5039883a 	mov	fp,r10
 2009d84:	b825883a 	mov	r18,r23
 2009d88:	050001c4 	movi	r20,7
 2009d8c:	b02f883a 	mov	r23,r22
 2009d90:	802d883a 	mov	r22,r16
 2009d94:	dc012917 	ldw	r16,1188(sp)
 2009d98:	00000306 	br	2009da8 <___vfprintf_internal_r+0x218>
 2009d9c:	bdfffc04 	addi	r23,r23,-16
 2009da0:	4a400204 	addi	r9,r9,8
 2009da4:	e5c0110e 	bge	fp,r23,2009dec <___vfprintf_internal_r+0x25c>
 2009da8:	4c800015 	stw	r18,0(r9)
 2009dac:	4f000115 	stw	fp,4(r9)
 2009db0:	42000404 	addi	r8,r8,16
 2009db4:	18c00044 	addi	r3,r3,1
 2009db8:	da011d15 	stw	r8,1140(sp)
 2009dbc:	d8c11c15 	stw	r3,1136(sp)
 2009dc0:	a0fff60e 	bge	r20,r3,2009d9c <___vfprintf_internal_r+0x20c>
 2009dc4:	8809883a 	mov	r4,r17
 2009dc8:	800b883a 	mov	r5,r16
 2009dcc:	d9811b04 	addi	r6,sp,1132
 2009dd0:	2009b5c0 	call	2009b5c <__sprint_r>
 2009dd4:	1000b41e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 2009dd8:	bdfffc04 	addi	r23,r23,-16
 2009ddc:	da011d17 	ldw	r8,1140(sp)
 2009de0:	d8c11c17 	ldw	r3,1136(sp)
 2009de4:	da400404 	addi	r9,sp,16
 2009de8:	e5ffef16 	blt	fp,r23,2009da8 <___vfprintf_internal_r+0x218>
 2009dec:	b021883a 	mov	r16,r22
 2009df0:	b82d883a 	mov	r22,r23
 2009df4:	902f883a 	mov	r23,r18
 2009df8:	dc813817 	ldw	r18,1248(sp)
 2009dfc:	4dc00015 	stw	r23,0(r9)
 2009e00:	4d800115 	stw	r22,4(r9)
 2009e04:	4591883a 	add	r8,r8,r22
 2009e08:	18c00044 	addi	r3,r3,1
 2009e0c:	da011d15 	stw	r8,1140(sp)
 2009e10:	d8c11c15 	stw	r3,1136(sp)
 2009e14:	008001c4 	movi	r2,7
 2009e18:	10c3fe16 	blt	r2,r3,200ae14 <___vfprintf_internal_r+0x1284>
 2009e1c:	4a400204 	addi	r9,r9,8
 2009e20:	0001f306 	br	200a5f0 <___vfprintf_internal_r+0xa60>
 2009e24:	1085883a 	add	r2,r2,r2
 2009e28:	1085883a 	add	r2,r2,r2
 2009e2c:	01008074 	movhi	r4,513
 2009e30:	21279004 	addi	r4,r4,-25024
 2009e34:	1105883a 	add	r2,r2,r4
 2009e38:	10800017 	ldw	r2,0(r2)
 2009e3c:	1000683a 	jmp	r2
 2009e40:	0200a51c 	xori	r8,zero,660
 2009e44:	02009d0c 	andi	r8,zero,628
 2009e48:	02009d0c 	andi	r8,zero,628
 2009e4c:	0200a534 	movhi	r8,660
 2009e50:	02009d0c 	andi	r8,zero,628
 2009e54:	02009d0c 	andi	r8,zero,628
 2009e58:	02009d0c 	andi	r8,zero,628
 2009e5c:	02009d0c 	andi	r8,zero,628
 2009e60:	02009d0c 	andi	r8,zero,628
 2009e64:	02009d0c 	andi	r8,zero,628
 2009e68:	0200a3ec 	andhi	r8,zero,655
 2009e6c:	0200a580 	call	200a58 <__alt_mem_sdram-0x1dff5a8>
 2009e70:	02009d0c 	andi	r8,zero,628
 2009e74:	02009fb4 	movhi	r8,638
 2009e78:	0200a354 	movui	r8,653
 2009e7c:	02009d0c 	andi	r8,zero,628
 2009e80:	0200a540 	call	200a54 <__alt_mem_sdram-0x1dff5ac>
 2009e84:	0200a54c 	andi	r8,zero,661
 2009e88:	0200a54c 	andi	r8,zero,661
 2009e8c:	0200a54c 	andi	r8,zero,661
 2009e90:	0200a54c 	andi	r8,zero,661
 2009e94:	0200a54c 	andi	r8,zero,661
 2009e98:	0200a54c 	andi	r8,zero,661
 2009e9c:	0200a54c 	andi	r8,zero,661
 2009ea0:	0200a54c 	andi	r8,zero,661
 2009ea4:	0200a54c 	andi	r8,zero,661
 2009ea8:	02009d0c 	andi	r8,zero,628
 2009eac:	02009d0c 	andi	r8,zero,628
 2009eb0:	02009d0c 	andi	r8,zero,628
 2009eb4:	02009d0c 	andi	r8,zero,628
 2009eb8:	02009d0c 	andi	r8,zero,628
 2009ebc:	02009d0c 	andi	r8,zero,628
 2009ec0:	02009d0c 	andi	r8,zero,628
 2009ec4:	02009d0c 	andi	r8,zero,628
 2009ec8:	02009d0c 	andi	r8,zero,628
 2009ecc:	02009d0c 	andi	r8,zero,628
 2009ed0:	0200a124 	muli	r8,zero,644
 2009ed4:	0200a1e4 	muli	r8,zero,647
 2009ed8:	02009d0c 	andi	r8,zero,628
 2009edc:	0200a1e4 	muli	r8,zero,647
 2009ee0:	02009d0c 	andi	r8,zero,628
 2009ee4:	02009d0c 	andi	r8,zero,628
 2009ee8:	02009d0c 	andi	r8,zero,628
 2009eec:	02009d0c 	andi	r8,zero,628
 2009ef0:	0200a278 	rdprs	r8,zero,649
 2009ef4:	02009d0c 	andi	r8,zero,628
 2009ef8:	02009d0c 	andi	r8,zero,628
 2009efc:	0200a284 	movi	r8,650
 2009f00:	02009d0c 	andi	r8,zero,628
 2009f04:	02009d0c 	andi	r8,zero,628
 2009f08:	02009d0c 	andi	r8,zero,628
 2009f0c:	02009d0c 	andi	r8,zero,628
 2009f10:	02009d0c 	andi	r8,zero,628
 2009f14:	0200a2bc 	xorhi	r8,zero,650
 2009f18:	02009d0c 	andi	r8,zero,628
 2009f1c:	02009d0c 	andi	r8,zero,628
 2009f20:	0200a2f8 	rdprs	r8,zero,651
 2009f24:	02009d0c 	andi	r8,zero,628
 2009f28:	02009d0c 	andi	r8,zero,628
 2009f2c:	02009d0c 	andi	r8,zero,628
 2009f30:	02009d0c 	andi	r8,zero,628
 2009f34:	02009d0c 	andi	r8,zero,628
 2009f38:	02009d0c 	andi	r8,zero,628
 2009f3c:	02009d0c 	andi	r8,zero,628
 2009f40:	02009d0c 	andi	r8,zero,628
 2009f44:	02009d0c 	andi	r8,zero,628
 2009f48:	02009d0c 	andi	r8,zero,628
 2009f4c:	0200a590 	cmplti	r8,zero,662
 2009f50:	0200a5c4 	movi	r8,663
 2009f54:	0200a1e4 	muli	r8,zero,647
 2009f58:	0200a1e4 	muli	r8,zero,647
 2009f5c:	0200a1e4 	muli	r8,zero,647
 2009f60:	0200a510 	cmplti	r8,zero,660
 2009f64:	0200a5c4 	movi	r8,663
 2009f68:	02009d0c 	andi	r8,zero,628
 2009f6c:	02009d0c 	andi	r8,zero,628
 2009f70:	0200a39c 	xori	r8,zero,654
 2009f74:	02009d0c 	andi	r8,zero,628
 2009f78:	0200a3b4 	movhi	r8,654
 2009f7c:	0200a5d0 	cmplti	r8,zero,663
 2009f80:	0200a414 	movui	r8,656
 2009f84:	0200a464 	muli	r8,zero,657
 2009f88:	02009d0c 	andi	r8,zero,628
 2009f8c:	0200a470 	cmpltui	r8,zero,657
 2009f90:	02009d0c 	andi	r8,zero,628
 2009f94:	0200a5dc 	xori	r8,zero,663
 2009f98:	02009d0c 	andi	r8,zero,628
 2009f9c:	02009d0c 	andi	r8,zero,628
 2009fa0:	0200a4d4 	movui	r8,659
 2009fa4:	d9012e17 	ldw	r4,1208(sp)
 2009fa8:	d8812d15 	stw	r2,1204(sp)
 2009fac:	0109c83a 	sub	r4,zero,r4
 2009fb0:	d9012e15 	stw	r4,1208(sp)
 2009fb4:	84000114 	ori	r16,r16,4
 2009fb8:	ac800007 	ldb	r18,0(r21)
 2009fbc:	003f5006 	br	2009d00 <___vfprintf_internal_r+0x170>
 2009fc0:	d9013017 	ldw	r4,1216(sp)
 2009fc4:	d9412917 	ldw	r5,1188(sp)
 2009fc8:	200ba300 	call	200ba30 <__swsetup_r>
 2009fcc:	10003d1e 	bne	r2,zero,200a0c4 <___vfprintf_internal_r+0x534>
 2009fd0:	d8c12917 	ldw	r3,1188(sp)
 2009fd4:	1880030b 	ldhu	r2,12(r3)
 2009fd8:	00c00284 	movi	r3,10
 2009fdc:	1100068c 	andi	r4,r2,26
 2009fe0:	20ff101e 	bne	r4,r3,2009c24 <___vfprintf_internal_r+0x94>
 2009fe4:	d9012917 	ldw	r4,1188(sp)
 2009fe8:	20c0038b 	ldhu	r3,14(r4)
 2009fec:	193fffcc 	andi	r4,r3,65535
 2009ff0:	2120001c 	xori	r4,r4,32768
 2009ff4:	21200004 	addi	r4,r4,-32768
 2009ff8:	203f0a16 	blt	r4,zero,2009c24 <___vfprintf_internal_r+0x94>
 2009ffc:	d9012917 	ldw	r4,1188(sp)
 200a000:	d9c12d17 	ldw	r7,1204(sp)
 200a004:	10bfff4c 	andi	r2,r2,65533
 200a008:	22800717 	ldw	r10,28(r4)
 200a00c:	22400917 	ldw	r9,36(r4)
 200a010:	d9013017 	ldw	r4,1216(sp)
 200a014:	02010004 	movi	r8,1024
 200a018:	d881070d 	sth	r2,1052(sp)
 200a01c:	d9410404 	addi	r5,sp,1040
 200a020:	d8800404 	addi	r2,sp,16
 200a024:	800d883a 	mov	r6,r16
 200a028:	d8c1078d 	sth	r3,1054(sp)
 200a02c:	da810b15 	stw	r10,1068(sp)
 200a030:	da410d15 	stw	r9,1076(sp)
 200a034:	d8810415 	stw	r2,1040(sp)
 200a038:	d8810815 	stw	r2,1056(sp)
 200a03c:	da010615 	stw	r8,1048(sp)
 200a040:	da010915 	stw	r8,1060(sp)
 200a044:	d8010a15 	stw	zero,1064(sp)
 200a048:	2009b900 	call	2009b90 <___vfprintf_internal_r>
 200a04c:	d8812c15 	stw	r2,1200(sp)
 200a050:	10000416 	blt	r2,zero,200a064 <___vfprintf_internal_r+0x4d4>
 200a054:	d9013017 	ldw	r4,1216(sp)
 200a058:	d9410404 	addi	r5,sp,1040
 200a05c:	200d3fc0 	call	200d3fc <_fflush_r>
 200a060:	1006501e 	bne	r2,zero,200b9a4 <___vfprintf_internal_r+0x1e14>
 200a064:	d881070b 	ldhu	r2,1052(sp)
 200a068:	1080100c 	andi	r2,r2,64
 200a06c:	10bfffcc 	andi	r2,r2,65535
 200a070:	10a0001c 	xori	r2,r2,32768
 200a074:	10a00004 	addi	r2,r2,-32768
 200a078:	10001426 	beq	r2,zero,200a0cc <___vfprintf_internal_r+0x53c>
 200a07c:	d8c12917 	ldw	r3,1188(sp)
 200a080:	1880030b 	ldhu	r2,12(r3)
 200a084:	10801014 	ori	r2,r2,64
 200a088:	1880030d 	sth	r2,12(r3)
 200a08c:	00000f06 	br	200a0cc <___vfprintf_internal_r+0x53c>
 200a090:	d8811d17 	ldw	r2,1140(sp)
 200a094:	10000426 	beq	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200a098:	d9013017 	ldw	r4,1216(sp)
 200a09c:	d9412917 	ldw	r5,1188(sp)
 200a0a0:	d9811b04 	addi	r6,sp,1132
 200a0a4:	2009b5c0 	call	2009b5c <__sprint_r>
 200a0a8:	d8c12917 	ldw	r3,1188(sp)
 200a0ac:	1880030b 	ldhu	r2,12(r3)
 200a0b0:	1080100c 	andi	r2,r2,64
 200a0b4:	10bfffcc 	andi	r2,r2,65535
 200a0b8:	10a0001c 	xori	r2,r2,32768
 200a0bc:	10a00004 	addi	r2,r2,-32768
 200a0c0:	10000226 	beq	r2,zero,200a0cc <___vfprintf_internal_r+0x53c>
 200a0c4:	00bfffc4 	movi	r2,-1
 200a0c8:	d8812c15 	stw	r2,1200(sp)
 200a0cc:	d8812c17 	ldw	r2,1200(sp)
 200a0d0:	dfc14617 	ldw	ra,1304(sp)
 200a0d4:	df014517 	ldw	fp,1300(sp)
 200a0d8:	ddc14417 	ldw	r23,1296(sp)
 200a0dc:	dd814317 	ldw	r22,1292(sp)
 200a0e0:	dd414217 	ldw	r21,1288(sp)
 200a0e4:	dd014117 	ldw	r20,1284(sp)
 200a0e8:	dcc14017 	ldw	r19,1280(sp)
 200a0ec:	dc813f17 	ldw	r18,1276(sp)
 200a0f0:	dc413e17 	ldw	r17,1272(sp)
 200a0f4:	dc013d17 	ldw	r16,1268(sp)
 200a0f8:	dec14704 	addi	sp,sp,1308
 200a0fc:	f800283a 	ret
 200a100:	d9412917 	ldw	r5,1188(sp)
 200a104:	8809883a 	mov	r4,r17
 200a108:	d9811b04 	addi	r6,sp,1132
 200a10c:	2009b5c0 	call	2009b5c <__sprint_r>
 200a110:	103fe51e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200a114:	da400404 	addi	r9,sp,16
 200a118:	003eea06 	br	2009cc4 <___vfprintf_internal_r+0x134>
 200a11c:	200d6b80 	call	200d6b8 <__sinit>
 200a120:	003eb306 	br	2009bf0 <___vfprintf_internal_r+0x60>
 200a124:	e013883a 	mov	r9,fp
 200a128:	84000414 	ori	r16,r16,16
 200a12c:	1839883a 	mov	fp,r3
 200a130:	8080080c 	andi	r2,r16,32
 200a134:	10034426 	beq	r2,zero,200ae48 <___vfprintf_internal_r+0x12b8>
 200a138:	d8c12d17 	ldw	r3,1204(sp)
 200a13c:	18800117 	ldw	r2,4(r3)
 200a140:	1dc00017 	ldw	r23,0(r3)
 200a144:	18c00204 	addi	r3,r3,8
 200a148:	d8c12d15 	stw	r3,1204(sp)
 200a14c:	102d883a 	mov	r22,r2
 200a150:	1003020e 	bge	r2,zero,200ad5c <___vfprintf_internal_r+0x11cc>
 200a154:	05efc83a 	sub	r23,zero,r23
 200a158:	b804c03a 	cmpne	r2,r23,zero
 200a15c:	05adc83a 	sub	r22,zero,r22
 200a160:	b0adc83a 	sub	r22,r22,r2
 200a164:	00800b44 	movi	r2,45
 200a168:	d8812585 	stb	r2,1174(sp)
 200a16c:	00c00044 	movi	r3,1
 200a170:	bd84b03a 	or	r2,r23,r22
 200a174:	e0000216 	blt	fp,zero,200a180 <___vfprintf_internal_r+0x5f0>
 200a178:	013fdfc4 	movi	r4,-129
 200a17c:	8120703a 	and	r16,r16,r4
 200a180:	1001cc1e 	bne	r2,zero,200a8b4 <___vfprintf_internal_r+0xd24>
 200a184:	e001cb1e 	bne	fp,zero,200a8b4 <___vfprintf_internal_r+0xd24>
 200a188:	18c03fcc 	andi	r3,r3,255
 200a18c:	1802ca1e 	bne	r3,zero,200acb8 <___vfprintf_internal_r+0x1128>
 200a190:	8080004c 	andi	r2,r16,1
 200a194:	1002c826 	beq	r2,zero,200acb8 <___vfprintf_internal_r+0x1128>
 200a198:	d8c13917 	ldw	r3,1252(sp)
 200a19c:	00800c04 	movi	r2,48
 200a1a0:	d8810dc5 	stb	r2,1079(sp)
 200a1a4:	d8c12b15 	stw	r3,1196(sp)
 200a1a8:	dcc10dc4 	addi	r19,sp,1079
 200a1ac:	d8812b17 	ldw	r2,1196(sp)
 200a1b0:	d8812815 	stw	r2,1184(sp)
 200a1b4:	1700010e 	bge	r2,fp,200a1bc <___vfprintf_internal_r+0x62c>
 200a1b8:	df012815 	stw	fp,1184(sp)
 200a1bc:	d8812583 	ldbu	r2,1174(sp)
 200a1c0:	df013115 	stw	fp,1220(sp)
 200a1c4:	10803fcc 	andi	r2,r2,255
 200a1c8:	1080201c 	xori	r2,r2,128
 200a1cc:	10bfe004 	addi	r2,r2,-128
 200a1d0:	103ed726 	beq	r2,zero,2009d30 <___vfprintf_internal_r+0x1a0>
 200a1d4:	d8c12817 	ldw	r3,1184(sp)
 200a1d8:	18c00044 	addi	r3,r3,1
 200a1dc:	d8c12815 	stw	r3,1184(sp)
 200a1e0:	003ed306 	br	2009d30 <___vfprintf_internal_r+0x1a0>
 200a1e4:	8080020c 	andi	r2,r16,8
 200a1e8:	e013883a 	mov	r9,fp
 200a1ec:	1839883a 	mov	fp,r3
 200a1f0:	1003a626 	beq	r2,zero,200b08c <___vfprintf_internal_r+0x14fc>
 200a1f4:	d9012d17 	ldw	r4,1204(sp)
 200a1f8:	25800017 	ldw	r22,0(r4)
 200a1fc:	25000117 	ldw	r20,4(r4)
 200a200:	21000204 	addi	r4,r4,8
 200a204:	d9012d15 	stw	r4,1204(sp)
 200a208:	dd813315 	stw	r22,1228(sp)
 200a20c:	dd013415 	stw	r20,1232(sp)
 200a210:	b009883a 	mov	r4,r22
 200a214:	a00b883a 	mov	r5,r20
 200a218:	da413c15 	stw	r9,1264(sp)
 200a21c:	20108440 	call	2010844 <__isinfd>
 200a220:	da413c17 	ldw	r9,1264(sp)
 200a224:	b009883a 	mov	r4,r22
 200a228:	a00b883a 	mov	r5,r20
 200a22c:	10041d26 	beq	r2,zero,200b2a4 <___vfprintf_internal_r+0x1714>
 200a230:	000d883a 	mov	r6,zero
 200a234:	000f883a 	mov	r7,zero
 200a238:	20121ac0 	call	20121ac <__ltdf2>
 200a23c:	da413c17 	ldw	r9,1264(sp)
 200a240:	1004da16 	blt	r2,zero,200b5ac <___vfprintf_internal_r+0x1a1c>
 200a244:	d8812583 	ldbu	r2,1174(sp)
 200a248:	00c011c4 	movi	r3,71
 200a24c:	1c83d116 	blt	r3,r18,200b194 <___vfprintf_internal_r+0x1604>
 200a250:	04c08074 	movhi	r19,513
 200a254:	9cdd3e04 	addi	r19,r19,29944
 200a258:	00c000c4 	movi	r3,3
 200a25c:	d8c12815 	stw	r3,1184(sp)
 200a260:	00ffdfc4 	movi	r3,-129
 200a264:	80e0703a 	and	r16,r16,r3
 200a268:	d8c12817 	ldw	r3,1184(sp)
 200a26c:	d8013115 	stw	zero,1220(sp)
 200a270:	d8c12b15 	stw	r3,1196(sp)
 200a274:	003fd306 	br	200a1c4 <___vfprintf_internal_r+0x634>
 200a278:	84000214 	ori	r16,r16,8
 200a27c:	ac800007 	ldb	r18,0(r21)
 200a280:	003e9f06 	br	2009d00 <___vfprintf_internal_r+0x170>
 200a284:	e013883a 	mov	r9,fp
 200a288:	84000414 	ori	r16,r16,16
 200a28c:	1839883a 	mov	fp,r3
 200a290:	8080080c 	andi	r2,r16,32
 200a294:	10031d26 	beq	r2,zero,200af0c <___vfprintf_internal_r+0x137c>
 200a298:	d8812d17 	ldw	r2,1204(sp)
 200a29c:	0007883a 	mov	r3,zero
 200a2a0:	15c00017 	ldw	r23,0(r2)
 200a2a4:	15800117 	ldw	r22,4(r2)
 200a2a8:	10800204 	addi	r2,r2,8
 200a2ac:	d8812d15 	stw	r2,1204(sp)
 200a2b0:	d8012585 	stb	zero,1174(sp)
 200a2b4:	bd84b03a 	or	r2,r23,r22
 200a2b8:	003fae06 	br	200a174 <___vfprintf_internal_r+0x5e4>
 200a2bc:	e013883a 	mov	r9,fp
 200a2c0:	84000414 	ori	r16,r16,16
 200a2c4:	1839883a 	mov	fp,r3
 200a2c8:	8080080c 	andi	r2,r16,32
 200a2cc:	1002e726 	beq	r2,zero,200ae6c <___vfprintf_internal_r+0x12dc>
 200a2d0:	d8c12d17 	ldw	r3,1204(sp)
 200a2d4:	d9012d17 	ldw	r4,1204(sp)
 200a2d8:	1dc00017 	ldw	r23,0(r3)
 200a2dc:	1d800117 	ldw	r22,4(r3)
 200a2e0:	21000204 	addi	r4,r4,8
 200a2e4:	00c00044 	movi	r3,1
 200a2e8:	d9012d15 	stw	r4,1204(sp)
 200a2ec:	bd84b03a 	or	r2,r23,r22
 200a2f0:	d8012585 	stb	zero,1174(sp)
 200a2f4:	003f9f06 	br	200a174 <___vfprintf_internal_r+0x5e4>
 200a2f8:	e013883a 	mov	r9,fp
 200a2fc:	1839883a 	mov	fp,r3
 200a300:	00c08074 	movhi	r3,513
 200a304:	18dd4204 	addi	r3,r3,29960
 200a308:	d8c13615 	stw	r3,1240(sp)
 200a30c:	8080080c 	andi	r2,r16,32
 200a310:	10007726 	beq	r2,zero,200a4f0 <___vfprintf_internal_r+0x960>
 200a314:	d9012d17 	ldw	r4,1204(sp)
 200a318:	25c00017 	ldw	r23,0(r4)
 200a31c:	25800117 	ldw	r22,4(r4)
 200a320:	21000204 	addi	r4,r4,8
 200a324:	d9012d15 	stw	r4,1204(sp)
 200a328:	8080004c 	andi	r2,r16,1
 200a32c:	1002c226 	beq	r2,zero,200ae38 <___vfprintf_internal_r+0x12a8>
 200a330:	bd84b03a 	or	r2,r23,r22
 200a334:	10035d26 	beq	r2,zero,200b0ac <___vfprintf_internal_r+0x151c>
 200a338:	00c00c04 	movi	r3,48
 200a33c:	d8c12505 	stb	r3,1172(sp)
 200a340:	dc812545 	stb	r18,1173(sp)
 200a344:	84000094 	ori	r16,r16,2
 200a348:	00c00084 	movi	r3,2
 200a34c:	d8012585 	stb	zero,1174(sp)
 200a350:	003f8806 	br	200a174 <___vfprintf_internal_r+0x5e4>
 200a354:	ac800007 	ldb	r18,0(r21)
 200a358:	00c00a84 	movi	r3,42
 200a35c:	adc00044 	addi	r23,r21,1
 200a360:	90c57526 	beq	r18,r3,200b938 <___vfprintf_internal_r+0x1da8>
 200a364:	95bff404 	addi	r22,r18,-48
 200a368:	0009883a 	mov	r4,zero
 200a36c:	9d84ff36 	bltu	r19,r22,200b76c <___vfprintf_internal_r+0x1bdc>
 200a370:	01400284 	movi	r5,10
 200a374:	20093b80 	call	20093b8 <__mulsi3>
 200a378:	bc800007 	ldb	r18,0(r23)
 200a37c:	b089883a 	add	r4,r22,r2
 200a380:	bdc00044 	addi	r23,r23,1
 200a384:	95bff404 	addi	r22,r18,-48
 200a388:	9dbff92e 	bgeu	r19,r22,200a370 <___vfprintf_internal_r+0x7e0>
 200a38c:	2007883a 	mov	r3,r4
 200a390:	20044316 	blt	r4,zero,200b4a0 <___vfprintf_internal_r+0x1910>
 200a394:	b82b883a 	mov	r21,r23
 200a398:	003e5a06 	br	2009d04 <___vfprintf_internal_r+0x174>
 200a39c:	ac800007 	ldb	r18,0(r21)
 200a3a0:	01001b04 	movi	r4,108
 200a3a4:	a805883a 	mov	r2,r21
 200a3a8:	91045526 	beq	r18,r4,200b500 <___vfprintf_internal_r+0x1970>
 200a3ac:	84000414 	ori	r16,r16,16
 200a3b0:	003e5306 	br	2009d00 <___vfprintf_internal_r+0x170>
 200a3b4:	8080080c 	andi	r2,r16,32
 200a3b8:	e013883a 	mov	r9,fp
 200a3bc:	10034026 	beq	r2,zero,200b0c0 <___vfprintf_internal_r+0x1530>
 200a3c0:	d9012d17 	ldw	r4,1204(sp)
 200a3c4:	20800017 	ldw	r2,0(r4)
 200a3c8:	d9012c17 	ldw	r4,1200(sp)
 200a3cc:	2007d7fa 	srai	r3,r4,31
 200a3d0:	d9012d17 	ldw	r4,1204(sp)
 200a3d4:	10c00115 	stw	r3,4(r2)
 200a3d8:	21000104 	addi	r4,r4,4
 200a3dc:	d9012d15 	stw	r4,1204(sp)
 200a3e0:	d9012c17 	ldw	r4,1200(sp)
 200a3e4:	11000015 	stw	r4,0(r2)
 200a3e8:	003e1f06 	br	2009c68 <___vfprintf_internal_r+0xd8>
 200a3ec:	d9012d17 	ldw	r4,1204(sp)
 200a3f0:	21000017 	ldw	r4,0(r4)
 200a3f4:	d9012e15 	stw	r4,1208(sp)
 200a3f8:	d9012d17 	ldw	r4,1204(sp)
 200a3fc:	20800104 	addi	r2,r4,4
 200a400:	d9012e17 	ldw	r4,1208(sp)
 200a404:	203ee716 	blt	r4,zero,2009fa4 <___vfprintf_internal_r+0x414>
 200a408:	d8812d15 	stw	r2,1204(sp)
 200a40c:	ac800007 	ldb	r18,0(r21)
 200a410:	003e3b06 	br	2009d00 <___vfprintf_internal_r+0x170>
 200a414:	e013883a 	mov	r9,fp
 200a418:	1839883a 	mov	fp,r3
 200a41c:	d8c12d17 	ldw	r3,1204(sp)
 200a420:	00800c04 	movi	r2,48
 200a424:	01008074 	movhi	r4,513
 200a428:	211d4704 	addi	r4,r4,29980
 200a42c:	1dc00017 	ldw	r23,0(r3)
 200a430:	18c00104 	addi	r3,r3,4
 200a434:	d8812505 	stb	r2,1172(sp)
 200a438:	00801e04 	movi	r2,120
 200a43c:	d8812545 	stb	r2,1173(sp)
 200a440:	d8c12d15 	stw	r3,1204(sp)
 200a444:	002d883a 	mov	r22,zero
 200a448:	84000094 	ori	r16,r16,2
 200a44c:	d9013615 	stw	r4,1240(sp)
 200a450:	00c00084 	movi	r3,2
 200a454:	04801e04 	movi	r18,120
 200a458:	b805883a 	mov	r2,r23
 200a45c:	d8012585 	stb	zero,1174(sp)
 200a460:	003f4406 	br	200a174 <___vfprintf_internal_r+0x5e4>
 200a464:	84000814 	ori	r16,r16,32
 200a468:	ac800007 	ldb	r18,0(r21)
 200a46c:	003e2406 	br	2009d00 <___vfprintf_internal_r+0x170>
 200a470:	d8812d17 	ldw	r2,1204(sp)
 200a474:	d8012585 	stb	zero,1174(sp)
 200a478:	e013883a 	mov	r9,fp
 200a47c:	14c00017 	ldw	r19,0(r2)
 200a480:	1839883a 	mov	fp,r3
 200a484:	15c00104 	addi	r23,r2,4
 200a488:	98045526 	beq	r19,zero,200b5e0 <___vfprintf_internal_r+0x1a50>
 200a48c:	9809883a 	mov	r4,r19
 200a490:	18043116 	blt	r3,zero,200b558 <___vfprintf_internal_r+0x19c8>
 200a494:	000b883a 	mov	r5,zero
 200a498:	180d883a 	mov	r6,r3
 200a49c:	da413c15 	stw	r9,1264(sp)
 200a4a0:	200ed580 	call	200ed58 <memchr>
 200a4a4:	da413c17 	ldw	r9,1264(sp)
 200a4a8:	10047a26 	beq	r2,zero,200b694 <___vfprintf_internal_r+0x1b04>
 200a4ac:	14c5c83a 	sub	r2,r2,r19
 200a4b0:	d8812b15 	stw	r2,1196(sp)
 200a4b4:	e083d40e 	bge	fp,r2,200b408 <___vfprintf_internal_r+0x1878>
 200a4b8:	df012815 	stw	fp,1184(sp)
 200a4bc:	e004e416 	blt	fp,zero,200b850 <___vfprintf_internal_r+0x1cc0>
 200a4c0:	d8812583 	ldbu	r2,1174(sp)
 200a4c4:	df012b15 	stw	fp,1196(sp)
 200a4c8:	ddc12d15 	stw	r23,1204(sp)
 200a4cc:	d8013115 	stw	zero,1220(sp)
 200a4d0:	003f3c06 	br	200a1c4 <___vfprintf_internal_r+0x634>
 200a4d4:	00808074 	movhi	r2,513
 200a4d8:	109d4704 	addi	r2,r2,29980
 200a4dc:	d8813615 	stw	r2,1240(sp)
 200a4e0:	8080080c 	andi	r2,r16,32
 200a4e4:	e013883a 	mov	r9,fp
 200a4e8:	1839883a 	mov	fp,r3
 200a4ec:	103f891e 	bne	r2,zero,200a314 <___vfprintf_internal_r+0x784>
 200a4f0:	8080040c 	andi	r2,r16,16
 200a4f4:	1002c326 	beq	r2,zero,200b004 <___vfprintf_internal_r+0x1474>
 200a4f8:	d8812d17 	ldw	r2,1204(sp)
 200a4fc:	002d883a 	mov	r22,zero
 200a500:	15c00017 	ldw	r23,0(r2)
 200a504:	10800104 	addi	r2,r2,4
 200a508:	d8812d15 	stw	r2,1204(sp)
 200a50c:	003f8606 	br	200a328 <___vfprintf_internal_r+0x798>
 200a510:	84001014 	ori	r16,r16,64
 200a514:	ac800007 	ldb	r18,0(r21)
 200a518:	003df906 	br	2009d00 <___vfprintf_internal_r+0x170>
 200a51c:	d8812587 	ldb	r2,1174(sp)
 200a520:	1002e51e 	bne	r2,zero,200b0b8 <___vfprintf_internal_r+0x1528>
 200a524:	00800804 	movi	r2,32
 200a528:	d8812585 	stb	r2,1174(sp)
 200a52c:	ac800007 	ldb	r18,0(r21)
 200a530:	003df306 	br	2009d00 <___vfprintf_internal_r+0x170>
 200a534:	84000054 	ori	r16,r16,1
 200a538:	ac800007 	ldb	r18,0(r21)
 200a53c:	003df006 	br	2009d00 <___vfprintf_internal_r+0x170>
 200a540:	84002014 	ori	r16,r16,128
 200a544:	ac800007 	ldb	r18,0(r21)
 200a548:	003ded06 	br	2009d00 <___vfprintf_internal_r+0x170>
 200a54c:	0009883a 	mov	r4,zero
 200a550:	95bff404 	addi	r22,r18,-48
 200a554:	182f883a 	mov	r23,r3
 200a558:	01400284 	movi	r5,10
 200a55c:	20093b80 	call	20093b8 <__mulsi3>
 200a560:	ac800007 	ldb	r18,0(r21)
 200a564:	1589883a 	add	r4,r2,r22
 200a568:	ad400044 	addi	r21,r21,1
 200a56c:	95bff404 	addi	r22,r18,-48
 200a570:	9dbff92e 	bgeu	r19,r22,200a558 <___vfprintf_internal_r+0x9c8>
 200a574:	b807883a 	mov	r3,r23
 200a578:	d9012e15 	stw	r4,1208(sp)
 200a57c:	003de106 	br	2009d04 <___vfprintf_internal_r+0x174>
 200a580:	00800ac4 	movi	r2,43
 200a584:	d8812585 	stb	r2,1174(sp)
 200a588:	ac800007 	ldb	r18,0(r21)
 200a58c:	003ddc06 	br	2009d00 <___vfprintf_internal_r+0x170>
 200a590:	d8c12d17 	ldw	r3,1204(sp)
 200a594:	d9012d17 	ldw	r4,1204(sp)
 200a598:	e013883a 	mov	r9,fp
 200a59c:	18800017 	ldw	r2,0(r3)
 200a5a0:	21000104 	addi	r4,r4,4
 200a5a4:	00c00044 	movi	r3,1
 200a5a8:	d8c12815 	stw	r3,1184(sp)
 200a5ac:	d8012585 	stb	zero,1174(sp)
 200a5b0:	d8810405 	stb	r2,1040(sp)
 200a5b4:	d9012d15 	stw	r4,1204(sp)
 200a5b8:	d8c12b15 	stw	r3,1196(sp)
 200a5bc:	dcc10404 	addi	r19,sp,1040
 200a5c0:	003dda06 	br	2009d2c <___vfprintf_internal_r+0x19c>
 200a5c4:	e013883a 	mov	r9,fp
 200a5c8:	1839883a 	mov	fp,r3
 200a5cc:	003ed806 	br	200a130 <___vfprintf_internal_r+0x5a0>
 200a5d0:	e013883a 	mov	r9,fp
 200a5d4:	1839883a 	mov	fp,r3
 200a5d8:	003f2d06 	br	200a290 <___vfprintf_internal_r+0x700>
 200a5dc:	e013883a 	mov	r9,fp
 200a5e0:	1839883a 	mov	fp,r3
 200a5e4:	003f3806 	br	200a2c8 <___vfprintf_internal_r+0x738>
 200a5e8:	da011d17 	ldw	r8,1140(sp)
 200a5ec:	d8c11c17 	ldw	r3,1136(sp)
 200a5f0:	d8812587 	ldb	r2,1174(sp)
 200a5f4:	10000b26 	beq	r2,zero,200a624 <___vfprintf_internal_r+0xa94>
 200a5f8:	d8812584 	addi	r2,sp,1174
 200a5fc:	48800015 	stw	r2,0(r9)
 200a600:	00800044 	movi	r2,1
 200a604:	48800115 	stw	r2,4(r9)
 200a608:	4091883a 	add	r8,r8,r2
 200a60c:	1887883a 	add	r3,r3,r2
 200a610:	da011d15 	stw	r8,1140(sp)
 200a614:	d8c11c15 	stw	r3,1136(sp)
 200a618:	008001c4 	movi	r2,7
 200a61c:	10c18e16 	blt	r2,r3,200ac58 <___vfprintf_internal_r+0x10c8>
 200a620:	4a400204 	addi	r9,r9,8
 200a624:	d9012a17 	ldw	r4,1192(sp)
 200a628:	20000b26 	beq	r4,zero,200a658 <___vfprintf_internal_r+0xac8>
 200a62c:	d8812504 	addi	r2,sp,1172
 200a630:	48800015 	stw	r2,0(r9)
 200a634:	00800084 	movi	r2,2
 200a638:	48800115 	stw	r2,4(r9)
 200a63c:	4091883a 	add	r8,r8,r2
 200a640:	18c00044 	addi	r3,r3,1
 200a644:	da011d15 	stw	r8,1140(sp)
 200a648:	d8c11c15 	stw	r3,1136(sp)
 200a64c:	008001c4 	movi	r2,7
 200a650:	10c17816 	blt	r2,r3,200ac34 <___vfprintf_internal_r+0x10a4>
 200a654:	4a400204 	addi	r9,r9,8
 200a658:	d9012f17 	ldw	r4,1212(sp)
 200a65c:	00802004 	movi	r2,128
 200a660:	2080fc26 	beq	r4,r2,200aa54 <___vfprintf_internal_r+0xec4>
 200a664:	d8813117 	ldw	r2,1220(sp)
 200a668:	d9012b17 	ldw	r4,1196(sp)
 200a66c:	112fc83a 	sub	r23,r2,r4
 200a670:	05c02a0e 	bge	zero,r23,200a71c <___vfprintf_internal_r+0xb8c>
 200a674:	07000404 	movi	fp,16
 200a678:	05008074 	movhi	r20,513
 200a67c:	a51d5284 	addi	r20,r20,30026
 200a680:	e5c01d0e 	bge	fp,r23,200a6f8 <___vfprintf_internal_r+0xb68>
 200a684:	dc812a15 	stw	r18,1192(sp)
 200a688:	058001c4 	movi	r22,7
 200a68c:	a025883a 	mov	r18,r20
 200a690:	8029883a 	mov	r20,r16
 200a694:	dc012917 	ldw	r16,1188(sp)
 200a698:	00000306 	br	200a6a8 <___vfprintf_internal_r+0xb18>
 200a69c:	bdfffc04 	addi	r23,r23,-16
 200a6a0:	4a400204 	addi	r9,r9,8
 200a6a4:	e5c0110e 	bge	fp,r23,200a6ec <___vfprintf_internal_r+0xb5c>
 200a6a8:	4c800015 	stw	r18,0(r9)
 200a6ac:	4f000115 	stw	fp,4(r9)
 200a6b0:	42000404 	addi	r8,r8,16
 200a6b4:	18c00044 	addi	r3,r3,1
 200a6b8:	da011d15 	stw	r8,1140(sp)
 200a6bc:	d8c11c15 	stw	r3,1136(sp)
 200a6c0:	b0fff60e 	bge	r22,r3,200a69c <___vfprintf_internal_r+0xb0c>
 200a6c4:	8809883a 	mov	r4,r17
 200a6c8:	800b883a 	mov	r5,r16
 200a6cc:	d9811b04 	addi	r6,sp,1132
 200a6d0:	2009b5c0 	call	2009b5c <__sprint_r>
 200a6d4:	103e741e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200a6d8:	bdfffc04 	addi	r23,r23,-16
 200a6dc:	da011d17 	ldw	r8,1140(sp)
 200a6e0:	d8c11c17 	ldw	r3,1136(sp)
 200a6e4:	da400404 	addi	r9,sp,16
 200a6e8:	e5ffef16 	blt	fp,r23,200a6a8 <___vfprintf_internal_r+0xb18>
 200a6ec:	a021883a 	mov	r16,r20
 200a6f0:	9029883a 	mov	r20,r18
 200a6f4:	dc812a17 	ldw	r18,1192(sp)
 200a6f8:	4d000015 	stw	r20,0(r9)
 200a6fc:	4dc00115 	stw	r23,4(r9)
 200a700:	45d1883a 	add	r8,r8,r23
 200a704:	18c00044 	addi	r3,r3,1
 200a708:	da011d15 	stw	r8,1140(sp)
 200a70c:	d8c11c15 	stw	r3,1136(sp)
 200a710:	008001c4 	movi	r2,7
 200a714:	10c13e16 	blt	r2,r3,200ac10 <___vfprintf_internal_r+0x1080>
 200a718:	4a400204 	addi	r9,r9,8
 200a71c:	8080400c 	andi	r2,r16,256
 200a720:	1000831e 	bne	r2,zero,200a930 <___vfprintf_internal_r+0xda0>
 200a724:	d8812b17 	ldw	r2,1196(sp)
 200a728:	4cc00015 	stw	r19,0(r9)
 200a72c:	48800115 	stw	r2,4(r9)
 200a730:	4091883a 	add	r8,r8,r2
 200a734:	18c00044 	addi	r3,r3,1
 200a738:	da011d15 	stw	r8,1140(sp)
 200a73c:	d8c11c15 	stw	r3,1136(sp)
 200a740:	008001c4 	movi	r2,7
 200a744:	10c05316 	blt	r2,r3,200a894 <___vfprintf_internal_r+0xd04>
 200a748:	4a400204 	addi	r9,r9,8
 200a74c:	8400010c 	andi	r16,r16,4
 200a750:	80002e26 	beq	r16,zero,200a80c <___vfprintf_internal_r+0xc7c>
 200a754:	d8812e17 	ldw	r2,1208(sp)
 200a758:	d8c12817 	ldw	r3,1184(sp)
 200a75c:	10e1c83a 	sub	r16,r2,r3
 200a760:	04002a0e 	bge	zero,r16,200a80c <___vfprintf_internal_r+0xc7c>
 200a764:	04800404 	movi	r18,16
 200a768:	d8c11c17 	ldw	r3,1136(sp)
 200a76c:	05c08074 	movhi	r23,513
 200a770:	bddd4e84 	addi	r23,r23,30010
 200a774:	9400170e 	bge	r18,r16,200a7d4 <___vfprintf_internal_r+0xc44>
 200a778:	04c001c4 	movi	r19,7
 200a77c:	dd012917 	ldw	r20,1188(sp)
 200a780:	00000306 	br	200a790 <___vfprintf_internal_r+0xc00>
 200a784:	843ffc04 	addi	r16,r16,-16
 200a788:	4a400204 	addi	r9,r9,8
 200a78c:	9400110e 	bge	r18,r16,200a7d4 <___vfprintf_internal_r+0xc44>
 200a790:	4dc00015 	stw	r23,0(r9)
 200a794:	4c800115 	stw	r18,4(r9)
 200a798:	42000404 	addi	r8,r8,16
 200a79c:	18c00044 	addi	r3,r3,1
 200a7a0:	da011d15 	stw	r8,1140(sp)
 200a7a4:	d8c11c15 	stw	r3,1136(sp)
 200a7a8:	98fff60e 	bge	r19,r3,200a784 <___vfprintf_internal_r+0xbf4>
 200a7ac:	8809883a 	mov	r4,r17
 200a7b0:	a00b883a 	mov	r5,r20
 200a7b4:	d9811b04 	addi	r6,sp,1132
 200a7b8:	2009b5c0 	call	2009b5c <__sprint_r>
 200a7bc:	103e3a1e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200a7c0:	843ffc04 	addi	r16,r16,-16
 200a7c4:	da011d17 	ldw	r8,1140(sp)
 200a7c8:	d8c11c17 	ldw	r3,1136(sp)
 200a7cc:	da400404 	addi	r9,sp,16
 200a7d0:	943fef16 	blt	r18,r16,200a790 <___vfprintf_internal_r+0xc00>
 200a7d4:	4dc00015 	stw	r23,0(r9)
 200a7d8:	4c000115 	stw	r16,4(r9)
 200a7dc:	8211883a 	add	r8,r16,r8
 200a7e0:	18c00044 	addi	r3,r3,1
 200a7e4:	da011d15 	stw	r8,1140(sp)
 200a7e8:	d8c11c15 	stw	r3,1136(sp)
 200a7ec:	008001c4 	movi	r2,7
 200a7f0:	10c0060e 	bge	r2,r3,200a80c <___vfprintf_internal_r+0xc7c>
 200a7f4:	d9412917 	ldw	r5,1188(sp)
 200a7f8:	8809883a 	mov	r4,r17
 200a7fc:	d9811b04 	addi	r6,sp,1132
 200a800:	2009b5c0 	call	2009b5c <__sprint_r>
 200a804:	103e281e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200a808:	da011d17 	ldw	r8,1140(sp)
 200a80c:	dd012817 	ldw	r20,1184(sp)
 200a810:	d9012e17 	ldw	r4,1208(sp)
 200a814:	a100010e 	bge	r20,r4,200a81c <___vfprintf_internal_r+0xc8c>
 200a818:	2029883a 	mov	r20,r4
 200a81c:	d8812c17 	ldw	r2,1200(sp)
 200a820:	1505883a 	add	r2,r2,r20
 200a824:	d8812c15 	stw	r2,1200(sp)
 200a828:	4000b91e 	bne	r8,zero,200ab10 <___vfprintf_internal_r+0xf80>
 200a82c:	d8011c15 	stw	zero,1136(sp)
 200a830:	a8800007 	ldb	r2,0(r21)
 200a834:	da400404 	addi	r9,sp,16
 200a838:	103d0d1e 	bne	r2,zero,2009c70 <___vfprintf_internal_r+0xe0>
 200a83c:	a825883a 	mov	r18,r21
 200a840:	003d2306 	br	2009cd0 <___vfprintf_internal_r+0x140>
 200a844:	d9412917 	ldw	r5,1188(sp)
 200a848:	8809883a 	mov	r4,r17
 200a84c:	d9811b04 	addi	r6,sp,1132
 200a850:	2009b5c0 	call	2009b5c <__sprint_r>
 200a854:	103e141e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200a858:	da011d17 	ldw	r8,1140(sp)
 200a85c:	da400404 	addi	r9,sp,16
 200a860:	8080004c 	andi	r2,r16,1
 200a864:	103fb926 	beq	r2,zero,200a74c <___vfprintf_internal_r+0xbbc>
 200a868:	d8c11c17 	ldw	r3,1136(sp)
 200a86c:	d9013717 	ldw	r4,1244(sp)
 200a870:	00800044 	movi	r2,1
 200a874:	48800115 	stw	r2,4(r9)
 200a878:	49000015 	stw	r4,0(r9)
 200a87c:	4091883a 	add	r8,r8,r2
 200a880:	1887883a 	add	r3,r3,r2
 200a884:	da011d15 	stw	r8,1140(sp)
 200a888:	d8c11c15 	stw	r3,1136(sp)
 200a88c:	008001c4 	movi	r2,7
 200a890:	10ffad0e 	bge	r2,r3,200a748 <___vfprintf_internal_r+0xbb8>
 200a894:	d9412917 	ldw	r5,1188(sp)
 200a898:	8809883a 	mov	r4,r17
 200a89c:	d9811b04 	addi	r6,sp,1132
 200a8a0:	2009b5c0 	call	2009b5c <__sprint_r>
 200a8a4:	103e001e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200a8a8:	da400404 	addi	r9,sp,16
 200a8ac:	da011d17 	ldw	r8,1140(sp)
 200a8b0:	003fa606 	br	200a74c <___vfprintf_internal_r+0xbbc>
 200a8b4:	18803fcc 	andi	r2,r3,255
 200a8b8:	00c00044 	movi	r3,1
 200a8bc:	10c10126 	beq	r2,r3,200acc4 <___vfprintf_internal_r+0x1134>
 200a8c0:	00c00084 	movi	r3,2
 200a8c4:	10c0ed26 	beq	r2,r3,200ac7c <___vfprintf_internal_r+0x10ec>
 200a8c8:	d8c10dc4 	addi	r3,sp,1079
 200a8cc:	b808d0fa 	srli	r4,r23,3
 200a8d0:	b00a977a 	slli	r5,r22,29
 200a8d4:	b02cd0fa 	srli	r22,r22,3
 200a8d8:	bdc001cc 	andi	r23,r23,7
 200a8dc:	b8800c04 	addi	r2,r23,48
 200a8e0:	292eb03a 	or	r23,r5,r4
 200a8e4:	18800005 	stb	r2,0(r3)
 200a8e8:	bd88b03a 	or	r4,r23,r22
 200a8ec:	1827883a 	mov	r19,r3
 200a8f0:	18ffffc4 	addi	r3,r3,-1
 200a8f4:	203ff51e 	bne	r4,zero,200a8cc <___vfprintf_internal_r+0xd3c>
 200a8f8:	8100004c 	andi	r4,r16,1
 200a8fc:	980b883a 	mov	r5,r19
 200a900:	20000726 	beq	r4,zero,200a920 <___vfprintf_internal_r+0xd90>
 200a904:	10803fcc 	andi	r2,r2,255
 200a908:	1080201c 	xori	r2,r2,128
 200a90c:	10bfe004 	addi	r2,r2,-128
 200a910:	01000c04 	movi	r4,48
 200a914:	11000226 	beq	r2,r4,200a920 <___vfprintf_internal_r+0xd90>
 200a918:	1827883a 	mov	r19,r3
 200a91c:	293fffc5 	stb	r4,-1(r5)
 200a920:	d8812717 	ldw	r2,1180(sp)
 200a924:	14c5c83a 	sub	r2,r2,r19
 200a928:	d8812b15 	stw	r2,1196(sp)
 200a92c:	003e1f06 	br	200a1ac <___vfprintf_internal_r+0x61c>
 200a930:	00801944 	movi	r2,101
 200a934:	14807c0e 	bge	r2,r18,200ab28 <___vfprintf_internal_r+0xf98>
 200a938:	d9013317 	ldw	r4,1228(sp)
 200a93c:	d9413417 	ldw	r5,1232(sp)
 200a940:	000d883a 	mov	r6,zero
 200a944:	000f883a 	mov	r7,zero
 200a948:	d8c13b15 	stw	r3,1260(sp)
 200a94c:	da013a15 	stw	r8,1256(sp)
 200a950:	da413c15 	stw	r9,1264(sp)
 200a954:	20120900 	call	2012090 <__eqdf2>
 200a958:	d8c13b17 	ldw	r3,1260(sp)
 200a95c:	da013a17 	ldw	r8,1256(sp)
 200a960:	da413c17 	ldw	r9,1264(sp)
 200a964:	1001001e 	bne	r2,zero,200ad68 <___vfprintf_internal_r+0x11d8>
 200a968:	00808074 	movhi	r2,513
 200a96c:	109d4e04 	addi	r2,r2,30008
 200a970:	48800015 	stw	r2,0(r9)
 200a974:	00800044 	movi	r2,1
 200a978:	48800115 	stw	r2,4(r9)
 200a97c:	4091883a 	add	r8,r8,r2
 200a980:	1887883a 	add	r3,r3,r2
 200a984:	da011d15 	stw	r8,1140(sp)
 200a988:	d8c11c15 	stw	r3,1136(sp)
 200a98c:	008001c4 	movi	r2,7
 200a990:	10c20316 	blt	r2,r3,200b1a0 <___vfprintf_internal_r+0x1610>
 200a994:	4a400204 	addi	r9,r9,8
 200a998:	d8812417 	ldw	r2,1168(sp)
 200a99c:	d8c13217 	ldw	r3,1224(sp)
 200a9a0:	10c00216 	blt	r2,r3,200a9ac <___vfprintf_internal_r+0xe1c>
 200a9a4:	8080004c 	andi	r2,r16,1
 200a9a8:	103f6826 	beq	r2,zero,200a74c <___vfprintf_internal_r+0xbbc>
 200a9ac:	d8c11c17 	ldw	r3,1136(sp)
 200a9b0:	d9013717 	ldw	r4,1244(sp)
 200a9b4:	00800044 	movi	r2,1
 200a9b8:	48800115 	stw	r2,4(r9)
 200a9bc:	49000015 	stw	r4,0(r9)
 200a9c0:	4091883a 	add	r8,r8,r2
 200a9c4:	1887883a 	add	r3,r3,r2
 200a9c8:	da011d15 	stw	r8,1140(sp)
 200a9cc:	d8c11c15 	stw	r3,1136(sp)
 200a9d0:	008001c4 	movi	r2,7
 200a9d4:	10c2ce16 	blt	r2,r3,200b510 <___vfprintf_internal_r+0x1980>
 200a9d8:	4a400204 	addi	r9,r9,8
 200a9dc:	d8813217 	ldw	r2,1224(sp)
 200a9e0:	14bfffc4 	addi	r18,r2,-1
 200a9e4:	04bf590e 	bge	zero,r18,200a74c <___vfprintf_internal_r+0xbbc>
 200a9e8:	04c00404 	movi	r19,16
 200a9ec:	d8c11c17 	ldw	r3,1136(sp)
 200a9f0:	05008074 	movhi	r20,513
 200a9f4:	a51d5284 	addi	r20,r20,30026
 200a9f8:	9c818a0e 	bge	r19,r18,200b024 <___vfprintf_internal_r+0x1494>
 200a9fc:	058001c4 	movi	r22,7
 200aa00:	ddc12917 	ldw	r23,1188(sp)
 200aa04:	00000306 	br	200aa14 <___vfprintf_internal_r+0xe84>
 200aa08:	4a400204 	addi	r9,r9,8
 200aa0c:	94bffc04 	addi	r18,r18,-16
 200aa10:	9c81840e 	bge	r19,r18,200b024 <___vfprintf_internal_r+0x1494>
 200aa14:	4d000015 	stw	r20,0(r9)
 200aa18:	4cc00115 	stw	r19,4(r9)
 200aa1c:	42000404 	addi	r8,r8,16
 200aa20:	18c00044 	addi	r3,r3,1
 200aa24:	da011d15 	stw	r8,1140(sp)
 200aa28:	d8c11c15 	stw	r3,1136(sp)
 200aa2c:	b0fff60e 	bge	r22,r3,200aa08 <___vfprintf_internal_r+0xe78>
 200aa30:	8809883a 	mov	r4,r17
 200aa34:	b80b883a 	mov	r5,r23
 200aa38:	d9811b04 	addi	r6,sp,1132
 200aa3c:	2009b5c0 	call	2009b5c <__sprint_r>
 200aa40:	103d991e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200aa44:	da011d17 	ldw	r8,1140(sp)
 200aa48:	d8c11c17 	ldw	r3,1136(sp)
 200aa4c:	da400404 	addi	r9,sp,16
 200aa50:	003fee06 	br	200aa0c <___vfprintf_internal_r+0xe7c>
 200aa54:	d8812e17 	ldw	r2,1208(sp)
 200aa58:	d9012817 	ldw	r4,1184(sp)
 200aa5c:	112fc83a 	sub	r23,r2,r4
 200aa60:	05ff000e 	bge	zero,r23,200a664 <___vfprintf_internal_r+0xad4>
 200aa64:	07000404 	movi	fp,16
 200aa68:	05008074 	movhi	r20,513
 200aa6c:	a51d5284 	addi	r20,r20,30026
 200aa70:	e5c01d0e 	bge	fp,r23,200aae8 <___vfprintf_internal_r+0xf58>
 200aa74:	dc812a15 	stw	r18,1192(sp)
 200aa78:	058001c4 	movi	r22,7
 200aa7c:	a025883a 	mov	r18,r20
 200aa80:	8029883a 	mov	r20,r16
 200aa84:	dc012917 	ldw	r16,1188(sp)
 200aa88:	00000306 	br	200aa98 <___vfprintf_internal_r+0xf08>
 200aa8c:	bdfffc04 	addi	r23,r23,-16
 200aa90:	4a400204 	addi	r9,r9,8
 200aa94:	e5c0110e 	bge	fp,r23,200aadc <___vfprintf_internal_r+0xf4c>
 200aa98:	4c800015 	stw	r18,0(r9)
 200aa9c:	4f000115 	stw	fp,4(r9)
 200aaa0:	42000404 	addi	r8,r8,16
 200aaa4:	18c00044 	addi	r3,r3,1
 200aaa8:	da011d15 	stw	r8,1140(sp)
 200aaac:	d8c11c15 	stw	r3,1136(sp)
 200aab0:	b0fff60e 	bge	r22,r3,200aa8c <___vfprintf_internal_r+0xefc>
 200aab4:	8809883a 	mov	r4,r17
 200aab8:	800b883a 	mov	r5,r16
 200aabc:	d9811b04 	addi	r6,sp,1132
 200aac0:	2009b5c0 	call	2009b5c <__sprint_r>
 200aac4:	103d781e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200aac8:	bdfffc04 	addi	r23,r23,-16
 200aacc:	da011d17 	ldw	r8,1140(sp)
 200aad0:	d8c11c17 	ldw	r3,1136(sp)
 200aad4:	da400404 	addi	r9,sp,16
 200aad8:	e5ffef16 	blt	fp,r23,200aa98 <___vfprintf_internal_r+0xf08>
 200aadc:	a021883a 	mov	r16,r20
 200aae0:	9029883a 	mov	r20,r18
 200aae4:	dc812a17 	ldw	r18,1192(sp)
 200aae8:	4d000015 	stw	r20,0(r9)
 200aaec:	4dc00115 	stw	r23,4(r9)
 200aaf0:	45d1883a 	add	r8,r8,r23
 200aaf4:	18c00044 	addi	r3,r3,1
 200aaf8:	da011d15 	stw	r8,1140(sp)
 200aafc:	d8c11c15 	stw	r3,1136(sp)
 200ab00:	008001c4 	movi	r2,7
 200ab04:	10c13616 	blt	r2,r3,200afe0 <___vfprintf_internal_r+0x1450>
 200ab08:	4a400204 	addi	r9,r9,8
 200ab0c:	003ed506 	br	200a664 <___vfprintf_internal_r+0xad4>
 200ab10:	d9412917 	ldw	r5,1188(sp)
 200ab14:	8809883a 	mov	r4,r17
 200ab18:	d9811b04 	addi	r6,sp,1132
 200ab1c:	2009b5c0 	call	2009b5c <__sprint_r>
 200ab20:	103f4226 	beq	r2,zero,200a82c <___vfprintf_internal_r+0xc9c>
 200ab24:	003d6006 	br	200a0a8 <___vfprintf_internal_r+0x518>
 200ab28:	d9013217 	ldw	r4,1224(sp)
 200ab2c:	00800044 	movi	r2,1
 200ab30:	4cc00015 	stw	r19,0(r9)
 200ab34:	1101000e 	bge	r2,r4,200af38 <___vfprintf_internal_r+0x13a8>
 200ab38:	00800044 	movi	r2,1
 200ab3c:	48800115 	stw	r2,4(r9)
 200ab40:	4091883a 	add	r8,r8,r2
 200ab44:	1887883a 	add	r3,r3,r2
 200ab48:	da011d15 	stw	r8,1140(sp)
 200ab4c:	d8c11c15 	stw	r3,1136(sp)
 200ab50:	008001c4 	movi	r2,7
 200ab54:	10c10c16 	blt	r2,r3,200af88 <___vfprintf_internal_r+0x13f8>
 200ab58:	4a400204 	addi	r9,r9,8
 200ab5c:	d8813717 	ldw	r2,1244(sp)
 200ab60:	48800015 	stw	r2,0(r9)
 200ab64:	00800044 	movi	r2,1
 200ab68:	48800115 	stw	r2,4(r9)
 200ab6c:	4091883a 	add	r8,r8,r2
 200ab70:	1887883a 	add	r3,r3,r2
 200ab74:	da011d15 	stw	r8,1140(sp)
 200ab78:	d8c11c15 	stw	r3,1136(sp)
 200ab7c:	008001c4 	movi	r2,7
 200ab80:	10c10a16 	blt	r2,r3,200afac <___vfprintf_internal_r+0x141c>
 200ab84:	4c800204 	addi	r18,r9,8
 200ab88:	d9013317 	ldw	r4,1228(sp)
 200ab8c:	d9413417 	ldw	r5,1232(sp)
 200ab90:	000d883a 	mov	r6,zero
 200ab94:	000f883a 	mov	r7,zero
 200ab98:	d8c13b15 	stw	r3,1260(sp)
 200ab9c:	da013a15 	stw	r8,1256(sp)
 200aba0:	20120ec0 	call	20120ec <__nedf2>
 200aba4:	d8c13b17 	ldw	r3,1260(sp)
 200aba8:	da013a17 	ldw	r8,1256(sp)
 200abac:	1000ba26 	beq	r2,zero,200ae98 <___vfprintf_internal_r+0x1308>
 200abb0:	d9013217 	ldw	r4,1224(sp)
 200abb4:	9cc00044 	addi	r19,r19,1
 200abb8:	94c00015 	stw	r19,0(r18)
 200abbc:	20bfffc4 	addi	r2,r4,-1
 200abc0:	90800115 	stw	r2,4(r18)
 200abc4:	4091883a 	add	r8,r8,r2
 200abc8:	18c00044 	addi	r3,r3,1
 200abcc:	da011d15 	stw	r8,1140(sp)
 200abd0:	d8c11c15 	stw	r3,1136(sp)
 200abd4:	008001c4 	movi	r2,7
 200abd8:	10c0e216 	blt	r2,r3,200af64 <___vfprintf_internal_r+0x13d4>
 200abdc:	94800204 	addi	r18,r18,8
 200abe0:	d9013517 	ldw	r4,1236(sp)
 200abe4:	d8811fc4 	addi	r2,sp,1151
 200abe8:	90800015 	stw	r2,0(r18)
 200abec:	91000115 	stw	r4,4(r18)
 200abf0:	4111883a 	add	r8,r8,r4
 200abf4:	18c00044 	addi	r3,r3,1
 200abf8:	da011d15 	stw	r8,1140(sp)
 200abfc:	d8c11c15 	stw	r3,1136(sp)
 200ac00:	008001c4 	movi	r2,7
 200ac04:	10ff2316 	blt	r2,r3,200a894 <___vfprintf_internal_r+0xd04>
 200ac08:	92400204 	addi	r9,r18,8
 200ac0c:	003ecf06 	br	200a74c <___vfprintf_internal_r+0xbbc>
 200ac10:	d9412917 	ldw	r5,1188(sp)
 200ac14:	8809883a 	mov	r4,r17
 200ac18:	d9811b04 	addi	r6,sp,1132
 200ac1c:	2009b5c0 	call	2009b5c <__sprint_r>
 200ac20:	103d211e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200ac24:	da011d17 	ldw	r8,1140(sp)
 200ac28:	d8c11c17 	ldw	r3,1136(sp)
 200ac2c:	da400404 	addi	r9,sp,16
 200ac30:	003eba06 	br	200a71c <___vfprintf_internal_r+0xb8c>
 200ac34:	d9412917 	ldw	r5,1188(sp)
 200ac38:	8809883a 	mov	r4,r17
 200ac3c:	d9811b04 	addi	r6,sp,1132
 200ac40:	2009b5c0 	call	2009b5c <__sprint_r>
 200ac44:	103d181e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200ac48:	da011d17 	ldw	r8,1140(sp)
 200ac4c:	d8c11c17 	ldw	r3,1136(sp)
 200ac50:	da400404 	addi	r9,sp,16
 200ac54:	003e8006 	br	200a658 <___vfprintf_internal_r+0xac8>
 200ac58:	d9412917 	ldw	r5,1188(sp)
 200ac5c:	8809883a 	mov	r4,r17
 200ac60:	d9811b04 	addi	r6,sp,1132
 200ac64:	2009b5c0 	call	2009b5c <__sprint_r>
 200ac68:	103d0f1e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200ac6c:	da011d17 	ldw	r8,1140(sp)
 200ac70:	d8c11c17 	ldw	r3,1136(sp)
 200ac74:	da400404 	addi	r9,sp,16
 200ac78:	003e6a06 	br	200a624 <___vfprintf_internal_r+0xa94>
 200ac7c:	d9413617 	ldw	r5,1240(sp)
 200ac80:	d8810dc4 	addi	r2,sp,1079
 200ac84:	b8c003cc 	andi	r3,r23,15
 200ac88:	b008973a 	slli	r4,r22,28
 200ac8c:	28c7883a 	add	r3,r5,r3
 200ac90:	b82ed13a 	srli	r23,r23,4
 200ac94:	18c00003 	ldbu	r3,0(r3)
 200ac98:	b02cd13a 	srli	r22,r22,4
 200ac9c:	25eeb03a 	or	r23,r4,r23
 200aca0:	10c00005 	stb	r3,0(r2)
 200aca4:	bd86b03a 	or	r3,r23,r22
 200aca8:	1027883a 	mov	r19,r2
 200acac:	10bfffc4 	addi	r2,r2,-1
 200acb0:	183ff41e 	bne	r3,zero,200ac84 <___vfprintf_internal_r+0x10f4>
 200acb4:	003f1a06 	br	200a920 <___vfprintf_internal_r+0xd90>
 200acb8:	d8012b15 	stw	zero,1196(sp)
 200acbc:	dcc10e04 	addi	r19,sp,1080
 200acc0:	003d3a06 	br	200a1ac <___vfprintf_internal_r+0x61c>
 200acc4:	b0025426 	beq	r22,zero,200b618 <___vfprintf_internal_r+0x1a88>
 200acc8:	b807883a 	mov	r3,r23
 200accc:	d8810dc4 	addi	r2,sp,1079
 200acd0:	882f883a 	mov	r23,r17
 200acd4:	04c00244 	movi	r19,9
 200acd8:	8023883a 	mov	r17,r16
 200acdc:	da412815 	stw	r9,1184(sp)
 200ace0:	1821883a 	mov	r16,r3
 200ace4:	8009883a 	mov	r4,r16
 200ace8:	b00b883a 	mov	r5,r22
 200acec:	01800284 	movi	r6,10
 200acf0:	000f883a 	mov	r7,zero
 200acf4:	1029883a 	mov	r20,r2
 200acf8:	20115d00 	call	20115d0 <__umoddi3>
 200acfc:	10800c04 	addi	r2,r2,48
 200ad00:	8009883a 	mov	r4,r16
 200ad04:	b00b883a 	mov	r5,r22
 200ad08:	a0800005 	stb	r2,0(r20)
 200ad0c:	01800284 	movi	r6,10
 200ad10:	000f883a 	mov	r7,zero
 200ad14:	2010f800 	call	2010f80 <__udivdi3>
 200ad18:	1021883a 	mov	r16,r2
 200ad1c:	182d883a 	mov	r22,r3
 200ad20:	a0bfffc4 	addi	r2,r20,-1
 200ad24:	183fef1e 	bne	r3,zero,200ace4 <___vfprintf_internal_r+0x1154>
 200ad28:	9c3fee36 	bltu	r19,r16,200ace4 <___vfprintf_internal_r+0x1154>
 200ad2c:	da412817 	ldw	r9,1184(sp)
 200ad30:	8005883a 	mov	r2,r16
 200ad34:	8821883a 	mov	r16,r17
 200ad38:	b823883a 	mov	r17,r23
 200ad3c:	102f883a 	mov	r23,r2
 200ad40:	d8812717 	ldw	r2,1180(sp)
 200ad44:	a4ffffc4 	addi	r19,r20,-1
 200ad48:	bdc00c04 	addi	r23,r23,48
 200ad4c:	14c5c83a 	sub	r2,r2,r19
 200ad50:	a5ffffc5 	stb	r23,-1(r20)
 200ad54:	d8812b15 	stw	r2,1196(sp)
 200ad58:	003d1406 	br	200a1ac <___vfprintf_internal_r+0x61c>
 200ad5c:	00c00044 	movi	r3,1
 200ad60:	bd84b03a 	or	r2,r23,r22
 200ad64:	003d0306 	br	200a174 <___vfprintf_internal_r+0x5e4>
 200ad68:	dc812417 	ldw	r18,1168(sp)
 200ad6c:	0481140e 	bge	zero,r18,200b1c0 <___vfprintf_internal_r+0x1630>
 200ad70:	d9013217 	ldw	r4,1224(sp)
 200ad74:	4cc00015 	stw	r19,0(r9)
 200ad78:	9100ec16 	blt	r18,r4,200b12c <___vfprintf_internal_r+0x159c>
 200ad7c:	49000115 	stw	r4,4(r9)
 200ad80:	4111883a 	add	r8,r8,r4
 200ad84:	18c00044 	addi	r3,r3,1
 200ad88:	da011d15 	stw	r8,1140(sp)
 200ad8c:	d8c11c15 	stw	r3,1136(sp)
 200ad90:	008001c4 	movi	r2,7
 200ad94:	10c23616 	blt	r2,r3,200b670 <___vfprintf_internal_r+0x1ae0>
 200ad98:	4a400204 	addi	r9,r9,8
 200ad9c:	d8813217 	ldw	r2,1224(sp)
 200ada0:	90a5c83a 	sub	r18,r18,r2
 200ada4:	04beae0e 	bge	zero,r18,200a860 <___vfprintf_internal_r+0xcd0>
 200ada8:	04c00404 	movi	r19,16
 200adac:	d8c11c17 	ldw	r3,1136(sp)
 200adb0:	05008074 	movhi	r20,513
 200adb4:	a51d5284 	addi	r20,r20,30026
 200adb8:	9c81dd0e 	bge	r19,r18,200b530 <___vfprintf_internal_r+0x19a0>
 200adbc:	058001c4 	movi	r22,7
 200adc0:	ddc12917 	ldw	r23,1188(sp)
 200adc4:	00000306 	br	200add4 <___vfprintf_internal_r+0x1244>
 200adc8:	4a400204 	addi	r9,r9,8
 200adcc:	94bffc04 	addi	r18,r18,-16
 200add0:	9c81d70e 	bge	r19,r18,200b530 <___vfprintf_internal_r+0x19a0>
 200add4:	4d000015 	stw	r20,0(r9)
 200add8:	4cc00115 	stw	r19,4(r9)
 200addc:	42000404 	addi	r8,r8,16
 200ade0:	18c00044 	addi	r3,r3,1
 200ade4:	da011d15 	stw	r8,1140(sp)
 200ade8:	d8c11c15 	stw	r3,1136(sp)
 200adec:	b0fff60e 	bge	r22,r3,200adc8 <___vfprintf_internal_r+0x1238>
 200adf0:	8809883a 	mov	r4,r17
 200adf4:	b80b883a 	mov	r5,r23
 200adf8:	d9811b04 	addi	r6,sp,1132
 200adfc:	2009b5c0 	call	2009b5c <__sprint_r>
 200ae00:	103ca91e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200ae04:	da011d17 	ldw	r8,1140(sp)
 200ae08:	d8c11c17 	ldw	r3,1136(sp)
 200ae0c:	da400404 	addi	r9,sp,16
 200ae10:	003fee06 	br	200adcc <___vfprintf_internal_r+0x123c>
 200ae14:	d9412917 	ldw	r5,1188(sp)
 200ae18:	8809883a 	mov	r4,r17
 200ae1c:	d9811b04 	addi	r6,sp,1132
 200ae20:	2009b5c0 	call	2009b5c <__sprint_r>
 200ae24:	103ca01e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200ae28:	da011d17 	ldw	r8,1140(sp)
 200ae2c:	d8c11c17 	ldw	r3,1136(sp)
 200ae30:	da400404 	addi	r9,sp,16
 200ae34:	003dee06 	br	200a5f0 <___vfprintf_internal_r+0xa60>
 200ae38:	00c00084 	movi	r3,2
 200ae3c:	bd84b03a 	or	r2,r23,r22
 200ae40:	d8012585 	stb	zero,1174(sp)
 200ae44:	003ccb06 	br	200a174 <___vfprintf_internal_r+0x5e4>
 200ae48:	8080040c 	andi	r2,r16,16
 200ae4c:	1000ae26 	beq	r2,zero,200b108 <___vfprintf_internal_r+0x1578>
 200ae50:	d9012d17 	ldw	r4,1204(sp)
 200ae54:	25c00017 	ldw	r23,0(r4)
 200ae58:	21000104 	addi	r4,r4,4
 200ae5c:	d9012d15 	stw	r4,1204(sp)
 200ae60:	b82dd7fa 	srai	r22,r23,31
 200ae64:	b005883a 	mov	r2,r22
 200ae68:	003cb906 	br	200a150 <___vfprintf_internal_r+0x5c0>
 200ae6c:	8080040c 	andi	r2,r16,16
 200ae70:	10007026 	beq	r2,zero,200b034 <___vfprintf_internal_r+0x14a4>
 200ae74:	d8812d17 	ldw	r2,1204(sp)
 200ae78:	002d883a 	mov	r22,zero
 200ae7c:	00c00044 	movi	r3,1
 200ae80:	15c00017 	ldw	r23,0(r2)
 200ae84:	10800104 	addi	r2,r2,4
 200ae88:	d8812d15 	stw	r2,1204(sp)
 200ae8c:	d8012585 	stb	zero,1174(sp)
 200ae90:	b805883a 	mov	r2,r23
 200ae94:	003cb706 	br	200a174 <___vfprintf_internal_r+0x5e4>
 200ae98:	d8813217 	ldw	r2,1224(sp)
 200ae9c:	14ffffc4 	addi	r19,r2,-1
 200aea0:	04ff4f0e 	bge	zero,r19,200abe0 <___vfprintf_internal_r+0x1050>
 200aea4:	05800404 	movi	r22,16
 200aea8:	05008074 	movhi	r20,513
 200aeac:	a51d5284 	addi	r20,r20,30026
 200aeb0:	b4c0470e 	bge	r22,r19,200afd0 <___vfprintf_internal_r+0x1440>
 200aeb4:	05c001c4 	movi	r23,7
 200aeb8:	df012917 	ldw	fp,1188(sp)
 200aebc:	00000306 	br	200aecc <___vfprintf_internal_r+0x133c>
 200aec0:	94800204 	addi	r18,r18,8
 200aec4:	9cfffc04 	addi	r19,r19,-16
 200aec8:	b4c0410e 	bge	r22,r19,200afd0 <___vfprintf_internal_r+0x1440>
 200aecc:	95000015 	stw	r20,0(r18)
 200aed0:	95800115 	stw	r22,4(r18)
 200aed4:	42000404 	addi	r8,r8,16
 200aed8:	18c00044 	addi	r3,r3,1
 200aedc:	da011d15 	stw	r8,1140(sp)
 200aee0:	d8c11c15 	stw	r3,1136(sp)
 200aee4:	b8fff60e 	bge	r23,r3,200aec0 <___vfprintf_internal_r+0x1330>
 200aee8:	8809883a 	mov	r4,r17
 200aeec:	e00b883a 	mov	r5,fp
 200aef0:	d9811b04 	addi	r6,sp,1132
 200aef4:	2009b5c0 	call	2009b5c <__sprint_r>
 200aef8:	103c6b1e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200aefc:	da011d17 	ldw	r8,1140(sp)
 200af00:	d8c11c17 	ldw	r3,1136(sp)
 200af04:	dc800404 	addi	r18,sp,16
 200af08:	003fee06 	br	200aec4 <___vfprintf_internal_r+0x1334>
 200af0c:	8080040c 	andi	r2,r16,16
 200af10:	10005326 	beq	r2,zero,200b060 <___vfprintf_internal_r+0x14d0>
 200af14:	d8c12d17 	ldw	r3,1204(sp)
 200af18:	002d883a 	mov	r22,zero
 200af1c:	1dc00017 	ldw	r23,0(r3)
 200af20:	18c00104 	addi	r3,r3,4
 200af24:	d8c12d15 	stw	r3,1204(sp)
 200af28:	b805883a 	mov	r2,r23
 200af2c:	0007883a 	mov	r3,zero
 200af30:	d8012585 	stb	zero,1174(sp)
 200af34:	003c8f06 	br	200a174 <___vfprintf_internal_r+0x5e4>
 200af38:	8088703a 	and	r4,r16,r2
 200af3c:	203efe1e 	bne	r4,zero,200ab38 <___vfprintf_internal_r+0xfa8>
 200af40:	48800115 	stw	r2,4(r9)
 200af44:	42000044 	addi	r8,r8,1
 200af48:	18c00044 	addi	r3,r3,1
 200af4c:	da011d15 	stw	r8,1140(sp)
 200af50:	d8c11c15 	stw	r3,1136(sp)
 200af54:	008001c4 	movi	r2,7
 200af58:	10c00216 	blt	r2,r3,200af64 <___vfprintf_internal_r+0x13d4>
 200af5c:	4c800204 	addi	r18,r9,8
 200af60:	003f1f06 	br	200abe0 <___vfprintf_internal_r+0x1050>
 200af64:	d9412917 	ldw	r5,1188(sp)
 200af68:	8809883a 	mov	r4,r17
 200af6c:	d9811b04 	addi	r6,sp,1132
 200af70:	2009b5c0 	call	2009b5c <__sprint_r>
 200af74:	103c4c1e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200af78:	dc800404 	addi	r18,sp,16
 200af7c:	da011d17 	ldw	r8,1140(sp)
 200af80:	d8c11c17 	ldw	r3,1136(sp)
 200af84:	003f1606 	br	200abe0 <___vfprintf_internal_r+0x1050>
 200af88:	d9412917 	ldw	r5,1188(sp)
 200af8c:	8809883a 	mov	r4,r17
 200af90:	d9811b04 	addi	r6,sp,1132
 200af94:	2009b5c0 	call	2009b5c <__sprint_r>
 200af98:	103c431e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200af9c:	da011d17 	ldw	r8,1140(sp)
 200afa0:	d8c11c17 	ldw	r3,1136(sp)
 200afa4:	da400404 	addi	r9,sp,16
 200afa8:	003eec06 	br	200ab5c <___vfprintf_internal_r+0xfcc>
 200afac:	d9412917 	ldw	r5,1188(sp)
 200afb0:	8809883a 	mov	r4,r17
 200afb4:	d9811b04 	addi	r6,sp,1132
 200afb8:	2009b5c0 	call	2009b5c <__sprint_r>
 200afbc:	103c3a1e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200afc0:	da011d17 	ldw	r8,1140(sp)
 200afc4:	d8c11c17 	ldw	r3,1136(sp)
 200afc8:	dc800404 	addi	r18,sp,16
 200afcc:	003eee06 	br	200ab88 <___vfprintf_internal_r+0xff8>
 200afd0:	95000015 	stw	r20,0(r18)
 200afd4:	94c00115 	stw	r19,4(r18)
 200afd8:	44d1883a 	add	r8,r8,r19
 200afdc:	003efa06 	br	200abc8 <___vfprintf_internal_r+0x1038>
 200afe0:	d9412917 	ldw	r5,1188(sp)
 200afe4:	8809883a 	mov	r4,r17
 200afe8:	d9811b04 	addi	r6,sp,1132
 200afec:	2009b5c0 	call	2009b5c <__sprint_r>
 200aff0:	103c2d1e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200aff4:	da011d17 	ldw	r8,1140(sp)
 200aff8:	d8c11c17 	ldw	r3,1136(sp)
 200affc:	da400404 	addi	r9,sp,16
 200b000:	003d9806 	br	200a664 <___vfprintf_internal_r+0xad4>
 200b004:	8080100c 	andi	r2,r16,64
 200b008:	10011626 	beq	r2,zero,200b464 <___vfprintf_internal_r+0x18d4>
 200b00c:	d8c12d17 	ldw	r3,1204(sp)
 200b010:	002d883a 	mov	r22,zero
 200b014:	1dc0000b 	ldhu	r23,0(r3)
 200b018:	18c00104 	addi	r3,r3,4
 200b01c:	d8c12d15 	stw	r3,1204(sp)
 200b020:	003cc106 	br	200a328 <___vfprintf_internal_r+0x798>
 200b024:	4d000015 	stw	r20,0(r9)
 200b028:	4c800115 	stw	r18,4(r9)
 200b02c:	4491883a 	add	r8,r8,r18
 200b030:	003dc006 	br	200a734 <___vfprintf_internal_r+0xba4>
 200b034:	8080100c 	andi	r2,r16,64
 200b038:	10010126 	beq	r2,zero,200b440 <___vfprintf_internal_r+0x18b0>
 200b03c:	d8c12d17 	ldw	r3,1204(sp)
 200b040:	002d883a 	mov	r22,zero
 200b044:	1dc0000b 	ldhu	r23,0(r3)
 200b048:	18c00104 	addi	r3,r3,4
 200b04c:	d8c12d15 	stw	r3,1204(sp)
 200b050:	b805883a 	mov	r2,r23
 200b054:	00c00044 	movi	r3,1
 200b058:	d8012585 	stb	zero,1174(sp)
 200b05c:	003c4506 	br	200a174 <___vfprintf_internal_r+0x5e4>
 200b060:	8080100c 	andi	r2,r16,64
 200b064:	10010526 	beq	r2,zero,200b47c <___vfprintf_internal_r+0x18ec>
 200b068:	d9012d17 	ldw	r4,1204(sp)
 200b06c:	002d883a 	mov	r22,zero
 200b070:	0007883a 	mov	r3,zero
 200b074:	25c0000b 	ldhu	r23,0(r4)
 200b078:	21000104 	addi	r4,r4,4
 200b07c:	d9012d15 	stw	r4,1204(sp)
 200b080:	b805883a 	mov	r2,r23
 200b084:	d8012585 	stb	zero,1174(sp)
 200b088:	003c3a06 	br	200a174 <___vfprintf_internal_r+0x5e4>
 200b08c:	d8812d17 	ldw	r2,1204(sp)
 200b090:	15800017 	ldw	r22,0(r2)
 200b094:	15000117 	ldw	r20,4(r2)
 200b098:	10800204 	addi	r2,r2,8
 200b09c:	d8812d15 	stw	r2,1204(sp)
 200b0a0:	dd813315 	stw	r22,1228(sp)
 200b0a4:	dd013415 	stw	r20,1232(sp)
 200b0a8:	003c5906 	br	200a210 <___vfprintf_internal_r+0x680>
 200b0ac:	00c00084 	movi	r3,2
 200b0b0:	d8012585 	stb	zero,1174(sp)
 200b0b4:	003c2f06 	br	200a174 <___vfprintf_internal_r+0x5e4>
 200b0b8:	ac800007 	ldb	r18,0(r21)
 200b0bc:	003b1006 	br	2009d00 <___vfprintf_internal_r+0x170>
 200b0c0:	8080040c 	andi	r2,r16,16
 200b0c4:	1000091e 	bne	r2,zero,200b0ec <___vfprintf_internal_r+0x155c>
 200b0c8:	8400100c 	andi	r16,r16,64
 200b0cc:	80000726 	beq	r16,zero,200b0ec <___vfprintf_internal_r+0x155c>
 200b0d0:	d8c12d17 	ldw	r3,1204(sp)
 200b0d4:	d9012c17 	ldw	r4,1200(sp)
 200b0d8:	18800017 	ldw	r2,0(r3)
 200b0dc:	18c00104 	addi	r3,r3,4
 200b0e0:	d8c12d15 	stw	r3,1204(sp)
 200b0e4:	1100000d 	sth	r4,0(r2)
 200b0e8:	003adf06 	br	2009c68 <___vfprintf_internal_r+0xd8>
 200b0ec:	d8c12d17 	ldw	r3,1204(sp)
 200b0f0:	d9012c17 	ldw	r4,1200(sp)
 200b0f4:	18800017 	ldw	r2,0(r3)
 200b0f8:	18c00104 	addi	r3,r3,4
 200b0fc:	d8c12d15 	stw	r3,1204(sp)
 200b100:	11000015 	stw	r4,0(r2)
 200b104:	003ad806 	br	2009c68 <___vfprintf_internal_r+0xd8>
 200b108:	8080100c 	andi	r2,r16,64
 200b10c:	1000c526 	beq	r2,zero,200b424 <___vfprintf_internal_r+0x1894>
 200b110:	d8812d17 	ldw	r2,1204(sp)
 200b114:	15c0000f 	ldh	r23,0(r2)
 200b118:	10800104 	addi	r2,r2,4
 200b11c:	d8812d15 	stw	r2,1204(sp)
 200b120:	b82dd7fa 	srai	r22,r23,31
 200b124:	b005883a 	mov	r2,r22
 200b128:	003c0906 	br	200a150 <___vfprintf_internal_r+0x5c0>
 200b12c:	4c800115 	stw	r18,4(r9)
 200b130:	9211883a 	add	r8,r18,r8
 200b134:	18c00044 	addi	r3,r3,1
 200b138:	da011d15 	stw	r8,1140(sp)
 200b13c:	d8c11c15 	stw	r3,1136(sp)
 200b140:	008001c4 	movi	r2,7
 200b144:	10c14016 	blt	r2,r3,200b648 <___vfprintf_internal_r+0x1ab8>
 200b148:	4a400204 	addi	r9,r9,8
 200b14c:	d8813717 	ldw	r2,1244(sp)
 200b150:	9ca7883a 	add	r19,r19,r18
 200b154:	48800015 	stw	r2,0(r9)
 200b158:	00800044 	movi	r2,1
 200b15c:	48800115 	stw	r2,4(r9)
 200b160:	4091883a 	add	r8,r8,r2
 200b164:	1887883a 	add	r3,r3,r2
 200b168:	da011d15 	stw	r8,1140(sp)
 200b16c:	d8c11c15 	stw	r3,1136(sp)
 200b170:	008001c4 	movi	r2,7
 200b174:	10c12c16 	blt	r2,r3,200b628 <___vfprintf_internal_r+0x1a98>
 200b178:	4a400204 	addi	r9,r9,8
 200b17c:	d9013217 	ldw	r4,1224(sp)
 200b180:	da011d17 	ldw	r8,1140(sp)
 200b184:	d8c11c17 	ldw	r3,1136(sp)
 200b188:	24a5c83a 	sub	r18,r4,r18
 200b18c:	4cc00015 	stw	r19,0(r9)
 200b190:	003fa506 	br	200b028 <___vfprintf_internal_r+0x1498>
 200b194:	04c08074 	movhi	r19,513
 200b198:	9cdd3f04 	addi	r19,r19,29948
 200b19c:	003c2e06 	br	200a258 <___vfprintf_internal_r+0x6c8>
 200b1a0:	d9412917 	ldw	r5,1188(sp)
 200b1a4:	8809883a 	mov	r4,r17
 200b1a8:	d9811b04 	addi	r6,sp,1132
 200b1ac:	2009b5c0 	call	2009b5c <__sprint_r>
 200b1b0:	103bbd1e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200b1b4:	da011d17 	ldw	r8,1140(sp)
 200b1b8:	da400404 	addi	r9,sp,16
 200b1bc:	003df606 	br	200a998 <___vfprintf_internal_r+0xe08>
 200b1c0:	00808074 	movhi	r2,513
 200b1c4:	109d4e04 	addi	r2,r2,30008
 200b1c8:	48800015 	stw	r2,0(r9)
 200b1cc:	00800044 	movi	r2,1
 200b1d0:	48800115 	stw	r2,4(r9)
 200b1d4:	4091883a 	add	r8,r8,r2
 200b1d8:	1887883a 	add	r3,r3,r2
 200b1dc:	da011d15 	stw	r8,1140(sp)
 200b1e0:	d8c11c15 	stw	r3,1136(sp)
 200b1e4:	008001c4 	movi	r2,7
 200b1e8:	10c0bc16 	blt	r2,r3,200b4dc <___vfprintf_internal_r+0x194c>
 200b1ec:	4a400204 	addi	r9,r9,8
 200b1f0:	9000041e 	bne	r18,zero,200b204 <___vfprintf_internal_r+0x1674>
 200b1f4:	d8c13217 	ldw	r3,1224(sp)
 200b1f8:	1800021e 	bne	r3,zero,200b204 <___vfprintf_internal_r+0x1674>
 200b1fc:	8080004c 	andi	r2,r16,1
 200b200:	103d5226 	beq	r2,zero,200a74c <___vfprintf_internal_r+0xbbc>
 200b204:	d8c11c17 	ldw	r3,1136(sp)
 200b208:	d9013717 	ldw	r4,1244(sp)
 200b20c:	00800044 	movi	r2,1
 200b210:	48800115 	stw	r2,4(r9)
 200b214:	49000015 	stw	r4,0(r9)
 200b218:	4091883a 	add	r8,r8,r2
 200b21c:	1887883a 	add	r3,r3,r2
 200b220:	da011d15 	stw	r8,1140(sp)
 200b224:	d8c11c15 	stw	r3,1136(sp)
 200b228:	008001c4 	movi	r2,7
 200b22c:	10c14516 	blt	r2,r3,200b744 <___vfprintf_internal_r+0x1bb4>
 200b230:	4a400204 	addi	r9,r9,8
 200b234:	04a5c83a 	sub	r18,zero,r18
 200b238:	0480d70e 	bge	zero,r18,200b598 <___vfprintf_internal_r+0x1a08>
 200b23c:	05800404 	movi	r22,16
 200b240:	05008074 	movhi	r20,513
 200b244:	a51d5284 	addi	r20,r20,30026
 200b248:	b480db0e 	bge	r22,r18,200b5b8 <___vfprintf_internal_r+0x1a28>
 200b24c:	05c001c4 	movi	r23,7
 200b250:	df012917 	ldw	fp,1188(sp)
 200b254:	00000306 	br	200b264 <___vfprintf_internal_r+0x16d4>
 200b258:	4a400204 	addi	r9,r9,8
 200b25c:	94bffc04 	addi	r18,r18,-16
 200b260:	b480d50e 	bge	r22,r18,200b5b8 <___vfprintf_internal_r+0x1a28>
 200b264:	4d000015 	stw	r20,0(r9)
 200b268:	4d800115 	stw	r22,4(r9)
 200b26c:	42000404 	addi	r8,r8,16
 200b270:	18c00044 	addi	r3,r3,1
 200b274:	da011d15 	stw	r8,1140(sp)
 200b278:	d8c11c15 	stw	r3,1136(sp)
 200b27c:	b8fff60e 	bge	r23,r3,200b258 <___vfprintf_internal_r+0x16c8>
 200b280:	8809883a 	mov	r4,r17
 200b284:	e00b883a 	mov	r5,fp
 200b288:	d9811b04 	addi	r6,sp,1132
 200b28c:	2009b5c0 	call	2009b5c <__sprint_r>
 200b290:	103b851e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200b294:	da011d17 	ldw	r8,1140(sp)
 200b298:	d8c11c17 	ldw	r3,1136(sp)
 200b29c:	da400404 	addi	r9,sp,16
 200b2a0:	003fee06 	br	200b25c <___vfprintf_internal_r+0x16cc>
 200b2a4:	da413c15 	stw	r9,1264(sp)
 200b2a8:	201087c0 	call	201087c <__isnand>
 200b2ac:	da413c17 	ldw	r9,1264(sp)
 200b2b0:	10007e1e 	bne	r2,zero,200b4ac <___vfprintf_internal_r+0x191c>
 200b2b4:	00bfffc4 	movi	r2,-1
 200b2b8:	e0816a26 	beq	fp,r2,200b864 <___vfprintf_internal_r+0x1cd4>
 200b2bc:	008019c4 	movi	r2,103
 200b2c0:	90816526 	beq	r18,r2,200b858 <___vfprintf_internal_r+0x1cc8>
 200b2c4:	008011c4 	movi	r2,71
 200b2c8:	90816326 	beq	r18,r2,200b858 <___vfprintf_internal_r+0x1cc8>
 200b2cc:	80c04014 	ori	r3,r16,256
 200b2d0:	d8c12a15 	stw	r3,1192(sp)
 200b2d4:	a0016516 	blt	r20,zero,200b86c <___vfprintf_internal_r+0x1cdc>
 200b2d8:	d8012f05 	stb	zero,1212(sp)
 200b2dc:	00801984 	movi	r2,102
 200b2e0:	9080f226 	beq	r18,r2,200b6ac <___vfprintf_internal_r+0x1b1c>
 200b2e4:	00801184 	movi	r2,70
 200b2e8:	9080f026 	beq	r18,r2,200b6ac <___vfprintf_internal_r+0x1b1c>
 200b2ec:	00801944 	movi	r2,101
 200b2f0:	90818d26 	beq	r18,r2,200b928 <___vfprintf_internal_r+0x1d98>
 200b2f4:	00801144 	movi	r2,69
 200b2f8:	90818b26 	beq	r18,r2,200b928 <___vfprintf_internal_r+0x1d98>
 200b2fc:	e02f883a 	mov	r23,fp
 200b300:	d8812404 	addi	r2,sp,1168
 200b304:	d8800115 	stw	r2,4(sp)
 200b308:	d8812304 	addi	r2,sp,1164
 200b30c:	d8800215 	stw	r2,8(sp)
 200b310:	d8812204 	addi	r2,sp,1160
 200b314:	ddc00015 	stw	r23,0(sp)
 200b318:	d8800315 	stw	r2,12(sp)
 200b31c:	8809883a 	mov	r4,r17
 200b320:	b00b883a 	mov	r5,r22
 200b324:	a00d883a 	mov	r6,r20
 200b328:	01c00084 	movi	r7,2
 200b32c:	da413c15 	stw	r9,1264(sp)
 200b330:	200bde00 	call	200bde0 <_dtoa_r>
 200b334:	1027883a 	mov	r19,r2
 200b338:	008019c4 	movi	r2,103
 200b33c:	da413c17 	ldw	r9,1264(sp)
 200b340:	9081951e 	bne	r18,r2,200b998 <___vfprintf_internal_r+0x1e08>
 200b344:	8080004c 	andi	r2,r16,1
 200b348:	10017926 	beq	r2,zero,200b930 <___vfprintf_internal_r+0x1da0>
 200b34c:	00801184 	movi	r2,70
 200b350:	9dc7883a 	add	r3,r19,r23
 200b354:	9080e626 	beq	r18,r2,200b6f0 <___vfprintf_internal_r+0x1b60>
 200b358:	b009883a 	mov	r4,r22
 200b35c:	a00b883a 	mov	r5,r20
 200b360:	000d883a 	mov	r6,zero
 200b364:	000f883a 	mov	r7,zero
 200b368:	d8c13b15 	stw	r3,1260(sp)
 200b36c:	da413c15 	stw	r9,1264(sp)
 200b370:	20120900 	call	2012090 <__eqdf2>
 200b374:	d8c13b17 	ldw	r3,1260(sp)
 200b378:	da413c17 	ldw	r9,1264(sp)
 200b37c:	10000726 	beq	r2,zero,200b39c <___vfprintf_internal_r+0x180c>
 200b380:	d8812217 	ldw	r2,1160(sp)
 200b384:	10c18a2e 	bgeu	r2,r3,200b9b0 <___vfprintf_internal_r+0x1e20>
 200b388:	01000c04 	movi	r4,48
 200b38c:	11000005 	stb	r4,0(r2)
 200b390:	10800044 	addi	r2,r2,1
 200b394:	d8812215 	stw	r2,1160(sp)
 200b398:	10fffc1e 	bne	r2,r3,200b38c <___vfprintf_internal_r+0x17fc>
 200b39c:	1cc7c83a 	sub	r3,r3,r19
 200b3a0:	d8c13215 	stw	r3,1224(sp)
 200b3a4:	008019c4 	movi	r2,103
 200b3a8:	9080fa26 	beq	r18,r2,200b794 <___vfprintf_internal_r+0x1c04>
 200b3ac:	008011c4 	movi	r2,71
 200b3b0:	9080f826 	beq	r18,r2,200b794 <___vfprintf_internal_r+0x1c04>
 200b3b4:	00801984 	movi	r2,102
 200b3b8:	90818e1e 	bne	r18,r2,200b9f4 <___vfprintf_internal_r+0x1e64>
 200b3bc:	d8812417 	ldw	r2,1168(sp)
 200b3c0:	d8812b15 	stw	r2,1196(sp)
 200b3c4:	00817c0e 	bge	zero,r2,200b9b8 <___vfprintf_internal_r+0x1e28>
 200b3c8:	e000021e 	bne	fp,zero,200b3d4 <___vfprintf_internal_r+0x1844>
 200b3cc:	8400004c 	andi	r16,r16,1
 200b3d0:	80000426 	beq	r16,zero,200b3e4 <___vfprintf_internal_r+0x1854>
 200b3d4:	d8812b17 	ldw	r2,1196(sp)
 200b3d8:	e2000044 	addi	r8,fp,1
 200b3dc:	1205883a 	add	r2,r2,r8
 200b3e0:	d8812b15 	stw	r2,1196(sp)
 200b3e4:	d8812815 	stw	r2,1184(sp)
 200b3e8:	10010b16 	blt	r2,zero,200b818 <___vfprintf_internal_r+0x1c88>
 200b3ec:	ddc12f07 	ldb	r23,1212(sp)
 200b3f0:	b800e426 	beq	r23,zero,200b784 <___vfprintf_internal_r+0x1bf4>
 200b3f4:	00800b44 	movi	r2,45
 200b3f8:	d8812585 	stb	r2,1174(sp)
 200b3fc:	dc012a17 	ldw	r16,1192(sp)
 200b400:	d8013115 	stw	zero,1220(sp)
 200b404:	003b7306 	br	200a1d4 <___vfprintf_internal_r+0x644>
 200b408:	d8812b17 	ldw	r2,1196(sp)
 200b40c:	d8812815 	stw	r2,1184(sp)
 200b410:	10005716 	blt	r2,zero,200b570 <___vfprintf_internal_r+0x19e0>
 200b414:	d8812583 	ldbu	r2,1174(sp)
 200b418:	ddc12d15 	stw	r23,1204(sp)
 200b41c:	d8013115 	stw	zero,1220(sp)
 200b420:	003b6806 	br	200a1c4 <___vfprintf_internal_r+0x634>
 200b424:	d8c12d17 	ldw	r3,1204(sp)
 200b428:	1dc00017 	ldw	r23,0(r3)
 200b42c:	18c00104 	addi	r3,r3,4
 200b430:	d8c12d15 	stw	r3,1204(sp)
 200b434:	b82dd7fa 	srai	r22,r23,31
 200b438:	b005883a 	mov	r2,r22
 200b43c:	003b4406 	br	200a150 <___vfprintf_internal_r+0x5c0>
 200b440:	d9012d17 	ldw	r4,1204(sp)
 200b444:	002d883a 	mov	r22,zero
 200b448:	00c00044 	movi	r3,1
 200b44c:	25c00017 	ldw	r23,0(r4)
 200b450:	21000104 	addi	r4,r4,4
 200b454:	d9012d15 	stw	r4,1204(sp)
 200b458:	b805883a 	mov	r2,r23
 200b45c:	d8012585 	stb	zero,1174(sp)
 200b460:	003b4406 	br	200a174 <___vfprintf_internal_r+0x5e4>
 200b464:	d9012d17 	ldw	r4,1204(sp)
 200b468:	002d883a 	mov	r22,zero
 200b46c:	25c00017 	ldw	r23,0(r4)
 200b470:	21000104 	addi	r4,r4,4
 200b474:	d9012d15 	stw	r4,1204(sp)
 200b478:	003bab06 	br	200a328 <___vfprintf_internal_r+0x798>
 200b47c:	d8812d17 	ldw	r2,1204(sp)
 200b480:	002d883a 	mov	r22,zero
 200b484:	0007883a 	mov	r3,zero
 200b488:	15c00017 	ldw	r23,0(r2)
 200b48c:	10800104 	addi	r2,r2,4
 200b490:	d8812d15 	stw	r2,1204(sp)
 200b494:	d8012585 	stb	zero,1174(sp)
 200b498:	b805883a 	mov	r2,r23
 200b49c:	003b3506 	br	200a174 <___vfprintf_internal_r+0x5e4>
 200b4a0:	00ffffc4 	movi	r3,-1
 200b4a4:	b82b883a 	mov	r21,r23
 200b4a8:	003a1606 	br	2009d04 <___vfprintf_internal_r+0x174>
 200b4ac:	008011c4 	movi	r2,71
 200b4b0:	1480b116 	blt	r2,r18,200b778 <___vfprintf_internal_r+0x1be8>
 200b4b4:	04c08074 	movhi	r19,513
 200b4b8:	9cdd4004 	addi	r19,r19,29952
 200b4bc:	00c000c4 	movi	r3,3
 200b4c0:	00bfdfc4 	movi	r2,-129
 200b4c4:	80a0703a 	and	r16,r16,r2
 200b4c8:	d8c12815 	stw	r3,1184(sp)
 200b4cc:	d8812583 	ldbu	r2,1174(sp)
 200b4d0:	d8c12b15 	stw	r3,1196(sp)
 200b4d4:	d8013115 	stw	zero,1220(sp)
 200b4d8:	003b3a06 	br	200a1c4 <___vfprintf_internal_r+0x634>
 200b4dc:	d9412917 	ldw	r5,1188(sp)
 200b4e0:	8809883a 	mov	r4,r17
 200b4e4:	d9811b04 	addi	r6,sp,1132
 200b4e8:	2009b5c0 	call	2009b5c <__sprint_r>
 200b4ec:	103aee1e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200b4f0:	dc812417 	ldw	r18,1168(sp)
 200b4f4:	da011d17 	ldw	r8,1140(sp)
 200b4f8:	da400404 	addi	r9,sp,16
 200b4fc:	003f3c06 	br	200b1f0 <___vfprintf_internal_r+0x1660>
 200b500:	ad400044 	addi	r21,r21,1
 200b504:	84000814 	ori	r16,r16,32
 200b508:	14800047 	ldb	r18,1(r2)
 200b50c:	0039fc06 	br	2009d00 <___vfprintf_internal_r+0x170>
 200b510:	d9412917 	ldw	r5,1188(sp)
 200b514:	8809883a 	mov	r4,r17
 200b518:	d9811b04 	addi	r6,sp,1132
 200b51c:	2009b5c0 	call	2009b5c <__sprint_r>
 200b520:	103ae11e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200b524:	da011d17 	ldw	r8,1140(sp)
 200b528:	da400404 	addi	r9,sp,16
 200b52c:	003d2b06 	br	200a9dc <___vfprintf_internal_r+0xe4c>
 200b530:	4d000015 	stw	r20,0(r9)
 200b534:	4c800115 	stw	r18,4(r9)
 200b538:	4491883a 	add	r8,r8,r18
 200b53c:	18c00044 	addi	r3,r3,1
 200b540:	da011d15 	stw	r8,1140(sp)
 200b544:	d8c11c15 	stw	r3,1136(sp)
 200b548:	008001c4 	movi	r2,7
 200b54c:	10fcbd16 	blt	r2,r3,200a844 <___vfprintf_internal_r+0xcb4>
 200b550:	4a400204 	addi	r9,r9,8
 200b554:	003cc206 	br	200a860 <___vfprintf_internal_r+0xcd0>
 200b558:	da413c15 	stw	r9,1264(sp)
 200b55c:	2009ad00 	call	2009ad0 <strlen>
 200b560:	d8812b15 	stw	r2,1196(sp)
 200b564:	d8812815 	stw	r2,1184(sp)
 200b568:	da413c17 	ldw	r9,1264(sp)
 200b56c:	103fa90e 	bge	r2,zero,200b414 <___vfprintf_internal_r+0x1884>
 200b570:	d8012815 	stw	zero,1184(sp)
 200b574:	003fa706 	br	200b414 <___vfprintf_internal_r+0x1884>
 200b578:	d9412917 	ldw	r5,1188(sp)
 200b57c:	8809883a 	mov	r4,r17
 200b580:	d9811b04 	addi	r6,sp,1132
 200b584:	2009b5c0 	call	2009b5c <__sprint_r>
 200b588:	103ac71e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200b58c:	da011d17 	ldw	r8,1140(sp)
 200b590:	d8c11c17 	ldw	r3,1136(sp)
 200b594:	da400404 	addi	r9,sp,16
 200b598:	d8813217 	ldw	r2,1224(sp)
 200b59c:	4cc00015 	stw	r19,0(r9)
 200b5a0:	48800115 	stw	r2,4(r9)
 200b5a4:	4091883a 	add	r8,r8,r2
 200b5a8:	003c6206 	br	200a734 <___vfprintf_internal_r+0xba4>
 200b5ac:	00800b44 	movi	r2,45
 200b5b0:	d8812585 	stb	r2,1174(sp)
 200b5b4:	003b2406 	br	200a248 <___vfprintf_internal_r+0x6b8>
 200b5b8:	4d000015 	stw	r20,0(r9)
 200b5bc:	4c800115 	stw	r18,4(r9)
 200b5c0:	4491883a 	add	r8,r8,r18
 200b5c4:	18c00044 	addi	r3,r3,1
 200b5c8:	da011d15 	stw	r8,1140(sp)
 200b5cc:	d8c11c15 	stw	r3,1136(sp)
 200b5d0:	008001c4 	movi	r2,7
 200b5d4:	10ffe816 	blt	r2,r3,200b578 <___vfprintf_internal_r+0x19e8>
 200b5d8:	4a400204 	addi	r9,r9,8
 200b5dc:	003fee06 	br	200b598 <___vfprintf_internal_r+0x1a08>
 200b5e0:	d8c12b15 	stw	r3,1196(sp)
 200b5e4:	00800184 	movi	r2,6
 200b5e8:	10c0062e 	bgeu	r2,r3,200b604 <___vfprintf_internal_r+0x1a74>
 200b5ec:	d8812b15 	stw	r2,1196(sp)
 200b5f0:	d8812815 	stw	r2,1184(sp)
 200b5f4:	ddc12d15 	stw	r23,1204(sp)
 200b5f8:	04c08074 	movhi	r19,513
 200b5fc:	9cdd4c04 	addi	r19,r19,30000
 200b600:	0039ca06 	br	2009d2c <___vfprintf_internal_r+0x19c>
 200b604:	d8812b17 	ldw	r2,1196(sp)
 200b608:	d8812815 	stw	r2,1184(sp)
 200b60c:	103ff90e 	bge	r2,zero,200b5f4 <___vfprintf_internal_r+0x1a64>
 200b610:	d8012815 	stw	zero,1184(sp)
 200b614:	003ff706 	br	200b5f4 <___vfprintf_internal_r+0x1a64>
 200b618:	00800244 	movi	r2,9
 200b61c:	15fdaa36 	bltu	r2,r23,200acc8 <___vfprintf_internal_r+0x1138>
 200b620:	dd010e04 	addi	r20,sp,1080
 200b624:	003dc606 	br	200ad40 <___vfprintf_internal_r+0x11b0>
 200b628:	d9412917 	ldw	r5,1188(sp)
 200b62c:	8809883a 	mov	r4,r17
 200b630:	d9811b04 	addi	r6,sp,1132
 200b634:	2009b5c0 	call	2009b5c <__sprint_r>
 200b638:	103a9b1e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200b63c:	dc812417 	ldw	r18,1168(sp)
 200b640:	da400404 	addi	r9,sp,16
 200b644:	003ecd06 	br	200b17c <___vfprintf_internal_r+0x15ec>
 200b648:	d9412917 	ldw	r5,1188(sp)
 200b64c:	8809883a 	mov	r4,r17
 200b650:	d9811b04 	addi	r6,sp,1132
 200b654:	2009b5c0 	call	2009b5c <__sprint_r>
 200b658:	103a931e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200b65c:	dc812417 	ldw	r18,1168(sp)
 200b660:	da011d17 	ldw	r8,1140(sp)
 200b664:	d8c11c17 	ldw	r3,1136(sp)
 200b668:	da400404 	addi	r9,sp,16
 200b66c:	003eb706 	br	200b14c <___vfprintf_internal_r+0x15bc>
 200b670:	d9412917 	ldw	r5,1188(sp)
 200b674:	8809883a 	mov	r4,r17
 200b678:	d9811b04 	addi	r6,sp,1132
 200b67c:	2009b5c0 	call	2009b5c <__sprint_r>
 200b680:	103a891e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200b684:	dc812417 	ldw	r18,1168(sp)
 200b688:	da011d17 	ldw	r8,1140(sp)
 200b68c:	da400404 	addi	r9,sp,16
 200b690:	003dc206 	br	200ad9c <___vfprintf_internal_r+0x120c>
 200b694:	df012815 	stw	fp,1184(sp)
 200b698:	d8812583 	ldbu	r2,1174(sp)
 200b69c:	df012b15 	stw	fp,1196(sp)
 200b6a0:	ddc12d15 	stw	r23,1204(sp)
 200b6a4:	d8013115 	stw	zero,1220(sp)
 200b6a8:	003ac606 	br	200a1c4 <___vfprintf_internal_r+0x634>
 200b6ac:	d8812404 	addi	r2,sp,1168
 200b6b0:	d8800115 	stw	r2,4(sp)
 200b6b4:	d8812304 	addi	r2,sp,1164
 200b6b8:	d8800215 	stw	r2,8(sp)
 200b6bc:	d8812204 	addi	r2,sp,1160
 200b6c0:	df000015 	stw	fp,0(sp)
 200b6c4:	d8800315 	stw	r2,12(sp)
 200b6c8:	8809883a 	mov	r4,r17
 200b6cc:	b00b883a 	mov	r5,r22
 200b6d0:	a00d883a 	mov	r6,r20
 200b6d4:	01c000c4 	movi	r7,3
 200b6d8:	da413c15 	stw	r9,1264(sp)
 200b6dc:	200bde00 	call	200bde0 <_dtoa_r>
 200b6e0:	da413c17 	ldw	r9,1264(sp)
 200b6e4:	1027883a 	mov	r19,r2
 200b6e8:	1707883a 	add	r3,r2,fp
 200b6ec:	e02f883a 	mov	r23,fp
 200b6f0:	99000007 	ldb	r4,0(r19)
 200b6f4:	00800c04 	movi	r2,48
 200b6f8:	20800326 	beq	r4,r2,200b708 <___vfprintf_internal_r+0x1b78>
 200b6fc:	da812417 	ldw	r10,1168(sp)
 200b700:	1a87883a 	add	r3,r3,r10
 200b704:	003f1406 	br	200b358 <___vfprintf_internal_r+0x17c8>
 200b708:	b009883a 	mov	r4,r22
 200b70c:	a00b883a 	mov	r5,r20
 200b710:	000d883a 	mov	r6,zero
 200b714:	000f883a 	mov	r7,zero
 200b718:	d8c13b15 	stw	r3,1260(sp)
 200b71c:	da413c15 	stw	r9,1264(sp)
 200b720:	20120ec0 	call	20120ec <__nedf2>
 200b724:	d8c13b17 	ldw	r3,1260(sp)
 200b728:	da413c17 	ldw	r9,1264(sp)
 200b72c:	103ff326 	beq	r2,zero,200b6fc <___vfprintf_internal_r+0x1b6c>
 200b730:	00800044 	movi	r2,1
 200b734:	15d5c83a 	sub	r10,r2,r23
 200b738:	da812415 	stw	r10,1168(sp)
 200b73c:	1a87883a 	add	r3,r3,r10
 200b740:	003f0506 	br	200b358 <___vfprintf_internal_r+0x17c8>
 200b744:	d9412917 	ldw	r5,1188(sp)
 200b748:	8809883a 	mov	r4,r17
 200b74c:	d9811b04 	addi	r6,sp,1132
 200b750:	2009b5c0 	call	2009b5c <__sprint_r>
 200b754:	103a541e 	bne	r2,zero,200a0a8 <___vfprintf_internal_r+0x518>
 200b758:	dc812417 	ldw	r18,1168(sp)
 200b75c:	da011d17 	ldw	r8,1140(sp)
 200b760:	d8c11c17 	ldw	r3,1136(sp)
 200b764:	da400404 	addi	r9,sp,16
 200b768:	003eb206 	br	200b234 <___vfprintf_internal_r+0x16a4>
 200b76c:	b82b883a 	mov	r21,r23
 200b770:	0007883a 	mov	r3,zero
 200b774:	00396306 	br	2009d04 <___vfprintf_internal_r+0x174>
 200b778:	04c08074 	movhi	r19,513
 200b77c:	9cdd4104 	addi	r19,r19,29956
 200b780:	003f4e06 	br	200b4bc <___vfprintf_internal_r+0x192c>
 200b784:	d8812583 	ldbu	r2,1174(sp)
 200b788:	dc012a17 	ldw	r16,1192(sp)
 200b78c:	d8013115 	stw	zero,1220(sp)
 200b790:	003a8c06 	br	200a1c4 <___vfprintf_internal_r+0x634>
 200b794:	d8812417 	ldw	r2,1168(sp)
 200b798:	d8812b15 	stw	r2,1196(sp)
 200b79c:	1029883a 	mov	r20,r2
 200b7a0:	00bfff44 	movi	r2,-3
 200b7a4:	a0800116 	blt	r20,r2,200b7ac <___vfprintf_internal_r+0x1c1c>
 200b7a8:	e5001d0e 	bge	fp,r20,200b820 <___vfprintf_internal_r+0x1c90>
 200b7ac:	94bfff84 	addi	r18,r18,-2
 200b7b0:	a53fffc4 	addi	r20,r20,-1
 200b7b4:	dd012415 	stw	r20,1168(sp)
 200b7b8:	dc811fc5 	stb	r18,1151(sp)
 200b7bc:	a0007216 	blt	r20,zero,200b988 <___vfprintf_internal_r+0x1df8>
 200b7c0:	00800ac4 	movi	r2,43
 200b7c4:	d8812005 	stb	r2,1152(sp)
 200b7c8:	00800244 	movi	r2,9
 200b7cc:	15003516 	blt	r2,r20,200b8a4 <___vfprintf_internal_r+0x1d14>
 200b7d0:	00800c04 	movi	r2,48
 200b7d4:	a5000c04 	addi	r20,r20,48
 200b7d8:	d8812045 	stb	r2,1153(sp)
 200b7dc:	dd012085 	stb	r20,1154(sp)
 200b7e0:	d8c120c4 	addi	r3,sp,1155
 200b7e4:	d8811fc4 	addi	r2,sp,1151
 200b7e8:	1885c83a 	sub	r2,r3,r2
 200b7ec:	d8c13217 	ldw	r3,1224(sp)
 200b7f0:	d8813515 	stw	r2,1236(sp)
 200b7f4:	1885883a 	add	r2,r3,r2
 200b7f8:	d8812b15 	stw	r2,1196(sp)
 200b7fc:	00800044 	movi	r2,1
 200b800:	10c0580e 	bge	r2,r3,200b964 <___vfprintf_internal_r+0x1dd4>
 200b804:	d8812b17 	ldw	r2,1196(sp)
 200b808:	10800044 	addi	r2,r2,1
 200b80c:	d8812b15 	stw	r2,1196(sp)
 200b810:	d8812815 	stw	r2,1184(sp)
 200b814:	103ef50e 	bge	r2,zero,200b3ec <___vfprintf_internal_r+0x185c>
 200b818:	d8012815 	stw	zero,1184(sp)
 200b81c:	003ef306 	br	200b3ec <___vfprintf_internal_r+0x185c>
 200b820:	d8812b17 	ldw	r2,1196(sp)
 200b824:	d8c13217 	ldw	r3,1224(sp)
 200b828:	10c01416 	blt	r2,r3,200b87c <___vfprintf_internal_r+0x1cec>
 200b82c:	8400004c 	andi	r16,r16,1
 200b830:	80000326 	beq	r16,zero,200b840 <___vfprintf_internal_r+0x1cb0>
 200b834:	d8812b17 	ldw	r2,1196(sp)
 200b838:	10800044 	addi	r2,r2,1
 200b83c:	d8812b15 	stw	r2,1196(sp)
 200b840:	d8812815 	stw	r2,1184(sp)
 200b844:	10001416 	blt	r2,zero,200b898 <___vfprintf_internal_r+0x1d08>
 200b848:	048019c4 	movi	r18,103
 200b84c:	003ee706 	br	200b3ec <___vfprintf_internal_r+0x185c>
 200b850:	d8012815 	stw	zero,1184(sp)
 200b854:	003b1a06 	br	200a4c0 <___vfprintf_internal_r+0x930>
 200b858:	e03e9c1e 	bne	fp,zero,200b2cc <___vfprintf_internal_r+0x173c>
 200b85c:	07000044 	movi	fp,1
 200b860:	003e9a06 	br	200b2cc <___vfprintf_internal_r+0x173c>
 200b864:	07000184 	movi	fp,6
 200b868:	003e9806 	br	200b2cc <___vfprintf_internal_r+0x173c>
 200b86c:	00c00b44 	movi	r3,45
 200b870:	a520003c 	xorhi	r20,r20,32768
 200b874:	d8c12f05 	stb	r3,1212(sp)
 200b878:	003e9806 	br	200b2dc <___vfprintf_internal_r+0x174c>
 200b87c:	05003f0e 	bge	zero,r20,200b97c <___vfprintf_internal_r+0x1dec>
 200b880:	05000044 	movi	r20,1
 200b884:	d8c13217 	ldw	r3,1224(sp)
 200b888:	a0e9883a 	add	r20,r20,r3
 200b88c:	dd012b15 	stw	r20,1196(sp)
 200b890:	dd012815 	stw	r20,1184(sp)
 200b894:	a03fec0e 	bge	r20,zero,200b848 <___vfprintf_internal_r+0x1cb8>
 200b898:	d8012815 	stw	zero,1184(sp)
 200b89c:	048019c4 	movi	r18,103
 200b8a0:	003ed206 	br	200b3ec <___vfprintf_internal_r+0x185c>
 200b8a4:	d8c11f84 	addi	r3,sp,1150
 200b8a8:	102f883a 	mov	r23,r2
 200b8ac:	4839883a 	mov	fp,r9
 200b8b0:	a009883a 	mov	r4,r20
 200b8b4:	01400284 	movi	r5,10
 200b8b8:	182d883a 	mov	r22,r3
 200b8bc:	200934c0 	call	200934c <__modsi3>
 200b8c0:	10800c04 	addi	r2,r2,48
 200b8c4:	a009883a 	mov	r4,r20
 200b8c8:	b0800005 	stb	r2,0(r22)
 200b8cc:	01400284 	movi	r5,10
 200b8d0:	20092fc0 	call	20092fc <__divsi3>
 200b8d4:	1029883a 	mov	r20,r2
 200b8d8:	b0ffffc4 	addi	r3,r22,-1
 200b8dc:	b8bff416 	blt	r23,r2,200b8b0 <___vfprintf_internal_r+0x1d20>
 200b8e0:	11400c04 	addi	r5,r2,48
 200b8e4:	b17fffc5 	stb	r5,-1(r22)
 200b8e8:	d8811fc4 	addi	r2,sp,1151
 200b8ec:	e013883a 	mov	r9,fp
 200b8f0:	18803e2e 	bgeu	r3,r2,200b9ec <___vfprintf_internal_r+0x1e5c>
 200b8f4:	b007883a 	mov	r3,r22
 200b8f8:	d9012044 	addi	r4,sp,1153
 200b8fc:	00000206 	br	200b908 <___vfprintf_internal_r+0x1d78>
 200b900:	19400003 	ldbu	r5,0(r3)
 200b904:	18c00044 	addi	r3,r3,1
 200b908:	21400005 	stb	r5,0(r4)
 200b90c:	21000044 	addi	r4,r4,1
 200b910:	10fffb1e 	bne	r2,r3,200b900 <___vfprintf_internal_r+0x1d70>
 200b914:	d8c12004 	addi	r3,sp,1152
 200b918:	1d87c83a 	sub	r3,r3,r22
 200b91c:	d9012044 	addi	r4,sp,1153
 200b920:	20c7883a 	add	r3,r4,r3
 200b924:	003fb006 	br	200b7e8 <___vfprintf_internal_r+0x1c58>
 200b928:	e5c00044 	addi	r23,fp,1
 200b92c:	003e7406 	br	200b300 <___vfprintf_internal_r+0x1770>
 200b930:	d8c12217 	ldw	r3,1160(sp)
 200b934:	003e9906 	br	200b39c <___vfprintf_internal_r+0x180c>
 200b938:	d9012d17 	ldw	r4,1204(sp)
 200b93c:	ac800043 	ldbu	r18,1(r21)
 200b940:	b82b883a 	mov	r21,r23
 200b944:	20c00017 	ldw	r3,0(r4)
 200b948:	20800104 	addi	r2,r4,4
 200b94c:	d8812d15 	stw	r2,1204(sp)
 200b950:	18002116 	blt	r3,zero,200b9d8 <___vfprintf_internal_r+0x1e48>
 200b954:	94803fcc 	andi	r18,r18,255
 200b958:	9480201c 	xori	r18,r18,128
 200b95c:	94bfe004 	addi	r18,r18,-128
 200b960:	0038e706 	br	2009d00 <___vfprintf_internal_r+0x170>
 200b964:	80a0703a 	and	r16,r16,r2
 200b968:	803fa61e 	bne	r16,zero,200b804 <___vfprintf_internal_r+0x1c74>
 200b96c:	d8812b17 	ldw	r2,1196(sp)
 200b970:	d8812815 	stw	r2,1184(sp)
 200b974:	103e9d0e 	bge	r2,zero,200b3ec <___vfprintf_internal_r+0x185c>
 200b978:	003fa706 	br	200b818 <___vfprintf_internal_r+0x1c88>
 200b97c:	00800084 	movi	r2,2
 200b980:	1529c83a 	sub	r20,r2,r20
 200b984:	003fbf06 	br	200b884 <___vfprintf_internal_r+0x1cf4>
 200b988:	00800b44 	movi	r2,45
 200b98c:	0529c83a 	sub	r20,zero,r20
 200b990:	d8812005 	stb	r2,1152(sp)
 200b994:	003f8c06 	br	200b7c8 <___vfprintf_internal_r+0x1c38>
 200b998:	008011c4 	movi	r2,71
 200b99c:	90be6926 	beq	r18,r2,200b344 <___vfprintf_internal_r+0x17b4>
 200b9a0:	003e6a06 	br	200b34c <___vfprintf_internal_r+0x17bc>
 200b9a4:	00bfffc4 	movi	r2,-1
 200b9a8:	d8812c15 	stw	r2,1200(sp)
 200b9ac:	0039ad06 	br	200a064 <___vfprintf_internal_r+0x4d4>
 200b9b0:	1007883a 	mov	r3,r2
 200b9b4:	003e7906 	br	200b39c <___vfprintf_internal_r+0x180c>
 200b9b8:	e000021e 	bne	fp,zero,200b9c4 <___vfprintf_internal_r+0x1e34>
 200b9bc:	8400004c 	andi	r16,r16,1
 200b9c0:	80000e26 	beq	r16,zero,200b9fc <___vfprintf_internal_r+0x1e6c>
 200b9c4:	e7000084 	addi	fp,fp,2
 200b9c8:	df012b15 	stw	fp,1196(sp)
 200b9cc:	df012815 	stw	fp,1184(sp)
 200b9d0:	e03e860e 	bge	fp,zero,200b3ec <___vfprintf_internal_r+0x185c>
 200b9d4:	003f9006 	br	200b818 <___vfprintf_internal_r+0x1c88>
 200b9d8:	94803fcc 	andi	r18,r18,255
 200b9dc:	9480201c 	xori	r18,r18,128
 200b9e0:	00ffffc4 	movi	r3,-1
 200b9e4:	94bfe004 	addi	r18,r18,-128
 200b9e8:	0038c506 	br	2009d00 <___vfprintf_internal_r+0x170>
 200b9ec:	d8c12044 	addi	r3,sp,1153
 200b9f0:	003f7d06 	br	200b7e8 <___vfprintf_internal_r+0x1c58>
 200b9f4:	dd012417 	ldw	r20,1168(sp)
 200b9f8:	003f6d06 	br	200b7b0 <___vfprintf_internal_r+0x1c20>
 200b9fc:	00c00044 	movi	r3,1
 200ba00:	d8c12815 	stw	r3,1184(sp)
 200ba04:	d8c12b15 	stw	r3,1196(sp)
 200ba08:	003e7806 	br	200b3ec <___vfprintf_internal_r+0x185c>

0200ba0c <__vfprintf_internal>:
 200ba0c:	008080b4 	movhi	r2,514
 200ba10:	10a4ee04 	addi	r2,r2,-27720
 200ba14:	2007883a 	mov	r3,r4
 200ba18:	11000017 	ldw	r4,0(r2)
 200ba1c:	2805883a 	mov	r2,r5
 200ba20:	300f883a 	mov	r7,r6
 200ba24:	180b883a 	mov	r5,r3
 200ba28:	100d883a 	mov	r6,r2
 200ba2c:	2009b901 	jmpi	2009b90 <___vfprintf_internal_r>

0200ba30 <__swsetup_r>:
 200ba30:	008080b4 	movhi	r2,514
 200ba34:	10a4ee04 	addi	r2,r2,-27720
 200ba38:	10800017 	ldw	r2,0(r2)
 200ba3c:	defffd04 	addi	sp,sp,-12
 200ba40:	dc400115 	stw	r17,4(sp)
 200ba44:	dc000015 	stw	r16,0(sp)
 200ba48:	dfc00215 	stw	ra,8(sp)
 200ba4c:	2023883a 	mov	r17,r4
 200ba50:	2821883a 	mov	r16,r5
 200ba54:	10000226 	beq	r2,zero,200ba60 <__swsetup_r+0x30>
 200ba58:	10c00e17 	ldw	r3,56(r2)
 200ba5c:	18003d26 	beq	r3,zero,200bb54 <__swsetup_r+0x124>
 200ba60:	8080030b 	ldhu	r2,12(r16)
 200ba64:	10c0020c 	andi	r3,r2,8
 200ba68:	18ffffcc 	andi	r3,r3,65535
 200ba6c:	18e0001c 	xori	r3,r3,32768
 200ba70:	18e00004 	addi	r3,r3,-32768
 200ba74:	18001226 	beq	r3,zero,200bac0 <__swsetup_r+0x90>
 200ba78:	80c00417 	ldw	r3,16(r16)
 200ba7c:	18001f26 	beq	r3,zero,200bafc <__swsetup_r+0xcc>
 200ba80:	1100004c 	andi	r4,r2,1
 200ba84:	2000261e 	bne	r4,zero,200bb20 <__swsetup_r+0xf0>
 200ba88:	1080008c 	andi	r2,r2,2
 200ba8c:	10bfffcc 	andi	r2,r2,65535
 200ba90:	10a0001c 	xori	r2,r2,32768
 200ba94:	10a00004 	addi	r2,r2,-32768
 200ba98:	1000311e 	bne	r2,zero,200bb60 <__swsetup_r+0x130>
 200ba9c:	80800517 	ldw	r2,20(r16)
 200baa0:	80800215 	stw	r2,8(r16)
 200baa4:	18002326 	beq	r3,zero,200bb34 <__swsetup_r+0x104>
 200baa8:	0005883a 	mov	r2,zero
 200baac:	dfc00217 	ldw	ra,8(sp)
 200bab0:	dc400117 	ldw	r17,4(sp)
 200bab4:	dc000017 	ldw	r16,0(sp)
 200bab8:	dec00304 	addi	sp,sp,12
 200babc:	f800283a 	ret
 200bac0:	10c0040c 	andi	r3,r2,16
 200bac4:	18ffffcc 	andi	r3,r3,65535
 200bac8:	18e0001c 	xori	r3,r3,32768
 200bacc:	18e00004 	addi	r3,r3,-32768
 200bad0:	18001e26 	beq	r3,zero,200bb4c <__swsetup_r+0x11c>
 200bad4:	10c0010c 	andi	r3,r2,4
 200bad8:	18ffffcc 	andi	r3,r3,65535
 200badc:	18e0001c 	xori	r3,r3,32768
 200bae0:	18e00004 	addi	r3,r3,-32768
 200bae4:	1800211e 	bne	r3,zero,200bb6c <__swsetup_r+0x13c>
 200bae8:	80c00417 	ldw	r3,16(r16)
 200baec:	11400214 	ori	r5,r2,8
 200baf0:	8140030d 	sth	r5,12(r16)
 200baf4:	2805883a 	mov	r2,r5
 200baf8:	183fe11e 	bne	r3,zero,200ba80 <__swsetup_r+0x50>
 200bafc:	1140a00c 	andi	r5,r2,640
 200bb00:	01008004 	movi	r4,512
 200bb04:	293fde26 	beq	r5,r4,200ba80 <__swsetup_r+0x50>
 200bb08:	8809883a 	mov	r4,r17
 200bb0c:	800b883a 	mov	r5,r16
 200bb10:	200e42c0 	call	200e42c <__smakebuf_r>
 200bb14:	8080030b 	ldhu	r2,12(r16)
 200bb18:	80c00417 	ldw	r3,16(r16)
 200bb1c:	003fd806 	br	200ba80 <__swsetup_r+0x50>
 200bb20:	80800517 	ldw	r2,20(r16)
 200bb24:	80000215 	stw	zero,8(r16)
 200bb28:	0085c83a 	sub	r2,zero,r2
 200bb2c:	80800615 	stw	r2,24(r16)
 200bb30:	183fdd1e 	bne	r3,zero,200baa8 <__swsetup_r+0x78>
 200bb34:	8080030b 	ldhu	r2,12(r16)
 200bb38:	1080200c 	andi	r2,r2,128
 200bb3c:	10bfffcc 	andi	r2,r2,65535
 200bb40:	10a0001c 	xori	r2,r2,32768
 200bb44:	10a00004 	addi	r2,r2,-32768
 200bb48:	103fd826 	beq	r2,zero,200baac <__swsetup_r+0x7c>
 200bb4c:	00bfffc4 	movi	r2,-1
 200bb50:	003fd606 	br	200baac <__swsetup_r+0x7c>
 200bb54:	1009883a 	mov	r4,r2
 200bb58:	200d6b80 	call	200d6b8 <__sinit>
 200bb5c:	003fc006 	br	200ba60 <__swsetup_r+0x30>
 200bb60:	0005883a 	mov	r2,zero
 200bb64:	80800215 	stw	r2,8(r16)
 200bb68:	003fce06 	br	200baa4 <__swsetup_r+0x74>
 200bb6c:	81400c17 	ldw	r5,48(r16)
 200bb70:	28000626 	beq	r5,zero,200bb8c <__swsetup_r+0x15c>
 200bb74:	80c01004 	addi	r3,r16,64
 200bb78:	28c00326 	beq	r5,r3,200bb88 <__swsetup_r+0x158>
 200bb7c:	8809883a 	mov	r4,r17
 200bb80:	200da3c0 	call	200da3c <_free_r>
 200bb84:	8080030b 	ldhu	r2,12(r16)
 200bb88:	80000c15 	stw	zero,48(r16)
 200bb8c:	80c00417 	ldw	r3,16(r16)
 200bb90:	013ff6c4 	movi	r4,-37
 200bb94:	2084703a 	and	r2,r4,r2
 200bb98:	80000115 	stw	zero,4(r16)
 200bb9c:	80c00015 	stw	r3,0(r16)
 200bba0:	003fd206 	br	200baec <__swsetup_r+0xbc>

0200bba4 <quorem>:
 200bba4:	defff204 	addi	sp,sp,-56
 200bba8:	dd000815 	stw	r20,32(sp)
 200bbac:	20800417 	ldw	r2,16(r4)
 200bbb0:	2d000417 	ldw	r20,16(r5)
 200bbb4:	dcc00715 	stw	r19,28(sp)
 200bbb8:	dfc00d15 	stw	ra,52(sp)
 200bbbc:	df000c15 	stw	fp,48(sp)
 200bbc0:	ddc00b15 	stw	r23,44(sp)
 200bbc4:	dd800a15 	stw	r22,40(sp)
 200bbc8:	dd400915 	stw	r21,36(sp)
 200bbcc:	dc800615 	stw	r18,24(sp)
 200bbd0:	dc400515 	stw	r17,20(sp)
 200bbd4:	dc000415 	stw	r16,16(sp)
 200bbd8:	d9400015 	stw	r5,0(sp)
 200bbdc:	2027883a 	mov	r19,r4
 200bbe0:	15007d16 	blt	r2,r20,200bdd8 <quorem+0x234>
 200bbe4:	a0800104 	addi	r2,r20,4
 200bbe8:	1085883a 	add	r2,r2,r2
 200bbec:	1085883a 	add	r2,r2,r2
 200bbf0:	28ad883a 	add	r22,r5,r2
 200bbf4:	2085883a 	add	r2,r4,r2
 200bbf8:	10800017 	ldw	r2,0(r2)
 200bbfc:	b1400017 	ldw	r5,0(r22)
 200bc00:	a53fffc4 	addi	r20,r20,-1
 200bc04:	1009883a 	mov	r4,r2
 200bc08:	29400044 	addi	r5,r5,1
 200bc0c:	d8800115 	stw	r2,4(sp)
 200bc10:	20093a80 	call	20093a8 <__udivsi3>
 200bc14:	1025883a 	mov	r18,r2
 200bc18:	d8800017 	ldw	r2,0(sp)
 200bc1c:	9f000504 	addi	fp,r19,20
 200bc20:	14000504 	addi	r16,r2,20
 200bc24:	90003626 	beq	r18,zero,200bd00 <quorem+0x15c>
 200bc28:	802b883a 	mov	r21,r16
 200bc2c:	e023883a 	mov	r17,fp
 200bc30:	0007883a 	mov	r3,zero
 200bc34:	002f883a 	mov	r23,zero
 200bc38:	a9800017 	ldw	r6,0(r21)
 200bc3c:	900b883a 	mov	r5,r18
 200bc40:	d8c00315 	stw	r3,12(sp)
 200bc44:	313fffcc 	andi	r4,r6,65535
 200bc48:	d9800215 	stw	r6,8(sp)
 200bc4c:	20093b80 	call	20093b8 <__mulsi3>
 200bc50:	d9800217 	ldw	r6,8(sp)
 200bc54:	d8c00317 	ldw	r3,12(sp)
 200bc58:	900b883a 	mov	r5,r18
 200bc5c:	3008d43a 	srli	r4,r6,16
 200bc60:	1887883a 	add	r3,r3,r2
 200bc64:	d8c00315 	stw	r3,12(sp)
 200bc68:	20093b80 	call	20093b8 <__mulsi3>
 200bc6c:	89400017 	ldw	r5,0(r17)
 200bc70:	d8c00317 	ldw	r3,12(sp)
 200bc74:	ad400104 	addi	r21,r21,4
 200bc78:	293fffcc 	andi	r4,r5,65535
 200bc7c:	1810d43a 	srli	r8,r3,16
 200bc80:	25c9883a 	add	r4,r4,r23
 200bc84:	18ffffcc 	andi	r3,r3,65535
 200bc88:	20c9c83a 	sub	r4,r4,r3
 200bc8c:	280cd43a 	srli	r6,r5,16
 200bc90:	4085883a 	add	r2,r8,r2
 200bc94:	2007d43a 	srai	r3,r4,16
 200bc98:	117fffcc 	andi	r5,r2,65535
 200bc9c:	314bc83a 	sub	r5,r6,r5
 200bca0:	28cb883a 	add	r5,r5,r3
 200bca4:	8940008d 	sth	r5,2(r17)
 200bca8:	8900000d 	sth	r4,0(r17)
 200bcac:	1006d43a 	srli	r3,r2,16
 200bcb0:	282fd43a 	srai	r23,r5,16
 200bcb4:	8c400104 	addi	r17,r17,4
 200bcb8:	b57fdf2e 	bgeu	r22,r21,200bc38 <quorem+0x94>
 200bcbc:	d8c00117 	ldw	r3,4(sp)
 200bcc0:	18000f1e 	bne	r3,zero,200bd00 <quorem+0x15c>
 200bcc4:	a0800144 	addi	r2,r20,5
 200bcc8:	1085883a 	add	r2,r2,r2
 200bccc:	1085883a 	add	r2,r2,r2
 200bcd0:	9887883a 	add	r3,r19,r2
 200bcd4:	18bfff04 	addi	r2,r3,-4
 200bcd8:	e080082e 	bgeu	fp,r2,200bcfc <quorem+0x158>
 200bcdc:	18ffff17 	ldw	r3,-4(r3)
 200bce0:	18000326 	beq	r3,zero,200bcf0 <quorem+0x14c>
 200bce4:	00000506 	br	200bcfc <quorem+0x158>
 200bce8:	10c00017 	ldw	r3,0(r2)
 200bcec:	1800031e 	bne	r3,zero,200bcfc <quorem+0x158>
 200bcf0:	10bfff04 	addi	r2,r2,-4
 200bcf4:	a53fffc4 	addi	r20,r20,-1
 200bcf8:	e0bffb36 	bltu	fp,r2,200bce8 <quorem+0x144>
 200bcfc:	9d000415 	stw	r20,16(r19)
 200bd00:	d9400017 	ldw	r5,0(sp)
 200bd04:	9809883a 	mov	r4,r19
 200bd08:	200fb440 	call	200fb44 <__mcmp>
 200bd0c:	10002516 	blt	r2,zero,200bda4 <quorem+0x200>
 200bd10:	94800044 	addi	r18,r18,1
 200bd14:	e007883a 	mov	r3,fp
 200bd18:	000d883a 	mov	r6,zero
 200bd1c:	18800017 	ldw	r2,0(r3)
 200bd20:	82000017 	ldw	r8,0(r16)
 200bd24:	84000104 	addi	r16,r16,4
 200bd28:	11ffffcc 	andi	r7,r2,65535
 200bd2c:	413fffcc 	andi	r4,r8,65535
 200bd30:	398d883a 	add	r6,r7,r6
 200bd34:	310fc83a 	sub	r7,r6,r4
 200bd38:	4010d43a 	srli	r8,r8,16
 200bd3c:	100cd43a 	srli	r6,r2,16
 200bd40:	3809d43a 	srai	r4,r7,16
 200bd44:	19c0000d 	sth	r7,0(r3)
 200bd48:	320dc83a 	sub	r6,r6,r8
 200bd4c:	310d883a 	add	r6,r6,r4
 200bd50:	1980008d 	sth	r6,2(r3)
 200bd54:	300dd43a 	srai	r6,r6,16
 200bd58:	18c00104 	addi	r3,r3,4
 200bd5c:	b43fef2e 	bgeu	r22,r16,200bd1c <quorem+0x178>
 200bd60:	a0800144 	addi	r2,r20,5
 200bd64:	1085883a 	add	r2,r2,r2
 200bd68:	1085883a 	add	r2,r2,r2
 200bd6c:	9885883a 	add	r2,r19,r2
 200bd70:	10c00017 	ldw	r3,0(r2)
 200bd74:	18000b1e 	bne	r3,zero,200bda4 <quorem+0x200>
 200bd78:	10ffff04 	addi	r3,r2,-4
 200bd7c:	e0c0082e 	bgeu	fp,r3,200bda0 <quorem+0x1fc>
 200bd80:	10bfff17 	ldw	r2,-4(r2)
 200bd84:	10000326 	beq	r2,zero,200bd94 <quorem+0x1f0>
 200bd88:	00000506 	br	200bda0 <quorem+0x1fc>
 200bd8c:	18800017 	ldw	r2,0(r3)
 200bd90:	1000031e 	bne	r2,zero,200bda0 <quorem+0x1fc>
 200bd94:	18ffff04 	addi	r3,r3,-4
 200bd98:	a53fffc4 	addi	r20,r20,-1
 200bd9c:	e0fffb36 	bltu	fp,r3,200bd8c <quorem+0x1e8>
 200bda0:	9d000415 	stw	r20,16(r19)
 200bda4:	9005883a 	mov	r2,r18
 200bda8:	dfc00d17 	ldw	ra,52(sp)
 200bdac:	df000c17 	ldw	fp,48(sp)
 200bdb0:	ddc00b17 	ldw	r23,44(sp)
 200bdb4:	dd800a17 	ldw	r22,40(sp)
 200bdb8:	dd400917 	ldw	r21,36(sp)
 200bdbc:	dd000817 	ldw	r20,32(sp)
 200bdc0:	dcc00717 	ldw	r19,28(sp)
 200bdc4:	dc800617 	ldw	r18,24(sp)
 200bdc8:	dc400517 	ldw	r17,20(sp)
 200bdcc:	dc000417 	ldw	r16,16(sp)
 200bdd0:	dec00e04 	addi	sp,sp,56
 200bdd4:	f800283a 	ret
 200bdd8:	0005883a 	mov	r2,zero
 200bddc:	003ff206 	br	200bda8 <quorem+0x204>

0200bde0 <_dtoa_r>:
 200bde0:	20801017 	ldw	r2,64(r4)
 200bde4:	deffdf04 	addi	sp,sp,-132
 200bde8:	dcc01a15 	stw	r19,104(sp)
 200bdec:	dc801915 	stw	r18,100(sp)
 200bdf0:	dc401815 	stw	r17,96(sp)
 200bdf4:	dc001715 	stw	r16,92(sp)
 200bdf8:	dfc02015 	stw	ra,128(sp)
 200bdfc:	df001f15 	stw	fp,124(sp)
 200be00:	ddc01e15 	stw	r23,120(sp)
 200be04:	dd801d15 	stw	r22,116(sp)
 200be08:	dd401c15 	stw	r21,112(sp)
 200be0c:	dd001b15 	stw	r20,108(sp)
 200be10:	d9400315 	stw	r5,12(sp)
 200be14:	d9c00415 	stw	r7,16(sp)
 200be18:	2021883a 	mov	r16,r4
 200be1c:	3025883a 	mov	r18,r6
 200be20:	dcc02317 	ldw	r19,140(sp)
 200be24:	3023883a 	mov	r17,r6
 200be28:	10000826 	beq	r2,zero,200be4c <_dtoa_r+0x6c>
 200be2c:	20c01117 	ldw	r3,68(r4)
 200be30:	01800044 	movi	r6,1
 200be34:	100b883a 	mov	r5,r2
 200be38:	30cc983a 	sll	r6,r6,r3
 200be3c:	10c00115 	stw	r3,4(r2)
 200be40:	11800215 	stw	r6,8(r2)
 200be44:	200f2a00 	call	200f2a0 <_Bfree>
 200be48:	80001015 	stw	zero,64(r16)
 200be4c:	90002f16 	blt	r18,zero,200bf0c <_dtoa_r+0x12c>
 200be50:	98000015 	stw	zero,0(r19)
 200be54:	90dffc2c 	andhi	r3,r18,32752
 200be58:	009ffc34 	movhi	r2,32752
 200be5c:	18801c26 	beq	r3,r2,200bed0 <_dtoa_r+0xf0>
 200be60:	d9000317 	ldw	r4,12(sp)
 200be64:	880b883a 	mov	r5,r17
 200be68:	000d883a 	mov	r6,zero
 200be6c:	000f883a 	mov	r7,zero
 200be70:	20120900 	call	2012090 <__eqdf2>
 200be74:	10002c1e 	bne	r2,zero,200bf28 <_dtoa_r+0x148>
 200be78:	d9002217 	ldw	r4,136(sp)
 200be7c:	d9c02417 	ldw	r7,144(sp)
 200be80:	00800044 	movi	r2,1
 200be84:	20800015 	stw	r2,0(r4)
 200be88:	38019426 	beq	r7,zero,200c4dc <_dtoa_r+0x6fc>
 200be8c:	00808074 	movhi	r2,513
 200be90:	109d4e44 	addi	r2,r2,30009
 200be94:	38800015 	stw	r2,0(r7)
 200be98:	15ffffc4 	addi	r23,r2,-1
 200be9c:	b805883a 	mov	r2,r23
 200bea0:	dfc02017 	ldw	ra,128(sp)
 200bea4:	df001f17 	ldw	fp,124(sp)
 200bea8:	ddc01e17 	ldw	r23,120(sp)
 200beac:	dd801d17 	ldw	r22,116(sp)
 200beb0:	dd401c17 	ldw	r21,112(sp)
 200beb4:	dd001b17 	ldw	r20,108(sp)
 200beb8:	dcc01a17 	ldw	r19,104(sp)
 200bebc:	dc801917 	ldw	r18,100(sp)
 200bec0:	dc401817 	ldw	r17,96(sp)
 200bec4:	dc001717 	ldw	r16,92(sp)
 200bec8:	dec02104 	addi	sp,sp,132
 200becc:	f800283a 	ret
 200bed0:	d8c02217 	ldw	r3,136(sp)
 200bed4:	d9000317 	ldw	r4,12(sp)
 200bed8:	0089c3c4 	movi	r2,9999
 200bedc:	18800015 	stw	r2,0(r3)
 200bee0:	20016c26 	beq	r4,zero,200c494 <_dtoa_r+0x6b4>
 200bee4:	05c08074 	movhi	r23,513
 200bee8:	bddd5a04 	addi	r23,r23,30056
 200beec:	d9c02417 	ldw	r7,144(sp)
 200bef0:	383fea26 	beq	r7,zero,200be9c <_dtoa_r+0xbc>
 200bef4:	b88000c7 	ldb	r2,3(r23)
 200bef8:	10016d1e 	bne	r2,zero,200c4b0 <_dtoa_r+0x6d0>
 200befc:	b88000c4 	addi	r2,r23,3
 200bf00:	d8c02417 	ldw	r3,144(sp)
 200bf04:	18800015 	stw	r2,0(r3)
 200bf08:	003fe406 	br	200be9c <_dtoa_r+0xbc>
 200bf0c:	04600034 	movhi	r17,32768
 200bf10:	8c7fffc4 	addi	r17,r17,-1
 200bf14:	9462703a 	and	r17,r18,r17
 200bf18:	00800044 	movi	r2,1
 200bf1c:	98800015 	stw	r2,0(r19)
 200bf20:	8825883a 	mov	r18,r17
 200bf24:	003fcb06 	br	200be54 <_dtoa_r+0x74>
 200bf28:	d9400317 	ldw	r5,12(sp)
 200bf2c:	9028d53a 	srli	r20,r18,20
 200bf30:	d8800204 	addi	r2,sp,8
 200bf34:	d8800015 	stw	r2,0(sp)
 200bf38:	8009883a 	mov	r4,r16
 200bf3c:	880d883a 	mov	r6,r17
 200bf40:	d9c00104 	addi	r7,sp,4
 200bf44:	200feec0 	call	200feec <__d2b>
 200bf48:	a501ffcc 	andi	r20,r20,2047
 200bf4c:	1039883a 	mov	fp,r2
 200bf50:	a001591e 	bne	r20,zero,200c4b8 <_dtoa_r+0x6d8>
 200bf54:	dd400217 	ldw	r21,8(sp)
 200bf58:	dd000117 	ldw	r20,4(sp)
 200bf5c:	00befbc4 	movi	r2,-1041
 200bf60:	ad29883a 	add	r20,r21,r20
 200bf64:	a082d216 	blt	r20,r2,200cab0 <_dtoa_r+0xcd0>
 200bf68:	d8c00317 	ldw	r3,12(sp)
 200bf6c:	013f0384 	movi	r4,-1010
 200bf70:	2509c83a 	sub	r4,r4,r20
 200bf74:	a0810484 	addi	r2,r20,1042
 200bf78:	9124983a 	sll	r18,r18,r4
 200bf7c:	1884d83a 	srl	r2,r3,r2
 200bf80:	9088b03a 	or	r4,r18,r2
 200bf84:	200916c0 	call	200916c <__floatunsidf>
 200bf88:	1009883a 	mov	r4,r2
 200bf8c:	017f8434 	movhi	r5,65040
 200bf90:	00800044 	movi	r2,1
 200bf94:	194b883a 	add	r5,r3,r5
 200bf98:	a53fffc4 	addi	r20,r20,-1
 200bf9c:	d8800f15 	stw	r2,60(sp)
 200bfa0:	000d883a 	mov	r6,zero
 200bfa4:	01cffe34 	movhi	r7,16376
 200bfa8:	2008fd40 	call	2008fd4 <__subdf3>
 200bfac:	1009883a 	mov	r4,r2
 200bfb0:	180b883a 	mov	r5,r3
 200bfb4:	0198dbf4 	movhi	r6,25455
 200bfb8:	3190d844 	addi	r6,r6,17249
 200bfbc:	01cff4f4 	movhi	r7,16339
 200bfc0:	39e1e9c4 	addi	r7,r7,-30809
 200bfc4:	2011bf80 	call	2011bf8 <__muldf3>
 200bfc8:	180b883a 	mov	r5,r3
 200bfcc:	01a2d874 	movhi	r6,35681
 200bfd0:	31b22cc4 	addi	r6,r6,-14157
 200bfd4:	01cff1f4 	movhi	r7,16327
 200bfd8:	39e28a04 	addi	r7,r7,-30168
 200bfdc:	1009883a 	mov	r4,r2
 200bfe0:	2008f800 	call	2008f80 <__adddf3>
 200bfe4:	a009883a 	mov	r4,r20
 200bfe8:	1027883a 	mov	r19,r2
 200bfec:	1825883a 	mov	r18,r3
 200bff0:	20122080 	call	2012208 <__floatsidf>
 200bff4:	1009883a 	mov	r4,r2
 200bff8:	180b883a 	mov	r5,r3
 200bffc:	019427f4 	movhi	r6,20639
 200c000:	319e7ec4 	addi	r6,r6,31227
 200c004:	01cff4f4 	movhi	r7,16339
 200c008:	39d104c4 	addi	r7,r7,17427
 200c00c:	2011bf80 	call	2011bf8 <__muldf3>
 200c010:	9809883a 	mov	r4,r19
 200c014:	900b883a 	mov	r5,r18
 200c018:	100d883a 	mov	r6,r2
 200c01c:	180f883a 	mov	r7,r3
 200c020:	2008f800 	call	2008f80 <__adddf3>
 200c024:	1009883a 	mov	r4,r2
 200c028:	180b883a 	mov	r5,r3
 200c02c:	1027883a 	mov	r19,r2
 200c030:	1825883a 	mov	r18,r3
 200c034:	20090980 	call	2009098 <__fixdfsi>
 200c038:	9809883a 	mov	r4,r19
 200c03c:	900b883a 	mov	r5,r18
 200c040:	000d883a 	mov	r6,zero
 200c044:	000f883a 	mov	r7,zero
 200c048:	d8800615 	stw	r2,24(sp)
 200c04c:	20121ac0 	call	20121ac <__ltdf2>
 200c050:	10027e16 	blt	r2,zero,200ca4c <_dtoa_r+0xc6c>
 200c054:	d8c00617 	ldw	r3,24(sp)
 200c058:	00800584 	movi	r2,22
 200c05c:	10c26c36 	bltu	r2,r3,200ca10 <_dtoa_r+0xc30>
 200c060:	180490fa 	slli	r2,r3,3
 200c064:	00c08074 	movhi	r3,513
 200c068:	18dd8004 	addi	r3,r3,30208
 200c06c:	d9800317 	ldw	r6,12(sp)
 200c070:	1885883a 	add	r2,r3,r2
 200c074:	11000017 	ldw	r4,0(r2)
 200c078:	11400117 	ldw	r5,4(r2)
 200c07c:	880f883a 	mov	r7,r17
 200c080:	20121480 	call	2012148 <__gtdf2>
 200c084:	00828f0e 	bge	zero,r2,200cac4 <_dtoa_r+0xce4>
 200c088:	d8800617 	ldw	r2,24(sp)
 200c08c:	d8000d15 	stw	zero,52(sp)
 200c090:	10bfffc4 	addi	r2,r2,-1
 200c094:	d8800615 	stw	r2,24(sp)
 200c098:	ad29c83a 	sub	r20,r21,r20
 200c09c:	a53fffc4 	addi	r20,r20,-1
 200c0a0:	a0026616 	blt	r20,zero,200ca3c <_dtoa_r+0xc5c>
 200c0a4:	dd000715 	stw	r20,28(sp)
 200c0a8:	d8000815 	stw	zero,32(sp)
 200c0ac:	d8800617 	ldw	r2,24(sp)
 200c0b0:	10025a16 	blt	r2,zero,200ca1c <_dtoa_r+0xc3c>
 200c0b4:	d8c00717 	ldw	r3,28(sp)
 200c0b8:	d8800b15 	stw	r2,44(sp)
 200c0bc:	d8000a15 	stw	zero,40(sp)
 200c0c0:	1887883a 	add	r3,r3,r2
 200c0c4:	d8c00715 	stw	r3,28(sp)
 200c0c8:	d9c00417 	ldw	r7,16(sp)
 200c0cc:	00800244 	movi	r2,9
 200c0d0:	11c10536 	bltu	r2,r7,200c4e8 <_dtoa_r+0x708>
 200c0d4:	00800144 	movi	r2,5
 200c0d8:	11c4c60e 	bge	r2,r7,200d3f4 <_dtoa_r+0x1614>
 200c0dc:	39ffff04 	addi	r7,r7,-4
 200c0e0:	d9c00415 	stw	r7,16(sp)
 200c0e4:	0027883a 	mov	r19,zero
 200c0e8:	d9c00417 	ldw	r7,16(sp)
 200c0ec:	008000c4 	movi	r2,3
 200c0f0:	3883a226 	beq	r7,r2,200cf7c <_dtoa_r+0x119c>
 200c0f4:	11c2bc16 	blt	r2,r7,200cbe8 <_dtoa_r+0xe08>
 200c0f8:	00800084 	movi	r2,2
 200c0fc:	3880fb1e 	bne	r7,r2,200c4ec <_dtoa_r+0x70c>
 200c100:	d8000c15 	stw	zero,48(sp)
 200c104:	d9002117 	ldw	r4,132(sp)
 200c108:	0103ae0e 	bge	zero,r4,200cfc4 <_dtoa_r+0x11e4>
 200c10c:	2025883a 	mov	r18,r4
 200c110:	d9000e15 	stw	r4,56(sp)
 200c114:	d9000915 	stw	r4,36(sp)
 200c118:	80001115 	stw	zero,68(r16)
 200c11c:	008005c4 	movi	r2,23
 200c120:	1484b22e 	bgeu	r2,r18,200d3ec <_dtoa_r+0x160c>
 200c124:	00c00044 	movi	r3,1
 200c128:	00800104 	movi	r2,4
 200c12c:	1085883a 	add	r2,r2,r2
 200c130:	11000504 	addi	r4,r2,20
 200c134:	180b883a 	mov	r5,r3
 200c138:	18c00044 	addi	r3,r3,1
 200c13c:	913ffb2e 	bgeu	r18,r4,200c12c <_dtoa_r+0x34c>
 200c140:	81401115 	stw	r5,68(r16)
 200c144:	8009883a 	mov	r4,r16
 200c148:	200f1f80 	call	200f1f8 <_Balloc>
 200c14c:	102f883a 	mov	r23,r2
 200c150:	80801015 	stw	r2,64(r16)
 200c154:	00800384 	movi	r2,14
 200c158:	1480f036 	bltu	r2,r18,200c51c <_dtoa_r+0x73c>
 200c15c:	9800ef26 	beq	r19,zero,200c51c <_dtoa_r+0x73c>
 200c160:	d8800617 	ldw	r2,24(sp)
 200c164:	00839c0e 	bge	zero,r2,200cfd8 <_dtoa_r+0x11f8>
 200c168:	d8c00617 	ldw	r3,24(sp)
 200c16c:	108003cc 	andi	r2,r2,15
 200c170:	100490fa 	slli	r2,r2,3
 200c174:	182bd13a 	srai	r21,r3,4
 200c178:	00c08074 	movhi	r3,513
 200c17c:	18dd8004 	addi	r3,r3,30208
 200c180:	1885883a 	add	r2,r3,r2
 200c184:	a8c0040c 	andi	r3,r21,16
 200c188:	12800017 	ldw	r10,0(r2)
 200c18c:	15800117 	ldw	r22,4(r2)
 200c190:	18038726 	beq	r3,zero,200cfb0 <_dtoa_r+0x11d0>
 200c194:	00808074 	movhi	r2,513
 200c198:	109d7604 	addi	r2,r2,30168
 200c19c:	11800817 	ldw	r6,32(r2)
 200c1a0:	11c00917 	ldw	r7,36(r2)
 200c1a4:	d9000317 	ldw	r4,12(sp)
 200c1a8:	880b883a 	mov	r5,r17
 200c1ac:	da801515 	stw	r10,84(sp)
 200c1b0:	2011edc0 	call	2011edc <__divdf3>
 200c1b4:	da801517 	ldw	r10,84(sp)
 200c1b8:	d8801015 	stw	r2,64(sp)
 200c1bc:	1829883a 	mov	r20,r3
 200c1c0:	ad4003cc 	andi	r21,r21,15
 200c1c4:	048000c4 	movi	r18,3
 200c1c8:	a8001126 	beq	r21,zero,200c210 <_dtoa_r+0x430>
 200c1cc:	04c08074 	movhi	r19,513
 200c1d0:	9cdd7604 	addi	r19,r19,30168
 200c1d4:	5005883a 	mov	r2,r10
 200c1d8:	b007883a 	mov	r3,r22
 200c1dc:	a980004c 	andi	r6,r21,1
 200c1e0:	1009883a 	mov	r4,r2
 200c1e4:	a82bd07a 	srai	r21,r21,1
 200c1e8:	180b883a 	mov	r5,r3
 200c1ec:	30000426 	beq	r6,zero,200c200 <_dtoa_r+0x420>
 200c1f0:	99800017 	ldw	r6,0(r19)
 200c1f4:	99c00117 	ldw	r7,4(r19)
 200c1f8:	94800044 	addi	r18,r18,1
 200c1fc:	2011bf80 	call	2011bf8 <__muldf3>
 200c200:	9cc00204 	addi	r19,r19,8
 200c204:	a83ff51e 	bne	r21,zero,200c1dc <_dtoa_r+0x3fc>
 200c208:	1015883a 	mov	r10,r2
 200c20c:	182d883a 	mov	r22,r3
 200c210:	d9001017 	ldw	r4,64(sp)
 200c214:	a00b883a 	mov	r5,r20
 200c218:	500d883a 	mov	r6,r10
 200c21c:	b00f883a 	mov	r7,r22
 200c220:	2011edc0 	call	2011edc <__divdf3>
 200c224:	1027883a 	mov	r19,r2
 200c228:	1829883a 	mov	r20,r3
 200c22c:	d8c00d17 	ldw	r3,52(sp)
 200c230:	18000626 	beq	r3,zero,200c24c <_dtoa_r+0x46c>
 200c234:	9809883a 	mov	r4,r19
 200c238:	a00b883a 	mov	r5,r20
 200c23c:	000d883a 	mov	r6,zero
 200c240:	01cffc34 	movhi	r7,16368
 200c244:	20121ac0 	call	20121ac <__ltdf2>
 200c248:	10040e16 	blt	r2,zero,200d284 <_dtoa_r+0x14a4>
 200c24c:	9009883a 	mov	r4,r18
 200c250:	20122080 	call	2012208 <__floatsidf>
 200c254:	1009883a 	mov	r4,r2
 200c258:	180b883a 	mov	r5,r3
 200c25c:	980d883a 	mov	r6,r19
 200c260:	a00f883a 	mov	r7,r20
 200c264:	2011bf80 	call	2011bf8 <__muldf3>
 200c268:	1009883a 	mov	r4,r2
 200c26c:	180b883a 	mov	r5,r3
 200c270:	000d883a 	mov	r6,zero
 200c274:	01d00734 	movhi	r7,16412
 200c278:	2008f800 	call	2008f80 <__adddf3>
 200c27c:	057f3034 	movhi	r21,64704
 200c280:	1d6b883a 	add	r21,r3,r21
 200c284:	d8c00917 	ldw	r3,36(sp)
 200c288:	1025883a 	mov	r18,r2
 200c28c:	18031f26 	beq	r3,zero,200cf0c <_dtoa_r+0x112c>
 200c290:	d8800617 	ldw	r2,24(sp)
 200c294:	dac00917 	ldw	r11,36(sp)
 200c298:	d8801315 	stw	r2,76(sp)
 200c29c:	d8c00c17 	ldw	r3,48(sp)
 200c2a0:	18039026 	beq	r3,zero,200d0e4 <_dtoa_r+0x1304>
 200c2a4:	58bfffc4 	addi	r2,r11,-1
 200c2a8:	100490fa 	slli	r2,r2,3
 200c2ac:	00c08074 	movhi	r3,513
 200c2b0:	18dd8004 	addi	r3,r3,30208
 200c2b4:	0009883a 	mov	r4,zero
 200c2b8:	1885883a 	add	r2,r3,r2
 200c2bc:	11800017 	ldw	r6,0(r2)
 200c2c0:	11c00117 	ldw	r7,4(r2)
 200c2c4:	014ff834 	movhi	r5,16352
 200c2c8:	dac01615 	stw	r11,88(sp)
 200c2cc:	2011edc0 	call	2011edc <__divdf3>
 200c2d0:	900d883a 	mov	r6,r18
 200c2d4:	a80f883a 	mov	r7,r21
 200c2d8:	1009883a 	mov	r4,r2
 200c2dc:	180b883a 	mov	r5,r3
 200c2e0:	2008fd40 	call	2008fd4 <__subdf3>
 200c2e4:	a00b883a 	mov	r5,r20
 200c2e8:	9809883a 	mov	r4,r19
 200c2ec:	182b883a 	mov	r21,r3
 200c2f0:	d8801015 	stw	r2,64(sp)
 200c2f4:	20090980 	call	2009098 <__fixdfsi>
 200c2f8:	1009883a 	mov	r4,r2
 200c2fc:	d8801515 	stw	r2,84(sp)
 200c300:	20122080 	call	2012208 <__floatsidf>
 200c304:	9809883a 	mov	r4,r19
 200c308:	a00b883a 	mov	r5,r20
 200c30c:	100d883a 	mov	r6,r2
 200c310:	180f883a 	mov	r7,r3
 200c314:	2008fd40 	call	2008fd4 <__subdf3>
 200c318:	da401517 	ldw	r9,84(sp)
 200c31c:	d9001017 	ldw	r4,64(sp)
 200c320:	a80b883a 	mov	r5,r21
 200c324:	4d000c04 	addi	r20,r9,48
 200c328:	bd000005 	stb	r20,0(r23)
 200c32c:	100d883a 	mov	r6,r2
 200c330:	180f883a 	mov	r7,r3
 200c334:	bd800044 	addi	r22,r23,1
 200c338:	1025883a 	mov	r18,r2
 200c33c:	1827883a 	mov	r19,r3
 200c340:	20121480 	call	2012148 <__gtdf2>
 200c344:	00842216 	blt	zero,r2,200d3d0 <_dtoa_r+0x15f0>
 200c348:	0009883a 	mov	r4,zero
 200c34c:	014ffc34 	movhi	r5,16368
 200c350:	900d883a 	mov	r6,r18
 200c354:	980f883a 	mov	r7,r19
 200c358:	2008fd40 	call	2008fd4 <__subdf3>
 200c35c:	d9001017 	ldw	r4,64(sp)
 200c360:	a80b883a 	mov	r5,r21
 200c364:	100d883a 	mov	r6,r2
 200c368:	180f883a 	mov	r7,r3
 200c36c:	20121480 	call	2012148 <__gtdf2>
 200c370:	dac01617 	ldw	r11,88(sp)
 200c374:	00841316 	blt	zero,r2,200d3c4 <_dtoa_r+0x15e4>
 200c378:	00800044 	movi	r2,1
 200c37c:	12c0670e 	bge	r2,r11,200c51c <_dtoa_r+0x73c>
 200c380:	bad7883a 	add	r11,r23,r11
 200c384:	df001115 	stw	fp,68(sp)
 200c388:	dc401215 	stw	r17,72(sp)
 200c38c:	5839883a 	mov	fp,r11
 200c390:	dc401017 	ldw	r17,64(sp)
 200c394:	00000806 	br	200c3b8 <_dtoa_r+0x5d8>
 200c398:	2008fd40 	call	2008fd4 <__subdf3>
 200c39c:	1009883a 	mov	r4,r2
 200c3a0:	180b883a 	mov	r5,r3
 200c3a4:	880d883a 	mov	r6,r17
 200c3a8:	a80f883a 	mov	r7,r21
 200c3ac:	20121ac0 	call	20121ac <__ltdf2>
 200c3b0:	1003ee16 	blt	r2,zero,200d36c <_dtoa_r+0x158c>
 200c3b4:	b703f126 	beq	r22,fp,200d37c <_dtoa_r+0x159c>
 200c3b8:	8809883a 	mov	r4,r17
 200c3bc:	a80b883a 	mov	r5,r21
 200c3c0:	000d883a 	mov	r6,zero
 200c3c4:	01d00934 	movhi	r7,16420
 200c3c8:	2011bf80 	call	2011bf8 <__muldf3>
 200c3cc:	000d883a 	mov	r6,zero
 200c3d0:	01d00934 	movhi	r7,16420
 200c3d4:	9009883a 	mov	r4,r18
 200c3d8:	980b883a 	mov	r5,r19
 200c3dc:	1023883a 	mov	r17,r2
 200c3e0:	182b883a 	mov	r21,r3
 200c3e4:	2011bf80 	call	2011bf8 <__muldf3>
 200c3e8:	180b883a 	mov	r5,r3
 200c3ec:	1009883a 	mov	r4,r2
 200c3f0:	1825883a 	mov	r18,r3
 200c3f4:	1027883a 	mov	r19,r2
 200c3f8:	20090980 	call	2009098 <__fixdfsi>
 200c3fc:	1009883a 	mov	r4,r2
 200c400:	1029883a 	mov	r20,r2
 200c404:	20122080 	call	2012208 <__floatsidf>
 200c408:	9809883a 	mov	r4,r19
 200c40c:	900b883a 	mov	r5,r18
 200c410:	100d883a 	mov	r6,r2
 200c414:	180f883a 	mov	r7,r3
 200c418:	2008fd40 	call	2008fd4 <__subdf3>
 200c41c:	a5000c04 	addi	r20,r20,48
 200c420:	b5000005 	stb	r20,0(r22)
 200c424:	1009883a 	mov	r4,r2
 200c428:	180b883a 	mov	r5,r3
 200c42c:	880d883a 	mov	r6,r17
 200c430:	a80f883a 	mov	r7,r21
 200c434:	1025883a 	mov	r18,r2
 200c438:	1827883a 	mov	r19,r3
 200c43c:	20121ac0 	call	20121ac <__ltdf2>
 200c440:	b5800044 	addi	r22,r22,1
 200c444:	0009883a 	mov	r4,zero
 200c448:	014ffc34 	movhi	r5,16368
 200c44c:	900d883a 	mov	r6,r18
 200c450:	980f883a 	mov	r7,r19
 200c454:	103fd00e 	bge	r2,zero,200c398 <_dtoa_r+0x5b8>
 200c458:	d9001317 	ldw	r4,76(sp)
 200c45c:	df001117 	ldw	fp,68(sp)
 200c460:	d9000615 	stw	r4,24(sp)
 200c464:	8009883a 	mov	r4,r16
 200c468:	e00b883a 	mov	r5,fp
 200c46c:	200f2a00 	call	200f2a0 <_Bfree>
 200c470:	d9c00617 	ldw	r7,24(sp)
 200c474:	d8c02217 	ldw	r3,136(sp)
 200c478:	d9002417 	ldw	r4,144(sp)
 200c47c:	b0000005 	stb	zero,0(r22)
 200c480:	38800044 	addi	r2,r7,1
 200c484:	18800015 	stw	r2,0(r3)
 200c488:	203e8426 	beq	r4,zero,200be9c <_dtoa_r+0xbc>
 200c48c:	25800015 	stw	r22,0(r4)
 200c490:	003e8206 	br	200be9c <_dtoa_r+0xbc>
 200c494:	00800434 	movhi	r2,16
 200c498:	10bfffc4 	addi	r2,r2,-1
 200c49c:	90a4703a 	and	r18,r18,r2
 200c4a0:	903e901e 	bne	r18,zero,200bee4 <_dtoa_r+0x104>
 200c4a4:	05c08074 	movhi	r23,513
 200c4a8:	bddd5704 	addi	r23,r23,30044
 200c4ac:	003e8f06 	br	200beec <_dtoa_r+0x10c>
 200c4b0:	b8800204 	addi	r2,r23,8
 200c4b4:	003e9206 	br	200bf00 <_dtoa_r+0x120>
 200c4b8:	01400434 	movhi	r5,16
 200c4bc:	297fffc4 	addi	r5,r5,-1
 200c4c0:	894a703a 	and	r5,r17,r5
 200c4c4:	d9000317 	ldw	r4,12(sp)
 200c4c8:	294ffc34 	orhi	r5,r5,16368
 200c4cc:	a53f0044 	addi	r20,r20,-1023
 200c4d0:	dd400217 	ldw	r21,8(sp)
 200c4d4:	d8000f15 	stw	zero,60(sp)
 200c4d8:	003eb106 	br	200bfa0 <_dtoa_r+0x1c0>
 200c4dc:	05c08074 	movhi	r23,513
 200c4e0:	bddd4e04 	addi	r23,r23,30008
 200c4e4:	003e6d06 	br	200be9c <_dtoa_r+0xbc>
 200c4e8:	d8000415 	stw	zero,16(sp)
 200c4ec:	80001115 	stw	zero,68(r16)
 200c4f0:	8009883a 	mov	r4,r16
 200c4f4:	000b883a 	mov	r5,zero
 200c4f8:	200f1f80 	call	200f1f8 <_Balloc>
 200c4fc:	01ffffc4 	movi	r7,-1
 200c500:	102f883a 	mov	r23,r2
 200c504:	80801015 	stw	r2,64(r16)
 200c508:	00800044 	movi	r2,1
 200c50c:	d9c00915 	stw	r7,36(sp)
 200c510:	d8002115 	stw	zero,132(sp)
 200c514:	d9c00e15 	stw	r7,56(sp)
 200c518:	d8800c15 	stw	r2,48(sp)
 200c51c:	d8800117 	ldw	r2,4(sp)
 200c520:	10008b16 	blt	r2,zero,200c750 <_dtoa_r+0x970>
 200c524:	d9000617 	ldw	r4,24(sp)
 200c528:	00c00384 	movi	r3,14
 200c52c:	19008816 	blt	r3,r4,200c750 <_dtoa_r+0x970>
 200c530:	200490fa 	slli	r2,r4,3
 200c534:	d9c02117 	ldw	r7,132(sp)
 200c538:	00c08074 	movhi	r3,513
 200c53c:	18dd8004 	addi	r3,r3,30208
 200c540:	1885883a 	add	r2,r3,r2
 200c544:	14800017 	ldw	r18,0(r2)
 200c548:	14c00117 	ldw	r19,4(r2)
 200c54c:	3801c916 	blt	r7,zero,200cc74 <_dtoa_r+0xe94>
 200c550:	d9000317 	ldw	r4,12(sp)
 200c554:	900d883a 	mov	r6,r18
 200c558:	980f883a 	mov	r7,r19
 200c55c:	880b883a 	mov	r5,r17
 200c560:	2011edc0 	call	2011edc <__divdf3>
 200c564:	180b883a 	mov	r5,r3
 200c568:	1009883a 	mov	r4,r2
 200c56c:	20090980 	call	2009098 <__fixdfsi>
 200c570:	1009883a 	mov	r4,r2
 200c574:	102b883a 	mov	r21,r2
 200c578:	20122080 	call	2012208 <__floatsidf>
 200c57c:	1009883a 	mov	r4,r2
 200c580:	180b883a 	mov	r5,r3
 200c584:	900d883a 	mov	r6,r18
 200c588:	980f883a 	mov	r7,r19
 200c58c:	2011bf80 	call	2011bf8 <__muldf3>
 200c590:	d9000317 	ldw	r4,12(sp)
 200c594:	880b883a 	mov	r5,r17
 200c598:	100d883a 	mov	r6,r2
 200c59c:	180f883a 	mov	r7,r3
 200c5a0:	2008fd40 	call	2008fd4 <__subdf3>
 200c5a4:	d9c00917 	ldw	r7,36(sp)
 200c5a8:	1009883a 	mov	r4,r2
 200c5ac:	a8800c04 	addi	r2,r21,48
 200c5b0:	b8800005 	stb	r2,0(r23)
 200c5b4:	01800044 	movi	r6,1
 200c5b8:	180b883a 	mov	r5,r3
 200c5bc:	2005883a 	mov	r2,r4
 200c5c0:	bd800044 	addi	r22,r23,1
 200c5c4:	39803726 	beq	r7,r6,200c6a4 <_dtoa_r+0x8c4>
 200c5c8:	000d883a 	mov	r6,zero
 200c5cc:	01d00934 	movhi	r7,16420
 200c5d0:	2011bf80 	call	2011bf8 <__muldf3>
 200c5d4:	1009883a 	mov	r4,r2
 200c5d8:	180b883a 	mov	r5,r3
 200c5dc:	000d883a 	mov	r6,zero
 200c5e0:	000f883a 	mov	r7,zero
 200c5e4:	1029883a 	mov	r20,r2
 200c5e8:	1823883a 	mov	r17,r3
 200c5ec:	20120900 	call	2012090 <__eqdf2>
 200c5f0:	103f9c26 	beq	r2,zero,200c464 <_dtoa_r+0x684>
 200c5f4:	dd400917 	ldw	r21,36(sp)
 200c5f8:	dc000415 	stw	r16,16(sp)
 200c5fc:	00000906 	br	200c624 <_dtoa_r+0x844>
 200c600:	2011bf80 	call	2011bf8 <__muldf3>
 200c604:	1009883a 	mov	r4,r2
 200c608:	180b883a 	mov	r5,r3
 200c60c:	000d883a 	mov	r6,zero
 200c610:	000f883a 	mov	r7,zero
 200c614:	1029883a 	mov	r20,r2
 200c618:	1823883a 	mov	r17,r3
 200c61c:	20120900 	call	2012090 <__eqdf2>
 200c620:	10022926 	beq	r2,zero,200cec8 <_dtoa_r+0x10e8>
 200c624:	900d883a 	mov	r6,r18
 200c628:	980f883a 	mov	r7,r19
 200c62c:	a009883a 	mov	r4,r20
 200c630:	880b883a 	mov	r5,r17
 200c634:	2011edc0 	call	2011edc <__divdf3>
 200c638:	180b883a 	mov	r5,r3
 200c63c:	1009883a 	mov	r4,r2
 200c640:	20090980 	call	2009098 <__fixdfsi>
 200c644:	1009883a 	mov	r4,r2
 200c648:	1021883a 	mov	r16,r2
 200c64c:	20122080 	call	2012208 <__floatsidf>
 200c650:	1009883a 	mov	r4,r2
 200c654:	180b883a 	mov	r5,r3
 200c658:	900d883a 	mov	r6,r18
 200c65c:	980f883a 	mov	r7,r19
 200c660:	2011bf80 	call	2011bf8 <__muldf3>
 200c664:	a009883a 	mov	r4,r20
 200c668:	880b883a 	mov	r5,r17
 200c66c:	100d883a 	mov	r6,r2
 200c670:	180f883a 	mov	r7,r3
 200c674:	2008fd40 	call	2008fd4 <__subdf3>
 200c678:	82400c04 	addi	r9,r16,48
 200c67c:	b2400005 	stb	r9,0(r22)
 200c680:	b5800044 	addi	r22,r22,1
 200c684:	b5d3c83a 	sub	r9,r22,r23
 200c688:	000d883a 	mov	r6,zero
 200c68c:	01d00934 	movhi	r7,16420
 200c690:	1009883a 	mov	r4,r2
 200c694:	180b883a 	mov	r5,r3
 200c698:	aa7fd91e 	bne	r21,r9,200c600 <_dtoa_r+0x820>
 200c69c:	802b883a 	mov	r21,r16
 200c6a0:	dc000417 	ldw	r16,16(sp)
 200c6a4:	1009883a 	mov	r4,r2
 200c6a8:	180b883a 	mov	r5,r3
 200c6ac:	100d883a 	mov	r6,r2
 200c6b0:	180f883a 	mov	r7,r3
 200c6b4:	2008f800 	call	2008f80 <__adddf3>
 200c6b8:	9009883a 	mov	r4,r18
 200c6bc:	980b883a 	mov	r5,r19
 200c6c0:	100d883a 	mov	r6,r2
 200c6c4:	180f883a 	mov	r7,r3
 200c6c8:	1023883a 	mov	r17,r2
 200c6cc:	1829883a 	mov	r20,r3
 200c6d0:	20121ac0 	call	20121ac <__ltdf2>
 200c6d4:	10000816 	blt	r2,zero,200c6f8 <_dtoa_r+0x918>
 200c6d8:	9009883a 	mov	r4,r18
 200c6dc:	980b883a 	mov	r5,r19
 200c6e0:	880d883a 	mov	r6,r17
 200c6e4:	a00f883a 	mov	r7,r20
 200c6e8:	20120900 	call	2012090 <__eqdf2>
 200c6ec:	103f5d1e 	bne	r2,zero,200c464 <_dtoa_r+0x684>
 200c6f0:	ad40004c 	andi	r21,r21,1
 200c6f4:	a83f5b26 	beq	r21,zero,200c464 <_dtoa_r+0x684>
 200c6f8:	b53fffc3 	ldbu	r20,-1(r22)
 200c6fc:	b0ffff84 	addi	r3,r22,-2
 200c700:	01400e44 	movi	r5,57
 200c704:	00000306 	br	200c714 <_dtoa_r+0x934>
 200c708:	1d000003 	ldbu	r20,0(r3)
 200c70c:	102d883a 	mov	r22,r2
 200c710:	18ffffc4 	addi	r3,r3,-1
 200c714:	a1003fcc 	andi	r4,r20,255
 200c718:	2100201c 	xori	r4,r4,128
 200c71c:	213fe004 	addi	r4,r4,-128
 200c720:	b0bfffc4 	addi	r2,r22,-1
 200c724:	2142ca1e 	bne	r4,r5,200d250 <_dtoa_r+0x1470>
 200c728:	b8bff71e 	bne	r23,r2,200c708 <_dtoa_r+0x928>
 200c72c:	d8800617 	ldw	r2,24(sp)
 200c730:	05000c44 	movi	r20,49
 200c734:	10800044 	addi	r2,r2,1
 200c738:	d8800615 	stw	r2,24(sp)
 200c73c:	00800c04 	movi	r2,48
 200c740:	b8800005 	stb	r2,0(r23)
 200c744:	b805883a 	mov	r2,r23
 200c748:	15000005 	stb	r20,0(r2)
 200c74c:	003f4506 	br	200c464 <_dtoa_r+0x684>
 200c750:	d9c00c17 	ldw	r7,48(sp)
 200c754:	3800c926 	beq	r7,zero,200ca7c <_dtoa_r+0xc9c>
 200c758:	d9c00417 	ldw	r7,16(sp)
 200c75c:	00c00044 	movi	r3,1
 200c760:	19c16c0e 	bge	r3,r7,200cd14 <_dtoa_r+0xf34>
 200c764:	d9000917 	ldw	r4,36(sp)
 200c768:	d9c00a17 	ldw	r7,40(sp)
 200c76c:	24ffffc4 	addi	r19,r4,-1
 200c770:	3cc20716 	blt	r7,r19,200cf90 <_dtoa_r+0x11b0>
 200c774:	3ce7c83a 	sub	r19,r7,r19
 200c778:	d9c00917 	ldw	r7,36(sp)
 200c77c:	3802ae16 	blt	r7,zero,200d238 <_dtoa_r+0x1458>
 200c780:	dc800817 	ldw	r18,32(sp)
 200c784:	d8800917 	ldw	r2,36(sp)
 200c788:	d8c00817 	ldw	r3,32(sp)
 200c78c:	d9c00717 	ldw	r7,28(sp)
 200c790:	8009883a 	mov	r4,r16
 200c794:	1887883a 	add	r3,r3,r2
 200c798:	388f883a 	add	r7,r7,r2
 200c79c:	01400044 	movi	r5,1
 200c7a0:	d8c00815 	stw	r3,32(sp)
 200c7a4:	d9c00715 	stw	r7,28(sp)
 200c7a8:	200f6280 	call	200f628 <__i2b>
 200c7ac:	102b883a 	mov	r21,r2
 200c7b0:	90000a26 	beq	r18,zero,200c7dc <_dtoa_r+0x9fc>
 200c7b4:	d8800717 	ldw	r2,28(sp)
 200c7b8:	0080080e 	bge	zero,r2,200c7dc <_dtoa_r+0x9fc>
 200c7bc:	90812b16 	blt	r18,r2,200cc6c <_dtoa_r+0xe8c>
 200c7c0:	d8c00817 	ldw	r3,32(sp)
 200c7c4:	d9000717 	ldw	r4,28(sp)
 200c7c8:	90a5c83a 	sub	r18,r18,r2
 200c7cc:	1887c83a 	sub	r3,r3,r2
 200c7d0:	2089c83a 	sub	r4,r4,r2
 200c7d4:	d8c00815 	stw	r3,32(sp)
 200c7d8:	d9000715 	stw	r4,28(sp)
 200c7dc:	d9c00a17 	ldw	r7,40(sp)
 200c7e0:	01c0140e 	bge	zero,r7,200c834 <_dtoa_r+0xa54>
 200c7e4:	d8800c17 	ldw	r2,48(sp)
 200c7e8:	1001de26 	beq	r2,zero,200cf64 <_dtoa_r+0x1184>
 200c7ec:	04c00e0e 	bge	zero,r19,200c828 <_dtoa_r+0xa48>
 200c7f0:	a80b883a 	mov	r5,r21
 200c7f4:	8009883a 	mov	r4,r16
 200c7f8:	980d883a 	mov	r6,r19
 200c7fc:	200f8bc0 	call	200f8bc <__pow5mult>
 200c800:	e00d883a 	mov	r6,fp
 200c804:	8009883a 	mov	r4,r16
 200c808:	100b883a 	mov	r5,r2
 200c80c:	102b883a 	mov	r21,r2
 200c810:	200f6640 	call	200f664 <__multiply>
 200c814:	1029883a 	mov	r20,r2
 200c818:	e00b883a 	mov	r5,fp
 200c81c:	8009883a 	mov	r4,r16
 200c820:	200f2a00 	call	200f2a0 <_Bfree>
 200c824:	a039883a 	mov	fp,r20
 200c828:	d8c00a17 	ldw	r3,40(sp)
 200c82c:	1ccdc83a 	sub	r6,r3,r19
 200c830:	3001291e 	bne	r6,zero,200ccd8 <_dtoa_r+0xef8>
 200c834:	8009883a 	mov	r4,r16
 200c838:	01400044 	movi	r5,1
 200c83c:	200f6280 	call	200f628 <__i2b>
 200c840:	d9000b17 	ldw	r4,44(sp)
 200c844:	1029883a 	mov	r20,r2
 200c848:	0100050e 	bge	zero,r4,200c860 <_dtoa_r+0xa80>
 200c84c:	d9800b17 	ldw	r6,44(sp)
 200c850:	8009883a 	mov	r4,r16
 200c854:	100b883a 	mov	r5,r2
 200c858:	200f8bc0 	call	200f8bc <__pow5mult>
 200c85c:	1029883a 	mov	r20,r2
 200c860:	d9c00417 	ldw	r7,16(sp)
 200c864:	00800044 	movi	r2,1
 200c868:	11c0f00e 	bge	r2,r7,200cc2c <_dtoa_r+0xe4c>
 200c86c:	0023883a 	mov	r17,zero
 200c870:	d8800b17 	ldw	r2,44(sp)
 200c874:	1001741e 	bne	r2,zero,200ce48 <_dtoa_r+0x1068>
 200c878:	00800044 	movi	r2,1
 200c87c:	d8c00717 	ldw	r3,28(sp)
 200c880:	10c5883a 	add	r2,r2,r3
 200c884:	108007cc 	andi	r2,r2,31
 200c888:	10008026 	beq	r2,zero,200ca8c <_dtoa_r+0xcac>
 200c88c:	01000804 	movi	r4,32
 200c890:	2089c83a 	sub	r4,r4,r2
 200c894:	00c00104 	movi	r3,4
 200c898:	1902d00e 	bge	r3,r4,200d3dc <_dtoa_r+0x15fc>
 200c89c:	d9000817 	ldw	r4,32(sp)
 200c8a0:	d9c00717 	ldw	r7,28(sp)
 200c8a4:	00c00704 	movi	r3,28
 200c8a8:	1885c83a 	sub	r2,r3,r2
 200c8ac:	2089883a 	add	r4,r4,r2
 200c8b0:	388f883a 	add	r7,r7,r2
 200c8b4:	d9000815 	stw	r4,32(sp)
 200c8b8:	90a5883a 	add	r18,r18,r2
 200c8bc:	d9c00715 	stw	r7,28(sp)
 200c8c0:	d9c00817 	ldw	r7,32(sp)
 200c8c4:	01c0050e 	bge	zero,r7,200c8dc <_dtoa_r+0xafc>
 200c8c8:	e00b883a 	mov	r5,fp
 200c8cc:	8009883a 	mov	r4,r16
 200c8d0:	380d883a 	mov	r6,r7
 200c8d4:	200f9e80 	call	200f9e8 <__lshift>
 200c8d8:	1039883a 	mov	fp,r2
 200c8dc:	d8800717 	ldw	r2,28(sp)
 200c8e0:	0080050e 	bge	zero,r2,200c8f8 <_dtoa_r+0xb18>
 200c8e4:	a00b883a 	mov	r5,r20
 200c8e8:	8009883a 	mov	r4,r16
 200c8ec:	100d883a 	mov	r6,r2
 200c8f0:	200f9e80 	call	200f9e8 <__lshift>
 200c8f4:	1029883a 	mov	r20,r2
 200c8f8:	d8c00d17 	ldw	r3,52(sp)
 200c8fc:	1801401e 	bne	r3,zero,200ce00 <_dtoa_r+0x1020>
 200c900:	d8800917 	ldw	r2,36(sp)
 200c904:	00815a0e 	bge	zero,r2,200ce70 <_dtoa_r+0x1090>
 200c908:	d8c00c17 	ldw	r3,48(sp)
 200c90c:	18006f1e 	bne	r3,zero,200cacc <_dtoa_r+0xcec>
 200c910:	b823883a 	mov	r17,r23
 200c914:	dc800917 	ldw	r18,36(sp)
 200c918:	00000206 	br	200c924 <_dtoa_r+0xb44>
 200c91c:	200f2c80 	call	200f2c8 <__multadd>
 200c920:	1039883a 	mov	fp,r2
 200c924:	e009883a 	mov	r4,fp
 200c928:	a00b883a 	mov	r5,r20
 200c92c:	200bba40 	call	200bba4 <quorem>
 200c930:	10800c04 	addi	r2,r2,48
 200c934:	88800005 	stb	r2,0(r17)
 200c938:	8c400044 	addi	r17,r17,1
 200c93c:	8dc7c83a 	sub	r3,r17,r23
 200c940:	8009883a 	mov	r4,r16
 200c944:	e00b883a 	mov	r5,fp
 200c948:	01800284 	movi	r6,10
 200c94c:	000f883a 	mov	r7,zero
 200c950:	1cbff216 	blt	r3,r18,200c91c <_dtoa_r+0xb3c>
 200c954:	dd800917 	ldw	r22,36(sp)
 200c958:	1007883a 	mov	r3,r2
 200c95c:	05823a0e 	bge	zero,r22,200d248 <_dtoa_r+0x1468>
 200c960:	bdad883a 	add	r22,r23,r22
 200c964:	0023883a 	mov	r17,zero
 200c968:	e00b883a 	mov	r5,fp
 200c96c:	01800044 	movi	r6,1
 200c970:	8009883a 	mov	r4,r16
 200c974:	d8c01515 	stw	r3,84(sp)
 200c978:	200f9e80 	call	200f9e8 <__lshift>
 200c97c:	1009883a 	mov	r4,r2
 200c980:	a00b883a 	mov	r5,r20
 200c984:	1039883a 	mov	fp,r2
 200c988:	200fb440 	call	200fb44 <__mcmp>
 200c98c:	d8c01517 	ldw	r3,84(sp)
 200c990:	0080d60e 	bge	zero,r2,200ccec <_dtoa_r+0xf0c>
 200c994:	b13fffc3 	ldbu	r4,-1(r22)
 200c998:	b0ffff84 	addi	r3,r22,-2
 200c99c:	01800e44 	movi	r6,57
 200c9a0:	00000306 	br	200c9b0 <_dtoa_r+0xbd0>
 200c9a4:	19000003 	ldbu	r4,0(r3)
 200c9a8:	102d883a 	mov	r22,r2
 200c9ac:	18ffffc4 	addi	r3,r3,-1
 200c9b0:	21403fcc 	andi	r5,r4,255
 200c9b4:	2940201c 	xori	r5,r5,128
 200c9b8:	297fe004 	addi	r5,r5,-128
 200c9bc:	b0bfffc4 	addi	r2,r22,-1
 200c9c0:	2981a71e 	bne	r5,r6,200d060 <_dtoa_r+0x1280>
 200c9c4:	b8bff71e 	bne	r23,r2,200c9a4 <_dtoa_r+0xbc4>
 200c9c8:	d8800617 	ldw	r2,24(sp)
 200c9cc:	10800044 	addi	r2,r2,1
 200c9d0:	d8800615 	stw	r2,24(sp)
 200c9d4:	00800c44 	movi	r2,49
 200c9d8:	b8800005 	stb	r2,0(r23)
 200c9dc:	8009883a 	mov	r4,r16
 200c9e0:	a00b883a 	mov	r5,r20
 200c9e4:	200f2a00 	call	200f2a0 <_Bfree>
 200c9e8:	a83e9e26 	beq	r21,zero,200c464 <_dtoa_r+0x684>
 200c9ec:	88000426 	beq	r17,zero,200ca00 <_dtoa_r+0xc20>
 200c9f0:	8d400326 	beq	r17,r21,200ca00 <_dtoa_r+0xc20>
 200c9f4:	8009883a 	mov	r4,r16
 200c9f8:	880b883a 	mov	r5,r17
 200c9fc:	200f2a00 	call	200f2a0 <_Bfree>
 200ca00:	8009883a 	mov	r4,r16
 200ca04:	a80b883a 	mov	r5,r21
 200ca08:	200f2a00 	call	200f2a0 <_Bfree>
 200ca0c:	003e9506 	br	200c464 <_dtoa_r+0x684>
 200ca10:	00c00044 	movi	r3,1
 200ca14:	d8c00d15 	stw	r3,52(sp)
 200ca18:	003d9f06 	br	200c098 <_dtoa_r+0x2b8>
 200ca1c:	d9000817 	ldw	r4,32(sp)
 200ca20:	d8800617 	ldw	r2,24(sp)
 200ca24:	d8000b15 	stw	zero,44(sp)
 200ca28:	2089c83a 	sub	r4,r4,r2
 200ca2c:	0087c83a 	sub	r3,zero,r2
 200ca30:	d9000815 	stw	r4,32(sp)
 200ca34:	d8c00a15 	stw	r3,40(sp)
 200ca38:	003da306 	br	200c0c8 <_dtoa_r+0x2e8>
 200ca3c:	0529c83a 	sub	r20,zero,r20
 200ca40:	dd000815 	stw	r20,32(sp)
 200ca44:	d8000715 	stw	zero,28(sp)
 200ca48:	003d9806 	br	200c0ac <_dtoa_r+0x2cc>
 200ca4c:	d9000617 	ldw	r4,24(sp)
 200ca50:	20122080 	call	2012208 <__floatsidf>
 200ca54:	1009883a 	mov	r4,r2
 200ca58:	180b883a 	mov	r5,r3
 200ca5c:	980d883a 	mov	r6,r19
 200ca60:	900f883a 	mov	r7,r18
 200ca64:	20120ec0 	call	20120ec <__nedf2>
 200ca68:	103d7a26 	beq	r2,zero,200c054 <_dtoa_r+0x274>
 200ca6c:	d8800617 	ldw	r2,24(sp)
 200ca70:	10bfffc4 	addi	r2,r2,-1
 200ca74:	d8800615 	stw	r2,24(sp)
 200ca78:	003d7606 	br	200c054 <_dtoa_r+0x274>
 200ca7c:	dcc00a17 	ldw	r19,40(sp)
 200ca80:	dc800817 	ldw	r18,32(sp)
 200ca84:	002b883a 	mov	r21,zero
 200ca88:	003f4906 	br	200c7b0 <_dtoa_r+0x9d0>
 200ca8c:	00800704 	movi	r2,28
 200ca90:	d8c00817 	ldw	r3,32(sp)
 200ca94:	d9000717 	ldw	r4,28(sp)
 200ca98:	90a5883a 	add	r18,r18,r2
 200ca9c:	1887883a 	add	r3,r3,r2
 200caa0:	2089883a 	add	r4,r4,r2
 200caa4:	d8c00815 	stw	r3,32(sp)
 200caa8:	d9000715 	stw	r4,28(sp)
 200caac:	003f8406 	br	200c8c0 <_dtoa_r+0xae0>
 200cab0:	d9c00317 	ldw	r7,12(sp)
 200cab4:	013efb84 	movi	r4,-1042
 200cab8:	2509c83a 	sub	r4,r4,r20
 200cabc:	3908983a 	sll	r4,r7,r4
 200cac0:	003d3006 	br	200bf84 <_dtoa_r+0x1a4>
 200cac4:	d8000d15 	stw	zero,52(sp)
 200cac8:	003d7306 	br	200c098 <_dtoa_r+0x2b8>
 200cacc:	0480050e 	bge	zero,r18,200cae4 <_dtoa_r+0xd04>
 200cad0:	a80b883a 	mov	r5,r21
 200cad4:	8009883a 	mov	r4,r16
 200cad8:	900d883a 	mov	r6,r18
 200cadc:	200f9e80 	call	200f9e8 <__lshift>
 200cae0:	102b883a 	mov	r21,r2
 200cae4:	8801611e 	bne	r17,zero,200d06c <_dtoa_r+0x128c>
 200cae8:	a827883a 	mov	r19,r21
 200caec:	d8c00317 	ldw	r3,12(sp)
 200caf0:	d9000917 	ldw	r4,36(sp)
 200caf4:	b8bfffc4 	addi	r2,r23,-1
 200caf8:	18c0004c 	andi	r3,r3,1
 200cafc:	1105883a 	add	r2,r2,r4
 200cb00:	b825883a 	mov	r18,r23
 200cb04:	d8800515 	stw	r2,20(sp)
 200cb08:	a823883a 	mov	r17,r21
 200cb0c:	d8c00315 	stw	r3,12(sp)
 200cb10:	ddc00715 	stw	r23,28(sp)
 200cb14:	e009883a 	mov	r4,fp
 200cb18:	a00b883a 	mov	r5,r20
 200cb1c:	200bba40 	call	200bba4 <quorem>
 200cb20:	e009883a 	mov	r4,fp
 200cb24:	880b883a 	mov	r5,r17
 200cb28:	102d883a 	mov	r22,r2
 200cb2c:	200fb440 	call	200fb44 <__mcmp>
 200cb30:	980d883a 	mov	r6,r19
 200cb34:	8009883a 	mov	r4,r16
 200cb38:	a00b883a 	mov	r5,r20
 200cb3c:	102b883a 	mov	r21,r2
 200cb40:	200fb9c0 	call	200fb9c <__mdiff>
 200cb44:	100d883a 	mov	r6,r2
 200cb48:	10800317 	ldw	r2,12(r2)
 200cb4c:	b5c00c04 	addi	r23,r22,48
 200cb50:	10008c26 	beq	r2,zero,200cd84 <_dtoa_r+0xfa4>
 200cb54:	8009883a 	mov	r4,r16
 200cb58:	300b883a 	mov	r5,r6
 200cb5c:	200f2a00 	call	200f2a0 <_Bfree>
 200cb60:	00800044 	movi	r2,1
 200cb64:	a8007116 	blt	r21,zero,200cd2c <_dtoa_r+0xf4c>
 200cb68:	a800041e 	bne	r21,zero,200cb7c <_dtoa_r+0xd9c>
 200cb6c:	d9c00417 	ldw	r7,16(sp)
 200cb70:	3800021e 	bne	r7,zero,200cb7c <_dtoa_r+0xd9c>
 200cb74:	d8c00317 	ldw	r3,12(sp)
 200cb78:	18006c26 	beq	r3,zero,200cd2c <_dtoa_r+0xf4c>
 200cb7c:	00814c16 	blt	zero,r2,200d0b0 <_dtoa_r+0x12d0>
 200cb80:	d8c00517 	ldw	r3,20(sp)
 200cb84:	95400044 	addi	r21,r18,1
 200cb88:	95c00005 	stb	r23,0(r18)
 200cb8c:	a82d883a 	mov	r22,r21
 200cb90:	90c14d26 	beq	r18,r3,200d0c8 <_dtoa_r+0x12e8>
 200cb94:	e00b883a 	mov	r5,fp
 200cb98:	8009883a 	mov	r4,r16
 200cb9c:	01800284 	movi	r6,10
 200cba0:	000f883a 	mov	r7,zero
 200cba4:	200f2c80 	call	200f2c8 <__multadd>
 200cba8:	1039883a 	mov	fp,r2
 200cbac:	8cc08b26 	beq	r17,r19,200cddc <_dtoa_r+0xffc>
 200cbb0:	880b883a 	mov	r5,r17
 200cbb4:	01800284 	movi	r6,10
 200cbb8:	000f883a 	mov	r7,zero
 200cbbc:	8009883a 	mov	r4,r16
 200cbc0:	200f2c80 	call	200f2c8 <__multadd>
 200cbc4:	980b883a 	mov	r5,r19
 200cbc8:	8009883a 	mov	r4,r16
 200cbcc:	01800284 	movi	r6,10
 200cbd0:	000f883a 	mov	r7,zero
 200cbd4:	1023883a 	mov	r17,r2
 200cbd8:	200f2c80 	call	200f2c8 <__multadd>
 200cbdc:	1027883a 	mov	r19,r2
 200cbe0:	a825883a 	mov	r18,r21
 200cbe4:	003fcb06 	br	200cb14 <_dtoa_r+0xd34>
 200cbe8:	d9c00417 	ldw	r7,16(sp)
 200cbec:	00800104 	movi	r2,4
 200cbf0:	3880e426 	beq	r7,r2,200cf84 <_dtoa_r+0x11a4>
 200cbf4:	00800144 	movi	r2,5
 200cbf8:	38be3c1e 	bne	r7,r2,200c4ec <_dtoa_r+0x70c>
 200cbfc:	00c00044 	movi	r3,1
 200cc00:	d8c00c15 	stw	r3,48(sp)
 200cc04:	d9c02117 	ldw	r7,132(sp)
 200cc08:	d8800617 	ldw	r2,24(sp)
 200cc0c:	388f883a 	add	r7,r7,r2
 200cc10:	3c800044 	addi	r18,r7,1
 200cc14:	d9c00e15 	stw	r7,56(sp)
 200cc18:	dc800915 	stw	r18,36(sp)
 200cc1c:	04bd3e16 	blt	zero,r18,200c118 <_dtoa_r+0x338>
 200cc20:	80001115 	stw	zero,68(r16)
 200cc24:	000b883a 	mov	r5,zero
 200cc28:	003d4606 	br	200c144 <_dtoa_r+0x364>
 200cc2c:	d8c00317 	ldw	r3,12(sp)
 200cc30:	183f0e1e 	bne	r3,zero,200c86c <_dtoa_r+0xa8c>
 200cc34:	00c00434 	movhi	r3,16
 200cc38:	18ffffc4 	addi	r3,r3,-1
 200cc3c:	88c6703a 	and	r3,r17,r3
 200cc40:	183f0a1e 	bne	r3,zero,200c86c <_dtoa_r+0xa8c>
 200cc44:	8c5ffc2c 	andhi	r17,r17,32752
 200cc48:	883f0826 	beq	r17,zero,200c86c <_dtoa_r+0xa8c>
 200cc4c:	d9000817 	ldw	r4,32(sp)
 200cc50:	d9c00717 	ldw	r7,28(sp)
 200cc54:	1023883a 	mov	r17,r2
 200cc58:	2089883a 	add	r4,r4,r2
 200cc5c:	388f883a 	add	r7,r7,r2
 200cc60:	d9000815 	stw	r4,32(sp)
 200cc64:	d9c00715 	stw	r7,28(sp)
 200cc68:	003f0106 	br	200c870 <_dtoa_r+0xa90>
 200cc6c:	9005883a 	mov	r2,r18
 200cc70:	003ed306 	br	200c7c0 <_dtoa_r+0x9e0>
 200cc74:	d8800917 	ldw	r2,36(sp)
 200cc78:	00be3516 	blt	zero,r2,200c550 <_dtoa_r+0x770>
 200cc7c:	1000b61e 	bne	r2,zero,200cf58 <_dtoa_r+0x1178>
 200cc80:	9009883a 	mov	r4,r18
 200cc84:	980b883a 	mov	r5,r19
 200cc88:	000d883a 	mov	r6,zero
 200cc8c:	01d00534 	movhi	r7,16404
 200cc90:	2011bf80 	call	2011bf8 <__muldf3>
 200cc94:	d9800317 	ldw	r6,12(sp)
 200cc98:	1009883a 	mov	r4,r2
 200cc9c:	180b883a 	mov	r5,r3
 200cca0:	880f883a 	mov	r7,r17
 200cca4:	20090340 	call	2009034 <__gedf2>
 200cca8:	0029883a 	mov	r20,zero
 200ccac:	002b883a 	mov	r21,zero
 200ccb0:	10007e16 	blt	r2,zero,200ceac <_dtoa_r+0x10cc>
 200ccb4:	d8802117 	ldw	r2,132(sp)
 200ccb8:	b82d883a 	mov	r22,r23
 200ccbc:	0084303a 	nor	r2,zero,r2
 200ccc0:	d8800615 	stw	r2,24(sp)
 200ccc4:	8009883a 	mov	r4,r16
 200ccc8:	a00b883a 	mov	r5,r20
 200cccc:	200f2a00 	call	200f2a0 <_Bfree>
 200ccd0:	a83f4b1e 	bne	r21,zero,200ca00 <_dtoa_r+0xc20>
 200ccd4:	003de306 	br	200c464 <_dtoa_r+0x684>
 200ccd8:	e00b883a 	mov	r5,fp
 200ccdc:	8009883a 	mov	r4,r16
 200cce0:	200f8bc0 	call	200f8bc <__pow5mult>
 200cce4:	1039883a 	mov	fp,r2
 200cce8:	003ed206 	br	200c834 <_dtoa_r+0xa54>
 200ccec:	1000021e 	bne	r2,zero,200ccf8 <_dtoa_r+0xf18>
 200ccf0:	18c0004c 	andi	r3,r3,1
 200ccf4:	183f271e 	bne	r3,zero,200c994 <_dtoa_r+0xbb4>
 200ccf8:	01000c04 	movi	r4,48
 200ccfc:	00000106 	br	200cd04 <_dtoa_r+0xf24>
 200cd00:	102d883a 	mov	r22,r2
 200cd04:	b0bfffc4 	addi	r2,r22,-1
 200cd08:	10c00007 	ldb	r3,0(r2)
 200cd0c:	193ffc26 	beq	r3,r4,200cd00 <_dtoa_r+0xf20>
 200cd10:	003f3206 	br	200c9dc <_dtoa_r+0xbfc>
 200cd14:	d8c00f17 	ldw	r3,60(sp)
 200cd18:	18015026 	beq	r3,zero,200d25c <_dtoa_r+0x147c>
 200cd1c:	10810cc4 	addi	r2,r2,1075
 200cd20:	dcc00a17 	ldw	r19,40(sp)
 200cd24:	dc800817 	ldw	r18,32(sp)
 200cd28:	003e9706 	br	200c788 <_dtoa_r+0x9a8>
 200cd2c:	b807883a 	mov	r3,r23
 200cd30:	182b883a 	mov	r21,r3
 200cd34:	ddc00717 	ldw	r23,28(sp)
 200cd38:	00800e0e 	bge	zero,r2,200cd74 <_dtoa_r+0xf94>
 200cd3c:	e00b883a 	mov	r5,fp
 200cd40:	01800044 	movi	r6,1
 200cd44:	8009883a 	mov	r4,r16
 200cd48:	d8c01515 	stw	r3,84(sp)
 200cd4c:	200f9e80 	call	200f9e8 <__lshift>
 200cd50:	1009883a 	mov	r4,r2
 200cd54:	a00b883a 	mov	r5,r20
 200cd58:	1039883a 	mov	fp,r2
 200cd5c:	200fb440 	call	200fb44 <__mcmp>
 200cd60:	d8c01517 	ldw	r3,84(sp)
 200cd64:	0081880e 	bge	zero,r2,200d388 <_dtoa_r+0x15a8>
 200cd68:	00800e44 	movi	r2,57
 200cd6c:	b0c00c44 	addi	r3,r22,49
 200cd70:	a8816326 	beq	r21,r2,200d300 <_dtoa_r+0x1520>
 200cd74:	90c00005 	stb	r3,0(r18)
 200cd78:	95800044 	addi	r22,r18,1
 200cd7c:	982b883a 	mov	r21,r19
 200cd80:	003f1606 	br	200c9dc <_dtoa_r+0xbfc>
 200cd84:	300b883a 	mov	r5,r6
 200cd88:	e009883a 	mov	r4,fp
 200cd8c:	d9801515 	stw	r6,84(sp)
 200cd90:	200fb440 	call	200fb44 <__mcmp>
 200cd94:	d9801517 	ldw	r6,84(sp)
 200cd98:	8009883a 	mov	r4,r16
 200cd9c:	d8801515 	stw	r2,84(sp)
 200cda0:	300b883a 	mov	r5,r6
 200cda4:	200f2a00 	call	200f2a0 <_Bfree>
 200cda8:	d8801517 	ldw	r2,84(sp)
 200cdac:	103f6d1e 	bne	r2,zero,200cb64 <_dtoa_r+0xd84>
 200cdb0:	d9c00417 	ldw	r7,16(sp)
 200cdb4:	383f6b1e 	bne	r7,zero,200cb64 <_dtoa_r+0xd84>
 200cdb8:	d8c00317 	ldw	r3,12(sp)
 200cdbc:	183f691e 	bne	r3,zero,200cb64 <_dtoa_r+0xd84>
 200cdc0:	b807883a 	mov	r3,r23
 200cdc4:	00800e44 	movi	r2,57
 200cdc8:	ddc00717 	ldw	r23,28(sp)
 200cdcc:	18814c26 	beq	r3,r2,200d300 <_dtoa_r+0x1520>
 200cdd0:	057fe80e 	bge	zero,r21,200cd74 <_dtoa_r+0xf94>
 200cdd4:	b0c00c44 	addi	r3,r22,49
 200cdd8:	003fe606 	br	200cd74 <_dtoa_r+0xf94>
 200cddc:	880b883a 	mov	r5,r17
 200cde0:	8009883a 	mov	r4,r16
 200cde4:	01800284 	movi	r6,10
 200cde8:	000f883a 	mov	r7,zero
 200cdec:	200f2c80 	call	200f2c8 <__multadd>
 200cdf0:	1023883a 	mov	r17,r2
 200cdf4:	1027883a 	mov	r19,r2
 200cdf8:	a825883a 	mov	r18,r21
 200cdfc:	003f4506 	br	200cb14 <_dtoa_r+0xd34>
 200ce00:	e009883a 	mov	r4,fp
 200ce04:	a00b883a 	mov	r5,r20
 200ce08:	200fb440 	call	200fb44 <__mcmp>
 200ce0c:	103ebc0e 	bge	r2,zero,200c900 <_dtoa_r+0xb20>
 200ce10:	e00b883a 	mov	r5,fp
 200ce14:	8009883a 	mov	r4,r16
 200ce18:	01800284 	movi	r6,10
 200ce1c:	000f883a 	mov	r7,zero
 200ce20:	200f2c80 	call	200f2c8 <__multadd>
 200ce24:	1039883a 	mov	fp,r2
 200ce28:	d8800617 	ldw	r2,24(sp)
 200ce2c:	d8c00c17 	ldw	r3,48(sp)
 200ce30:	10bfffc4 	addi	r2,r2,-1
 200ce34:	d8800615 	stw	r2,24(sp)
 200ce38:	1801571e 	bne	r3,zero,200d398 <_dtoa_r+0x15b8>
 200ce3c:	d9c00e17 	ldw	r7,56(sp)
 200ce40:	d9c00915 	stw	r7,36(sp)
 200ce44:	003eae06 	br	200c900 <_dtoa_r+0xb20>
 200ce48:	a0800417 	ldw	r2,16(r20)
 200ce4c:	10800104 	addi	r2,r2,4
 200ce50:	1085883a 	add	r2,r2,r2
 200ce54:	1085883a 	add	r2,r2,r2
 200ce58:	a085883a 	add	r2,r20,r2
 200ce5c:	11000017 	ldw	r4,0(r2)
 200ce60:	200f5100 	call	200f510 <__hi0bits>
 200ce64:	00c00804 	movi	r3,32
 200ce68:	1885c83a 	sub	r2,r3,r2
 200ce6c:	003e8306 	br	200c87c <_dtoa_r+0xa9c>
 200ce70:	d9c00417 	ldw	r7,16(sp)
 200ce74:	00800084 	movi	r2,2
 200ce78:	11fea30e 	bge	r2,r7,200c908 <_dtoa_r+0xb28>
 200ce7c:	d8800917 	ldw	r2,36(sp)
 200ce80:	103f8c1e 	bne	r2,zero,200ccb4 <_dtoa_r+0xed4>
 200ce84:	a00b883a 	mov	r5,r20
 200ce88:	8009883a 	mov	r4,r16
 200ce8c:	01800144 	movi	r6,5
 200ce90:	000f883a 	mov	r7,zero
 200ce94:	200f2c80 	call	200f2c8 <__multadd>
 200ce98:	e009883a 	mov	r4,fp
 200ce9c:	100b883a 	mov	r5,r2
 200cea0:	1029883a 	mov	r20,r2
 200cea4:	200fb440 	call	200fb44 <__mcmp>
 200cea8:	00bf820e 	bge	zero,r2,200ccb4 <_dtoa_r+0xed4>
 200ceac:	00800c44 	movi	r2,49
 200ceb0:	b8800005 	stb	r2,0(r23)
 200ceb4:	d8800617 	ldw	r2,24(sp)
 200ceb8:	bd800044 	addi	r22,r23,1
 200cebc:	10800044 	addi	r2,r2,1
 200cec0:	d8800615 	stw	r2,24(sp)
 200cec4:	003f7f06 	br	200ccc4 <_dtoa_r+0xee4>
 200cec8:	dc000417 	ldw	r16,16(sp)
 200cecc:	003d6506 	br	200c464 <_dtoa_r+0x684>
 200ced0:	9009883a 	mov	r4,r18
 200ced4:	20122080 	call	2012208 <__floatsidf>
 200ced8:	1009883a 	mov	r4,r2
 200cedc:	180b883a 	mov	r5,r3
 200cee0:	980d883a 	mov	r6,r19
 200cee4:	a00f883a 	mov	r7,r20
 200cee8:	2011bf80 	call	2011bf8 <__muldf3>
 200ceec:	1009883a 	mov	r4,r2
 200cef0:	180b883a 	mov	r5,r3
 200cef4:	000d883a 	mov	r6,zero
 200cef8:	01d00734 	movhi	r7,16412
 200cefc:	2008f800 	call	2008f80 <__adddf3>
 200cf00:	057f3034 	movhi	r21,64704
 200cf04:	1025883a 	mov	r18,r2
 200cf08:	1d6b883a 	add	r21,r3,r21
 200cf0c:	9809883a 	mov	r4,r19
 200cf10:	a00b883a 	mov	r5,r20
 200cf14:	000d883a 	mov	r6,zero
 200cf18:	01d00534 	movhi	r7,16404
 200cf1c:	2008fd40 	call	2008fd4 <__subdf3>
 200cf20:	1009883a 	mov	r4,r2
 200cf24:	180b883a 	mov	r5,r3
 200cf28:	900d883a 	mov	r6,r18
 200cf2c:	a80f883a 	mov	r7,r21
 200cf30:	1027883a 	mov	r19,r2
 200cf34:	1829883a 	mov	r20,r3
 200cf38:	20121480 	call	2012148 <__gtdf2>
 200cf3c:	00806616 	blt	zero,r2,200d0d8 <_dtoa_r+0x12f8>
 200cf40:	a9e0003c 	xorhi	r7,r21,32768
 200cf44:	9809883a 	mov	r4,r19
 200cf48:	a00b883a 	mov	r5,r20
 200cf4c:	900d883a 	mov	r6,r18
 200cf50:	20121ac0 	call	20121ac <__ltdf2>
 200cf54:	103d710e 	bge	r2,zero,200c51c <_dtoa_r+0x73c>
 200cf58:	0029883a 	mov	r20,zero
 200cf5c:	002b883a 	mov	r21,zero
 200cf60:	003f5406 	br	200ccb4 <_dtoa_r+0xed4>
 200cf64:	d9800a17 	ldw	r6,40(sp)
 200cf68:	e00b883a 	mov	r5,fp
 200cf6c:	8009883a 	mov	r4,r16
 200cf70:	200f8bc0 	call	200f8bc <__pow5mult>
 200cf74:	1039883a 	mov	fp,r2
 200cf78:	003e2e06 	br	200c834 <_dtoa_r+0xa54>
 200cf7c:	d8000c15 	stw	zero,48(sp)
 200cf80:	003f2006 	br	200cc04 <_dtoa_r+0xe24>
 200cf84:	00800044 	movi	r2,1
 200cf88:	d8800c15 	stw	r2,48(sp)
 200cf8c:	003c5d06 	br	200c104 <_dtoa_r+0x324>
 200cf90:	d8c00a17 	ldw	r3,40(sp)
 200cf94:	d9000b17 	ldw	r4,44(sp)
 200cf98:	dcc00a15 	stw	r19,40(sp)
 200cf9c:	98c5c83a 	sub	r2,r19,r3
 200cfa0:	2089883a 	add	r4,r4,r2
 200cfa4:	d9000b15 	stw	r4,44(sp)
 200cfa8:	0027883a 	mov	r19,zero
 200cfac:	003df206 	br	200c778 <_dtoa_r+0x998>
 200cfb0:	d9000317 	ldw	r4,12(sp)
 200cfb4:	8829883a 	mov	r20,r17
 200cfb8:	04800084 	movi	r18,2
 200cfbc:	d9001015 	stw	r4,64(sp)
 200cfc0:	003c8106 	br	200c1c8 <_dtoa_r+0x3e8>
 200cfc4:	04800044 	movi	r18,1
 200cfc8:	dc800e15 	stw	r18,56(sp)
 200cfcc:	dc800915 	stw	r18,36(sp)
 200cfd0:	dc802115 	stw	r18,132(sp)
 200cfd4:	003f1206 	br	200cc20 <_dtoa_r+0xe40>
 200cfd8:	d8800617 	ldw	r2,24(sp)
 200cfdc:	00abc83a 	sub	r21,zero,r2
 200cfe0:	a800a426 	beq	r21,zero,200d274 <_dtoa_r+0x1494>
 200cfe4:	a88003cc 	andi	r2,r21,15
 200cfe8:	100490fa 	slli	r2,r2,3
 200cfec:	00c08074 	movhi	r3,513
 200cff0:	18dd8004 	addi	r3,r3,30208
 200cff4:	d9000317 	ldw	r4,12(sp)
 200cff8:	1885883a 	add	r2,r3,r2
 200cffc:	11800017 	ldw	r6,0(r2)
 200d000:	11c00117 	ldw	r7,4(r2)
 200d004:	a82bd13a 	srai	r21,r21,4
 200d008:	880b883a 	mov	r5,r17
 200d00c:	2011bf80 	call	2011bf8 <__muldf3>
 200d010:	1027883a 	mov	r19,r2
 200d014:	1829883a 	mov	r20,r3
 200d018:	a800e826 	beq	r21,zero,200d3bc <_dtoa_r+0x15dc>
 200d01c:	05808074 	movhi	r22,513
 200d020:	b59d7604 	addi	r22,r22,30168
 200d024:	04800084 	movi	r18,2
 200d028:	a980004c 	andi	r6,r21,1
 200d02c:	1009883a 	mov	r4,r2
 200d030:	a82bd07a 	srai	r21,r21,1
 200d034:	180b883a 	mov	r5,r3
 200d038:	30000426 	beq	r6,zero,200d04c <_dtoa_r+0x126c>
 200d03c:	b1800017 	ldw	r6,0(r22)
 200d040:	b1c00117 	ldw	r7,4(r22)
 200d044:	94800044 	addi	r18,r18,1
 200d048:	2011bf80 	call	2011bf8 <__muldf3>
 200d04c:	b5800204 	addi	r22,r22,8
 200d050:	a83ff51e 	bne	r21,zero,200d028 <_dtoa_r+0x1248>
 200d054:	1027883a 	mov	r19,r2
 200d058:	1829883a 	mov	r20,r3
 200d05c:	003c7306 	br	200c22c <_dtoa_r+0x44c>
 200d060:	21000044 	addi	r4,r4,1
 200d064:	11000005 	stb	r4,0(r2)
 200d068:	003e5c06 	br	200c9dc <_dtoa_r+0xbfc>
 200d06c:	a9400117 	ldw	r5,4(r21)
 200d070:	8009883a 	mov	r4,r16
 200d074:	200f1f80 	call	200f1f8 <_Balloc>
 200d078:	a9800417 	ldw	r6,16(r21)
 200d07c:	11000304 	addi	r4,r2,12
 200d080:	a9400304 	addi	r5,r21,12
 200d084:	31800084 	addi	r6,r6,2
 200d088:	318d883a 	add	r6,r6,r6
 200d08c:	318d883a 	add	r6,r6,r6
 200d090:	1023883a 	mov	r17,r2
 200d094:	200ee500 	call	200ee50 <memcpy>
 200d098:	8009883a 	mov	r4,r16
 200d09c:	880b883a 	mov	r5,r17
 200d0a0:	01800044 	movi	r6,1
 200d0a4:	200f9e80 	call	200f9e8 <__lshift>
 200d0a8:	1027883a 	mov	r19,r2
 200d0ac:	003e8f06 	br	200caec <_dtoa_r+0xd0c>
 200d0b0:	b807883a 	mov	r3,r23
 200d0b4:	00800e44 	movi	r2,57
 200d0b8:	ddc00717 	ldw	r23,28(sp)
 200d0bc:	18809026 	beq	r3,r2,200d300 <_dtoa_r+0x1520>
 200d0c0:	18c00044 	addi	r3,r3,1
 200d0c4:	003f2b06 	br	200cd74 <_dtoa_r+0xf94>
 200d0c8:	b807883a 	mov	r3,r23
 200d0cc:	982b883a 	mov	r21,r19
 200d0d0:	ddc00717 	ldw	r23,28(sp)
 200d0d4:	003e2406 	br	200c968 <_dtoa_r+0xb88>
 200d0d8:	0029883a 	mov	r20,zero
 200d0dc:	002b883a 	mov	r21,zero
 200d0e0:	003f7206 	br	200ceac <_dtoa_r+0x10cc>
 200d0e4:	593fffc4 	addi	r4,r11,-1
 200d0e8:	200490fa 	slli	r2,r4,3
 200d0ec:	00c08074 	movhi	r3,513
 200d0f0:	18dd8004 	addi	r3,r3,30208
 200d0f4:	d9001015 	stw	r4,64(sp)
 200d0f8:	1885883a 	add	r2,r3,r2
 200d0fc:	11000017 	ldw	r4,0(r2)
 200d100:	11400117 	ldw	r5,4(r2)
 200d104:	900d883a 	mov	r6,r18
 200d108:	a80f883a 	mov	r7,r21
 200d10c:	dac01615 	stw	r11,88(sp)
 200d110:	2011bf80 	call	2011bf8 <__muldf3>
 200d114:	a00b883a 	mov	r5,r20
 200d118:	9809883a 	mov	r4,r19
 200d11c:	d8c01215 	stw	r3,72(sp)
 200d120:	d8801115 	stw	r2,68(sp)
 200d124:	20090980 	call	2009098 <__fixdfsi>
 200d128:	1009883a 	mov	r4,r2
 200d12c:	1025883a 	mov	r18,r2
 200d130:	20122080 	call	2012208 <__floatsidf>
 200d134:	9809883a 	mov	r4,r19
 200d138:	a00b883a 	mov	r5,r20
 200d13c:	100d883a 	mov	r6,r2
 200d140:	180f883a 	mov	r7,r3
 200d144:	94800c04 	addi	r18,r18,48
 200d148:	2008fd40 	call	2008fd4 <__subdf3>
 200d14c:	bc800005 	stb	r18,0(r23)
 200d150:	dac01617 	ldw	r11,88(sp)
 200d154:	102b883a 	mov	r21,r2
 200d158:	00800044 	movi	r2,1
 200d15c:	bd800044 	addi	r22,r23,1
 200d160:	1815883a 	mov	r10,r3
 200d164:	58802226 	beq	r11,r2,200d1f0 <_dtoa_r+0x1410>
 200d168:	bad7883a 	add	r11,r23,r11
 200d16c:	dc001415 	stw	r16,80(sp)
 200d170:	a805883a 	mov	r2,r21
 200d174:	b027883a 	mov	r19,r22
 200d178:	5821883a 	mov	r16,r11
 200d17c:	882b883a 	mov	r21,r17
 200d180:	000d883a 	mov	r6,zero
 200d184:	01d00934 	movhi	r7,16420
 200d188:	1009883a 	mov	r4,r2
 200d18c:	180b883a 	mov	r5,r3
 200d190:	2011bf80 	call	2011bf8 <__muldf3>
 200d194:	180b883a 	mov	r5,r3
 200d198:	1009883a 	mov	r4,r2
 200d19c:	1829883a 	mov	r20,r3
 200d1a0:	1023883a 	mov	r17,r2
 200d1a4:	20090980 	call	2009098 <__fixdfsi>
 200d1a8:	1009883a 	mov	r4,r2
 200d1ac:	1025883a 	mov	r18,r2
 200d1b0:	20122080 	call	2012208 <__floatsidf>
 200d1b4:	8809883a 	mov	r4,r17
 200d1b8:	a00b883a 	mov	r5,r20
 200d1bc:	100d883a 	mov	r6,r2
 200d1c0:	180f883a 	mov	r7,r3
 200d1c4:	94800c04 	addi	r18,r18,48
 200d1c8:	2008fd40 	call	2008fd4 <__subdf3>
 200d1cc:	9cc00044 	addi	r19,r19,1
 200d1d0:	9cbfffc5 	stb	r18,-1(r19)
 200d1d4:	9c3fea1e 	bne	r19,r16,200d180 <_dtoa_r+0x13a0>
 200d1d8:	1815883a 	mov	r10,r3
 200d1dc:	d8c01017 	ldw	r3,64(sp)
 200d1e0:	dc001417 	ldw	r16,80(sp)
 200d1e4:	a823883a 	mov	r17,r21
 200d1e8:	b0ed883a 	add	r22,r22,r3
 200d1ec:	102b883a 	mov	r21,r2
 200d1f0:	d9001117 	ldw	r4,68(sp)
 200d1f4:	d9401217 	ldw	r5,72(sp)
 200d1f8:	000d883a 	mov	r6,zero
 200d1fc:	01cff834 	movhi	r7,16352
 200d200:	da801515 	stw	r10,84(sp)
 200d204:	2008f800 	call	2008f80 <__adddf3>
 200d208:	da801517 	ldw	r10,84(sp)
 200d20c:	1009883a 	mov	r4,r2
 200d210:	180b883a 	mov	r5,r3
 200d214:	500f883a 	mov	r7,r10
 200d218:	a80d883a 	mov	r6,r21
 200d21c:	20121ac0 	call	20121ac <__ltdf2>
 200d220:	da801517 	ldw	r10,84(sp)
 200d224:	10003b0e 	bge	r2,zero,200d314 <_dtoa_r+0x1534>
 200d228:	d9c01317 	ldw	r7,76(sp)
 200d22c:	b53fffc3 	ldbu	r20,-1(r22)
 200d230:	d9c00615 	stw	r7,24(sp)
 200d234:	003d3106 	br	200c6fc <_dtoa_r+0x91c>
 200d238:	d8800817 	ldw	r2,32(sp)
 200d23c:	11e5c83a 	sub	r18,r2,r7
 200d240:	0005883a 	mov	r2,zero
 200d244:	003d5006 	br	200c788 <_dtoa_r+0x9a8>
 200d248:	05800044 	movi	r22,1
 200d24c:	003dc406 	br	200c960 <_dtoa_r+0xb80>
 200d250:	a5000044 	addi	r20,r20,1
 200d254:	15000005 	stb	r20,0(r2)
 200d258:	003c8206 	br	200c464 <_dtoa_r+0x684>
 200d25c:	d8800217 	ldw	r2,8(sp)
 200d260:	00c00d84 	movi	r3,54
 200d264:	dcc00a17 	ldw	r19,40(sp)
 200d268:	1885c83a 	sub	r2,r3,r2
 200d26c:	dc800817 	ldw	r18,32(sp)
 200d270:	003d4506 	br	200c788 <_dtoa_r+0x9a8>
 200d274:	dcc00317 	ldw	r19,12(sp)
 200d278:	8829883a 	mov	r20,r17
 200d27c:	04800084 	movi	r18,2
 200d280:	003bea06 	br	200c22c <_dtoa_r+0x44c>
 200d284:	d9000917 	ldw	r4,36(sp)
 200d288:	203f1126 	beq	r4,zero,200ced0 <_dtoa_r+0x10f0>
 200d28c:	d9c00e17 	ldw	r7,56(sp)
 200d290:	01fca20e 	bge	zero,r7,200c51c <_dtoa_r+0x73c>
 200d294:	a00b883a 	mov	r5,r20
 200d298:	9809883a 	mov	r4,r19
 200d29c:	000d883a 	mov	r6,zero
 200d2a0:	01d00934 	movhi	r7,16420
 200d2a4:	2011bf80 	call	2011bf8 <__muldf3>
 200d2a8:	91000044 	addi	r4,r18,1
 200d2ac:	1027883a 	mov	r19,r2
 200d2b0:	1829883a 	mov	r20,r3
 200d2b4:	20122080 	call	2012208 <__floatsidf>
 200d2b8:	9809883a 	mov	r4,r19
 200d2bc:	a00b883a 	mov	r5,r20
 200d2c0:	100d883a 	mov	r6,r2
 200d2c4:	180f883a 	mov	r7,r3
 200d2c8:	2011bf80 	call	2011bf8 <__muldf3>
 200d2cc:	1009883a 	mov	r4,r2
 200d2d0:	180b883a 	mov	r5,r3
 200d2d4:	000d883a 	mov	r6,zero
 200d2d8:	01d00734 	movhi	r7,16412
 200d2dc:	2008f800 	call	2008f80 <__adddf3>
 200d2e0:	1025883a 	mov	r18,r2
 200d2e4:	d8800617 	ldw	r2,24(sp)
 200d2e8:	057f3034 	movhi	r21,64704
 200d2ec:	1d6b883a 	add	r21,r3,r21
 200d2f0:	10bfffc4 	addi	r2,r2,-1
 200d2f4:	d8801315 	stw	r2,76(sp)
 200d2f8:	dac00e17 	ldw	r11,56(sp)
 200d2fc:	003be706 	br	200c29c <_dtoa_r+0x4bc>
 200d300:	01000e44 	movi	r4,57
 200d304:	91000005 	stb	r4,0(r18)
 200d308:	95800044 	addi	r22,r18,1
 200d30c:	982b883a 	mov	r21,r19
 200d310:	003da106 	br	200c998 <_dtoa_r+0xbb8>
 200d314:	d9801117 	ldw	r6,68(sp)
 200d318:	d9c01217 	ldw	r7,72(sp)
 200d31c:	0009883a 	mov	r4,zero
 200d320:	014ff834 	movhi	r5,16352
 200d324:	da801515 	stw	r10,84(sp)
 200d328:	2008fd40 	call	2008fd4 <__subdf3>
 200d32c:	da801517 	ldw	r10,84(sp)
 200d330:	1009883a 	mov	r4,r2
 200d334:	180b883a 	mov	r5,r3
 200d338:	a80d883a 	mov	r6,r21
 200d33c:	500f883a 	mov	r7,r10
 200d340:	20121480 	call	2012148 <__gtdf2>
 200d344:	00bc750e 	bge	zero,r2,200c51c <_dtoa_r+0x73c>
 200d348:	01000c04 	movi	r4,48
 200d34c:	00000106 	br	200d354 <_dtoa_r+0x1574>
 200d350:	102d883a 	mov	r22,r2
 200d354:	b0bfffc4 	addi	r2,r22,-1
 200d358:	10c00007 	ldb	r3,0(r2)
 200d35c:	193ffc26 	beq	r3,r4,200d350 <_dtoa_r+0x1570>
 200d360:	d8801317 	ldw	r2,76(sp)
 200d364:	d8800615 	stw	r2,24(sp)
 200d368:	003c3e06 	br	200c464 <_dtoa_r+0x684>
 200d36c:	d9001317 	ldw	r4,76(sp)
 200d370:	df001117 	ldw	fp,68(sp)
 200d374:	d9000615 	stw	r4,24(sp)
 200d378:	003ce006 	br	200c6fc <_dtoa_r+0x91c>
 200d37c:	df001117 	ldw	fp,68(sp)
 200d380:	dc401217 	ldw	r17,72(sp)
 200d384:	003c6506 	br	200c51c <_dtoa_r+0x73c>
 200d388:	103e7a1e 	bne	r2,zero,200cd74 <_dtoa_r+0xf94>
 200d38c:	1880004c 	andi	r2,r3,1
 200d390:	103e7826 	beq	r2,zero,200cd74 <_dtoa_r+0xf94>
 200d394:	003e7406 	br	200cd68 <_dtoa_r+0xf88>
 200d398:	8009883a 	mov	r4,r16
 200d39c:	a80b883a 	mov	r5,r21
 200d3a0:	01800284 	movi	r6,10
 200d3a4:	000f883a 	mov	r7,zero
 200d3a8:	200f2c80 	call	200f2c8 <__multadd>
 200d3ac:	d9000e17 	ldw	r4,56(sp)
 200d3b0:	102b883a 	mov	r21,r2
 200d3b4:	d9000915 	stw	r4,36(sp)
 200d3b8:	003d5106 	br	200c900 <_dtoa_r+0xb20>
 200d3bc:	04800084 	movi	r18,2
 200d3c0:	003b9a06 	br	200c22c <_dtoa_r+0x44c>
 200d3c4:	d8c01317 	ldw	r3,76(sp)
 200d3c8:	d8c00615 	stw	r3,24(sp)
 200d3cc:	003ccb06 	br	200c6fc <_dtoa_r+0x91c>
 200d3d0:	d8c01317 	ldw	r3,76(sp)
 200d3d4:	d8c00615 	stw	r3,24(sp)
 200d3d8:	003c2206 	br	200c464 <_dtoa_r+0x684>
 200d3dc:	20fd3826 	beq	r4,r3,200c8c0 <_dtoa_r+0xae0>
 200d3e0:	00c00f04 	movi	r3,60
 200d3e4:	1885c83a 	sub	r2,r3,r2
 200d3e8:	003da906 	br	200ca90 <_dtoa_r+0xcb0>
 200d3ec:	000b883a 	mov	r5,zero
 200d3f0:	003b5406 	br	200c144 <_dtoa_r+0x364>
 200d3f4:	04c00044 	movi	r19,1
 200d3f8:	003b3b06 	br	200c0e8 <_dtoa_r+0x308>

0200d3fc <_fflush_r>:
 200d3fc:	defffb04 	addi	sp,sp,-20
 200d400:	dcc00315 	stw	r19,12(sp)
 200d404:	dc400115 	stw	r17,4(sp)
 200d408:	dfc00415 	stw	ra,16(sp)
 200d40c:	dc800215 	stw	r18,8(sp)
 200d410:	dc000015 	stw	r16,0(sp)
 200d414:	2027883a 	mov	r19,r4
 200d418:	2823883a 	mov	r17,r5
 200d41c:	20000226 	beq	r4,zero,200d428 <_fflush_r+0x2c>
 200d420:	20800e17 	ldw	r2,56(r4)
 200d424:	10005726 	beq	r2,zero,200d584 <_fflush_r+0x188>
 200d428:	8880030b 	ldhu	r2,12(r17)
 200d42c:	10c0020c 	andi	r3,r2,8
 200d430:	18ffffcc 	andi	r3,r3,65535
 200d434:	18e0001c 	xori	r3,r3,32768
 200d438:	18e00004 	addi	r3,r3,-32768
 200d43c:	1800311e 	bne	r3,zero,200d504 <_fflush_r+0x108>
 200d440:	89000117 	ldw	r4,4(r17)
 200d444:	10c20014 	ori	r3,r2,2048
 200d448:	88c0030d 	sth	r3,12(r17)
 200d44c:	180b883a 	mov	r5,r3
 200d450:	0100520e 	bge	zero,r4,200d59c <_fflush_r+0x1a0>
 200d454:	88c00a17 	ldw	r3,40(r17)
 200d458:	18002226 	beq	r3,zero,200d4e4 <_fflush_r+0xe8>
 200d45c:	1084000c 	andi	r2,r2,4096
 200d460:	10bfffcc 	andi	r2,r2,65535
 200d464:	10a0001c 	xori	r2,r2,32768
 200d468:	10a00004 	addi	r2,r2,-32768
 200d46c:	10004e26 	beq	r2,zero,200d5a8 <_fflush_r+0x1ac>
 200d470:	8c001417 	ldw	r16,80(r17)
 200d474:	2940010c 	andi	r5,r5,4
 200d478:	297fffcc 	andi	r5,r5,65535
 200d47c:	2960001c 	xori	r5,r5,32768
 200d480:	29600004 	addi	r5,r5,-32768
 200d484:	28000626 	beq	r5,zero,200d4a0 <_fflush_r+0xa4>
 200d488:	89000117 	ldw	r4,4(r17)
 200d48c:	88800c17 	ldw	r2,48(r17)
 200d490:	8121c83a 	sub	r16,r16,r4
 200d494:	10000226 	beq	r2,zero,200d4a0 <_fflush_r+0xa4>
 200d498:	88800f17 	ldw	r2,60(r17)
 200d49c:	80a1c83a 	sub	r16,r16,r2
 200d4a0:	89400717 	ldw	r5,28(r17)
 200d4a4:	9809883a 	mov	r4,r19
 200d4a8:	800d883a 	mov	r6,r16
 200d4ac:	000f883a 	mov	r7,zero
 200d4b0:	183ee83a 	callr	r3
 200d4b4:	8080281e 	bne	r16,r2,200d558 <_fflush_r+0x15c>
 200d4b8:	8880030b 	ldhu	r2,12(r17)
 200d4bc:	88c00417 	ldw	r3,16(r17)
 200d4c0:	88000115 	stw	zero,4(r17)
 200d4c4:	113dffcc 	andi	r4,r2,63487
 200d4c8:	1084000c 	andi	r2,r2,4096
 200d4cc:	10bfffcc 	andi	r2,r2,65535
 200d4d0:	10a0001c 	xori	r2,r2,32768
 200d4d4:	8900030d 	sth	r4,12(r17)
 200d4d8:	88c00015 	stw	r3,0(r17)
 200d4dc:	10a00004 	addi	r2,r2,-32768
 200d4e0:	10002c1e 	bne	r2,zero,200d594 <_fflush_r+0x198>
 200d4e4:	0005883a 	mov	r2,zero
 200d4e8:	dfc00417 	ldw	ra,16(sp)
 200d4ec:	dcc00317 	ldw	r19,12(sp)
 200d4f0:	dc800217 	ldw	r18,8(sp)
 200d4f4:	dc400117 	ldw	r17,4(sp)
 200d4f8:	dc000017 	ldw	r16,0(sp)
 200d4fc:	dec00504 	addi	sp,sp,20
 200d500:	f800283a 	ret
 200d504:	8c800417 	ldw	r18,16(r17)
 200d508:	903ff626 	beq	r18,zero,200d4e4 <_fflush_r+0xe8>
 200d50c:	8c000017 	ldw	r16,0(r17)
 200d510:	108000cc 	andi	r2,r2,3
 200d514:	8c800015 	stw	r18,0(r17)
 200d518:	84a1c83a 	sub	r16,r16,r18
 200d51c:	10001b1e 	bne	r2,zero,200d58c <_fflush_r+0x190>
 200d520:	88800517 	ldw	r2,20(r17)
 200d524:	88800215 	stw	r2,8(r17)
 200d528:	04000316 	blt	zero,r16,200d538 <_fflush_r+0x13c>
 200d52c:	003fed06 	br	200d4e4 <_fflush_r+0xe8>
 200d530:	90a5883a 	add	r18,r18,r2
 200d534:	043feb0e 	bge	zero,r16,200d4e4 <_fflush_r+0xe8>
 200d538:	88800917 	ldw	r2,36(r17)
 200d53c:	89400717 	ldw	r5,28(r17)
 200d540:	800f883a 	mov	r7,r16
 200d544:	900d883a 	mov	r6,r18
 200d548:	9809883a 	mov	r4,r19
 200d54c:	103ee83a 	callr	r2
 200d550:	80a1c83a 	sub	r16,r16,r2
 200d554:	00bff616 	blt	zero,r2,200d530 <_fflush_r+0x134>
 200d558:	88c0030b 	ldhu	r3,12(r17)
 200d55c:	00bfffc4 	movi	r2,-1
 200d560:	18c01014 	ori	r3,r3,64
 200d564:	88c0030d 	sth	r3,12(r17)
 200d568:	dfc00417 	ldw	ra,16(sp)
 200d56c:	dcc00317 	ldw	r19,12(sp)
 200d570:	dc800217 	ldw	r18,8(sp)
 200d574:	dc400117 	ldw	r17,4(sp)
 200d578:	dc000017 	ldw	r16,0(sp)
 200d57c:	dec00504 	addi	sp,sp,20
 200d580:	f800283a 	ret
 200d584:	200d6b80 	call	200d6b8 <__sinit>
 200d588:	003fa706 	br	200d428 <_fflush_r+0x2c>
 200d58c:	0005883a 	mov	r2,zero
 200d590:	003fe406 	br	200d524 <_fflush_r+0x128>
 200d594:	8c001415 	stw	r16,80(r17)
 200d598:	003fd206 	br	200d4e4 <_fflush_r+0xe8>
 200d59c:	88c00f17 	ldw	r3,60(r17)
 200d5a0:	00ffac16 	blt	zero,r3,200d454 <_fflush_r+0x58>
 200d5a4:	003fcf06 	br	200d4e4 <_fflush_r+0xe8>
 200d5a8:	89400717 	ldw	r5,28(r17)
 200d5ac:	9809883a 	mov	r4,r19
 200d5b0:	000d883a 	mov	r6,zero
 200d5b4:	01c00044 	movi	r7,1
 200d5b8:	183ee83a 	callr	r3
 200d5bc:	1021883a 	mov	r16,r2
 200d5c0:	00bfffc4 	movi	r2,-1
 200d5c4:	80800326 	beq	r16,r2,200d5d4 <_fflush_r+0x1d8>
 200d5c8:	8940030b 	ldhu	r5,12(r17)
 200d5cc:	88c00a17 	ldw	r3,40(r17)
 200d5d0:	003fa806 	br	200d474 <_fflush_r+0x78>
 200d5d4:	98c00017 	ldw	r3,0(r19)
 200d5d8:	00800744 	movi	r2,29
 200d5dc:	18bfde1e 	bne	r3,r2,200d558 <_fflush_r+0x15c>
 200d5e0:	003fc006 	br	200d4e4 <_fflush_r+0xe8>

0200d5e4 <fflush>:
 200d5e4:	200b883a 	mov	r5,r4
 200d5e8:	20000426 	beq	r4,zero,200d5fc <fflush+0x18>
 200d5ec:	008080b4 	movhi	r2,514
 200d5f0:	10a4ee04 	addi	r2,r2,-27720
 200d5f4:	11000017 	ldw	r4,0(r2)
 200d5f8:	200d3fc1 	jmpi	200d3fc <_fflush_r>
 200d5fc:	008080b4 	movhi	r2,514
 200d600:	10a4ed04 	addi	r2,r2,-27724
 200d604:	11000017 	ldw	r4,0(r2)
 200d608:	01408074 	movhi	r5,513
 200d60c:	2974ff04 	addi	r5,r5,-11268
 200d610:	200e2981 	jmpi	200e298 <_fwalk_reent>

0200d614 <__fp_lock>:
 200d614:	0005883a 	mov	r2,zero
 200d618:	f800283a 	ret

0200d61c <__fp_unlock>:
 200d61c:	0005883a 	mov	r2,zero
 200d620:	f800283a 	ret

0200d624 <_cleanup_r>:
 200d624:	01408074 	movhi	r5,513
 200d628:	29437204 	addi	r5,r5,3528
 200d62c:	200e1f01 	jmpi	200e1f0 <_fwalk>

0200d630 <__sfmoreglue>:
 200d630:	defffc04 	addi	sp,sp,-16
 200d634:	dc800215 	stw	r18,8(sp)
 200d638:	2825883a 	mov	r18,r5
 200d63c:	dc000015 	stw	r16,0(sp)
 200d640:	01401704 	movi	r5,92
 200d644:	2021883a 	mov	r16,r4
 200d648:	9009883a 	mov	r4,r18
 200d64c:	dfc00315 	stw	ra,12(sp)
 200d650:	dc400115 	stw	r17,4(sp)
 200d654:	20093b80 	call	20093b8 <__mulsi3>
 200d658:	8009883a 	mov	r4,r16
 200d65c:	11400304 	addi	r5,r2,12
 200d660:	1023883a 	mov	r17,r2
 200d664:	200e5d40 	call	200e5d4 <_malloc_r>
 200d668:	1021883a 	mov	r16,r2
 200d66c:	10000726 	beq	r2,zero,200d68c <__sfmoreglue+0x5c>
 200d670:	11000304 	addi	r4,r2,12
 200d674:	10000015 	stw	zero,0(r2)
 200d678:	14800115 	stw	r18,4(r2)
 200d67c:	11000215 	stw	r4,8(r2)
 200d680:	000b883a 	mov	r5,zero
 200d684:	880d883a 	mov	r6,r17
 200d688:	200f11c0 	call	200f11c <memset>
 200d68c:	8005883a 	mov	r2,r16
 200d690:	dfc00317 	ldw	ra,12(sp)
 200d694:	dc800217 	ldw	r18,8(sp)
 200d698:	dc400117 	ldw	r17,4(sp)
 200d69c:	dc000017 	ldw	r16,0(sp)
 200d6a0:	dec00404 	addi	sp,sp,16
 200d6a4:	f800283a 	ret

0200d6a8 <_cleanup>:
 200d6a8:	008080b4 	movhi	r2,514
 200d6ac:	10a4ed04 	addi	r2,r2,-27724
 200d6b0:	11000017 	ldw	r4,0(r2)
 200d6b4:	200d6241 	jmpi	200d624 <_cleanup_r>

0200d6b8 <__sinit>:
 200d6b8:	20800e17 	ldw	r2,56(r4)
 200d6bc:	1000401e 	bne	r2,zero,200d7c0 <__sinit+0x108>
 200d6c0:	21400117 	ldw	r5,4(r4)
 200d6c4:	01808074 	movhi	r6,513
 200d6c8:	31b58904 	addi	r6,r6,-10716
 200d6cc:	20c00217 	ldw	r3,8(r4)
 200d6d0:	21800f15 	stw	r6,60(r4)
 200d6d4:	2080bb04 	addi	r2,r4,748
 200d6d8:	02400044 	movi	r9,1
 200d6dc:	018000c4 	movi	r6,3
 200d6e0:	2180b915 	stw	r6,740(r4)
 200d6e4:	2080ba15 	stw	r2,744(r4)
 200d6e8:	22400e15 	stw	r9,56(r4)
 200d6ec:	20800317 	ldw	r2,12(r4)
 200d6f0:	2000b815 	stw	zero,736(r4)
 200d6f4:	02008074 	movhi	r8,513
 200d6f8:	42024304 	addi	r8,r8,2316
 200d6fc:	01c08074 	movhi	r7,513
 200d700:	39c25804 	addi	r7,r7,2400
 200d704:	01808074 	movhi	r6,513
 200d708:	31827a04 	addi	r6,r6,2536
 200d70c:	01008074 	movhi	r4,513
 200d710:	21029104 	addi	r4,r4,2628
 200d714:	02800104 	movi	r10,4
 200d718:	28000015 	stw	zero,0(r5)
 200d71c:	28000115 	stw	zero,4(r5)
 200d720:	28000215 	stw	zero,8(r5)
 200d724:	2a80030d 	sth	r10,12(r5)
 200d728:	2800038d 	sth	zero,14(r5)
 200d72c:	28000415 	stw	zero,16(r5)
 200d730:	28000515 	stw	zero,20(r5)
 200d734:	28000615 	stw	zero,24(r5)
 200d738:	29400715 	stw	r5,28(r5)
 200d73c:	2a000815 	stw	r8,32(r5)
 200d740:	29c00915 	stw	r7,36(r5)
 200d744:	29800a15 	stw	r6,40(r5)
 200d748:	29000b15 	stw	r4,44(r5)
 200d74c:	01400284 	movi	r5,10
 200d750:	18000015 	stw	zero,0(r3)
 200d754:	18000115 	stw	zero,4(r3)
 200d758:	18000215 	stw	zero,8(r3)
 200d75c:	1940030d 	sth	r5,12(r3)
 200d760:	1a40038d 	sth	r9,14(r3)
 200d764:	18000415 	stw	zero,16(r3)
 200d768:	18000515 	stw	zero,20(r3)
 200d76c:	18000615 	stw	zero,24(r3)
 200d770:	18c00715 	stw	r3,28(r3)
 200d774:	1a000815 	stw	r8,32(r3)
 200d778:	19c00915 	stw	r7,36(r3)
 200d77c:	19800a15 	stw	r6,40(r3)
 200d780:	19000b15 	stw	r4,44(r3)
 200d784:	00c00484 	movi	r3,18
 200d788:	10c0030d 	sth	r3,12(r2)
 200d78c:	00c00084 	movi	r3,2
 200d790:	10000015 	stw	zero,0(r2)
 200d794:	10000115 	stw	zero,4(r2)
 200d798:	10000215 	stw	zero,8(r2)
 200d79c:	10c0038d 	sth	r3,14(r2)
 200d7a0:	10000415 	stw	zero,16(r2)
 200d7a4:	10000515 	stw	zero,20(r2)
 200d7a8:	10000615 	stw	zero,24(r2)
 200d7ac:	10800715 	stw	r2,28(r2)
 200d7b0:	12000815 	stw	r8,32(r2)
 200d7b4:	11c00915 	stw	r7,36(r2)
 200d7b8:	11800a15 	stw	r6,40(r2)
 200d7bc:	11000b15 	stw	r4,44(r2)
 200d7c0:	f800283a 	ret

0200d7c4 <__sfp>:
 200d7c4:	defffc04 	addi	sp,sp,-16
 200d7c8:	008080b4 	movhi	r2,514
 200d7cc:	10a4ed04 	addi	r2,r2,-27724
 200d7d0:	dc400115 	stw	r17,4(sp)
 200d7d4:	14400017 	ldw	r17,0(r2)
 200d7d8:	dc800215 	stw	r18,8(sp)
 200d7dc:	dfc00315 	stw	ra,12(sp)
 200d7e0:	88800e17 	ldw	r2,56(r17)
 200d7e4:	dc000015 	stw	r16,0(sp)
 200d7e8:	2025883a 	mov	r18,r4
 200d7ec:	10002826 	beq	r2,zero,200d890 <__sfp+0xcc>
 200d7f0:	8c40b804 	addi	r17,r17,736
 200d7f4:	043fffc4 	movi	r16,-1
 200d7f8:	89400117 	ldw	r5,4(r17)
 200d7fc:	88800217 	ldw	r2,8(r17)
 200d800:	297fffc4 	addi	r5,r5,-1
 200d804:	28000a16 	blt	r5,zero,200d830 <__sfp+0x6c>
 200d808:	10c0030f 	ldh	r3,12(r2)
 200d80c:	18000c26 	beq	r3,zero,200d840 <__sfp+0x7c>
 200d810:	10c01a04 	addi	r3,r2,104
 200d814:	00000206 	br	200d820 <__sfp+0x5c>
 200d818:	19bfe90f 	ldh	r6,-92(r3)
 200d81c:	30000826 	beq	r6,zero,200d840 <__sfp+0x7c>
 200d820:	297fffc4 	addi	r5,r5,-1
 200d824:	18bffd04 	addi	r2,r3,-12
 200d828:	18c01704 	addi	r3,r3,92
 200d82c:	2c3ffa1e 	bne	r5,r16,200d818 <__sfp+0x54>
 200d830:	88800017 	ldw	r2,0(r17)
 200d834:	10001926 	beq	r2,zero,200d89c <__sfp+0xd8>
 200d838:	1023883a 	mov	r17,r2
 200d83c:	003fee06 	br	200d7f8 <__sfp+0x34>
 200d840:	00ffffc4 	movi	r3,-1
 200d844:	10c0038d 	sth	r3,14(r2)
 200d848:	00c00044 	movi	r3,1
 200d84c:	10c0030d 	sth	r3,12(r2)
 200d850:	10000015 	stw	zero,0(r2)
 200d854:	10000215 	stw	zero,8(r2)
 200d858:	10000115 	stw	zero,4(r2)
 200d85c:	10000415 	stw	zero,16(r2)
 200d860:	10000515 	stw	zero,20(r2)
 200d864:	10000615 	stw	zero,24(r2)
 200d868:	10000c15 	stw	zero,48(r2)
 200d86c:	10000d15 	stw	zero,52(r2)
 200d870:	10001115 	stw	zero,68(r2)
 200d874:	10001215 	stw	zero,72(r2)
 200d878:	dfc00317 	ldw	ra,12(sp)
 200d87c:	dc800217 	ldw	r18,8(sp)
 200d880:	dc400117 	ldw	r17,4(sp)
 200d884:	dc000017 	ldw	r16,0(sp)
 200d888:	dec00404 	addi	sp,sp,16
 200d88c:	f800283a 	ret
 200d890:	8809883a 	mov	r4,r17
 200d894:	200d6b80 	call	200d6b8 <__sinit>
 200d898:	003fd506 	br	200d7f0 <__sfp+0x2c>
 200d89c:	9009883a 	mov	r4,r18
 200d8a0:	01400104 	movi	r5,4
 200d8a4:	200d6300 	call	200d630 <__sfmoreglue>
 200d8a8:	88800015 	stw	r2,0(r17)
 200d8ac:	103fe21e 	bne	r2,zero,200d838 <__sfp+0x74>
 200d8b0:	00800304 	movi	r2,12
 200d8b4:	90800015 	stw	r2,0(r18)
 200d8b8:	0005883a 	mov	r2,zero
 200d8bc:	003fee06 	br	200d878 <__sfp+0xb4>

0200d8c0 <__sfp_lock_acquire>:
 200d8c0:	f800283a 	ret

0200d8c4 <__sfp_lock_release>:
 200d8c4:	f800283a 	ret

0200d8c8 <__sinit_lock_acquire>:
 200d8c8:	f800283a 	ret

0200d8cc <__sinit_lock_release>:
 200d8cc:	f800283a 	ret

0200d8d0 <__fp_lock_all>:
 200d8d0:	008080b4 	movhi	r2,514
 200d8d4:	10a4ee04 	addi	r2,r2,-27720
 200d8d8:	11000017 	ldw	r4,0(r2)
 200d8dc:	01408074 	movhi	r5,513
 200d8e0:	29758504 	addi	r5,r5,-10732
 200d8e4:	200e1f01 	jmpi	200e1f0 <_fwalk>

0200d8e8 <__fp_unlock_all>:
 200d8e8:	008080b4 	movhi	r2,514
 200d8ec:	10a4ee04 	addi	r2,r2,-27720
 200d8f0:	11000017 	ldw	r4,0(r2)
 200d8f4:	01408074 	movhi	r5,513
 200d8f8:	29758704 	addi	r5,r5,-10724
 200d8fc:	200e1f01 	jmpi	200e1f0 <_fwalk>

0200d900 <_malloc_trim_r>:
 200d900:	defffb04 	addi	sp,sp,-20
 200d904:	dcc00315 	stw	r19,12(sp)
 200d908:	dc800215 	stw	r18,8(sp)
 200d90c:	dc400115 	stw	r17,4(sp)
 200d910:	dc000015 	stw	r16,0(sp)
 200d914:	2827883a 	mov	r19,r5
 200d918:	dfc00415 	stw	ra,16(sp)
 200d91c:	04408074 	movhi	r17,513
 200d920:	8c5f0604 	addi	r17,r17,31768
 200d924:	2021883a 	mov	r16,r4
 200d928:	2012b8c0 	call	2012b8c <__malloc_lock>
 200d92c:	88800217 	ldw	r2,8(r17)
 200d930:	14800117 	ldw	r18,4(r2)
 200d934:	00bfff04 	movi	r2,-4
 200d938:	90a4703a 	and	r18,r18,r2
 200d93c:	9083fbc4 	addi	r2,r18,4079
 200d940:	14e7c83a 	sub	r19,r2,r19
 200d944:	9826d33a 	srli	r19,r19,12
 200d948:	0083ffc4 	movi	r2,4095
 200d94c:	9cffffc4 	addi	r19,r19,-1
 200d950:	9826933a 	slli	r19,r19,12
 200d954:	14c0060e 	bge	r2,r19,200d970 <_malloc_trim_r+0x70>
 200d958:	8009883a 	mov	r4,r16
 200d95c:	000b883a 	mov	r5,zero
 200d960:	20108a80 	call	20108a8 <_sbrk_r>
 200d964:	88c00217 	ldw	r3,8(r17)
 200d968:	1c87883a 	add	r3,r3,r18
 200d96c:	10c00a26 	beq	r2,r3,200d998 <_malloc_trim_r+0x98>
 200d970:	8009883a 	mov	r4,r16
 200d974:	2012bac0 	call	2012bac <__malloc_unlock>
 200d978:	0005883a 	mov	r2,zero
 200d97c:	dfc00417 	ldw	ra,16(sp)
 200d980:	dcc00317 	ldw	r19,12(sp)
 200d984:	dc800217 	ldw	r18,8(sp)
 200d988:	dc400117 	ldw	r17,4(sp)
 200d98c:	dc000017 	ldw	r16,0(sp)
 200d990:	dec00504 	addi	sp,sp,20
 200d994:	f800283a 	ret
 200d998:	8009883a 	mov	r4,r16
 200d99c:	04cbc83a 	sub	r5,zero,r19
 200d9a0:	20108a80 	call	20108a8 <_sbrk_r>
 200d9a4:	00ffffc4 	movi	r3,-1
 200d9a8:	10c01326 	beq	r2,r3,200d9f8 <_malloc_trim_r+0xf8>
 200d9ac:	008080b4 	movhi	r2,514
 200d9b0:	10a51104 	addi	r2,r2,-27580
 200d9b4:	11000017 	ldw	r4,0(r2)
 200d9b8:	88c00217 	ldw	r3,8(r17)
 200d9bc:	94e5c83a 	sub	r18,r18,r19
 200d9c0:	94800054 	ori	r18,r18,1
 200d9c4:	24e7c83a 	sub	r19,r4,r19
 200d9c8:	1c800115 	stw	r18,4(r3)
 200d9cc:	8009883a 	mov	r4,r16
 200d9d0:	14c00015 	stw	r19,0(r2)
 200d9d4:	2012bac0 	call	2012bac <__malloc_unlock>
 200d9d8:	00800044 	movi	r2,1
 200d9dc:	dfc00417 	ldw	ra,16(sp)
 200d9e0:	dcc00317 	ldw	r19,12(sp)
 200d9e4:	dc800217 	ldw	r18,8(sp)
 200d9e8:	dc400117 	ldw	r17,4(sp)
 200d9ec:	dc000017 	ldw	r16,0(sp)
 200d9f0:	dec00504 	addi	sp,sp,20
 200d9f4:	f800283a 	ret
 200d9f8:	8009883a 	mov	r4,r16
 200d9fc:	000b883a 	mov	r5,zero
 200da00:	20108a80 	call	20108a8 <_sbrk_r>
 200da04:	88c00217 	ldw	r3,8(r17)
 200da08:	014003c4 	movi	r5,15
 200da0c:	10c9c83a 	sub	r4,r2,r3
 200da10:	293fd70e 	bge	r5,r4,200d970 <_malloc_trim_r+0x70>
 200da14:	014080b4 	movhi	r5,514
 200da18:	2964f004 	addi	r5,r5,-27712
 200da1c:	29400017 	ldw	r5,0(r5)
 200da20:	21000054 	ori	r4,r4,1
 200da24:	19000115 	stw	r4,4(r3)
 200da28:	1145c83a 	sub	r2,r2,r5
 200da2c:	014080b4 	movhi	r5,514
 200da30:	29651104 	addi	r5,r5,-27580
 200da34:	28800015 	stw	r2,0(r5)
 200da38:	003fcd06 	br	200d970 <_malloc_trim_r+0x70>

0200da3c <_free_r>:
 200da3c:	defffd04 	addi	sp,sp,-12
 200da40:	dc400115 	stw	r17,4(sp)
 200da44:	dc000015 	stw	r16,0(sp)
 200da48:	dfc00215 	stw	ra,8(sp)
 200da4c:	2821883a 	mov	r16,r5
 200da50:	2023883a 	mov	r17,r4
 200da54:	28004b26 	beq	r5,zero,200db84 <_free_r+0x148>
 200da58:	2012b8c0 	call	2012b8c <__malloc_lock>
 200da5c:	823fff17 	ldw	r8,-4(r16)
 200da60:	00bfff84 	movi	r2,-2
 200da64:	81bffe04 	addi	r6,r16,-8
 200da68:	4084703a 	and	r2,r8,r2
 200da6c:	3087883a 	add	r3,r6,r2
 200da70:	01408074 	movhi	r5,513
 200da74:	295f0604 	addi	r5,r5,31768
 200da78:	1a400117 	ldw	r9,4(r3)
 200da7c:	29000217 	ldw	r4,8(r5)
 200da80:	01ffff04 	movi	r7,-4
 200da84:	49ce703a 	and	r7,r9,r7
 200da88:	20c06526 	beq	r4,r3,200dc20 <_free_r+0x1e4>
 200da8c:	19c00115 	stw	r7,4(r3)
 200da90:	4200004c 	andi	r8,r8,1
 200da94:	40003026 	beq	r8,zero,200db58 <_free_r+0x11c>
 200da98:	0009883a 	mov	r4,zero
 200da9c:	19d1883a 	add	r8,r3,r7
 200daa0:	42000117 	ldw	r8,4(r8)
 200daa4:	4200004c 	andi	r8,r8,1
 200daa8:	4000061e 	bne	r8,zero,200dac4 <_free_r+0x88>
 200daac:	11c5883a 	add	r2,r2,r7
 200dab0:	19c00217 	ldw	r7,8(r3)
 200dab4:	20004e26 	beq	r4,zero,200dbf0 <_free_r+0x1b4>
 200dab8:	18c00317 	ldw	r3,12(r3)
 200dabc:	38c00315 	stw	r3,12(r7)
 200dac0:	19c00215 	stw	r7,8(r3)
 200dac4:	11c00054 	ori	r7,r2,1
 200dac8:	3087883a 	add	r3,r6,r2
 200dacc:	31c00115 	stw	r7,4(r6)
 200dad0:	18800015 	stw	r2,0(r3)
 200dad4:	20001a1e 	bne	r4,zero,200db40 <_free_r+0x104>
 200dad8:	00c07fc4 	movi	r3,511
 200dadc:	18802e2e 	bgeu	r3,r2,200db98 <_free_r+0x15c>
 200dae0:	1006d27a 	srli	r3,r2,9
 200dae4:	01000104 	movi	r4,4
 200dae8:	20c06636 	bltu	r4,r3,200dc84 <_free_r+0x248>
 200daec:	1008d1ba 	srli	r4,r2,6
 200daf0:	21000e04 	addi	r4,r4,56
 200daf4:	210f883a 	add	r7,r4,r4
 200daf8:	39cf883a 	add	r7,r7,r7
 200dafc:	39cf883a 	add	r7,r7,r7
 200db00:	29cf883a 	add	r7,r5,r7
 200db04:	38c00217 	ldw	r3,8(r7)
 200db08:	01408074 	movhi	r5,513
 200db0c:	295f0604 	addi	r5,r5,31768
 200db10:	19c06126 	beq	r3,r7,200dc98 <_free_r+0x25c>
 200db14:	013fff04 	movi	r4,-4
 200db18:	19400117 	ldw	r5,4(r3)
 200db1c:	290a703a 	and	r5,r5,r4
 200db20:	1140022e 	bgeu	r2,r5,200db2c <_free_r+0xf0>
 200db24:	18c00217 	ldw	r3,8(r3)
 200db28:	38fffb1e 	bne	r7,r3,200db18 <_free_r+0xdc>
 200db2c:	18800317 	ldw	r2,12(r3)
 200db30:	30800315 	stw	r2,12(r6)
 200db34:	30c00215 	stw	r3,8(r6)
 200db38:	11800215 	stw	r6,8(r2)
 200db3c:	19800315 	stw	r6,12(r3)
 200db40:	8809883a 	mov	r4,r17
 200db44:	dfc00217 	ldw	ra,8(sp)
 200db48:	dc400117 	ldw	r17,4(sp)
 200db4c:	dc000017 	ldw	r16,0(sp)
 200db50:	dec00304 	addi	sp,sp,12
 200db54:	2012bac1 	jmpi	2012bac <__malloc_unlock>
 200db58:	813ffe17 	ldw	r4,-8(r16)
 200db5c:	2a400204 	addi	r9,r5,8
 200db60:	310dc83a 	sub	r6,r6,r4
 200db64:	32000217 	ldw	r8,8(r6)
 200db68:	1105883a 	add	r2,r2,r4
 200db6c:	42404326 	beq	r8,r9,200dc7c <_free_r+0x240>
 200db70:	32400317 	ldw	r9,12(r6)
 200db74:	0009883a 	mov	r4,zero
 200db78:	42400315 	stw	r9,12(r8)
 200db7c:	4a000215 	stw	r8,8(r9)
 200db80:	003fc606 	br	200da9c <_free_r+0x60>
 200db84:	dfc00217 	ldw	ra,8(sp)
 200db88:	dc400117 	ldw	r17,4(sp)
 200db8c:	dc000017 	ldw	r16,0(sp)
 200db90:	dec00304 	addi	sp,sp,12
 200db94:	f800283a 	ret
 200db98:	1004d0fa 	srli	r2,r2,3
 200db9c:	02000044 	movi	r8,1
 200dba0:	29c00117 	ldw	r7,4(r5)
 200dba4:	1087883a 	add	r3,r2,r2
 200dba8:	18c7883a 	add	r3,r3,r3
 200dbac:	1005d0ba 	srai	r2,r2,2
 200dbb0:	18c7883a 	add	r3,r3,r3
 200dbb4:	28c7883a 	add	r3,r5,r3
 200dbb8:	19000217 	ldw	r4,8(r3)
 200dbbc:	4084983a 	sll	r2,r8,r2
 200dbc0:	30c00315 	stw	r3,12(r6)
 200dbc4:	31000215 	stw	r4,8(r6)
 200dbc8:	11c4b03a 	or	r2,r2,r7
 200dbcc:	21800315 	stw	r6,12(r4)
 200dbd0:	8809883a 	mov	r4,r17
 200dbd4:	28800115 	stw	r2,4(r5)
 200dbd8:	19800215 	stw	r6,8(r3)
 200dbdc:	dfc00217 	ldw	ra,8(sp)
 200dbe0:	dc400117 	ldw	r17,4(sp)
 200dbe4:	dc000017 	ldw	r16,0(sp)
 200dbe8:	dec00304 	addi	sp,sp,12
 200dbec:	2012bac1 	jmpi	2012bac <__malloc_unlock>
 200dbf0:	02008074 	movhi	r8,513
 200dbf4:	421f0804 	addi	r8,r8,31776
 200dbf8:	3a3faf1e 	bne	r7,r8,200dab8 <_free_r+0x7c>
 200dbfc:	29800515 	stw	r6,20(r5)
 200dc00:	29800415 	stw	r6,16(r5)
 200dc04:	11000054 	ori	r4,r2,1
 200dc08:	3087883a 	add	r3,r6,r2
 200dc0c:	31c00315 	stw	r7,12(r6)
 200dc10:	31c00215 	stw	r7,8(r6)
 200dc14:	31000115 	stw	r4,4(r6)
 200dc18:	18800015 	stw	r2,0(r3)
 200dc1c:	003fc806 	br	200db40 <_free_r+0x104>
 200dc20:	4200004c 	andi	r8,r8,1
 200dc24:	3885883a 	add	r2,r7,r2
 200dc28:	4000071e 	bne	r8,zero,200dc48 <_free_r+0x20c>
 200dc2c:	81fffe17 	ldw	r7,-8(r16)
 200dc30:	31cdc83a 	sub	r6,r6,r7
 200dc34:	30c00317 	ldw	r3,12(r6)
 200dc38:	31000217 	ldw	r4,8(r6)
 200dc3c:	11c5883a 	add	r2,r2,r7
 200dc40:	20c00315 	stw	r3,12(r4)
 200dc44:	19000215 	stw	r4,8(r3)
 200dc48:	00c080b4 	movhi	r3,514
 200dc4c:	18e4f104 	addi	r3,r3,-27708
 200dc50:	18c00017 	ldw	r3,0(r3)
 200dc54:	11000054 	ori	r4,r2,1
 200dc58:	31000115 	stw	r4,4(r6)
 200dc5c:	29800215 	stw	r6,8(r5)
 200dc60:	10ffb736 	bltu	r2,r3,200db40 <_free_r+0x104>
 200dc64:	008080b4 	movhi	r2,514
 200dc68:	10a50404 	addi	r2,r2,-27632
 200dc6c:	11400017 	ldw	r5,0(r2)
 200dc70:	8809883a 	mov	r4,r17
 200dc74:	200d9000 	call	200d900 <_malloc_trim_r>
 200dc78:	003fb106 	br	200db40 <_free_r+0x104>
 200dc7c:	01000044 	movi	r4,1
 200dc80:	003f8606 	br	200da9c <_free_r+0x60>
 200dc84:	01000504 	movi	r4,20
 200dc88:	20c00b36 	bltu	r4,r3,200dcb8 <_free_r+0x27c>
 200dc8c:	190016c4 	addi	r4,r3,91
 200dc90:	210f883a 	add	r7,r4,r4
 200dc94:	003f9806 	br	200daf8 <_free_r+0xbc>
 200dc98:	2009d0ba 	srai	r4,r4,2
 200dc9c:	00800044 	movi	r2,1
 200dca0:	29c00117 	ldw	r7,4(r5)
 200dca4:	1108983a 	sll	r4,r2,r4
 200dca8:	1805883a 	mov	r2,r3
 200dcac:	21c8b03a 	or	r4,r4,r7
 200dcb0:	29000115 	stw	r4,4(r5)
 200dcb4:	003f9e06 	br	200db30 <_free_r+0xf4>
 200dcb8:	01001504 	movi	r4,84
 200dcbc:	20c00436 	bltu	r4,r3,200dcd0 <_free_r+0x294>
 200dcc0:	1008d33a 	srli	r4,r2,12
 200dcc4:	21001b84 	addi	r4,r4,110
 200dcc8:	210f883a 	add	r7,r4,r4
 200dccc:	003f8a06 	br	200daf8 <_free_r+0xbc>
 200dcd0:	01005504 	movi	r4,340
 200dcd4:	20c00436 	bltu	r4,r3,200dce8 <_free_r+0x2ac>
 200dcd8:	1008d3fa 	srli	r4,r2,15
 200dcdc:	21001dc4 	addi	r4,r4,119
 200dce0:	210f883a 	add	r7,r4,r4
 200dce4:	003f8406 	br	200daf8 <_free_r+0xbc>
 200dce8:	01015504 	movi	r4,1364
 200dcec:	20c00436 	bltu	r4,r3,200dd00 <_free_r+0x2c4>
 200dcf0:	1008d4ba 	srli	r4,r2,18
 200dcf4:	21001f04 	addi	r4,r4,124
 200dcf8:	210f883a 	add	r7,r4,r4
 200dcfc:	003f7e06 	br	200daf8 <_free_r+0xbc>
 200dd00:	01c03f04 	movi	r7,252
 200dd04:	01001f84 	movi	r4,126
 200dd08:	003f7b06 	br	200daf8 <_free_r+0xbc>

0200dd0c <__sfvwrite_r>:
 200dd0c:	30800217 	ldw	r2,8(r6)
 200dd10:	defff504 	addi	sp,sp,-44
 200dd14:	dd400615 	stw	r21,24(sp)
 200dd18:	dd000515 	stw	r20,20(sp)
 200dd1c:	dc000115 	stw	r16,4(sp)
 200dd20:	dfc00a15 	stw	ra,40(sp)
 200dd24:	df000915 	stw	fp,36(sp)
 200dd28:	ddc00815 	stw	r23,32(sp)
 200dd2c:	dd800715 	stw	r22,28(sp)
 200dd30:	dcc00415 	stw	r19,16(sp)
 200dd34:	dc800315 	stw	r18,12(sp)
 200dd38:	dc400215 	stw	r17,8(sp)
 200dd3c:	3029883a 	mov	r20,r6
 200dd40:	202b883a 	mov	r21,r4
 200dd44:	2821883a 	mov	r16,r5
 200dd48:	10002126 	beq	r2,zero,200ddd0 <__sfvwrite_r+0xc4>
 200dd4c:	2880030b 	ldhu	r2,12(r5)
 200dd50:	10c0020c 	andi	r3,r2,8
 200dd54:	18ffffcc 	andi	r3,r3,65535
 200dd58:	18e0001c 	xori	r3,r3,32768
 200dd5c:	18e00004 	addi	r3,r3,-32768
 200dd60:	18002826 	beq	r3,zero,200de04 <__sfvwrite_r+0xf8>
 200dd64:	28c00417 	ldw	r3,16(r5)
 200dd68:	18002626 	beq	r3,zero,200de04 <__sfvwrite_r+0xf8>
 200dd6c:	10c0008c 	andi	r3,r2,2
 200dd70:	18ffffcc 	andi	r3,r3,65535
 200dd74:	18e0001c 	xori	r3,r3,32768
 200dd78:	18e00004 	addi	r3,r3,-32768
 200dd7c:	a4400017 	ldw	r17,0(r20)
 200dd80:	18002b26 	beq	r3,zero,200de30 <__sfvwrite_r+0x124>
 200dd84:	0027883a 	mov	r19,zero
 200dd88:	0025883a 	mov	r18,zero
 200dd8c:	05810004 	movi	r22,1024
 200dd90:	980d883a 	mov	r6,r19
 200dd94:	a809883a 	mov	r4,r21
 200dd98:	90004f26 	beq	r18,zero,200ded8 <__sfvwrite_r+0x1cc>
 200dd9c:	900f883a 	mov	r7,r18
 200dda0:	81400717 	ldw	r5,28(r16)
 200dda4:	b480012e 	bgeu	r22,r18,200ddac <__sfvwrite_r+0xa0>
 200dda8:	01c10004 	movi	r7,1024
 200ddac:	80800917 	ldw	r2,36(r16)
 200ddb0:	103ee83a 	callr	r2
 200ddb4:	0080540e 	bge	zero,r2,200df08 <__sfvwrite_r+0x1fc>
 200ddb8:	a0c00217 	ldw	r3,8(r20)
 200ddbc:	98a7883a 	add	r19,r19,r2
 200ddc0:	90a5c83a 	sub	r18,r18,r2
 200ddc4:	1885c83a 	sub	r2,r3,r2
 200ddc8:	a0800215 	stw	r2,8(r20)
 200ddcc:	103ff01e 	bne	r2,zero,200dd90 <__sfvwrite_r+0x84>
 200ddd0:	0005883a 	mov	r2,zero
 200ddd4:	dfc00a17 	ldw	ra,40(sp)
 200ddd8:	df000917 	ldw	fp,36(sp)
 200dddc:	ddc00817 	ldw	r23,32(sp)
 200dde0:	dd800717 	ldw	r22,28(sp)
 200dde4:	dd400617 	ldw	r21,24(sp)
 200dde8:	dd000517 	ldw	r20,20(sp)
 200ddec:	dcc00417 	ldw	r19,16(sp)
 200ddf0:	dc800317 	ldw	r18,12(sp)
 200ddf4:	dc400217 	ldw	r17,8(sp)
 200ddf8:	dc000117 	ldw	r16,4(sp)
 200ddfc:	dec00b04 	addi	sp,sp,44
 200de00:	f800283a 	ret
 200de04:	a809883a 	mov	r4,r21
 200de08:	800b883a 	mov	r5,r16
 200de0c:	200ba300 	call	200ba30 <__swsetup_r>
 200de10:	1000f01e 	bne	r2,zero,200e1d4 <__sfvwrite_r+0x4c8>
 200de14:	8080030b 	ldhu	r2,12(r16)
 200de18:	a4400017 	ldw	r17,0(r20)
 200de1c:	10c0008c 	andi	r3,r2,2
 200de20:	18ffffcc 	andi	r3,r3,65535
 200de24:	18e0001c 	xori	r3,r3,32768
 200de28:	18e00004 	addi	r3,r3,-32768
 200de2c:	183fd51e 	bne	r3,zero,200dd84 <__sfvwrite_r+0x78>
 200de30:	10c0004c 	andi	r3,r2,1
 200de34:	002d883a 	mov	r22,zero
 200de38:	1800381e 	bne	r3,zero,200df1c <__sfvwrite_r+0x210>
 200de3c:	0025883a 	mov	r18,zero
 200de40:	90002126 	beq	r18,zero,200dec8 <__sfvwrite_r+0x1bc>
 200de44:	10c0800c 	andi	r3,r2,512
 200de48:	18ffffcc 	andi	r3,r3,65535
 200de4c:	18e0001c 	xori	r3,r3,32768
 200de50:	18e00004 	addi	r3,r3,-32768
 200de54:	84c00217 	ldw	r19,8(r16)
 200de58:	18006b26 	beq	r3,zero,200e008 <__sfvwrite_r+0x2fc>
 200de5c:	980f883a 	mov	r7,r19
 200de60:	94c08636 	bltu	r18,r19,200e07c <__sfvwrite_r+0x370>
 200de64:	10c1200c 	andi	r3,r2,1152
 200de68:	18009f1e 	bne	r3,zero,200e0e8 <__sfvwrite_r+0x3dc>
 200de6c:	81000017 	ldw	r4,0(r16)
 200de70:	982f883a 	mov	r23,r19
 200de74:	9039883a 	mov	fp,r18
 200de78:	9027883a 	mov	r19,r18
 200de7c:	380d883a 	mov	r6,r7
 200de80:	b00b883a 	mov	r5,r22
 200de84:	d9c00015 	stw	r7,0(sp)
 200de88:	200ef900 	call	200ef90 <memmove>
 200de8c:	d9c00017 	ldw	r7,0(sp)
 200de90:	81000217 	ldw	r4,8(r16)
 200de94:	80800017 	ldw	r2,0(r16)
 200de98:	25efc83a 	sub	r23,r4,r23
 200de9c:	11cf883a 	add	r7,r2,r7
 200dea0:	85c00215 	stw	r23,8(r16)
 200dea4:	81c00015 	stw	r7,0(r16)
 200dea8:	a0800217 	ldw	r2,8(r20)
 200deac:	b72d883a 	add	r22,r22,fp
 200deb0:	9725c83a 	sub	r18,r18,fp
 200deb4:	14e7c83a 	sub	r19,r2,r19
 200deb8:	a4c00215 	stw	r19,8(r20)
 200debc:	983fc426 	beq	r19,zero,200ddd0 <__sfvwrite_r+0xc4>
 200dec0:	8080030b 	ldhu	r2,12(r16)
 200dec4:	903fdf1e 	bne	r18,zero,200de44 <__sfvwrite_r+0x138>
 200dec8:	8d800017 	ldw	r22,0(r17)
 200decc:	8c800117 	ldw	r18,4(r17)
 200ded0:	8c400204 	addi	r17,r17,8
 200ded4:	003fda06 	br	200de40 <__sfvwrite_r+0x134>
 200ded8:	8cc00017 	ldw	r19,0(r17)
 200dedc:	8c800117 	ldw	r18,4(r17)
 200dee0:	8c400204 	addi	r17,r17,8
 200dee4:	003faa06 	br	200dd90 <__sfvwrite_r+0x84>
 200dee8:	20102480 	call	2010248 <_realloc_r>
 200deec:	102f883a 	mov	r23,r2
 200def0:	10009f1e 	bne	r2,zero,200e170 <__sfvwrite_r+0x464>
 200def4:	81400417 	ldw	r5,16(r16)
 200def8:	a809883a 	mov	r4,r21
 200defc:	200da3c0 	call	200da3c <_free_r>
 200df00:	00800304 	movi	r2,12
 200df04:	a8800015 	stw	r2,0(r21)
 200df08:	80c0030b 	ldhu	r3,12(r16)
 200df0c:	00bfffc4 	movi	r2,-1
 200df10:	18c01014 	ori	r3,r3,64
 200df14:	80c0030d 	sth	r3,12(r16)
 200df18:	003fae06 	br	200ddd4 <__sfvwrite_r+0xc8>
 200df1c:	0007883a 	mov	r3,zero
 200df20:	0039883a 	mov	fp,zero
 200df24:	0025883a 	mov	r18,zero
 200df28:	90001e26 	beq	r18,zero,200dfa4 <__sfvwrite_r+0x298>
 200df2c:	18006526 	beq	r3,zero,200e0c4 <__sfvwrite_r+0x3b8>
 200df30:	b02f883a 	mov	r23,r22
 200df34:	9580012e 	bgeu	r18,r22,200df3c <__sfvwrite_r+0x230>
 200df38:	902f883a 	mov	r23,r18
 200df3c:	81000017 	ldw	r4,0(r16)
 200df40:	80800417 	ldw	r2,16(r16)
 200df44:	84c00217 	ldw	r19,8(r16)
 200df48:	81c00517 	ldw	r7,20(r16)
 200df4c:	1100022e 	bgeu	r2,r4,200df58 <__sfvwrite_r+0x24c>
 200df50:	99e7883a 	add	r19,r19,r7
 200df54:	9dc01816 	blt	r19,r23,200dfb8 <__sfvwrite_r+0x2ac>
 200df58:	b9c03b16 	blt	r23,r7,200e048 <__sfvwrite_r+0x33c>
 200df5c:	80800917 	ldw	r2,36(r16)
 200df60:	81400717 	ldw	r5,28(r16)
 200df64:	a809883a 	mov	r4,r21
 200df68:	d8c00015 	stw	r3,0(sp)
 200df6c:	e00d883a 	mov	r6,fp
 200df70:	103ee83a 	callr	r2
 200df74:	1027883a 	mov	r19,r2
 200df78:	d8c00017 	ldw	r3,0(sp)
 200df7c:	00bfe20e 	bge	zero,r2,200df08 <__sfvwrite_r+0x1fc>
 200df80:	b4edc83a 	sub	r22,r22,r19
 200df84:	b0001a26 	beq	r22,zero,200dff0 <__sfvwrite_r+0x2e4>
 200df88:	a0800217 	ldw	r2,8(r20)
 200df8c:	e4f9883a 	add	fp,fp,r19
 200df90:	94e5c83a 	sub	r18,r18,r19
 200df94:	14e7c83a 	sub	r19,r2,r19
 200df98:	a4c00215 	stw	r19,8(r20)
 200df9c:	983f8c26 	beq	r19,zero,200ddd0 <__sfvwrite_r+0xc4>
 200dfa0:	903fe21e 	bne	r18,zero,200df2c <__sfvwrite_r+0x220>
 200dfa4:	8f000017 	ldw	fp,0(r17)
 200dfa8:	8c800117 	ldw	r18,4(r17)
 200dfac:	0007883a 	mov	r3,zero
 200dfb0:	8c400204 	addi	r17,r17,8
 200dfb4:	003fdc06 	br	200df28 <__sfvwrite_r+0x21c>
 200dfb8:	e00b883a 	mov	r5,fp
 200dfbc:	980d883a 	mov	r6,r19
 200dfc0:	d8c00015 	stw	r3,0(sp)
 200dfc4:	200ef900 	call	200ef90 <memmove>
 200dfc8:	80800017 	ldw	r2,0(r16)
 200dfcc:	a809883a 	mov	r4,r21
 200dfd0:	800b883a 	mov	r5,r16
 200dfd4:	14c5883a 	add	r2,r2,r19
 200dfd8:	80800015 	stw	r2,0(r16)
 200dfdc:	200d3fc0 	call	200d3fc <_fflush_r>
 200dfe0:	d8c00017 	ldw	r3,0(sp)
 200dfe4:	103fc81e 	bne	r2,zero,200df08 <__sfvwrite_r+0x1fc>
 200dfe8:	b4edc83a 	sub	r22,r22,r19
 200dfec:	b03fe61e 	bne	r22,zero,200df88 <__sfvwrite_r+0x27c>
 200dff0:	a809883a 	mov	r4,r21
 200dff4:	800b883a 	mov	r5,r16
 200dff8:	200d3fc0 	call	200d3fc <_fflush_r>
 200dffc:	103fc21e 	bne	r2,zero,200df08 <__sfvwrite_r+0x1fc>
 200e000:	0007883a 	mov	r3,zero
 200e004:	003fe006 	br	200df88 <__sfvwrite_r+0x27c>
 200e008:	81000017 	ldw	r4,0(r16)
 200e00c:	80800417 	ldw	r2,16(r16)
 200e010:	1100022e 	bgeu	r2,r4,200e01c <__sfvwrite_r+0x310>
 200e014:	9839883a 	mov	fp,r19
 200e018:	9c806036 	bltu	r19,r18,200e19c <__sfvwrite_r+0x490>
 200e01c:	81c00517 	ldw	r7,20(r16)
 200e020:	91c01c36 	bltu	r18,r7,200e094 <__sfvwrite_r+0x388>
 200e024:	80800917 	ldw	r2,36(r16)
 200e028:	81400717 	ldw	r5,28(r16)
 200e02c:	a809883a 	mov	r4,r21
 200e030:	b00d883a 	mov	r6,r22
 200e034:	103ee83a 	callr	r2
 200e038:	1027883a 	mov	r19,r2
 200e03c:	00bfb20e 	bge	zero,r2,200df08 <__sfvwrite_r+0x1fc>
 200e040:	1039883a 	mov	fp,r2
 200e044:	003f9806 	br	200dea8 <__sfvwrite_r+0x19c>
 200e048:	b80d883a 	mov	r6,r23
 200e04c:	e00b883a 	mov	r5,fp
 200e050:	d8c00015 	stw	r3,0(sp)
 200e054:	200ef900 	call	200ef90 <memmove>
 200e058:	80800217 	ldw	r2,8(r16)
 200e05c:	81000017 	ldw	r4,0(r16)
 200e060:	b827883a 	mov	r19,r23
 200e064:	15c5c83a 	sub	r2,r2,r23
 200e068:	25ef883a 	add	r23,r4,r23
 200e06c:	80800215 	stw	r2,8(r16)
 200e070:	85c00015 	stw	r23,0(r16)
 200e074:	d8c00017 	ldw	r3,0(sp)
 200e078:	003fc106 	br	200df80 <__sfvwrite_r+0x274>
 200e07c:	81000017 	ldw	r4,0(r16)
 200e080:	902f883a 	mov	r23,r18
 200e084:	9039883a 	mov	fp,r18
 200e088:	9027883a 	mov	r19,r18
 200e08c:	900f883a 	mov	r7,r18
 200e090:	003f7a06 	br	200de7c <__sfvwrite_r+0x170>
 200e094:	b00b883a 	mov	r5,r22
 200e098:	900d883a 	mov	r6,r18
 200e09c:	200ef900 	call	200ef90 <memmove>
 200e0a0:	80c00217 	ldw	r3,8(r16)
 200e0a4:	80800017 	ldw	r2,0(r16)
 200e0a8:	9027883a 	mov	r19,r18
 200e0ac:	1c87c83a 	sub	r3,r3,r18
 200e0b0:	1485883a 	add	r2,r2,r18
 200e0b4:	80c00215 	stw	r3,8(r16)
 200e0b8:	80800015 	stw	r2,0(r16)
 200e0bc:	9039883a 	mov	fp,r18
 200e0c0:	003f7906 	br	200dea8 <__sfvwrite_r+0x19c>
 200e0c4:	e009883a 	mov	r4,fp
 200e0c8:	01400284 	movi	r5,10
 200e0cc:	900d883a 	mov	r6,r18
 200e0d0:	200ed580 	call	200ed58 <memchr>
 200e0d4:	10003c26 	beq	r2,zero,200e1c8 <__sfvwrite_r+0x4bc>
 200e0d8:	15800044 	addi	r22,r2,1
 200e0dc:	b72dc83a 	sub	r22,r22,fp
 200e0e0:	00c00044 	movi	r3,1
 200e0e4:	003f9206 	br	200df30 <__sfvwrite_r+0x224>
 200e0e8:	81000517 	ldw	r4,20(r16)
 200e0ec:	81400417 	ldw	r5,16(r16)
 200e0f0:	80c00017 	ldw	r3,0(r16)
 200e0f4:	210d883a 	add	r6,r4,r4
 200e0f8:	3109883a 	add	r4,r6,r4
 200e0fc:	2026d7fa 	srli	r19,r4,31
 200e100:	1979c83a 	sub	fp,r3,r5
 200e104:	e1800044 	addi	r6,fp,1
 200e108:	9909883a 	add	r4,r19,r4
 200e10c:	2027d07a 	srai	r19,r4,1
 200e110:	3489883a 	add	r4,r6,r18
 200e114:	980d883a 	mov	r6,r19
 200e118:	9900022e 	bgeu	r19,r4,200e124 <__sfvwrite_r+0x418>
 200e11c:	2027883a 	mov	r19,r4
 200e120:	200d883a 	mov	r6,r4
 200e124:	1081000c 	andi	r2,r2,1024
 200e128:	10bfffcc 	andi	r2,r2,65535
 200e12c:	10a0001c 	xori	r2,r2,32768
 200e130:	10a00004 	addi	r2,r2,-32768
 200e134:	a809883a 	mov	r4,r21
 200e138:	103f6b26 	beq	r2,zero,200dee8 <__sfvwrite_r+0x1dc>
 200e13c:	300b883a 	mov	r5,r6
 200e140:	200e5d40 	call	200e5d4 <_malloc_r>
 200e144:	102f883a 	mov	r23,r2
 200e148:	103f6d26 	beq	r2,zero,200df00 <__sfvwrite_r+0x1f4>
 200e14c:	81400417 	ldw	r5,16(r16)
 200e150:	1009883a 	mov	r4,r2
 200e154:	e00d883a 	mov	r6,fp
 200e158:	200ee500 	call	200ee50 <memcpy>
 200e15c:	8080030b 	ldhu	r2,12(r16)
 200e160:	00fedfc4 	movi	r3,-1153
 200e164:	10c4703a 	and	r2,r2,r3
 200e168:	10802014 	ori	r2,r2,128
 200e16c:	8080030d 	sth	r2,12(r16)
 200e170:	bf09883a 	add	r4,r23,fp
 200e174:	9f07c83a 	sub	r3,r19,fp
 200e178:	85c00415 	stw	r23,16(r16)
 200e17c:	84c00515 	stw	r19,20(r16)
 200e180:	81000015 	stw	r4,0(r16)
 200e184:	902f883a 	mov	r23,r18
 200e188:	80c00215 	stw	r3,8(r16)
 200e18c:	9039883a 	mov	fp,r18
 200e190:	9027883a 	mov	r19,r18
 200e194:	900f883a 	mov	r7,r18
 200e198:	003f3806 	br	200de7c <__sfvwrite_r+0x170>
 200e19c:	b00b883a 	mov	r5,r22
 200e1a0:	980d883a 	mov	r6,r19
 200e1a4:	200ef900 	call	200ef90 <memmove>
 200e1a8:	80800017 	ldw	r2,0(r16)
 200e1ac:	a809883a 	mov	r4,r21
 200e1b0:	800b883a 	mov	r5,r16
 200e1b4:	14c5883a 	add	r2,r2,r19
 200e1b8:	80800015 	stw	r2,0(r16)
 200e1bc:	200d3fc0 	call	200d3fc <_fflush_r>
 200e1c0:	103f3926 	beq	r2,zero,200dea8 <__sfvwrite_r+0x19c>
 200e1c4:	003f5006 	br	200df08 <__sfvwrite_r+0x1fc>
 200e1c8:	95800044 	addi	r22,r18,1
 200e1cc:	00c00044 	movi	r3,1
 200e1d0:	003f5706 	br	200df30 <__sfvwrite_r+0x224>
 200e1d4:	80c0030b 	ldhu	r3,12(r16)
 200e1d8:	00bfffc4 	movi	r2,-1
 200e1dc:	18c01014 	ori	r3,r3,64
 200e1e0:	80c0030d 	sth	r3,12(r16)
 200e1e4:	00c00244 	movi	r3,9
 200e1e8:	a8c00015 	stw	r3,0(r21)
 200e1ec:	003ef906 	br	200ddd4 <__sfvwrite_r+0xc8>

0200e1f0 <_fwalk>:
 200e1f0:	defff904 	addi	sp,sp,-28
 200e1f4:	dcc00315 	stw	r19,12(sp)
 200e1f8:	24c0b804 	addi	r19,r4,736
 200e1fc:	dd400515 	stw	r21,20(sp)
 200e200:	dd000415 	stw	r20,16(sp)
 200e204:	dfc00615 	stw	ra,24(sp)
 200e208:	dc800215 	stw	r18,8(sp)
 200e20c:	dc400115 	stw	r17,4(sp)
 200e210:	dc000015 	stw	r16,0(sp)
 200e214:	282b883a 	mov	r21,r5
 200e218:	0029883a 	mov	r20,zero
 200e21c:	200d8c00 	call	200d8c0 <__sfp_lock_acquire>
 200e220:	98001226 	beq	r19,zero,200e26c <_fwalk+0x7c>
 200e224:	04bfffc4 	movi	r18,-1
 200e228:	9c400117 	ldw	r17,4(r19)
 200e22c:	9c000217 	ldw	r16,8(r19)
 200e230:	8c7fffc4 	addi	r17,r17,-1
 200e234:	88000b16 	blt	r17,zero,200e264 <_fwalk+0x74>
 200e238:	84000304 	addi	r16,r16,12
 200e23c:	80c0000f 	ldh	r3,0(r16)
 200e240:	8c7fffc4 	addi	r17,r17,-1
 200e244:	813ffd04 	addi	r4,r16,-12
 200e248:	18000426 	beq	r3,zero,200e25c <_fwalk+0x6c>
 200e24c:	80c0008f 	ldh	r3,2(r16)
 200e250:	1c800226 	beq	r3,r18,200e25c <_fwalk+0x6c>
 200e254:	a83ee83a 	callr	r21
 200e258:	a0a8b03a 	or	r20,r20,r2
 200e25c:	84001704 	addi	r16,r16,92
 200e260:	8cbff61e 	bne	r17,r18,200e23c <_fwalk+0x4c>
 200e264:	9cc00017 	ldw	r19,0(r19)
 200e268:	983fef1e 	bne	r19,zero,200e228 <_fwalk+0x38>
 200e26c:	200d8c40 	call	200d8c4 <__sfp_lock_release>
 200e270:	a005883a 	mov	r2,r20
 200e274:	dfc00617 	ldw	ra,24(sp)
 200e278:	dd400517 	ldw	r21,20(sp)
 200e27c:	dd000417 	ldw	r20,16(sp)
 200e280:	dcc00317 	ldw	r19,12(sp)
 200e284:	dc800217 	ldw	r18,8(sp)
 200e288:	dc400117 	ldw	r17,4(sp)
 200e28c:	dc000017 	ldw	r16,0(sp)
 200e290:	dec00704 	addi	sp,sp,28
 200e294:	f800283a 	ret

0200e298 <_fwalk_reent>:
 200e298:	defff804 	addi	sp,sp,-32
 200e29c:	dcc00315 	stw	r19,12(sp)
 200e2a0:	24c0b804 	addi	r19,r4,736
 200e2a4:	dd800615 	stw	r22,24(sp)
 200e2a8:	dd400515 	stw	r21,20(sp)
 200e2ac:	dd000415 	stw	r20,16(sp)
 200e2b0:	dfc00715 	stw	ra,28(sp)
 200e2b4:	dc800215 	stw	r18,8(sp)
 200e2b8:	dc400115 	stw	r17,4(sp)
 200e2bc:	dc000015 	stw	r16,0(sp)
 200e2c0:	2029883a 	mov	r20,r4
 200e2c4:	282b883a 	mov	r21,r5
 200e2c8:	002d883a 	mov	r22,zero
 200e2cc:	200d8c00 	call	200d8c0 <__sfp_lock_acquire>
 200e2d0:	98001326 	beq	r19,zero,200e320 <_fwalk_reent+0x88>
 200e2d4:	04bfffc4 	movi	r18,-1
 200e2d8:	9c400117 	ldw	r17,4(r19)
 200e2dc:	9c000217 	ldw	r16,8(r19)
 200e2e0:	8c7fffc4 	addi	r17,r17,-1
 200e2e4:	88000c16 	blt	r17,zero,200e318 <_fwalk_reent+0x80>
 200e2e8:	84000304 	addi	r16,r16,12
 200e2ec:	80c0000f 	ldh	r3,0(r16)
 200e2f0:	8c7fffc4 	addi	r17,r17,-1
 200e2f4:	817ffd04 	addi	r5,r16,-12
 200e2f8:	18000526 	beq	r3,zero,200e310 <_fwalk_reent+0x78>
 200e2fc:	80c0008f 	ldh	r3,2(r16)
 200e300:	a009883a 	mov	r4,r20
 200e304:	1c800226 	beq	r3,r18,200e310 <_fwalk_reent+0x78>
 200e308:	a83ee83a 	callr	r21
 200e30c:	b0acb03a 	or	r22,r22,r2
 200e310:	84001704 	addi	r16,r16,92
 200e314:	8cbff51e 	bne	r17,r18,200e2ec <_fwalk_reent+0x54>
 200e318:	9cc00017 	ldw	r19,0(r19)
 200e31c:	983fee1e 	bne	r19,zero,200e2d8 <_fwalk_reent+0x40>
 200e320:	200d8c40 	call	200d8c4 <__sfp_lock_release>
 200e324:	b005883a 	mov	r2,r22
 200e328:	dfc00717 	ldw	ra,28(sp)
 200e32c:	dd800617 	ldw	r22,24(sp)
 200e330:	dd400517 	ldw	r21,20(sp)
 200e334:	dd000417 	ldw	r20,16(sp)
 200e338:	dcc00317 	ldw	r19,12(sp)
 200e33c:	dc800217 	ldw	r18,8(sp)
 200e340:	dc400117 	ldw	r17,4(sp)
 200e344:	dc000017 	ldw	r16,0(sp)
 200e348:	dec00804 	addi	sp,sp,32
 200e34c:	f800283a 	ret

0200e350 <_setlocale_r>:
 200e350:	defffc04 	addi	sp,sp,-16
 200e354:	dc800215 	stw	r18,8(sp)
 200e358:	dc400115 	stw	r17,4(sp)
 200e35c:	dc000015 	stw	r16,0(sp)
 200e360:	dfc00315 	stw	ra,12(sp)
 200e364:	3021883a 	mov	r16,r6
 200e368:	2023883a 	mov	r17,r4
 200e36c:	2825883a 	mov	r18,r5
 200e370:	30001626 	beq	r6,zero,200e3cc <_setlocale_r+0x7c>
 200e374:	3009883a 	mov	r4,r6
 200e378:	01408074 	movhi	r5,513
 200e37c:	295d5b04 	addi	r5,r5,30060
 200e380:	2010a4c0 	call	2010a4c <strcmp>
 200e384:	10000a1e 	bne	r2,zero,200e3b0 <_setlocale_r+0x60>
 200e388:	8c800c15 	stw	r18,48(r17)
 200e38c:	8c000d15 	stw	r16,52(r17)
 200e390:	00808074 	movhi	r2,513
 200e394:	109d5b04 	addi	r2,r2,30060
 200e398:	dfc00317 	ldw	ra,12(sp)
 200e39c:	dc800217 	ldw	r18,8(sp)
 200e3a0:	dc400117 	ldw	r17,4(sp)
 200e3a4:	dc000017 	ldw	r16,0(sp)
 200e3a8:	dec00404 	addi	sp,sp,16
 200e3ac:	f800283a 	ret
 200e3b0:	8009883a 	mov	r4,r16
 200e3b4:	01408074 	movhi	r5,513
 200e3b8:	295d4604 	addi	r5,r5,29976
 200e3bc:	2010a4c0 	call	2010a4c <strcmp>
 200e3c0:	103ff126 	beq	r2,zero,200e388 <_setlocale_r+0x38>
 200e3c4:	0005883a 	mov	r2,zero
 200e3c8:	003ff306 	br	200e398 <_setlocale_r+0x48>
 200e3cc:	00808074 	movhi	r2,513
 200e3d0:	109d5b04 	addi	r2,r2,30060
 200e3d4:	dfc00317 	ldw	ra,12(sp)
 200e3d8:	dc800217 	ldw	r18,8(sp)
 200e3dc:	dc400117 	ldw	r17,4(sp)
 200e3e0:	dc000017 	ldw	r16,0(sp)
 200e3e4:	dec00404 	addi	sp,sp,16
 200e3e8:	f800283a 	ret

0200e3ec <__locale_charset>:
 200e3ec:	00808074 	movhi	r2,513
 200e3f0:	109d5c04 	addi	r2,r2,30064
 200e3f4:	f800283a 	ret

0200e3f8 <_localeconv_r>:
 200e3f8:	00808074 	movhi	r2,513
 200e3fc:	109d6004 	addi	r2,r2,30080
 200e400:	f800283a 	ret

0200e404 <setlocale>:
 200e404:	00c080b4 	movhi	r3,514
 200e408:	18e4ee04 	addi	r3,r3,-27720
 200e40c:	2005883a 	mov	r2,r4
 200e410:	19000017 	ldw	r4,0(r3)
 200e414:	280d883a 	mov	r6,r5
 200e418:	100b883a 	mov	r5,r2
 200e41c:	200e3501 	jmpi	200e350 <_setlocale_r>

0200e420 <localeconv>:
 200e420:	00808074 	movhi	r2,513
 200e424:	109d6004 	addi	r2,r2,30080
 200e428:	f800283a 	ret

0200e42c <__smakebuf_r>:
 200e42c:	2880030b 	ldhu	r2,12(r5)
 200e430:	deffed04 	addi	sp,sp,-76
 200e434:	dc401015 	stw	r17,64(sp)
 200e438:	10c0008c 	andi	r3,r2,2
 200e43c:	18ffffcc 	andi	r3,r3,65535
 200e440:	18e0001c 	xori	r3,r3,32768
 200e444:	dc000f15 	stw	r16,60(sp)
 200e448:	dfc01215 	stw	ra,72(sp)
 200e44c:	dc801115 	stw	r18,68(sp)
 200e450:	18e00004 	addi	r3,r3,-32768
 200e454:	2821883a 	mov	r16,r5
 200e458:	2023883a 	mov	r17,r4
 200e45c:	1800381e 	bne	r3,zero,200e540 <__smakebuf_r+0x114>
 200e460:	2940038f 	ldh	r5,14(r5)
 200e464:	28002d16 	blt	r5,zero,200e51c <__smakebuf_r+0xf0>
 200e468:	d80d883a 	mov	r6,sp
 200e46c:	2010ddc0 	call	2010ddc <_fstat_r>
 200e470:	10002916 	blt	r2,zero,200e518 <__smakebuf_r+0xec>
 200e474:	d8800117 	ldw	r2,4(sp)
 200e478:	00e00014 	movui	r3,32768
 200e47c:	10bc000c 	andi	r2,r2,61440
 200e480:	10c03c26 	beq	r2,r3,200e574 <__smakebuf_r+0x148>
 200e484:	80c0030b 	ldhu	r3,12(r16)
 200e488:	18c20014 	ori	r3,r3,2048
 200e48c:	80c0030d 	sth	r3,12(r16)
 200e490:	00c80004 	movi	r3,8192
 200e494:	10c00c1e 	bne	r2,r3,200e4c8 <__smakebuf_r+0x9c>
 200e498:	8140038f 	ldh	r5,14(r16)
 200e49c:	8809883a 	mov	r4,r17
 200e4a0:	2010e440 	call	2010e44 <_isatty_r>
 200e4a4:	10000826 	beq	r2,zero,200e4c8 <__smakebuf_r+0x9c>
 200e4a8:	80c0030b 	ldhu	r3,12(r16)
 200e4ac:	808010c4 	addi	r2,r16,67
 200e4b0:	80800015 	stw	r2,0(r16)
 200e4b4:	18c00054 	ori	r3,r3,1
 200e4b8:	80800415 	stw	r2,16(r16)
 200e4bc:	00800044 	movi	r2,1
 200e4c0:	80c0030d 	sth	r3,12(r16)
 200e4c4:	80800515 	stw	r2,20(r16)
 200e4c8:	04810004 	movi	r18,1024
 200e4cc:	8809883a 	mov	r4,r17
 200e4d0:	900b883a 	mov	r5,r18
 200e4d4:	200e5d40 	call	200e5d4 <_malloc_r>
 200e4d8:	10003026 	beq	r2,zero,200e59c <__smakebuf_r+0x170>
 200e4dc:	80c0030b 	ldhu	r3,12(r16)
 200e4e0:	01008074 	movhi	r4,513
 200e4e4:	21358904 	addi	r4,r4,-10716
 200e4e8:	89000f15 	stw	r4,60(r17)
 200e4ec:	18c02014 	ori	r3,r3,128
 200e4f0:	80c0030d 	sth	r3,12(r16)
 200e4f4:	80800015 	stw	r2,0(r16)
 200e4f8:	80800415 	stw	r2,16(r16)
 200e4fc:	84800515 	stw	r18,20(r16)
 200e500:	dfc01217 	ldw	ra,72(sp)
 200e504:	dc801117 	ldw	r18,68(sp)
 200e508:	dc401017 	ldw	r17,64(sp)
 200e50c:	dc000f17 	ldw	r16,60(sp)
 200e510:	dec01304 	addi	sp,sp,76
 200e514:	f800283a 	ret
 200e518:	8080030b 	ldhu	r2,12(r16)
 200e51c:	10c0200c 	andi	r3,r2,128
 200e520:	18ffffcc 	andi	r3,r3,65535
 200e524:	18e0001c 	xori	r3,r3,32768
 200e528:	18e00004 	addi	r3,r3,-32768
 200e52c:	18000f1e 	bne	r3,zero,200e56c <__smakebuf_r+0x140>
 200e530:	04810004 	movi	r18,1024
 200e534:	10820014 	ori	r2,r2,2048
 200e538:	8080030d 	sth	r2,12(r16)
 200e53c:	003fe306 	br	200e4cc <__smakebuf_r+0xa0>
 200e540:	288010c4 	addi	r2,r5,67
 200e544:	28800015 	stw	r2,0(r5)
 200e548:	28800415 	stw	r2,16(r5)
 200e54c:	00800044 	movi	r2,1
 200e550:	28800515 	stw	r2,20(r5)
 200e554:	dfc01217 	ldw	ra,72(sp)
 200e558:	dc801117 	ldw	r18,68(sp)
 200e55c:	dc401017 	ldw	r17,64(sp)
 200e560:	dc000f17 	ldw	r16,60(sp)
 200e564:	dec01304 	addi	sp,sp,76
 200e568:	f800283a 	ret
 200e56c:	04801004 	movi	r18,64
 200e570:	003ff006 	br	200e534 <__smakebuf_r+0x108>
 200e574:	81000a17 	ldw	r4,40(r16)
 200e578:	00c08074 	movhi	r3,513
 200e57c:	18c27a04 	addi	r3,r3,2536
 200e580:	20ffc01e 	bne	r4,r3,200e484 <__smakebuf_r+0x58>
 200e584:	8080030b 	ldhu	r2,12(r16)
 200e588:	00c10004 	movi	r3,1024
 200e58c:	80c01315 	stw	r3,76(r16)
 200e590:	10c4b03a 	or	r2,r2,r3
 200e594:	8080030d 	sth	r2,12(r16)
 200e598:	003fcb06 	br	200e4c8 <__smakebuf_r+0x9c>
 200e59c:	8080030b 	ldhu	r2,12(r16)
 200e5a0:	10c0800c 	andi	r3,r2,512
 200e5a4:	18ffffcc 	andi	r3,r3,65535
 200e5a8:	18e0001c 	xori	r3,r3,32768
 200e5ac:	18e00004 	addi	r3,r3,-32768
 200e5b0:	183fd31e 	bne	r3,zero,200e500 <__smakebuf_r+0xd4>
 200e5b4:	10800094 	ori	r2,r2,2
 200e5b8:	80c010c4 	addi	r3,r16,67
 200e5bc:	8080030d 	sth	r2,12(r16)
 200e5c0:	00800044 	movi	r2,1
 200e5c4:	80c00015 	stw	r3,0(r16)
 200e5c8:	80c00415 	stw	r3,16(r16)
 200e5cc:	80800515 	stw	r2,20(r16)
 200e5d0:	003fcb06 	br	200e500 <__smakebuf_r+0xd4>

0200e5d4 <_malloc_r>:
 200e5d4:	defff604 	addi	sp,sp,-40
 200e5d8:	dc800215 	stw	r18,8(sp)
 200e5dc:	dfc00915 	stw	ra,36(sp)
 200e5e0:	df000815 	stw	fp,32(sp)
 200e5e4:	ddc00715 	stw	r23,28(sp)
 200e5e8:	dd800615 	stw	r22,24(sp)
 200e5ec:	dd400515 	stw	r21,20(sp)
 200e5f0:	dd000415 	stw	r20,16(sp)
 200e5f4:	dcc00315 	stw	r19,12(sp)
 200e5f8:	dc400115 	stw	r17,4(sp)
 200e5fc:	dc000015 	stw	r16,0(sp)
 200e600:	288002c4 	addi	r2,r5,11
 200e604:	00c00584 	movi	r3,22
 200e608:	2025883a 	mov	r18,r4
 200e60c:	18802b2e 	bgeu	r3,r2,200e6bc <_malloc_r+0xe8>
 200e610:	047ffe04 	movi	r17,-8
 200e614:	1462703a 	and	r17,r2,r17
 200e618:	88002a16 	blt	r17,zero,200e6c4 <_malloc_r+0xf0>
 200e61c:	89402936 	bltu	r17,r5,200e6c4 <_malloc_r+0xf0>
 200e620:	9009883a 	mov	r4,r18
 200e624:	2012b8c0 	call	2012b8c <__malloc_lock>
 200e628:	00807dc4 	movi	r2,503
 200e62c:	14402936 	bltu	r2,r17,200e6d4 <_malloc_r+0x100>
 200e630:	8808d0fa 	srli	r4,r17,3
 200e634:	04c08074 	movhi	r19,513
 200e638:	9cdf0604 	addi	r19,r19,31768
 200e63c:	2105883a 	add	r2,r4,r4
 200e640:	1085883a 	add	r2,r2,r2
 200e644:	1085883a 	add	r2,r2,r2
 200e648:	9885883a 	add	r2,r19,r2
 200e64c:	14000317 	ldw	r16,12(r2)
 200e650:	80815526 	beq	r16,r2,200eba8 <_malloc_r+0x5d4>
 200e654:	81000117 	ldw	r4,4(r16)
 200e658:	00bfff04 	movi	r2,-4
 200e65c:	80c00317 	ldw	r3,12(r16)
 200e660:	2084703a 	and	r2,r4,r2
 200e664:	8085883a 	add	r2,r16,r2
 200e668:	11800117 	ldw	r6,4(r2)
 200e66c:	81400217 	ldw	r5,8(r16)
 200e670:	9009883a 	mov	r4,r18
 200e674:	31800054 	ori	r6,r6,1
 200e678:	11800115 	stw	r6,4(r2)
 200e67c:	28c00315 	stw	r3,12(r5)
 200e680:	19400215 	stw	r5,8(r3)
 200e684:	2012bac0 	call	2012bac <__malloc_unlock>
 200e688:	80800204 	addi	r2,r16,8
 200e68c:	dfc00917 	ldw	ra,36(sp)
 200e690:	df000817 	ldw	fp,32(sp)
 200e694:	ddc00717 	ldw	r23,28(sp)
 200e698:	dd800617 	ldw	r22,24(sp)
 200e69c:	dd400517 	ldw	r21,20(sp)
 200e6a0:	dd000417 	ldw	r20,16(sp)
 200e6a4:	dcc00317 	ldw	r19,12(sp)
 200e6a8:	dc800217 	ldw	r18,8(sp)
 200e6ac:	dc400117 	ldw	r17,4(sp)
 200e6b0:	dc000017 	ldw	r16,0(sp)
 200e6b4:	dec00a04 	addi	sp,sp,40
 200e6b8:	f800283a 	ret
 200e6bc:	04400404 	movi	r17,16
 200e6c0:	897fd72e 	bgeu	r17,r5,200e620 <_malloc_r+0x4c>
 200e6c4:	00800304 	movi	r2,12
 200e6c8:	90800015 	stw	r2,0(r18)
 200e6cc:	0005883a 	mov	r2,zero
 200e6d0:	003fee06 	br	200e68c <_malloc_r+0xb8>
 200e6d4:	8808d27a 	srli	r4,r17,9
 200e6d8:	20007126 	beq	r4,zero,200e8a0 <_malloc_r+0x2cc>
 200e6dc:	00800104 	movi	r2,4
 200e6e0:	1100eb36 	bltu	r2,r4,200ea90 <_malloc_r+0x4bc>
 200e6e4:	8808d1ba 	srli	r4,r17,6
 200e6e8:	21000e04 	addi	r4,r4,56
 200e6ec:	210b883a 	add	r5,r4,r4
 200e6f0:	294b883a 	add	r5,r5,r5
 200e6f4:	294b883a 	add	r5,r5,r5
 200e6f8:	04c08074 	movhi	r19,513
 200e6fc:	9cdf0604 	addi	r19,r19,31768
 200e700:	994b883a 	add	r5,r19,r5
 200e704:	2c000317 	ldw	r16,12(r5)
 200e708:	2c000e26 	beq	r5,r16,200e744 <_malloc_r+0x170>
 200e70c:	80c00117 	ldw	r3,4(r16)
 200e710:	01ffff04 	movi	r7,-4
 200e714:	018003c4 	movi	r6,15
 200e718:	19c6703a 	and	r3,r3,r7
 200e71c:	1c45c83a 	sub	r2,r3,r17
 200e720:	30800716 	blt	r6,r2,200e740 <_malloc_r+0x16c>
 200e724:	1000610e 	bge	r2,zero,200e8ac <_malloc_r+0x2d8>
 200e728:	84000317 	ldw	r16,12(r16)
 200e72c:	2c000526 	beq	r5,r16,200e744 <_malloc_r+0x170>
 200e730:	80c00117 	ldw	r3,4(r16)
 200e734:	19c6703a 	and	r3,r3,r7
 200e738:	1c45c83a 	sub	r2,r3,r17
 200e73c:	30bff90e 	bge	r6,r2,200e724 <_malloc_r+0x150>
 200e740:	213fffc4 	addi	r4,r4,-1
 200e744:	21000044 	addi	r4,r4,1
 200e748:	9c000417 	ldw	r16,16(r19)
 200e74c:	00c08074 	movhi	r3,513
 200e750:	18df0604 	addi	r3,r3,31768
 200e754:	1a400204 	addi	r9,r3,8
 200e758:	8240ff26 	beq	r16,r9,200eb58 <_malloc_r+0x584>
 200e75c:	81400117 	ldw	r5,4(r16)
 200e760:	00bfff04 	movi	r2,-4
 200e764:	018003c4 	movi	r6,15
 200e768:	2884703a 	and	r2,r5,r2
 200e76c:	144bc83a 	sub	r5,r2,r17
 200e770:	3140ea16 	blt	r6,r5,200eb1c <_malloc_r+0x548>
 200e774:	1a400515 	stw	r9,20(r3)
 200e778:	1a400415 	stw	r9,16(r3)
 200e77c:	2800570e 	bge	r5,zero,200e8dc <_malloc_r+0x308>
 200e780:	01407fc4 	movi	r5,511
 200e784:	2880ca36 	bltu	r5,r2,200eab0 <_malloc_r+0x4dc>
 200e788:	1004d0fa 	srli	r2,r2,3
 200e78c:	02000044 	movi	r8,1
 200e790:	19c00117 	ldw	r7,4(r3)
 200e794:	108b883a 	add	r5,r2,r2
 200e798:	294b883a 	add	r5,r5,r5
 200e79c:	1005d0ba 	srai	r2,r2,2
 200e7a0:	294b883a 	add	r5,r5,r5
 200e7a4:	28cb883a 	add	r5,r5,r3
 200e7a8:	29800217 	ldw	r6,8(r5)
 200e7ac:	4084983a 	sll	r2,r8,r2
 200e7b0:	81400315 	stw	r5,12(r16)
 200e7b4:	81800215 	stw	r6,8(r16)
 200e7b8:	11c4b03a 	or	r2,r2,r7
 200e7bc:	18800115 	stw	r2,4(r3)
 200e7c0:	2c000215 	stw	r16,8(r5)
 200e7c4:	34000315 	stw	r16,12(r6)
 200e7c8:	200bd0ba 	srai	r5,r4,2
 200e7cc:	00c00044 	movi	r3,1
 200e7d0:	194a983a 	sll	r5,r3,r5
 200e7d4:	11404936 	bltu	r2,r5,200e8fc <_malloc_r+0x328>
 200e7d8:	1146703a 	and	r3,r2,r5
 200e7dc:	18000a1e 	bne	r3,zero,200e808 <_malloc_r+0x234>
 200e7e0:	00ffff04 	movi	r3,-4
 200e7e4:	294b883a 	add	r5,r5,r5
 200e7e8:	20c8703a 	and	r4,r4,r3
 200e7ec:	1146703a 	and	r3,r2,r5
 200e7f0:	21000104 	addi	r4,r4,4
 200e7f4:	1800041e 	bne	r3,zero,200e808 <_malloc_r+0x234>
 200e7f8:	294b883a 	add	r5,r5,r5
 200e7fc:	1146703a 	and	r3,r2,r5
 200e800:	21000104 	addi	r4,r4,4
 200e804:	183ffc26 	beq	r3,zero,200e7f8 <_malloc_r+0x224>
 200e808:	023fff04 	movi	r8,-4
 200e80c:	01c003c4 	movi	r7,15
 200e810:	2105883a 	add	r2,r4,r4
 200e814:	1085883a 	add	r2,r2,r2
 200e818:	1085883a 	add	r2,r2,r2
 200e81c:	9899883a 	add	r12,r19,r2
 200e820:	62800304 	addi	r10,r12,12
 200e824:	2017883a 	mov	r11,r4
 200e828:	54000017 	ldw	r16,0(r10)
 200e82c:	51bffd04 	addi	r6,r10,-12
 200e830:	8180041e 	bne	r16,r6,200e844 <_malloc_r+0x270>
 200e834:	0000ca06 	br	200eb60 <_malloc_r+0x58c>
 200e838:	10001c0e 	bge	r2,zero,200e8ac <_malloc_r+0x2d8>
 200e83c:	84000317 	ldw	r16,12(r16)
 200e840:	8180c726 	beq	r16,r6,200eb60 <_malloc_r+0x58c>
 200e844:	80c00117 	ldw	r3,4(r16)
 200e848:	1a06703a 	and	r3,r3,r8
 200e84c:	1c45c83a 	sub	r2,r3,r17
 200e850:	38bff90e 	bge	r7,r2,200e838 <_malloc_r+0x264>
 200e854:	81000317 	ldw	r4,12(r16)
 200e858:	81400217 	ldw	r5,8(r16)
 200e85c:	8447883a 	add	r3,r16,r17
 200e860:	8c400054 	ori	r17,r17,1
 200e864:	29000315 	stw	r4,12(r5)
 200e868:	21400215 	stw	r5,8(r4)
 200e86c:	84400115 	stw	r17,4(r16)
 200e870:	1889883a 	add	r4,r3,r2
 200e874:	11400054 	ori	r5,r2,1
 200e878:	98c00515 	stw	r3,20(r19)
 200e87c:	98c00415 	stw	r3,16(r19)
 200e880:	20800015 	stw	r2,0(r4)
 200e884:	1a400315 	stw	r9,12(r3)
 200e888:	1a400215 	stw	r9,8(r3)
 200e88c:	19400115 	stw	r5,4(r3)
 200e890:	9009883a 	mov	r4,r18
 200e894:	2012bac0 	call	2012bac <__malloc_unlock>
 200e898:	80800204 	addi	r2,r16,8
 200e89c:	003f7b06 	br	200e68c <_malloc_r+0xb8>
 200e8a0:	8808d0fa 	srli	r4,r17,3
 200e8a4:	210b883a 	add	r5,r4,r4
 200e8a8:	003f9106 	br	200e6f0 <_malloc_r+0x11c>
 200e8ac:	80c7883a 	add	r3,r16,r3
 200e8b0:	19400117 	ldw	r5,4(r3)
 200e8b4:	80800317 	ldw	r2,12(r16)
 200e8b8:	81000217 	ldw	r4,8(r16)
 200e8bc:	29400054 	ori	r5,r5,1
 200e8c0:	19400115 	stw	r5,4(r3)
 200e8c4:	20800315 	stw	r2,12(r4)
 200e8c8:	11000215 	stw	r4,8(r2)
 200e8cc:	9009883a 	mov	r4,r18
 200e8d0:	2012bac0 	call	2012bac <__malloc_unlock>
 200e8d4:	80800204 	addi	r2,r16,8
 200e8d8:	003f6c06 	br	200e68c <_malloc_r+0xb8>
 200e8dc:	8085883a 	add	r2,r16,r2
 200e8e0:	10c00117 	ldw	r3,4(r2)
 200e8e4:	9009883a 	mov	r4,r18
 200e8e8:	18c00054 	ori	r3,r3,1
 200e8ec:	10c00115 	stw	r3,4(r2)
 200e8f0:	2012bac0 	call	2012bac <__malloc_unlock>
 200e8f4:	80800204 	addi	r2,r16,8
 200e8f8:	003f6406 	br	200e68c <_malloc_r+0xb8>
 200e8fc:	9c000217 	ldw	r16,8(r19)
 200e900:	00bfff04 	movi	r2,-4
 200e904:	85400117 	ldw	r21,4(r16)
 200e908:	a8aa703a 	and	r21,r21,r2
 200e90c:	ac400336 	bltu	r21,r17,200e91c <_malloc_r+0x348>
 200e910:	ac45c83a 	sub	r2,r21,r17
 200e914:	00c003c4 	movi	r3,15
 200e918:	18805316 	blt	r3,r2,200ea68 <_malloc_r+0x494>
 200e91c:	d5e01717 	ldw	r23,-32676(gp)
 200e920:	d0e00317 	ldw	r3,-32756(gp)
 200e924:	00bfffc4 	movi	r2,-1
 200e928:	8579883a 	add	fp,r16,r21
 200e92c:	8def883a 	add	r23,r17,r23
 200e930:	1880d226 	beq	r3,r2,200ec7c <_malloc_r+0x6a8>
 200e934:	bdc403c4 	addi	r23,r23,4111
 200e938:	00bc0004 	movi	r2,-4096
 200e93c:	b8ae703a 	and	r23,r23,r2
 200e940:	9009883a 	mov	r4,r18
 200e944:	b80b883a 	mov	r5,r23
 200e948:	20108a80 	call	20108a8 <_sbrk_r>
 200e94c:	1029883a 	mov	r20,r2
 200e950:	00bfffc4 	movi	r2,-1
 200e954:	a080d126 	beq	r20,r2,200ec9c <_malloc_r+0x6c8>
 200e958:	a7009f36 	bltu	r20,fp,200ebd8 <_malloc_r+0x604>
 200e95c:	058080b4 	movhi	r22,514
 200e960:	b5a51104 	addi	r22,r22,-27580
 200e964:	b0800017 	ldw	r2,0(r22)
 200e968:	b885883a 	add	r2,r23,r2
 200e96c:	b0800015 	stw	r2,0(r22)
 200e970:	e500cf26 	beq	fp,r20,200ecb0 <_malloc_r+0x6dc>
 200e974:	d1200317 	ldw	r4,-32756(gp)
 200e978:	00ffffc4 	movi	r3,-1
 200e97c:	20c0e026 	beq	r4,r3,200ed00 <_malloc_r+0x72c>
 200e980:	a739c83a 	sub	fp,r20,fp
 200e984:	1705883a 	add	r2,r2,fp
 200e988:	b0800015 	stw	r2,0(r22)
 200e98c:	a08001cc 	andi	r2,r20,7
 200e990:	1000a526 	beq	r2,zero,200ec28 <_malloc_r+0x654>
 200e994:	a0a9c83a 	sub	r20,r20,r2
 200e998:	00c40204 	movi	r3,4104
 200e99c:	a5000204 	addi	r20,r20,8
 200e9a0:	1885c83a 	sub	r2,r3,r2
 200e9a4:	a5c7883a 	add	r3,r20,r23
 200e9a8:	18c3ffcc 	andi	r3,r3,4095
 200e9ac:	10efc83a 	sub	r23,r2,r3
 200e9b0:	9009883a 	mov	r4,r18
 200e9b4:	b80b883a 	mov	r5,r23
 200e9b8:	20108a80 	call	20108a8 <_sbrk_r>
 200e9bc:	00ffffc4 	movi	r3,-1
 200e9c0:	10c0cc26 	beq	r2,r3,200ecf4 <_malloc_r+0x720>
 200e9c4:	1505c83a 	sub	r2,r2,r20
 200e9c8:	b887883a 	add	r3,r23,r2
 200e9cc:	18c00054 	ori	r3,r3,1
 200e9d0:	b0800017 	ldw	r2,0(r22)
 200e9d4:	9d000215 	stw	r20,8(r19)
 200e9d8:	a0c00115 	stw	r3,4(r20)
 200e9dc:	b885883a 	add	r2,r23,r2
 200e9e0:	b0800015 	stw	r2,0(r22)
 200e9e4:	84c00e26 	beq	r16,r19,200ea20 <_malloc_r+0x44c>
 200e9e8:	00c003c4 	movi	r3,15
 200e9ec:	1d40902e 	bgeu	r3,r21,200ec30 <_malloc_r+0x65c>
 200e9f0:	ad7ffd04 	addi	r21,r21,-12
 200e9f4:	013ffe04 	movi	r4,-8
 200e9f8:	a908703a 	and	r4,r21,r4
 200e9fc:	810b883a 	add	r5,r16,r4
 200ea00:	01800144 	movi	r6,5
 200ea04:	29800115 	stw	r6,4(r5)
 200ea08:	29800215 	stw	r6,8(r5)
 200ea0c:	81400117 	ldw	r5,4(r16)
 200ea10:	2940004c 	andi	r5,r5,1
 200ea14:	214ab03a 	or	r5,r4,r5
 200ea18:	81400115 	stw	r5,4(r16)
 200ea1c:	1900ae36 	bltu	r3,r4,200ecd8 <_malloc_r+0x704>
 200ea20:	d0e01617 	ldw	r3,-32680(gp)
 200ea24:	1880012e 	bgeu	r3,r2,200ea2c <_malloc_r+0x458>
 200ea28:	d0a01615 	stw	r2,-32680(gp)
 200ea2c:	d0e01517 	ldw	r3,-32684(gp)
 200ea30:	9c000217 	ldw	r16,8(r19)
 200ea34:	1880012e 	bgeu	r3,r2,200ea3c <_malloc_r+0x468>
 200ea38:	d0a01515 	stw	r2,-32684(gp)
 200ea3c:	80c00117 	ldw	r3,4(r16)
 200ea40:	00bfff04 	movi	r2,-4
 200ea44:	1886703a 	and	r3,r3,r2
 200ea48:	1c45c83a 	sub	r2,r3,r17
 200ea4c:	1c400236 	bltu	r3,r17,200ea58 <_malloc_r+0x484>
 200ea50:	00c003c4 	movi	r3,15
 200ea54:	18800416 	blt	r3,r2,200ea68 <_malloc_r+0x494>
 200ea58:	9009883a 	mov	r4,r18
 200ea5c:	2012bac0 	call	2012bac <__malloc_unlock>
 200ea60:	0005883a 	mov	r2,zero
 200ea64:	003f0906 	br	200e68c <_malloc_r+0xb8>
 200ea68:	88c00054 	ori	r3,r17,1
 200ea6c:	10800054 	ori	r2,r2,1
 200ea70:	80c00115 	stw	r3,4(r16)
 200ea74:	8463883a 	add	r17,r16,r17
 200ea78:	88800115 	stw	r2,4(r17)
 200ea7c:	9009883a 	mov	r4,r18
 200ea80:	9c400215 	stw	r17,8(r19)
 200ea84:	2012bac0 	call	2012bac <__malloc_unlock>
 200ea88:	80800204 	addi	r2,r16,8
 200ea8c:	003eff06 	br	200e68c <_malloc_r+0xb8>
 200ea90:	00800504 	movi	r2,20
 200ea94:	1100492e 	bgeu	r2,r4,200ebbc <_malloc_r+0x5e8>
 200ea98:	00801504 	movi	r2,84
 200ea9c:	11005c36 	bltu	r2,r4,200ec10 <_malloc_r+0x63c>
 200eaa0:	8808d33a 	srli	r4,r17,12
 200eaa4:	21001b84 	addi	r4,r4,110
 200eaa8:	210b883a 	add	r5,r4,r4
 200eaac:	003f1006 	br	200e6f0 <_malloc_r+0x11c>
 200eab0:	1006d27a 	srli	r3,r2,9
 200eab4:	01400104 	movi	r5,4
 200eab8:	28c0432e 	bgeu	r5,r3,200ebc8 <_malloc_r+0x5f4>
 200eabc:	01400504 	movi	r5,20
 200eac0:	28c07036 	bltu	r5,r3,200ec84 <_malloc_r+0x6b0>
 200eac4:	194016c4 	addi	r5,r3,91
 200eac8:	294d883a 	add	r6,r5,r5
 200eacc:	318d883a 	add	r6,r6,r6
 200ead0:	318d883a 	add	r6,r6,r6
 200ead4:	998d883a 	add	r6,r19,r6
 200ead8:	30c00217 	ldw	r3,8(r6)
 200eadc:	01c08074 	movhi	r7,513
 200eae0:	39df0604 	addi	r7,r7,31768
 200eae4:	19805726 	beq	r3,r6,200ec44 <_malloc_r+0x670>
 200eae8:	01ffff04 	movi	r7,-4
 200eaec:	19400117 	ldw	r5,4(r3)
 200eaf0:	29ca703a 	and	r5,r5,r7
 200eaf4:	1140022e 	bgeu	r2,r5,200eb00 <_malloc_r+0x52c>
 200eaf8:	18c00217 	ldw	r3,8(r3)
 200eafc:	30fffb1e 	bne	r6,r3,200eaec <_malloc_r+0x518>
 200eb00:	19400317 	ldw	r5,12(r3)
 200eb04:	98800117 	ldw	r2,4(r19)
 200eb08:	81400315 	stw	r5,12(r16)
 200eb0c:	80c00215 	stw	r3,8(r16)
 200eb10:	2c000215 	stw	r16,8(r5)
 200eb14:	1c000315 	stw	r16,12(r3)
 200eb18:	003f2b06 	br	200e7c8 <_malloc_r+0x1f4>
 200eb1c:	8445883a 	add	r2,r16,r17
 200eb20:	8c400054 	ori	r17,r17,1
 200eb24:	18800515 	stw	r2,20(r3)
 200eb28:	18800415 	stw	r2,16(r3)
 200eb2c:	29000054 	ori	r4,r5,1
 200eb30:	1147883a 	add	r3,r2,r5
 200eb34:	84400115 	stw	r17,4(r16)
 200eb38:	11000115 	stw	r4,4(r2)
 200eb3c:	12400315 	stw	r9,12(r2)
 200eb40:	12400215 	stw	r9,8(r2)
 200eb44:	19400015 	stw	r5,0(r3)
 200eb48:	9009883a 	mov	r4,r18
 200eb4c:	2012bac0 	call	2012bac <__malloc_unlock>
 200eb50:	80800204 	addi	r2,r16,8
 200eb54:	003ecd06 	br	200e68c <_malloc_r+0xb8>
 200eb58:	18800117 	ldw	r2,4(r3)
 200eb5c:	003f1a06 	br	200e7c8 <_malloc_r+0x1f4>
 200eb60:	5ac00044 	addi	r11,r11,1
 200eb64:	588000cc 	andi	r2,r11,3
 200eb68:	52800204 	addi	r10,r10,8
 200eb6c:	103f2e1e 	bne	r2,zero,200e828 <_malloc_r+0x254>
 200eb70:	20c000cc 	andi	r3,r4,3
 200eb74:	60bffe04 	addi	r2,r12,-8
 200eb78:	18006f26 	beq	r3,zero,200ed38 <_malloc_r+0x764>
 200eb7c:	63000017 	ldw	r12,0(r12)
 200eb80:	213fffc4 	addi	r4,r4,-1
 200eb84:	60bffa26 	beq	r12,r2,200eb70 <_malloc_r+0x59c>
 200eb88:	98800117 	ldw	r2,4(r19)
 200eb8c:	294b883a 	add	r5,r5,r5
 200eb90:	117f5a36 	bltu	r2,r5,200e8fc <_malloc_r+0x328>
 200eb94:	283f5926 	beq	r5,zero,200e8fc <_malloc_r+0x328>
 200eb98:	1146703a 	and	r3,r2,r5
 200eb9c:	18001626 	beq	r3,zero,200ebf8 <_malloc_r+0x624>
 200eba0:	5809883a 	mov	r4,r11
 200eba4:	003f1a06 	br	200e810 <_malloc_r+0x23c>
 200eba8:	80800204 	addi	r2,r16,8
 200ebac:	84000517 	ldw	r16,20(r16)
 200ebb0:	143ea81e 	bne	r2,r16,200e654 <_malloc_r+0x80>
 200ebb4:	21000084 	addi	r4,r4,2
 200ebb8:	003ee306 	br	200e748 <_malloc_r+0x174>
 200ebbc:	210016c4 	addi	r4,r4,91
 200ebc0:	210b883a 	add	r5,r4,r4
 200ebc4:	003eca06 	br	200e6f0 <_malloc_r+0x11c>
 200ebc8:	100ad1ba 	srli	r5,r2,6
 200ebcc:	29400e04 	addi	r5,r5,56
 200ebd0:	294d883a 	add	r6,r5,r5
 200ebd4:	003fbd06 	br	200eacc <_malloc_r+0x4f8>
 200ebd8:	84ff6026 	beq	r16,r19,200e95c <_malloc_r+0x388>
 200ebdc:	00808074 	movhi	r2,513
 200ebe0:	109f0604 	addi	r2,r2,31768
 200ebe4:	14000217 	ldw	r16,8(r2)
 200ebe8:	00bfff04 	movi	r2,-4
 200ebec:	80c00117 	ldw	r3,4(r16)
 200ebf0:	1886703a 	and	r3,r3,r2
 200ebf4:	003f9406 	br	200ea48 <_malloc_r+0x474>
 200ebf8:	294b883a 	add	r5,r5,r5
 200ebfc:	1146703a 	and	r3,r2,r5
 200ec00:	5ac00104 	addi	r11,r11,4
 200ec04:	183ffc26 	beq	r3,zero,200ebf8 <_malloc_r+0x624>
 200ec08:	5809883a 	mov	r4,r11
 200ec0c:	003f0006 	br	200e810 <_malloc_r+0x23c>
 200ec10:	00805504 	movi	r2,340
 200ec14:	11001336 	bltu	r2,r4,200ec64 <_malloc_r+0x690>
 200ec18:	8808d3fa 	srli	r4,r17,15
 200ec1c:	21001dc4 	addi	r4,r4,119
 200ec20:	210b883a 	add	r5,r4,r4
 200ec24:	003eb206 	br	200e6f0 <_malloc_r+0x11c>
 200ec28:	00840004 	movi	r2,4096
 200ec2c:	003f5d06 	br	200e9a4 <_malloc_r+0x3d0>
 200ec30:	00800044 	movi	r2,1
 200ec34:	a0800115 	stw	r2,4(r20)
 200ec38:	a021883a 	mov	r16,r20
 200ec3c:	0007883a 	mov	r3,zero
 200ec40:	003f8106 	br	200ea48 <_malloc_r+0x474>
 200ec44:	280bd0ba 	srai	r5,r5,2
 200ec48:	01800044 	movi	r6,1
 200ec4c:	38800117 	ldw	r2,4(r7)
 200ec50:	314c983a 	sll	r6,r6,r5
 200ec54:	180b883a 	mov	r5,r3
 200ec58:	3084b03a 	or	r2,r6,r2
 200ec5c:	38800115 	stw	r2,4(r7)
 200ec60:	003fa906 	br	200eb08 <_malloc_r+0x534>
 200ec64:	00815504 	movi	r2,1364
 200ec68:	11001836 	bltu	r2,r4,200eccc <_malloc_r+0x6f8>
 200ec6c:	8808d4ba 	srli	r4,r17,18
 200ec70:	21001f04 	addi	r4,r4,124
 200ec74:	210b883a 	add	r5,r4,r4
 200ec78:	003e9d06 	br	200e6f0 <_malloc_r+0x11c>
 200ec7c:	bdc00404 	addi	r23,r23,16
 200ec80:	003f2f06 	br	200e940 <_malloc_r+0x36c>
 200ec84:	01401504 	movi	r5,84
 200ec88:	28c01f36 	bltu	r5,r3,200ed08 <_malloc_r+0x734>
 200ec8c:	100ad33a 	srli	r5,r2,12
 200ec90:	29401b84 	addi	r5,r5,110
 200ec94:	294d883a 	add	r6,r5,r5
 200ec98:	003f8c06 	br	200eacc <_malloc_r+0x4f8>
 200ec9c:	9c000217 	ldw	r16,8(r19)
 200eca0:	00bfff04 	movi	r2,-4
 200eca4:	80c00117 	ldw	r3,4(r16)
 200eca8:	1886703a 	and	r3,r3,r2
 200ecac:	003f6606 	br	200ea48 <_malloc_r+0x474>
 200ecb0:	e0c3ffcc 	andi	r3,fp,4095
 200ecb4:	183f2f1e 	bne	r3,zero,200e974 <_malloc_r+0x3a0>
 200ecb8:	98c00217 	ldw	r3,8(r19)
 200ecbc:	bd49883a 	add	r4,r23,r21
 200ecc0:	21000054 	ori	r4,r4,1
 200ecc4:	19000115 	stw	r4,4(r3)
 200ecc8:	003f5506 	br	200ea20 <_malloc_r+0x44c>
 200eccc:	01403f04 	movi	r5,252
 200ecd0:	01001f84 	movi	r4,126
 200ecd4:	003e8606 	br	200e6f0 <_malloc_r+0x11c>
 200ecd8:	9009883a 	mov	r4,r18
 200ecdc:	81400204 	addi	r5,r16,8
 200ece0:	200da3c0 	call	200da3c <_free_r>
 200ece4:	008080b4 	movhi	r2,514
 200ece8:	10a51104 	addi	r2,r2,-27580
 200ecec:	10800017 	ldw	r2,0(r2)
 200ecf0:	003f4b06 	br	200ea20 <_malloc_r+0x44c>
 200ecf4:	00c00044 	movi	r3,1
 200ecf8:	002f883a 	mov	r23,zero
 200ecfc:	003f3406 	br	200e9d0 <_malloc_r+0x3fc>
 200ed00:	d5200315 	stw	r20,-32756(gp)
 200ed04:	003f2106 	br	200e98c <_malloc_r+0x3b8>
 200ed08:	01405504 	movi	r5,340
 200ed0c:	28c00436 	bltu	r5,r3,200ed20 <_malloc_r+0x74c>
 200ed10:	100ad3fa 	srli	r5,r2,15
 200ed14:	29401dc4 	addi	r5,r5,119
 200ed18:	294d883a 	add	r6,r5,r5
 200ed1c:	003f6b06 	br	200eacc <_malloc_r+0x4f8>
 200ed20:	01415504 	movi	r5,1364
 200ed24:	28c00936 	bltu	r5,r3,200ed4c <_malloc_r+0x778>
 200ed28:	100ad4ba 	srli	r5,r2,18
 200ed2c:	29401f04 	addi	r5,r5,124
 200ed30:	294d883a 	add	r6,r5,r5
 200ed34:	003f6506 	br	200eacc <_malloc_r+0x4f8>
 200ed38:	98800117 	ldw	r2,4(r19)
 200ed3c:	0146303a 	nor	r3,zero,r5
 200ed40:	1884703a 	and	r2,r3,r2
 200ed44:	98800115 	stw	r2,4(r19)
 200ed48:	003f9006 	br	200eb8c <_malloc_r+0x5b8>
 200ed4c:	01803f04 	movi	r6,252
 200ed50:	01401f84 	movi	r5,126
 200ed54:	003f5d06 	br	200eacc <_malloc_r+0x4f8>

0200ed58 <memchr>:
 200ed58:	008000c4 	movi	r2,3
 200ed5c:	29403fcc 	andi	r5,r5,255
 200ed60:	1180282e 	bgeu	r2,r6,200ee04 <memchr+0xac>
 200ed64:	2086703a 	and	r3,r4,r2
 200ed68:	1800351e 	bne	r3,zero,200ee40 <memchr+0xe8>
 200ed6c:	2816923a 	slli	r11,r5,8
 200ed70:	2093883a 	add	r9,r4,r2
 200ed74:	22000084 	addi	r8,r4,2
 200ed78:	5957883a 	add	r11,r11,r5
 200ed7c:	5816923a 	slli	r11,r11,8
 200ed80:	20c00044 	addi	r3,r4,1
 200ed84:	037fbff4 	movhi	r13,65279
 200ed88:	6b7fbfc4 	addi	r13,r13,-257
 200ed8c:	5957883a 	add	r11,r11,r5
 200ed90:	5816923a 	slli	r11,r11,8
 200ed94:	03202074 	movhi	r12,32897
 200ed98:	63202004 	addi	r12,r12,-32640
 200ed9c:	101d883a 	mov	r14,r2
 200eda0:	5957883a 	add	r11,r11,r5
 200eda4:	21c00017 	ldw	r7,0(r4)
 200eda8:	31bfff04 	addi	r6,r6,-4
 200edac:	1805883a 	mov	r2,r3
 200edb0:	3acef03a 	xor	r7,r7,r11
 200edb4:	3b55883a 	add	r10,r7,r13
 200edb8:	01ce303a 	nor	r7,zero,r7
 200edbc:	51ce703a 	and	r7,r10,r7
 200edc0:	3b0e703a 	and	r7,r7,r12
 200edc4:	38000a26 	beq	r7,zero,200edf0 <memchr+0x98>
 200edc8:	21c00003 	ldbu	r7,0(r4)
 200edcc:	39401e26 	beq	r7,r5,200ee48 <memchr+0xf0>
 200edd0:	19c00003 	ldbu	r7,0(r3)
 200edd4:	39401926 	beq	r7,r5,200ee3c <memchr+0xe4>
 200edd8:	41c00003 	ldbu	r7,0(r8)
 200eddc:	4005883a 	mov	r2,r8
 200ede0:	39401626 	beq	r7,r5,200ee3c <memchr+0xe4>
 200ede4:	49c00003 	ldbu	r7,0(r9)
 200ede8:	4805883a 	mov	r2,r9
 200edec:	39401326 	beq	r7,r5,200ee3c <memchr+0xe4>
 200edf0:	21000104 	addi	r4,r4,4
 200edf4:	4a400104 	addi	r9,r9,4
 200edf8:	42000104 	addi	r8,r8,4
 200edfc:	18c00104 	addi	r3,r3,4
 200ee00:	71bfe836 	bltu	r14,r6,200eda4 <memchr+0x4c>
 200ee04:	2005883a 	mov	r2,r4
 200ee08:	30000a26 	beq	r6,zero,200ee34 <memchr+0xdc>
 200ee0c:	10c00003 	ldbu	r3,0(r2)
 200ee10:	19400a26 	beq	r3,r5,200ee3c <memchr+0xe4>
 200ee14:	10c00044 	addi	r3,r2,1
 200ee18:	118d883a 	add	r6,r2,r6
 200ee1c:	00000306 	br	200ee2c <memchr+0xd4>
 200ee20:	11000003 	ldbu	r4,0(r2)
 200ee24:	18c00044 	addi	r3,r3,1
 200ee28:	21400426 	beq	r4,r5,200ee3c <memchr+0xe4>
 200ee2c:	1805883a 	mov	r2,r3
 200ee30:	19bffb1e 	bne	r3,r6,200ee20 <memchr+0xc8>
 200ee34:	0005883a 	mov	r2,zero
 200ee38:	f800283a 	ret
 200ee3c:	f800283a 	ret
 200ee40:	2005883a 	mov	r2,r4
 200ee44:	003ff106 	br	200ee0c <memchr+0xb4>
 200ee48:	2005883a 	mov	r2,r4
 200ee4c:	f800283a 	ret

0200ee50 <memcpy>:
 200ee50:	defffb04 	addi	sp,sp,-20
 200ee54:	dc000015 	stw	r16,0(sp)
 200ee58:	dfc00415 	stw	ra,16(sp)
 200ee5c:	dcc00315 	stw	r19,12(sp)
 200ee60:	dc800215 	stw	r18,8(sp)
 200ee64:	dc400115 	stw	r17,4(sp)
 200ee68:	00c003c4 	movi	r3,15
 200ee6c:	2021883a 	mov	r16,r4
 200ee70:	3005883a 	mov	r2,r6
 200ee74:	1980032e 	bgeu	r3,r6,200ee84 <memcpy+0x34>
 200ee78:	2906b03a 	or	r3,r5,r4
 200ee7c:	18c000cc 	andi	r3,r3,3
 200ee80:	18001026 	beq	r3,zero,200eec4 <memcpy+0x74>
 200ee84:	8007883a 	mov	r3,r16
 200ee88:	288f883a 	add	r7,r5,r2
 200ee8c:	10000526 	beq	r2,zero,200eea4 <memcpy+0x54>
 200ee90:	29800003 	ldbu	r6,0(r5)
 200ee94:	18c00044 	addi	r3,r3,1
 200ee98:	29400044 	addi	r5,r5,1
 200ee9c:	19bfffc5 	stb	r6,-1(r3)
 200eea0:	29fffb1e 	bne	r5,r7,200ee90 <memcpy+0x40>
 200eea4:	8005883a 	mov	r2,r16
 200eea8:	dfc00417 	ldw	ra,16(sp)
 200eeac:	dcc00317 	ldw	r19,12(sp)
 200eeb0:	dc800217 	ldw	r18,8(sp)
 200eeb4:	dc400117 	ldw	r17,4(sp)
 200eeb8:	dc000017 	ldw	r16,0(sp)
 200eebc:	dec00504 	addi	sp,sp,20
 200eec0:	f800283a 	ret
 200eec4:	32bffc04 	addi	r10,r6,-16
 200eec8:	5014d13a 	srli	r10,r10,4
 200eecc:	20800404 	addi	r2,r4,16
 200eed0:	2007883a 	mov	r3,r4
 200eed4:	5008913a 	slli	r4,r10,4
 200eed8:	280f883a 	mov	r7,r5
 200eedc:	1105883a 	add	r2,r2,r4
 200eee0:	3a000017 	ldw	r8,0(r7)
 200eee4:	18c00404 	addi	r3,r3,16
 200eee8:	39c00404 	addi	r7,r7,16
 200eeec:	1a3ffc15 	stw	r8,-16(r3)
 200eef0:	3a3ffd17 	ldw	r8,-12(r7)
 200eef4:	1a3ffd15 	stw	r8,-12(r3)
 200eef8:	3a3ffe17 	ldw	r8,-8(r7)
 200eefc:	1a3ffe15 	stw	r8,-8(r3)
 200ef00:	3a3fff17 	ldw	r8,-4(r7)
 200ef04:	1a3fff15 	stw	r8,-4(r3)
 200ef08:	18bff51e 	bne	r3,r2,200eee0 <memcpy+0x90>
 200ef0c:	52800044 	addi	r10,r10,1
 200ef10:	5014913a 	slli	r10,r10,4
 200ef14:	308003cc 	andi	r2,r6,15
 200ef18:	010000c4 	movi	r4,3
 200ef1c:	8287883a 	add	r3,r16,r10
 200ef20:	2a95883a 	add	r10,r5,r10
 200ef24:	2080182e 	bgeu	r4,r2,200ef88 <memcpy+0x138>
 200ef28:	147fff04 	addi	r17,r2,-4
 200ef2c:	8808d0ba 	srli	r4,r17,2
 200ef30:	1a400104 	addi	r9,r3,4
 200ef34:	180d883a 	mov	r6,r3
 200ef38:	2105883a 	add	r2,r4,r4
 200ef3c:	1085883a 	add	r2,r2,r2
 200ef40:	4893883a 	add	r9,r9,r2
 200ef44:	500f883a 	mov	r7,r10
 200ef48:	3a000017 	ldw	r8,0(r7)
 200ef4c:	31800104 	addi	r6,r6,4
 200ef50:	39c00104 	addi	r7,r7,4
 200ef54:	323fff15 	stw	r8,-4(r6)
 200ef58:	327ffb1e 	bne	r6,r9,200ef48 <memcpy+0xf8>
 200ef5c:	20800044 	addi	r2,r4,1
 200ef60:	1085883a 	add	r2,r2,r2
 200ef64:	1085883a 	add	r2,r2,r2
 200ef68:	017fff04 	movi	r5,-4
 200ef6c:	18a5883a 	add	r18,r3,r2
 200ef70:	50a7883a 	add	r19,r10,r2
 200ef74:	20093b80 	call	20093b8 <__mulsi3>
 200ef78:	1445883a 	add	r2,r2,r17
 200ef7c:	980b883a 	mov	r5,r19
 200ef80:	9007883a 	mov	r3,r18
 200ef84:	003fc006 	br	200ee88 <memcpy+0x38>
 200ef88:	500b883a 	mov	r5,r10
 200ef8c:	003fbe06 	br	200ee88 <memcpy+0x38>

0200ef90 <memmove>:
 200ef90:	defffb04 	addi	sp,sp,-20
 200ef94:	dc000015 	stw	r16,0(sp)
 200ef98:	dfc00415 	stw	ra,16(sp)
 200ef9c:	dcc00315 	stw	r19,12(sp)
 200efa0:	dc800215 	stw	r18,8(sp)
 200efa4:	dc400115 	stw	r17,4(sp)
 200efa8:	2021883a 	mov	r16,r4
 200efac:	300f883a 	mov	r7,r6
 200efb0:	2900122e 	bgeu	r5,r4,200effc <memmove+0x6c>
 200efb4:	2987883a 	add	r3,r5,r6
 200efb8:	20c0102e 	bgeu	r4,r3,200effc <memmove+0x6c>
 200efbc:	218b883a 	add	r5,r4,r6
 200efc0:	1989c83a 	sub	r4,r3,r6
 200efc4:	30000526 	beq	r6,zero,200efdc <memmove+0x4c>
 200efc8:	18ffffc4 	addi	r3,r3,-1
 200efcc:	18800003 	ldbu	r2,0(r3)
 200efd0:	297fffc4 	addi	r5,r5,-1
 200efd4:	28800005 	stb	r2,0(r5)
 200efd8:	193ffb1e 	bne	r3,r4,200efc8 <memmove+0x38>
 200efdc:	8005883a 	mov	r2,r16
 200efe0:	dfc00417 	ldw	ra,16(sp)
 200efe4:	dcc00317 	ldw	r19,12(sp)
 200efe8:	dc800217 	ldw	r18,8(sp)
 200efec:	dc400117 	ldw	r17,4(sp)
 200eff0:	dc000017 	ldw	r16,0(sp)
 200eff4:	dec00504 	addi	sp,sp,20
 200eff8:	f800283a 	ret
 200effc:	008003c4 	movi	r2,15
 200f000:	1180422e 	bgeu	r2,r6,200f10c <memmove+0x17c>
 200f004:	2c04b03a 	or	r2,r5,r16
 200f008:	108000cc 	andi	r2,r2,3
 200f00c:	10003f1e 	bne	r2,zero,200f10c <memmove+0x17c>
 200f010:	32bffc04 	addi	r10,r6,-16
 200f014:	5014d13a 	srli	r10,r10,4
 200f018:	81000404 	addi	r4,r16,16
 200f01c:	8007883a 	mov	r3,r16
 200f020:	5004913a 	slli	r2,r10,4
 200f024:	280f883a 	mov	r7,r5
 200f028:	2089883a 	add	r4,r4,r2
 200f02c:	38800017 	ldw	r2,0(r7)
 200f030:	18c00404 	addi	r3,r3,16
 200f034:	39c00404 	addi	r7,r7,16
 200f038:	18bffc15 	stw	r2,-16(r3)
 200f03c:	38bffd17 	ldw	r2,-12(r7)
 200f040:	18bffd15 	stw	r2,-12(r3)
 200f044:	38bffe17 	ldw	r2,-8(r7)
 200f048:	18bffe15 	stw	r2,-8(r3)
 200f04c:	38bfff17 	ldw	r2,-4(r7)
 200f050:	18bfff15 	stw	r2,-4(r3)
 200f054:	193ff51e 	bne	r3,r4,200f02c <memmove+0x9c>
 200f058:	52800044 	addi	r10,r10,1
 200f05c:	5014913a 	slli	r10,r10,4
 200f060:	31c003cc 	andi	r7,r6,15
 200f064:	008000c4 	movi	r2,3
 200f068:	8287883a 	add	r3,r16,r10
 200f06c:	2a95883a 	add	r10,r5,r10
 200f070:	11c0282e 	bgeu	r2,r7,200f114 <memmove+0x184>
 200f074:	3c7fff04 	addi	r17,r7,-4
 200f078:	8808d0ba 	srli	r4,r17,2
 200f07c:	1a400104 	addi	r9,r3,4
 200f080:	180d883a 	mov	r6,r3
 200f084:	2105883a 	add	r2,r4,r4
 200f088:	1085883a 	add	r2,r2,r2
 200f08c:	4893883a 	add	r9,r9,r2
 200f090:	5005883a 	mov	r2,r10
 200f094:	12000017 	ldw	r8,0(r2)
 200f098:	31800104 	addi	r6,r6,4
 200f09c:	10800104 	addi	r2,r2,4
 200f0a0:	323fff15 	stw	r8,-4(r6)
 200f0a4:	327ffb1e 	bne	r6,r9,200f094 <memmove+0x104>
 200f0a8:	20800044 	addi	r2,r4,1
 200f0ac:	1085883a 	add	r2,r2,r2
 200f0b0:	1085883a 	add	r2,r2,r2
 200f0b4:	017fff04 	movi	r5,-4
 200f0b8:	18a5883a 	add	r18,r3,r2
 200f0bc:	50a7883a 	add	r19,r10,r2
 200f0c0:	20093b80 	call	20093b8 <__mulsi3>
 200f0c4:	144f883a 	add	r7,r2,r17
 200f0c8:	980b883a 	mov	r5,r19
 200f0cc:	9007883a 	mov	r3,r18
 200f0d0:	383fc226 	beq	r7,zero,200efdc <memmove+0x4c>
 200f0d4:	19cf883a 	add	r7,r3,r7
 200f0d8:	29800003 	ldbu	r6,0(r5)
 200f0dc:	18c00044 	addi	r3,r3,1
 200f0e0:	29400044 	addi	r5,r5,1
 200f0e4:	19bfffc5 	stb	r6,-1(r3)
 200f0e8:	19fffb1e 	bne	r3,r7,200f0d8 <memmove+0x148>
 200f0ec:	8005883a 	mov	r2,r16
 200f0f0:	dfc00417 	ldw	ra,16(sp)
 200f0f4:	dcc00317 	ldw	r19,12(sp)
 200f0f8:	dc800217 	ldw	r18,8(sp)
 200f0fc:	dc400117 	ldw	r17,4(sp)
 200f100:	dc000017 	ldw	r16,0(sp)
 200f104:	dec00504 	addi	sp,sp,20
 200f108:	f800283a 	ret
 200f10c:	8007883a 	mov	r3,r16
 200f110:	003fef06 	br	200f0d0 <memmove+0x140>
 200f114:	500b883a 	mov	r5,r10
 200f118:	003fed06 	br	200f0d0 <memmove+0x140>

0200f11c <memset>:
 200f11c:	00c000c4 	movi	r3,3
 200f120:	2005883a 	mov	r2,r4
 200f124:	29403fcc 	andi	r5,r5,255
 200f128:	19802d2e 	bgeu	r3,r6,200f1e0 <memset+0xc4>
 200f12c:	20c6703a 	and	r3,r4,r3
 200f130:	18002e1e 	bne	r3,zero,200f1ec <memset+0xd0>
 200f134:	2806923a 	slli	r3,r5,8
 200f138:	010003c4 	movi	r4,15
 200f13c:	3011883a 	mov	r8,r6
 200f140:	1946b03a 	or	r3,r3,r5
 200f144:	180e943a 	slli	r7,r3,16
 200f148:	38ceb03a 	or	r7,r7,r3
 200f14c:	1007883a 	mov	r3,r2
 200f150:	21800f2e 	bgeu	r4,r6,200f190 <memset+0x74>
 200f154:	19c00015 	stw	r7,0(r3)
 200f158:	19c00115 	stw	r7,4(r3)
 200f15c:	19c00215 	stw	r7,8(r3)
 200f160:	19c00315 	stw	r7,12(r3)
 200f164:	423ffc04 	addi	r8,r8,-16
 200f168:	18c00404 	addi	r3,r3,16
 200f16c:	223ff936 	bltu	r4,r8,200f154 <memset+0x38>
 200f170:	30fffc04 	addi	r3,r6,-16
 200f174:	1806d13a 	srli	r3,r3,4
 200f178:	318003cc 	andi	r6,r6,15
 200f17c:	010000c4 	movi	r4,3
 200f180:	18c00044 	addi	r3,r3,1
 200f184:	1806913a 	slli	r3,r3,4
 200f188:	10c7883a 	add	r3,r2,r3
 200f18c:	21800e2e 	bgeu	r4,r6,200f1c8 <memset+0xac>
 200f190:	1813883a 	mov	r9,r3
 200f194:	3011883a 	mov	r8,r6
 200f198:	010000c4 	movi	r4,3
 200f19c:	49c00015 	stw	r7,0(r9)
 200f1a0:	423fff04 	addi	r8,r8,-4
 200f1a4:	4a400104 	addi	r9,r9,4
 200f1a8:	223ffc36 	bltu	r4,r8,200f19c <memset+0x80>
 200f1ac:	313fff04 	addi	r4,r6,-4
 200f1b0:	2008d0ba 	srli	r4,r4,2
 200f1b4:	318000cc 	andi	r6,r6,3
 200f1b8:	21000044 	addi	r4,r4,1
 200f1bc:	2109883a 	add	r4,r4,r4
 200f1c0:	2109883a 	add	r4,r4,r4
 200f1c4:	1907883a 	add	r3,r3,r4
 200f1c8:	30000a26 	beq	r6,zero,200f1f4 <memset+0xd8>
 200f1cc:	198d883a 	add	r6,r3,r6
 200f1d0:	19400005 	stb	r5,0(r3)
 200f1d4:	18c00044 	addi	r3,r3,1
 200f1d8:	19bffd1e 	bne	r3,r6,200f1d0 <memset+0xb4>
 200f1dc:	f800283a 	ret
 200f1e0:	2007883a 	mov	r3,r4
 200f1e4:	303ff91e 	bne	r6,zero,200f1cc <memset+0xb0>
 200f1e8:	00000206 	br	200f1f4 <memset+0xd8>
 200f1ec:	2007883a 	mov	r3,r4
 200f1f0:	003ff606 	br	200f1cc <memset+0xb0>
 200f1f4:	f800283a 	ret

0200f1f8 <_Balloc>:
 200f1f8:	20801317 	ldw	r2,76(r4)
 200f1fc:	defffc04 	addi	sp,sp,-16
 200f200:	dc400115 	stw	r17,4(sp)
 200f204:	dc000015 	stw	r16,0(sp)
 200f208:	dfc00315 	stw	ra,12(sp)
 200f20c:	dc800215 	stw	r18,8(sp)
 200f210:	2023883a 	mov	r17,r4
 200f214:	2821883a 	mov	r16,r5
 200f218:	10000f26 	beq	r2,zero,200f258 <_Balloc+0x60>
 200f21c:	8407883a 	add	r3,r16,r16
 200f220:	18c7883a 	add	r3,r3,r3
 200f224:	10c7883a 	add	r3,r2,r3
 200f228:	18800017 	ldw	r2,0(r3)
 200f22c:	10001126 	beq	r2,zero,200f274 <_Balloc+0x7c>
 200f230:	11000017 	ldw	r4,0(r2)
 200f234:	19000015 	stw	r4,0(r3)
 200f238:	10000415 	stw	zero,16(r2)
 200f23c:	10000315 	stw	zero,12(r2)
 200f240:	dfc00317 	ldw	ra,12(sp)
 200f244:	dc800217 	ldw	r18,8(sp)
 200f248:	dc400117 	ldw	r17,4(sp)
 200f24c:	dc000017 	ldw	r16,0(sp)
 200f250:	dec00404 	addi	sp,sp,16
 200f254:	f800283a 	ret
 200f258:	01400104 	movi	r5,4
 200f25c:	01800404 	movi	r6,16
 200f260:	2010b5c0 	call	2010b5c <_calloc_r>
 200f264:	88801315 	stw	r2,76(r17)
 200f268:	103fec1e 	bne	r2,zero,200f21c <_Balloc+0x24>
 200f26c:	0005883a 	mov	r2,zero
 200f270:	003ff306 	br	200f240 <_Balloc+0x48>
 200f274:	01400044 	movi	r5,1
 200f278:	2c24983a 	sll	r18,r5,r16
 200f27c:	8809883a 	mov	r4,r17
 200f280:	91800144 	addi	r6,r18,5
 200f284:	318d883a 	add	r6,r6,r6
 200f288:	318d883a 	add	r6,r6,r6
 200f28c:	2010b5c0 	call	2010b5c <_calloc_r>
 200f290:	103ff626 	beq	r2,zero,200f26c <_Balloc+0x74>
 200f294:	14000115 	stw	r16,4(r2)
 200f298:	14800215 	stw	r18,8(r2)
 200f29c:	003fe606 	br	200f238 <_Balloc+0x40>

0200f2a0 <_Bfree>:
 200f2a0:	28000826 	beq	r5,zero,200f2c4 <_Bfree+0x24>
 200f2a4:	28c00117 	ldw	r3,4(r5)
 200f2a8:	20801317 	ldw	r2,76(r4)
 200f2ac:	18c7883a 	add	r3,r3,r3
 200f2b0:	18c7883a 	add	r3,r3,r3
 200f2b4:	10c5883a 	add	r2,r2,r3
 200f2b8:	10c00017 	ldw	r3,0(r2)
 200f2bc:	28c00015 	stw	r3,0(r5)
 200f2c0:	11400015 	stw	r5,0(r2)
 200f2c4:	f800283a 	ret

0200f2c8 <__multadd>:
 200f2c8:	defff604 	addi	sp,sp,-40
 200f2cc:	dd400515 	stw	r21,20(sp)
 200f2d0:	2d400417 	ldw	r21,16(r5)
 200f2d4:	df000815 	stw	fp,32(sp)
 200f2d8:	ddc00715 	stw	r23,28(sp)
 200f2dc:	dd800615 	stw	r22,24(sp)
 200f2e0:	dd000415 	stw	r20,16(sp)
 200f2e4:	dc400115 	stw	r17,4(sp)
 200f2e8:	dc000015 	stw	r16,0(sp)
 200f2ec:	dfc00915 	stw	ra,36(sp)
 200f2f0:	dcc00315 	stw	r19,12(sp)
 200f2f4:	dc800215 	stw	r18,8(sp)
 200f2f8:	282d883a 	mov	r22,r5
 200f2fc:	202f883a 	mov	r23,r4
 200f300:	3029883a 	mov	r20,r6
 200f304:	3839883a 	mov	fp,r7
 200f308:	2c000504 	addi	r16,r5,20
 200f30c:	0023883a 	mov	r17,zero
 200f310:	84c00017 	ldw	r19,0(r16)
 200f314:	a00b883a 	mov	r5,r20
 200f318:	8c400044 	addi	r17,r17,1
 200f31c:	993fffcc 	andi	r4,r19,65535
 200f320:	20093b80 	call	20093b8 <__mulsi3>
 200f324:	1725883a 	add	r18,r2,fp
 200f328:	9808d43a 	srli	r4,r19,16
 200f32c:	9026d43a 	srli	r19,r18,16
 200f330:	a00b883a 	mov	r5,r20
 200f334:	20093b80 	call	20093b8 <__mulsi3>
 200f338:	988f883a 	add	r7,r19,r2
 200f33c:	3804943a 	slli	r2,r7,16
 200f340:	94bfffcc 	andi	r18,r18,65535
 200f344:	3838d43a 	srli	fp,r7,16
 200f348:	14a5883a 	add	r18,r2,r18
 200f34c:	84800015 	stw	r18,0(r16)
 200f350:	84000104 	addi	r16,r16,4
 200f354:	8d7fee16 	blt	r17,r21,200f310 <__multadd+0x48>
 200f358:	e0000926 	beq	fp,zero,200f380 <__multadd+0xb8>
 200f35c:	b0800217 	ldw	r2,8(r22)
 200f360:	a880140e 	bge	r21,r2,200f3b4 <__multadd+0xec>
 200f364:	a8800144 	addi	r2,r21,5
 200f368:	1085883a 	add	r2,r2,r2
 200f36c:	1085883a 	add	r2,r2,r2
 200f370:	b085883a 	add	r2,r22,r2
 200f374:	ad400044 	addi	r21,r21,1
 200f378:	17000015 	stw	fp,0(r2)
 200f37c:	b5400415 	stw	r21,16(r22)
 200f380:	b005883a 	mov	r2,r22
 200f384:	dfc00917 	ldw	ra,36(sp)
 200f388:	df000817 	ldw	fp,32(sp)
 200f38c:	ddc00717 	ldw	r23,28(sp)
 200f390:	dd800617 	ldw	r22,24(sp)
 200f394:	dd400517 	ldw	r21,20(sp)
 200f398:	dd000417 	ldw	r20,16(sp)
 200f39c:	dcc00317 	ldw	r19,12(sp)
 200f3a0:	dc800217 	ldw	r18,8(sp)
 200f3a4:	dc400117 	ldw	r17,4(sp)
 200f3a8:	dc000017 	ldw	r16,0(sp)
 200f3ac:	dec00a04 	addi	sp,sp,40
 200f3b0:	f800283a 	ret
 200f3b4:	b1400117 	ldw	r5,4(r22)
 200f3b8:	b809883a 	mov	r4,r23
 200f3bc:	29400044 	addi	r5,r5,1
 200f3c0:	200f1f80 	call	200f1f8 <_Balloc>
 200f3c4:	b1800417 	ldw	r6,16(r22)
 200f3c8:	b1400304 	addi	r5,r22,12
 200f3cc:	11000304 	addi	r4,r2,12
 200f3d0:	31800084 	addi	r6,r6,2
 200f3d4:	318d883a 	add	r6,r6,r6
 200f3d8:	318d883a 	add	r6,r6,r6
 200f3dc:	1021883a 	mov	r16,r2
 200f3e0:	200ee500 	call	200ee50 <memcpy>
 200f3e4:	b0c00117 	ldw	r3,4(r22)
 200f3e8:	b8801317 	ldw	r2,76(r23)
 200f3ec:	18c7883a 	add	r3,r3,r3
 200f3f0:	18c7883a 	add	r3,r3,r3
 200f3f4:	10c5883a 	add	r2,r2,r3
 200f3f8:	10c00017 	ldw	r3,0(r2)
 200f3fc:	b0c00015 	stw	r3,0(r22)
 200f400:	15800015 	stw	r22,0(r2)
 200f404:	802d883a 	mov	r22,r16
 200f408:	003fd606 	br	200f364 <__multadd+0x9c>

0200f40c <__s2b>:
 200f40c:	defff904 	addi	sp,sp,-28
 200f410:	dd000415 	stw	r20,16(sp)
 200f414:	dc400115 	stw	r17,4(sp)
 200f418:	2829883a 	mov	r20,r5
 200f41c:	2023883a 	mov	r17,r4
 200f420:	01400244 	movi	r5,9
 200f424:	39000204 	addi	r4,r7,8
 200f428:	dcc00315 	stw	r19,12(sp)
 200f42c:	dc800215 	stw	r18,8(sp)
 200f430:	dfc00615 	stw	ra,24(sp)
 200f434:	dd400515 	stw	r21,20(sp)
 200f438:	dc000015 	stw	r16,0(sp)
 200f43c:	3825883a 	mov	r18,r7
 200f440:	3027883a 	mov	r19,r6
 200f444:	20092fc0 	call	20092fc <__divsi3>
 200f448:	00c00044 	movi	r3,1
 200f44c:	000b883a 	mov	r5,zero
 200f450:	1880030e 	bge	r3,r2,200f460 <__s2b+0x54>
 200f454:	18c7883a 	add	r3,r3,r3
 200f458:	29400044 	addi	r5,r5,1
 200f45c:	18bffd16 	blt	r3,r2,200f454 <__s2b+0x48>
 200f460:	8809883a 	mov	r4,r17
 200f464:	200f1f80 	call	200f1f8 <_Balloc>
 200f468:	d8c00717 	ldw	r3,28(sp)
 200f46c:	10c00515 	stw	r3,20(r2)
 200f470:	00c00044 	movi	r3,1
 200f474:	10c00415 	stw	r3,16(r2)
 200f478:	00c00244 	movi	r3,9
 200f47c:	1cc0210e 	bge	r3,r19,200f504 <__s2b+0xf8>
 200f480:	a0eb883a 	add	r21,r20,r3
 200f484:	a821883a 	mov	r16,r21
 200f488:	a4e9883a 	add	r20,r20,r19
 200f48c:	81c00007 	ldb	r7,0(r16)
 200f490:	8809883a 	mov	r4,r17
 200f494:	84000044 	addi	r16,r16,1
 200f498:	100b883a 	mov	r5,r2
 200f49c:	01800284 	movi	r6,10
 200f4a0:	39fff404 	addi	r7,r7,-48
 200f4a4:	200f2c80 	call	200f2c8 <__multadd>
 200f4a8:	853ff81e 	bne	r16,r20,200f48c <__s2b+0x80>
 200f4ac:	ace1883a 	add	r16,r21,r19
 200f4b0:	843ffe04 	addi	r16,r16,-8
 200f4b4:	9c800a0e 	bge	r19,r18,200f4e0 <__s2b+0xd4>
 200f4b8:	94e5c83a 	sub	r18,r18,r19
 200f4bc:	84a5883a 	add	r18,r16,r18
 200f4c0:	81c00007 	ldb	r7,0(r16)
 200f4c4:	8809883a 	mov	r4,r17
 200f4c8:	84000044 	addi	r16,r16,1
 200f4cc:	100b883a 	mov	r5,r2
 200f4d0:	01800284 	movi	r6,10
 200f4d4:	39fff404 	addi	r7,r7,-48
 200f4d8:	200f2c80 	call	200f2c8 <__multadd>
 200f4dc:	84bff81e 	bne	r16,r18,200f4c0 <__s2b+0xb4>
 200f4e0:	dfc00617 	ldw	ra,24(sp)
 200f4e4:	dd400517 	ldw	r21,20(sp)
 200f4e8:	dd000417 	ldw	r20,16(sp)
 200f4ec:	dcc00317 	ldw	r19,12(sp)
 200f4f0:	dc800217 	ldw	r18,8(sp)
 200f4f4:	dc400117 	ldw	r17,4(sp)
 200f4f8:	dc000017 	ldw	r16,0(sp)
 200f4fc:	dec00704 	addi	sp,sp,28
 200f500:	f800283a 	ret
 200f504:	a4000284 	addi	r16,r20,10
 200f508:	1827883a 	mov	r19,r3
 200f50c:	003fe906 	br	200f4b4 <__s2b+0xa8>

0200f510 <__hi0bits>:
 200f510:	20bfffec 	andhi	r2,r4,65535
 200f514:	1000141e 	bne	r2,zero,200f568 <__hi0bits+0x58>
 200f518:	2008943a 	slli	r4,r4,16
 200f51c:	00800404 	movi	r2,16
 200f520:	20ffc02c 	andhi	r3,r4,65280
 200f524:	1800021e 	bne	r3,zero,200f530 <__hi0bits+0x20>
 200f528:	2008923a 	slli	r4,r4,8
 200f52c:	10800204 	addi	r2,r2,8
 200f530:	20fc002c 	andhi	r3,r4,61440
 200f534:	1800021e 	bne	r3,zero,200f540 <__hi0bits+0x30>
 200f538:	2008913a 	slli	r4,r4,4
 200f53c:	10800104 	addi	r2,r2,4
 200f540:	20f0002c 	andhi	r3,r4,49152
 200f544:	1800031e 	bne	r3,zero,200f554 <__hi0bits+0x44>
 200f548:	2109883a 	add	r4,r4,r4
 200f54c:	10800084 	addi	r2,r2,2
 200f550:	2109883a 	add	r4,r4,r4
 200f554:	20000316 	blt	r4,zero,200f564 <__hi0bits+0x54>
 200f558:	2110002c 	andhi	r4,r4,16384
 200f55c:	2000041e 	bne	r4,zero,200f570 <__hi0bits+0x60>
 200f560:	00800804 	movi	r2,32
 200f564:	f800283a 	ret
 200f568:	0005883a 	mov	r2,zero
 200f56c:	003fec06 	br	200f520 <__hi0bits+0x10>
 200f570:	10800044 	addi	r2,r2,1
 200f574:	f800283a 	ret

0200f578 <__lo0bits>:
 200f578:	20c00017 	ldw	r3,0(r4)
 200f57c:	188001cc 	andi	r2,r3,7
 200f580:	10000826 	beq	r2,zero,200f5a4 <__lo0bits+0x2c>
 200f584:	1880004c 	andi	r2,r3,1
 200f588:	1000211e 	bne	r2,zero,200f610 <__lo0bits+0x98>
 200f58c:	1880008c 	andi	r2,r3,2
 200f590:	1000211e 	bne	r2,zero,200f618 <__lo0bits+0xa0>
 200f594:	1806d0ba 	srli	r3,r3,2
 200f598:	00800084 	movi	r2,2
 200f59c:	20c00015 	stw	r3,0(r4)
 200f5a0:	f800283a 	ret
 200f5a4:	18bfffcc 	andi	r2,r3,65535
 200f5a8:	10001326 	beq	r2,zero,200f5f8 <__lo0bits+0x80>
 200f5ac:	0005883a 	mov	r2,zero
 200f5b0:	19403fcc 	andi	r5,r3,255
 200f5b4:	2800021e 	bne	r5,zero,200f5c0 <__lo0bits+0x48>
 200f5b8:	1806d23a 	srli	r3,r3,8
 200f5bc:	10800204 	addi	r2,r2,8
 200f5c0:	194003cc 	andi	r5,r3,15
 200f5c4:	2800021e 	bne	r5,zero,200f5d0 <__lo0bits+0x58>
 200f5c8:	1806d13a 	srli	r3,r3,4
 200f5cc:	10800104 	addi	r2,r2,4
 200f5d0:	194000cc 	andi	r5,r3,3
 200f5d4:	2800021e 	bne	r5,zero,200f5e0 <__lo0bits+0x68>
 200f5d8:	1806d0ba 	srli	r3,r3,2
 200f5dc:	10800084 	addi	r2,r2,2
 200f5e0:	1940004c 	andi	r5,r3,1
 200f5e4:	2800081e 	bne	r5,zero,200f608 <__lo0bits+0x90>
 200f5e8:	1806d07a 	srli	r3,r3,1
 200f5ec:	1800051e 	bne	r3,zero,200f604 <__lo0bits+0x8c>
 200f5f0:	00800804 	movi	r2,32
 200f5f4:	f800283a 	ret
 200f5f8:	1806d43a 	srli	r3,r3,16
 200f5fc:	00800404 	movi	r2,16
 200f600:	003feb06 	br	200f5b0 <__lo0bits+0x38>
 200f604:	10800044 	addi	r2,r2,1
 200f608:	20c00015 	stw	r3,0(r4)
 200f60c:	f800283a 	ret
 200f610:	0005883a 	mov	r2,zero
 200f614:	f800283a 	ret
 200f618:	1806d07a 	srli	r3,r3,1
 200f61c:	00800044 	movi	r2,1
 200f620:	20c00015 	stw	r3,0(r4)
 200f624:	f800283a 	ret

0200f628 <__i2b>:
 200f628:	defffd04 	addi	sp,sp,-12
 200f62c:	dc000015 	stw	r16,0(sp)
 200f630:	04000044 	movi	r16,1
 200f634:	dc400115 	stw	r17,4(sp)
 200f638:	2823883a 	mov	r17,r5
 200f63c:	800b883a 	mov	r5,r16
 200f640:	dfc00215 	stw	ra,8(sp)
 200f644:	200f1f80 	call	200f1f8 <_Balloc>
 200f648:	14400515 	stw	r17,20(r2)
 200f64c:	14000415 	stw	r16,16(r2)
 200f650:	dfc00217 	ldw	ra,8(sp)
 200f654:	dc400117 	ldw	r17,4(sp)
 200f658:	dc000017 	ldw	r16,0(sp)
 200f65c:	dec00304 	addi	sp,sp,12
 200f660:	f800283a 	ret

0200f664 <__multiply>:
 200f664:	defff004 	addi	sp,sp,-64
 200f668:	dc800815 	stw	r18,32(sp)
 200f66c:	dc400715 	stw	r17,28(sp)
 200f670:	34800417 	ldw	r18,16(r6)
 200f674:	2c400417 	ldw	r17,16(r5)
 200f678:	ddc00d15 	stw	r23,52(sp)
 200f67c:	dc000615 	stw	r16,24(sp)
 200f680:	dfc00f15 	stw	ra,60(sp)
 200f684:	df000e15 	stw	fp,56(sp)
 200f688:	dd800c15 	stw	r22,48(sp)
 200f68c:	dd400b15 	stw	r21,44(sp)
 200f690:	dd000a15 	stw	r20,40(sp)
 200f694:	dcc00915 	stw	r19,36(sp)
 200f698:	2821883a 	mov	r16,r5
 200f69c:	302f883a 	mov	r23,r6
 200f6a0:	8c80050e 	bge	r17,r18,200f6b8 <__multiply+0x54>
 200f6a4:	8807883a 	mov	r3,r17
 200f6a8:	3021883a 	mov	r16,r6
 200f6ac:	9023883a 	mov	r17,r18
 200f6b0:	282f883a 	mov	r23,r5
 200f6b4:	1825883a 	mov	r18,r3
 200f6b8:	80800217 	ldw	r2,8(r16)
 200f6bc:	8c87883a 	add	r3,r17,r18
 200f6c0:	d8c00115 	stw	r3,4(sp)
 200f6c4:	81400117 	ldw	r5,4(r16)
 200f6c8:	10c0010e 	bge	r2,r3,200f6d0 <__multiply+0x6c>
 200f6cc:	29400044 	addi	r5,r5,1
 200f6d0:	200f1f80 	call	200f1f8 <_Balloc>
 200f6d4:	d8c00117 	ldw	r3,4(sp)
 200f6d8:	d8800515 	stw	r2,20(sp)
 200f6dc:	14c00504 	addi	r19,r2,20
 200f6e0:	1d400144 	addi	r21,r3,5
 200f6e4:	ad6b883a 	add	r21,r21,r21
 200f6e8:	ad6b883a 	add	r21,r21,r21
 200f6ec:	156b883a 	add	r21,r2,r21
 200f6f0:	dd400215 	stw	r21,8(sp)
 200f6f4:	9805883a 	mov	r2,r19
 200f6f8:	9d40042e 	bgeu	r19,r21,200f70c <__multiply+0xa8>
 200f6fc:	d8c00217 	ldw	r3,8(sp)
 200f700:	10000015 	stw	zero,0(r2)
 200f704:	10800104 	addi	r2,r2,4
 200f708:	10fffc36 	bltu	r2,r3,200f6fc <__multiply+0x98>
 200f70c:	94800144 	addi	r18,r18,5
 200f710:	94a5883a 	add	r18,r18,r18
 200f714:	94ad883a 	add	r22,r18,r18
 200f718:	8c400144 	addi	r17,r17,5
 200f71c:	8c63883a 	add	r17,r17,r17
 200f720:	bdad883a 	add	r22,r23,r22
 200f724:	80c00504 	addi	r3,r16,20
 200f728:	8c63883a 	add	r17,r17,r17
 200f72c:	bc800504 	addi	r18,r23,20
 200f730:	dd800315 	stw	r22,12(sp)
 200f734:	d8c00415 	stw	r3,16(sp)
 200f738:	dcc00015 	stw	r19,0(sp)
 200f73c:	8463883a 	add	r17,r16,r17
 200f740:	9580412e 	bgeu	r18,r22,200f848 <__multiply+0x1e4>
 200f744:	90800017 	ldw	r2,0(r18)
 200f748:	173fffcc 	andi	fp,r2,65535
 200f74c:	e0001a26 	beq	fp,zero,200f7b8 <__multiply+0x154>
 200f750:	dd000017 	ldw	r20,0(sp)
 200f754:	dd800417 	ldw	r22,16(sp)
 200f758:	002b883a 	mov	r21,zero
 200f75c:	b4c00017 	ldw	r19,0(r22)
 200f760:	a4000017 	ldw	r16,0(r20)
 200f764:	e00b883a 	mov	r5,fp
 200f768:	993fffcc 	andi	r4,r19,65535
 200f76c:	20093b80 	call	20093b8 <__mulsi3>
 200f770:	9808d43a 	srli	r4,r19,16
 200f774:	817fffcc 	andi	r5,r16,65535
 200f778:	1145883a 	add	r2,r2,r5
 200f77c:	e00b883a 	mov	r5,fp
 200f780:	1567883a 	add	r19,r2,r21
 200f784:	8020d43a 	srli	r16,r16,16
 200f788:	20093b80 	call	20093b8 <__mulsi3>
 200f78c:	9808d43a 	srli	r4,r19,16
 200f790:	1405883a 	add	r2,r2,r16
 200f794:	a4c0000d 	sth	r19,0(r20)
 200f798:	110f883a 	add	r7,r2,r4
 200f79c:	a1c0008d 	sth	r7,2(r20)
 200f7a0:	b5800104 	addi	r22,r22,4
 200f7a4:	382ad43a 	srli	r21,r7,16
 200f7a8:	a5000104 	addi	r20,r20,4
 200f7ac:	b47feb36 	bltu	r22,r17,200f75c <__multiply+0xf8>
 200f7b0:	a5400015 	stw	r21,0(r20)
 200f7b4:	90800017 	ldw	r2,0(r18)
 200f7b8:	1038d43a 	srli	fp,r2,16
 200f7bc:	e0001c26 	beq	fp,zero,200f830 <__multiply+0x1cc>
 200f7c0:	d8c00017 	ldw	r3,0(sp)
 200f7c4:	dd000417 	ldw	r20,16(sp)
 200f7c8:	002b883a 	mov	r21,zero
 200f7cc:	1d800017 	ldw	r22,0(r3)
 200f7d0:	182f883a 	mov	r23,r3
 200f7d4:	b021883a 	mov	r16,r22
 200f7d8:	a4c00017 	ldw	r19,0(r20)
 200f7dc:	8020d43a 	srli	r16,r16,16
 200f7e0:	e00b883a 	mov	r5,fp
 200f7e4:	993fffcc 	andi	r4,r19,65535
 200f7e8:	20093b80 	call	20093b8 <__mulsi3>
 200f7ec:	1405883a 	add	r2,r2,r16
 200f7f0:	9808d43a 	srli	r4,r19,16
 200f7f4:	156b883a 	add	r21,r2,r21
 200f7f8:	bdc00104 	addi	r23,r23,4
 200f7fc:	bdbfff0d 	sth	r22,-4(r23)
 200f800:	bd7fff8d 	sth	r21,-2(r23)
 200f804:	bc000017 	ldw	r16,0(r23)
 200f808:	e00b883a 	mov	r5,fp
 200f80c:	20093b80 	call	20093b8 <__mulsi3>
 200f810:	a80ed43a 	srli	r7,r21,16
 200f814:	813fffcc 	andi	r4,r16,65535
 200f818:	2085883a 	add	r2,r4,r2
 200f81c:	11ed883a 	add	r22,r2,r7
 200f820:	a5000104 	addi	r20,r20,4
 200f824:	b02ad43a 	srli	r21,r22,16
 200f828:	a47feb36 	bltu	r20,r17,200f7d8 <__multiply+0x174>
 200f82c:	bd800015 	stw	r22,0(r23)
 200f830:	d8c00017 	ldw	r3,0(sp)
 200f834:	94800104 	addi	r18,r18,4
 200f838:	18c00104 	addi	r3,r3,4
 200f83c:	d8c00015 	stw	r3,0(sp)
 200f840:	d8c00317 	ldw	r3,12(sp)
 200f844:	90ffbf36 	bltu	r18,r3,200f744 <__multiply+0xe0>
 200f848:	d8c00117 	ldw	r3,4(sp)
 200f84c:	00c00c0e 	bge	zero,r3,200f880 <__multiply+0x21c>
 200f850:	d8c00217 	ldw	r3,8(sp)
 200f854:	18bfff17 	ldw	r2,-4(r3)
 200f858:	1d7fff04 	addi	r21,r3,-4
 200f85c:	10000326 	beq	r2,zero,200f86c <__multiply+0x208>
 200f860:	00000706 	br	200f880 <__multiply+0x21c>
 200f864:	a8800017 	ldw	r2,0(r21)
 200f868:	1000051e 	bne	r2,zero,200f880 <__multiply+0x21c>
 200f86c:	d8c00117 	ldw	r3,4(sp)
 200f870:	ad7fff04 	addi	r21,r21,-4
 200f874:	18ffffc4 	addi	r3,r3,-1
 200f878:	d8c00115 	stw	r3,4(sp)
 200f87c:	183ff91e 	bne	r3,zero,200f864 <__multiply+0x200>
 200f880:	d8800517 	ldw	r2,20(sp)
 200f884:	d8c00117 	ldw	r3,4(sp)
 200f888:	10c00415 	stw	r3,16(r2)
 200f88c:	dfc00f17 	ldw	ra,60(sp)
 200f890:	df000e17 	ldw	fp,56(sp)
 200f894:	ddc00d17 	ldw	r23,52(sp)
 200f898:	dd800c17 	ldw	r22,48(sp)
 200f89c:	dd400b17 	ldw	r21,44(sp)
 200f8a0:	dd000a17 	ldw	r20,40(sp)
 200f8a4:	dcc00917 	ldw	r19,36(sp)
 200f8a8:	dc800817 	ldw	r18,32(sp)
 200f8ac:	dc400717 	ldw	r17,28(sp)
 200f8b0:	dc000617 	ldw	r16,24(sp)
 200f8b4:	dec01004 	addi	sp,sp,64
 200f8b8:	f800283a 	ret

0200f8bc <__pow5mult>:
 200f8bc:	defffb04 	addi	sp,sp,-20
 200f8c0:	dcc00315 	stw	r19,12(sp)
 200f8c4:	dc800215 	stw	r18,8(sp)
 200f8c8:	dc000015 	stw	r16,0(sp)
 200f8cc:	dfc00415 	stw	ra,16(sp)
 200f8d0:	dc400115 	stw	r17,4(sp)
 200f8d4:	308000cc 	andi	r2,r6,3
 200f8d8:	3021883a 	mov	r16,r6
 200f8dc:	2027883a 	mov	r19,r4
 200f8e0:	2825883a 	mov	r18,r5
 200f8e4:	10002e1e 	bne	r2,zero,200f9a0 <__pow5mult+0xe4>
 200f8e8:	8021d0ba 	srai	r16,r16,2
 200f8ec:	80001a26 	beq	r16,zero,200f958 <__pow5mult+0x9c>
 200f8f0:	9c401217 	ldw	r17,72(r19)
 200f8f4:	8800061e 	bne	r17,zero,200f910 <__pow5mult+0x54>
 200f8f8:	00003406 	br	200f9cc <__pow5mult+0x110>
 200f8fc:	8021d07a 	srai	r16,r16,1
 200f900:	80001526 	beq	r16,zero,200f958 <__pow5mult+0x9c>
 200f904:	88c00017 	ldw	r3,0(r17)
 200f908:	18001b26 	beq	r3,zero,200f978 <__pow5mult+0xbc>
 200f90c:	1823883a 	mov	r17,r3
 200f910:	80c0004c 	andi	r3,r16,1
 200f914:	183ff926 	beq	r3,zero,200f8fc <__pow5mult+0x40>
 200f918:	900b883a 	mov	r5,r18
 200f91c:	880d883a 	mov	r6,r17
 200f920:	9809883a 	mov	r4,r19
 200f924:	200f6640 	call	200f664 <__multiply>
 200f928:	90001b26 	beq	r18,zero,200f998 <__pow5mult+0xdc>
 200f92c:	91000117 	ldw	r4,4(r18)
 200f930:	98c01317 	ldw	r3,76(r19)
 200f934:	8021d07a 	srai	r16,r16,1
 200f938:	2109883a 	add	r4,r4,r4
 200f93c:	2109883a 	add	r4,r4,r4
 200f940:	1907883a 	add	r3,r3,r4
 200f944:	19000017 	ldw	r4,0(r3)
 200f948:	91000015 	stw	r4,0(r18)
 200f94c:	1c800015 	stw	r18,0(r3)
 200f950:	1025883a 	mov	r18,r2
 200f954:	803feb1e 	bne	r16,zero,200f904 <__pow5mult+0x48>
 200f958:	9005883a 	mov	r2,r18
 200f95c:	dfc00417 	ldw	ra,16(sp)
 200f960:	dcc00317 	ldw	r19,12(sp)
 200f964:	dc800217 	ldw	r18,8(sp)
 200f968:	dc400117 	ldw	r17,4(sp)
 200f96c:	dc000017 	ldw	r16,0(sp)
 200f970:	dec00504 	addi	sp,sp,20
 200f974:	f800283a 	ret
 200f978:	880b883a 	mov	r5,r17
 200f97c:	880d883a 	mov	r6,r17
 200f980:	9809883a 	mov	r4,r19
 200f984:	200f6640 	call	200f664 <__multiply>
 200f988:	88800015 	stw	r2,0(r17)
 200f98c:	10000015 	stw	zero,0(r2)
 200f990:	1023883a 	mov	r17,r2
 200f994:	003fde06 	br	200f910 <__pow5mult+0x54>
 200f998:	1025883a 	mov	r18,r2
 200f99c:	003fd706 	br	200f8fc <__pow5mult+0x40>
 200f9a0:	10bfffc4 	addi	r2,r2,-1
 200f9a4:	1085883a 	add	r2,r2,r2
 200f9a8:	00c08074 	movhi	r3,513
 200f9ac:	18ddb204 	addi	r3,r3,30408
 200f9b0:	1085883a 	add	r2,r2,r2
 200f9b4:	1885883a 	add	r2,r3,r2
 200f9b8:	11800017 	ldw	r6,0(r2)
 200f9bc:	000f883a 	mov	r7,zero
 200f9c0:	200f2c80 	call	200f2c8 <__multadd>
 200f9c4:	1025883a 	mov	r18,r2
 200f9c8:	003fc706 	br	200f8e8 <__pow5mult+0x2c>
 200f9cc:	9809883a 	mov	r4,r19
 200f9d0:	01409c44 	movi	r5,625
 200f9d4:	200f6280 	call	200f628 <__i2b>
 200f9d8:	98801215 	stw	r2,72(r19)
 200f9dc:	1023883a 	mov	r17,r2
 200f9e0:	10000015 	stw	zero,0(r2)
 200f9e4:	003fca06 	br	200f910 <__pow5mult+0x54>

0200f9e8 <__lshift>:
 200f9e8:	defff904 	addi	sp,sp,-28
 200f9ec:	dd400515 	stw	r21,20(sp)
 200f9f0:	dc400115 	stw	r17,4(sp)
 200f9f4:	2d400417 	ldw	r21,16(r5)
 200f9f8:	3023d17a 	srai	r17,r6,5
 200f9fc:	28800217 	ldw	r2,8(r5)
 200fa00:	dd000415 	stw	r20,16(sp)
 200fa04:	8d6b883a 	add	r21,r17,r21
 200fa08:	dcc00315 	stw	r19,12(sp)
 200fa0c:	dc800215 	stw	r18,8(sp)
 200fa10:	dc000015 	stw	r16,0(sp)
 200fa14:	dfc00615 	stw	ra,24(sp)
 200fa18:	ac000044 	addi	r16,r21,1
 200fa1c:	2825883a 	mov	r18,r5
 200fa20:	3029883a 	mov	r20,r6
 200fa24:	2027883a 	mov	r19,r4
 200fa28:	29400117 	ldw	r5,4(r5)
 200fa2c:	1400030e 	bge	r2,r16,200fa3c <__lshift+0x54>
 200fa30:	1085883a 	add	r2,r2,r2
 200fa34:	29400044 	addi	r5,r5,1
 200fa38:	143ffd16 	blt	r2,r16,200fa30 <__lshift+0x48>
 200fa3c:	9809883a 	mov	r4,r19
 200fa40:	200f1f80 	call	200f1f8 <_Balloc>
 200fa44:	10c00504 	addi	r3,r2,20
 200fa48:	0440090e 	bge	zero,r17,200fa70 <__lshift+0x88>
 200fa4c:	000f883a 	mov	r7,zero
 200fa50:	18000015 	stw	zero,0(r3)
 200fa54:	39c00044 	addi	r7,r7,1
 200fa58:	18c00104 	addi	r3,r3,4
 200fa5c:	3c7ffc1e 	bne	r7,r17,200fa50 <__lshift+0x68>
 200fa60:	38c00144 	addi	r3,r7,5
 200fa64:	18c7883a 	add	r3,r3,r3
 200fa68:	18c7883a 	add	r3,r3,r3
 200fa6c:	10c7883a 	add	r3,r2,r3
 200fa70:	92000417 	ldw	r8,16(r18)
 200fa74:	a18007cc 	andi	r6,r20,31
 200fa78:	91c00504 	addi	r7,r18,20
 200fa7c:	42000144 	addi	r8,r8,5
 200fa80:	4211883a 	add	r8,r8,r8
 200fa84:	4211883a 	add	r8,r8,r8
 200fa88:	9211883a 	add	r8,r18,r8
 200fa8c:	30002226 	beq	r6,zero,200fb18 <__lshift+0x130>
 200fa90:	02800804 	movi	r10,32
 200fa94:	5195c83a 	sub	r10,r10,r6
 200fa98:	000b883a 	mov	r5,zero
 200fa9c:	3a400017 	ldw	r9,0(r7)
 200faa0:	18c00104 	addi	r3,r3,4
 200faa4:	39c00104 	addi	r7,r7,4
 200faa8:	4992983a 	sll	r9,r9,r6
 200faac:	2a4ab03a 	or	r5,r5,r9
 200fab0:	197fff15 	stw	r5,-4(r3)
 200fab4:	397fff17 	ldw	r5,-4(r7)
 200fab8:	2a8ad83a 	srl	r5,r5,r10
 200fabc:	3a3ff736 	bltu	r7,r8,200fa9c <__lshift+0xb4>
 200fac0:	19400015 	stw	r5,0(r3)
 200fac4:	28000126 	beq	r5,zero,200facc <__lshift+0xe4>
 200fac8:	ac000084 	addi	r16,r21,2
 200facc:	91000117 	ldw	r4,4(r18)
 200fad0:	98c01317 	ldw	r3,76(r19)
 200fad4:	843fffc4 	addi	r16,r16,-1
 200fad8:	2109883a 	add	r4,r4,r4
 200fadc:	2109883a 	add	r4,r4,r4
 200fae0:	1907883a 	add	r3,r3,r4
 200fae4:	19000017 	ldw	r4,0(r3)
 200fae8:	14000415 	stw	r16,16(r2)
 200faec:	91000015 	stw	r4,0(r18)
 200faf0:	1c800015 	stw	r18,0(r3)
 200faf4:	dfc00617 	ldw	ra,24(sp)
 200faf8:	dd400517 	ldw	r21,20(sp)
 200fafc:	dd000417 	ldw	r20,16(sp)
 200fb00:	dcc00317 	ldw	r19,12(sp)
 200fb04:	dc800217 	ldw	r18,8(sp)
 200fb08:	dc400117 	ldw	r17,4(sp)
 200fb0c:	dc000017 	ldw	r16,0(sp)
 200fb10:	dec00704 	addi	sp,sp,28
 200fb14:	f800283a 	ret
 200fb18:	39400017 	ldw	r5,0(r7)
 200fb1c:	18c00104 	addi	r3,r3,4
 200fb20:	39c00104 	addi	r7,r7,4
 200fb24:	197fff15 	stw	r5,-4(r3)
 200fb28:	3a3fe82e 	bgeu	r7,r8,200facc <__lshift+0xe4>
 200fb2c:	39400017 	ldw	r5,0(r7)
 200fb30:	18c00104 	addi	r3,r3,4
 200fb34:	39c00104 	addi	r7,r7,4
 200fb38:	197fff15 	stw	r5,-4(r3)
 200fb3c:	3a3ff636 	bltu	r7,r8,200fb18 <__lshift+0x130>
 200fb40:	003fe206 	br	200facc <__lshift+0xe4>

0200fb44 <__mcmp>:
 200fb44:	20800417 	ldw	r2,16(r4)
 200fb48:	28c00417 	ldw	r3,16(r5)
 200fb4c:	10c5c83a 	sub	r2,r2,r3
 200fb50:	10000f1e 	bne	r2,zero,200fb90 <__mcmp+0x4c>
 200fb54:	18c00144 	addi	r3,r3,5
 200fb58:	18c7883a 	add	r3,r3,r3
 200fb5c:	18c7883a 	add	r3,r3,r3
 200fb60:	21c00504 	addi	r7,r4,20
 200fb64:	28cb883a 	add	r5,r5,r3
 200fb68:	20c9883a 	add	r4,r4,r3
 200fb6c:	213fff04 	addi	r4,r4,-4
 200fb70:	297fff04 	addi	r5,r5,-4
 200fb74:	21800017 	ldw	r6,0(r4)
 200fb78:	28c00017 	ldw	r3,0(r5)
 200fb7c:	30c0021e 	bne	r6,r3,200fb88 <__mcmp+0x44>
 200fb80:	393ffa36 	bltu	r7,r4,200fb6c <__mcmp+0x28>
 200fb84:	f800283a 	ret
 200fb88:	30c00236 	bltu	r6,r3,200fb94 <__mcmp+0x50>
 200fb8c:	00800044 	movi	r2,1
 200fb90:	f800283a 	ret
 200fb94:	00bfffc4 	movi	r2,-1
 200fb98:	f800283a 	ret

0200fb9c <__mdiff>:
 200fb9c:	defffb04 	addi	sp,sp,-20
 200fba0:	dc000015 	stw	r16,0(sp)
 200fba4:	2821883a 	mov	r16,r5
 200fba8:	dc800215 	stw	r18,8(sp)
 200fbac:	300b883a 	mov	r5,r6
 200fbb0:	2025883a 	mov	r18,r4
 200fbb4:	8009883a 	mov	r4,r16
 200fbb8:	dc400115 	stw	r17,4(sp)
 200fbbc:	dfc00415 	stw	ra,16(sp)
 200fbc0:	dcc00315 	stw	r19,12(sp)
 200fbc4:	3023883a 	mov	r17,r6
 200fbc8:	200fb440 	call	200fb44 <__mcmp>
 200fbcc:	10005026 	beq	r2,zero,200fd10 <__mdiff+0x174>
 200fbd0:	10004a16 	blt	r2,zero,200fcfc <__mdiff+0x160>
 200fbd4:	0027883a 	mov	r19,zero
 200fbd8:	81400117 	ldw	r5,4(r16)
 200fbdc:	9009883a 	mov	r4,r18
 200fbe0:	200f1f80 	call	200f1f8 <_Balloc>
 200fbe4:	82400417 	ldw	r9,16(r16)
 200fbe8:	89800417 	ldw	r6,16(r17)
 200fbec:	14c00315 	stw	r19,12(r2)
 200fbf0:	4b800144 	addi	r14,r9,5
 200fbf4:	31800144 	addi	r6,r6,5
 200fbf8:	739d883a 	add	r14,r14,r14
 200fbfc:	318d883a 	add	r6,r6,r6
 200fc00:	739d883a 	add	r14,r14,r14
 200fc04:	318d883a 	add	r6,r6,r6
 200fc08:	81c00504 	addi	r7,r16,20
 200fc0c:	839d883a 	add	r14,r16,r14
 200fc10:	8a000504 	addi	r8,r17,20
 200fc14:	898d883a 	add	r6,r17,r6
 200fc18:	10c00504 	addi	r3,r2,20
 200fc1c:	0009883a 	mov	r4,zero
 200fc20:	3b000017 	ldw	r12,0(r7)
 200fc24:	42c00017 	ldw	r11,0(r8)
 200fc28:	42000104 	addi	r8,r8,4
 200fc2c:	62bfffcc 	andi	r10,r12,65535
 200fc30:	5b7fffcc 	andi	r13,r11,65535
 200fc34:	5109883a 	add	r4,r10,r4
 200fc38:	2355c83a 	sub	r10,r4,r13
 200fc3c:	5816d43a 	srli	r11,r11,16
 200fc40:	6008d43a 	srli	r4,r12,16
 200fc44:	501bd43a 	srai	r13,r10,16
 200fc48:	1a80000d 	sth	r10,0(r3)
 200fc4c:	22c9c83a 	sub	r4,r4,r11
 200fc50:	2349883a 	add	r4,r4,r13
 200fc54:	1900008d 	sth	r4,2(r3)
 200fc58:	39c00104 	addi	r7,r7,4
 200fc5c:	2009d43a 	srai	r4,r4,16
 200fc60:	18c00104 	addi	r3,r3,4
 200fc64:	41bfee36 	bltu	r8,r6,200fc20 <__mdiff+0x84>
 200fc68:	180b883a 	mov	r5,r3
 200fc6c:	3815883a 	mov	r10,r7
 200fc70:	3b80132e 	bgeu	r7,r14,200fcc0 <__mdiff+0x124>
 200fc74:	3a000017 	ldw	r8,0(r7)
 200fc78:	18c00104 	addi	r3,r3,4
 200fc7c:	39c00104 	addi	r7,r7,4
 200fc80:	41bfffcc 	andi	r6,r8,65535
 200fc84:	310d883a 	add	r6,r6,r4
 200fc88:	3009d43a 	srai	r4,r6,16
 200fc8c:	4010d43a 	srli	r8,r8,16
 200fc90:	19bfff0d 	sth	r6,-4(r3)
 200fc94:	2209883a 	add	r4,r4,r8
 200fc98:	193fff8d 	sth	r4,-2(r3)
 200fc9c:	2009d43a 	srai	r4,r4,16
 200fca0:	3bbff436 	bltu	r7,r14,200fc74 <__mdiff+0xd8>
 200fca4:	0286303a 	nor	r3,zero,r10
 200fca8:	1b87883a 	add	r3,r3,r14
 200fcac:	1806d0ba 	srli	r3,r3,2
 200fcb0:	18c00044 	addi	r3,r3,1
 200fcb4:	18c7883a 	add	r3,r3,r3
 200fcb8:	18c7883a 	add	r3,r3,r3
 200fcbc:	28c7883a 	add	r3,r5,r3
 200fcc0:	193fff17 	ldw	r4,-4(r3)
 200fcc4:	18ffff04 	addi	r3,r3,-4
 200fcc8:	2000041e 	bne	r4,zero,200fcdc <__mdiff+0x140>
 200fccc:	18ffff04 	addi	r3,r3,-4
 200fcd0:	19000017 	ldw	r4,0(r3)
 200fcd4:	4a7fffc4 	addi	r9,r9,-1
 200fcd8:	203ffc26 	beq	r4,zero,200fccc <__mdiff+0x130>
 200fcdc:	12400415 	stw	r9,16(r2)
 200fce0:	dfc00417 	ldw	ra,16(sp)
 200fce4:	dcc00317 	ldw	r19,12(sp)
 200fce8:	dc800217 	ldw	r18,8(sp)
 200fcec:	dc400117 	ldw	r17,4(sp)
 200fcf0:	dc000017 	ldw	r16,0(sp)
 200fcf4:	dec00504 	addi	sp,sp,20
 200fcf8:	f800283a 	ret
 200fcfc:	8005883a 	mov	r2,r16
 200fd00:	04c00044 	movi	r19,1
 200fd04:	8821883a 	mov	r16,r17
 200fd08:	1023883a 	mov	r17,r2
 200fd0c:	003fb206 	br	200fbd8 <__mdiff+0x3c>
 200fd10:	9009883a 	mov	r4,r18
 200fd14:	000b883a 	mov	r5,zero
 200fd18:	200f1f80 	call	200f1f8 <_Balloc>
 200fd1c:	00c00044 	movi	r3,1
 200fd20:	10c00415 	stw	r3,16(r2)
 200fd24:	10000515 	stw	zero,20(r2)
 200fd28:	dfc00417 	ldw	ra,16(sp)
 200fd2c:	dcc00317 	ldw	r19,12(sp)
 200fd30:	dc800217 	ldw	r18,8(sp)
 200fd34:	dc400117 	ldw	r17,4(sp)
 200fd38:	dc000017 	ldw	r16,0(sp)
 200fd3c:	dec00504 	addi	sp,sp,20
 200fd40:	f800283a 	ret

0200fd44 <__ulp>:
 200fd44:	295ffc2c 	andhi	r5,r5,32752
 200fd48:	00bf3034 	movhi	r2,64704
 200fd4c:	2887883a 	add	r3,r5,r2
 200fd50:	00c0020e 	bge	zero,r3,200fd5c <__ulp+0x18>
 200fd54:	0005883a 	mov	r2,zero
 200fd58:	f800283a 	ret
 200fd5c:	00c7c83a 	sub	r3,zero,r3
 200fd60:	1805d53a 	srai	r2,r3,20
 200fd64:	00c004c4 	movi	r3,19
 200fd68:	18800a0e 	bge	r3,r2,200fd94 <__ulp+0x50>
 200fd6c:	01000c84 	movi	r4,50
 200fd70:	0007883a 	mov	r3,zero
 200fd74:	20800516 	blt	r4,r2,200fd8c <__ulp+0x48>
 200fd78:	01000cc4 	movi	r4,51
 200fd7c:	2085c83a 	sub	r2,r4,r2
 200fd80:	01000044 	movi	r4,1
 200fd84:	2084983a 	sll	r2,r4,r2
 200fd88:	f800283a 	ret
 200fd8c:	00800044 	movi	r2,1
 200fd90:	f800283a 	ret
 200fd94:	00c00234 	movhi	r3,8
 200fd98:	1887d83a 	sra	r3,r3,r2
 200fd9c:	0005883a 	mov	r2,zero
 200fda0:	f800283a 	ret

0200fda4 <__b2d>:
 200fda4:	defffa04 	addi	sp,sp,-24
 200fda8:	dc000015 	stw	r16,0(sp)
 200fdac:	24000417 	ldw	r16,16(r4)
 200fdb0:	dc400115 	stw	r17,4(sp)
 200fdb4:	dcc00315 	stw	r19,12(sp)
 200fdb8:	84000144 	addi	r16,r16,5
 200fdbc:	8421883a 	add	r16,r16,r16
 200fdc0:	8421883a 	add	r16,r16,r16
 200fdc4:	2421883a 	add	r16,r4,r16
 200fdc8:	847fff17 	ldw	r17,-4(r16)
 200fdcc:	24c00504 	addi	r19,r4,20
 200fdd0:	dd000415 	stw	r20,16(sp)
 200fdd4:	8809883a 	mov	r4,r17
 200fdd8:	dc800215 	stw	r18,8(sp)
 200fddc:	2829883a 	mov	r20,r5
 200fde0:	dfc00515 	stw	ra,20(sp)
 200fde4:	200f5100 	call	200f510 <__hi0bits>
 200fde8:	00c00804 	movi	r3,32
 200fdec:	1887c83a 	sub	r3,r3,r2
 200fdf0:	a0c00015 	stw	r3,0(r20)
 200fdf4:	00c00284 	movi	r3,10
 200fdf8:	84bfff04 	addi	r18,r16,-4
 200fdfc:	18801216 	blt	r3,r2,200fe48 <__b2d+0xa4>
 200fe00:	010002c4 	movi	r4,11
 200fe04:	2089c83a 	sub	r4,r4,r2
 200fe08:	8906d83a 	srl	r3,r17,r4
 200fe0c:	18cffc34 	orhi	r3,r3,16368
 200fe10:	9c80322e 	bgeu	r19,r18,200fedc <__b2d+0x138>
 200fe14:	817ffe17 	ldw	r5,-8(r16)
 200fe18:	2908d83a 	srl	r4,r5,r4
 200fe1c:	10800544 	addi	r2,r2,21
 200fe20:	88a2983a 	sll	r17,r17,r2
 200fe24:	2444b03a 	or	r2,r4,r17
 200fe28:	dfc00517 	ldw	ra,20(sp)
 200fe2c:	dd000417 	ldw	r20,16(sp)
 200fe30:	dcc00317 	ldw	r19,12(sp)
 200fe34:	dc800217 	ldw	r18,8(sp)
 200fe38:	dc400117 	ldw	r17,4(sp)
 200fe3c:	dc000017 	ldw	r16,0(sp)
 200fe40:	dec00604 	addi	sp,sp,24
 200fe44:	f800283a 	ret
 200fe48:	9c801636 	bltu	r19,r18,200fea4 <__b2d+0x100>
 200fe4c:	113ffd44 	addi	r4,r2,-11
 200fe50:	000b883a 	mov	r5,zero
 200fe54:	20001726 	beq	r4,zero,200feb4 <__b2d+0x110>
 200fe58:	00c00ac4 	movi	r3,43
 200fe5c:	1885c83a 	sub	r2,r3,r2
 200fe60:	8906983a 	sll	r3,r17,r4
 200fe64:	288cd83a 	srl	r6,r5,r2
 200fe68:	18cffc34 	orhi	r3,r3,16368
 200fe6c:	1986b03a 	or	r3,r3,r6
 200fe70:	9c801c2e 	bgeu	r19,r18,200fee4 <__b2d+0x140>
 200fe74:	91bfff17 	ldw	r6,-4(r18)
 200fe78:	3084d83a 	srl	r2,r6,r2
 200fe7c:	2908983a 	sll	r4,r5,r4
 200fe80:	1104b03a 	or	r2,r2,r4
 200fe84:	dfc00517 	ldw	ra,20(sp)
 200fe88:	dd000417 	ldw	r20,16(sp)
 200fe8c:	dcc00317 	ldw	r19,12(sp)
 200fe90:	dc800217 	ldw	r18,8(sp)
 200fe94:	dc400117 	ldw	r17,4(sp)
 200fe98:	dc000017 	ldw	r16,0(sp)
 200fe9c:	dec00604 	addi	sp,sp,24
 200fea0:	f800283a 	ret
 200fea4:	113ffd44 	addi	r4,r2,-11
 200fea8:	84bffe04 	addi	r18,r16,-8
 200feac:	817ffe17 	ldw	r5,-8(r16)
 200feb0:	203fe91e 	bne	r4,zero,200fe58 <__b2d+0xb4>
 200feb4:	88cffc34 	orhi	r3,r17,16368
 200feb8:	2805883a 	mov	r2,r5
 200febc:	dfc00517 	ldw	ra,20(sp)
 200fec0:	dd000417 	ldw	r20,16(sp)
 200fec4:	dcc00317 	ldw	r19,12(sp)
 200fec8:	dc800217 	ldw	r18,8(sp)
 200fecc:	dc400117 	ldw	r17,4(sp)
 200fed0:	dc000017 	ldw	r16,0(sp)
 200fed4:	dec00604 	addi	sp,sp,24
 200fed8:	f800283a 	ret
 200fedc:	0009883a 	mov	r4,zero
 200fee0:	003fce06 	br	200fe1c <__b2d+0x78>
 200fee4:	0005883a 	mov	r2,zero
 200fee8:	003fe406 	br	200fe7c <__b2d+0xd8>

0200feec <__d2b>:
 200feec:	defff804 	addi	sp,sp,-32
 200fef0:	dc400315 	stw	r17,12(sp)
 200fef4:	3023883a 	mov	r17,r6
 200fef8:	dc800415 	stw	r18,16(sp)
 200fefc:	8824907a 	slli	r18,r17,1
 200ff00:	dcc00515 	stw	r19,20(sp)
 200ff04:	2827883a 	mov	r19,r5
 200ff08:	9024d57a 	srli	r18,r18,21
 200ff0c:	01400044 	movi	r5,1
 200ff10:	dd000615 	stw	r20,24(sp)
 200ff14:	dc000215 	stw	r16,8(sp)
 200ff18:	dfc00715 	stw	ra,28(sp)
 200ff1c:	3829883a 	mov	r20,r7
 200ff20:	200f1f80 	call	200f1f8 <_Balloc>
 200ff24:	1021883a 	mov	r16,r2
 200ff28:	00800434 	movhi	r2,16
 200ff2c:	10bfffc4 	addi	r2,r2,-1
 200ff30:	88a2703a 	and	r17,r17,r2
 200ff34:	90000126 	beq	r18,zero,200ff3c <__d2b+0x50>
 200ff38:	8c400434 	orhi	r17,r17,16
 200ff3c:	dc400015 	stw	r17,0(sp)
 200ff40:	98002226 	beq	r19,zero,200ffcc <__d2b+0xe0>
 200ff44:	d9000104 	addi	r4,sp,4
 200ff48:	dcc00115 	stw	r19,4(sp)
 200ff4c:	200f5780 	call	200f578 <__lo0bits>
 200ff50:	d8c00017 	ldw	r3,0(sp)
 200ff54:	10002d1e 	bne	r2,zero,201000c <__d2b+0x120>
 200ff58:	d9000117 	ldw	r4,4(sp)
 200ff5c:	81000515 	stw	r4,20(r16)
 200ff60:	1823003a 	cmpeq	r17,r3,zero
 200ff64:	01000084 	movi	r4,2
 200ff68:	2463c83a 	sub	r17,r4,r17
 200ff6c:	80c00615 	stw	r3,24(r16)
 200ff70:	84400415 	stw	r17,16(r16)
 200ff74:	90001d1e 	bne	r18,zero,200ffec <__d2b+0x100>
 200ff78:	88c00104 	addi	r3,r17,4
 200ff7c:	18c7883a 	add	r3,r3,r3
 200ff80:	18c7883a 	add	r3,r3,r3
 200ff84:	80c7883a 	add	r3,r16,r3
 200ff88:	19000017 	ldw	r4,0(r3)
 200ff8c:	10bef384 	addi	r2,r2,-1074
 200ff90:	a0800015 	stw	r2,0(r20)
 200ff94:	200f5100 	call	200f510 <__hi0bits>
 200ff98:	8822917a 	slli	r17,r17,5
 200ff9c:	d8c00817 	ldw	r3,32(sp)
 200ffa0:	8885c83a 	sub	r2,r17,r2
 200ffa4:	18800015 	stw	r2,0(r3)
 200ffa8:	8005883a 	mov	r2,r16
 200ffac:	dfc00717 	ldw	ra,28(sp)
 200ffb0:	dd000617 	ldw	r20,24(sp)
 200ffb4:	dcc00517 	ldw	r19,20(sp)
 200ffb8:	dc800417 	ldw	r18,16(sp)
 200ffbc:	dc400317 	ldw	r17,12(sp)
 200ffc0:	dc000217 	ldw	r16,8(sp)
 200ffc4:	dec00804 	addi	sp,sp,32
 200ffc8:	f800283a 	ret
 200ffcc:	d809883a 	mov	r4,sp
 200ffd0:	200f5780 	call	200f578 <__lo0bits>
 200ffd4:	d8c00017 	ldw	r3,0(sp)
 200ffd8:	04400044 	movi	r17,1
 200ffdc:	84400415 	stw	r17,16(r16)
 200ffe0:	80c00515 	stw	r3,20(r16)
 200ffe4:	10800804 	addi	r2,r2,32
 200ffe8:	903fe326 	beq	r18,zero,200ff78 <__d2b+0x8c>
 200ffec:	00c00d44 	movi	r3,53
 200fff0:	94bef344 	addi	r18,r18,-1075
 200fff4:	90a5883a 	add	r18,r18,r2
 200fff8:	1885c83a 	sub	r2,r3,r2
 200fffc:	d8c00817 	ldw	r3,32(sp)
 2010000:	a4800015 	stw	r18,0(r20)
 2010004:	18800015 	stw	r2,0(r3)
 2010008:	003fe706 	br	200ffa8 <__d2b+0xbc>
 201000c:	01000804 	movi	r4,32
 2010010:	2089c83a 	sub	r4,r4,r2
 2010014:	1908983a 	sll	r4,r3,r4
 2010018:	d9400117 	ldw	r5,4(sp)
 201001c:	1886d83a 	srl	r3,r3,r2
 2010020:	2148b03a 	or	r4,r4,r5
 2010024:	81000515 	stw	r4,20(r16)
 2010028:	d8c00015 	stw	r3,0(sp)
 201002c:	003fcc06 	br	200ff60 <__d2b+0x74>

02010030 <__ratio>:
 2010030:	defff904 	addi	sp,sp,-28
 2010034:	dc400315 	stw	r17,12(sp)
 2010038:	2823883a 	mov	r17,r5
 201003c:	d9400104 	addi	r5,sp,4
 2010040:	dfc00615 	stw	ra,24(sp)
 2010044:	dcc00515 	stw	r19,20(sp)
 2010048:	dc800415 	stw	r18,16(sp)
 201004c:	2027883a 	mov	r19,r4
 2010050:	dc000215 	stw	r16,8(sp)
 2010054:	200fda40 	call	200fda4 <__b2d>
 2010058:	8809883a 	mov	r4,r17
 201005c:	d80b883a 	mov	r5,sp
 2010060:	1025883a 	mov	r18,r2
 2010064:	1821883a 	mov	r16,r3
 2010068:	200fda40 	call	200fda4 <__b2d>
 201006c:	99400417 	ldw	r5,16(r19)
 2010070:	89000417 	ldw	r4,16(r17)
 2010074:	d9800117 	ldw	r6,4(sp)
 2010078:	2909c83a 	sub	r4,r5,r4
 201007c:	d9400017 	ldw	r5,0(sp)
 2010080:	2008917a 	slli	r4,r4,5
 2010084:	314bc83a 	sub	r5,r6,r5
 2010088:	290b883a 	add	r5,r5,r4
 201008c:	01400e0e 	bge	zero,r5,20100c8 <__ratio+0x98>
 2010090:	280a953a 	slli	r5,r5,20
 2010094:	2c21883a 	add	r16,r5,r16
 2010098:	9009883a 	mov	r4,r18
 201009c:	800b883a 	mov	r5,r16
 20100a0:	100d883a 	mov	r6,r2
 20100a4:	180f883a 	mov	r7,r3
 20100a8:	2011edc0 	call	2011edc <__divdf3>
 20100ac:	dfc00617 	ldw	ra,24(sp)
 20100b0:	dcc00517 	ldw	r19,20(sp)
 20100b4:	dc800417 	ldw	r18,16(sp)
 20100b8:	dc400317 	ldw	r17,12(sp)
 20100bc:	dc000217 	ldw	r16,8(sp)
 20100c0:	dec00704 	addi	sp,sp,28
 20100c4:	f800283a 	ret
 20100c8:	280a953a 	slli	r5,r5,20
 20100cc:	1947c83a 	sub	r3,r3,r5
 20100d0:	003ff106 	br	2010098 <__ratio+0x68>

020100d4 <_mprec_log10>:
 20100d4:	defffe04 	addi	sp,sp,-8
 20100d8:	dc000015 	stw	r16,0(sp)
 20100dc:	dfc00115 	stw	ra,4(sp)
 20100e0:	008005c4 	movi	r2,23
 20100e4:	2021883a 	mov	r16,r4
 20100e8:	11000d0e 	bge	r2,r4,2010120 <_mprec_log10+0x4c>
 20100ec:	0005883a 	mov	r2,zero
 20100f0:	00cffc34 	movhi	r3,16368
 20100f4:	843fffc4 	addi	r16,r16,-1
 20100f8:	1009883a 	mov	r4,r2
 20100fc:	180b883a 	mov	r5,r3
 2010100:	000d883a 	mov	r6,zero
 2010104:	01d00934 	movhi	r7,16420
 2010108:	2011bf80 	call	2011bf8 <__muldf3>
 201010c:	803ff91e 	bne	r16,zero,20100f4 <_mprec_log10+0x20>
 2010110:	dfc00117 	ldw	ra,4(sp)
 2010114:	dc000017 	ldw	r16,0(sp)
 2010118:	dec00204 	addi	sp,sp,8
 201011c:	f800283a 	ret
 2010120:	202090fa 	slli	r16,r4,3
 2010124:	00808074 	movhi	r2,513
 2010128:	109d8004 	addi	r2,r2,30208
 201012c:	1421883a 	add	r16,r2,r16
 2010130:	80800017 	ldw	r2,0(r16)
 2010134:	80c00117 	ldw	r3,4(r16)
 2010138:	dfc00117 	ldw	ra,4(sp)
 201013c:	dc000017 	ldw	r16,0(sp)
 2010140:	dec00204 	addi	sp,sp,8
 2010144:	f800283a 	ret

02010148 <__copybits>:
 2010148:	297fffc4 	addi	r5,r5,-1
 201014c:	31c00417 	ldw	r7,16(r6)
 2010150:	2811d17a 	srai	r8,r5,5
 2010154:	30800504 	addi	r2,r6,20
 2010158:	39c00144 	addi	r7,r7,5
 201015c:	42000044 	addi	r8,r8,1
 2010160:	39cf883a 	add	r7,r7,r7
 2010164:	4211883a 	add	r8,r8,r8
 2010168:	39cf883a 	add	r7,r7,r7
 201016c:	4211883a 	add	r8,r8,r8
 2010170:	31cf883a 	add	r7,r6,r7
 2010174:	2211883a 	add	r8,r4,r8
 2010178:	11c00d2e 	bgeu	r2,r7,20101b0 <__copybits+0x68>
 201017c:	2007883a 	mov	r3,r4
 2010180:	11400017 	ldw	r5,0(r2)
 2010184:	18c00104 	addi	r3,r3,4
 2010188:	10800104 	addi	r2,r2,4
 201018c:	197fff15 	stw	r5,-4(r3)
 2010190:	11fffb36 	bltu	r2,r7,2010180 <__copybits+0x38>
 2010194:	3985c83a 	sub	r2,r7,r6
 2010198:	10bffac4 	addi	r2,r2,-21
 201019c:	1004d0ba 	srli	r2,r2,2
 20101a0:	10800044 	addi	r2,r2,1
 20101a4:	1085883a 	add	r2,r2,r2
 20101a8:	1085883a 	add	r2,r2,r2
 20101ac:	2089883a 	add	r4,r4,r2
 20101b0:	2200032e 	bgeu	r4,r8,20101c0 <__copybits+0x78>
 20101b4:	20000015 	stw	zero,0(r4)
 20101b8:	21000104 	addi	r4,r4,4
 20101bc:	223ffd36 	bltu	r4,r8,20101b4 <__copybits+0x6c>
 20101c0:	f800283a 	ret

020101c4 <__any_on>:
 20101c4:	21800417 	ldw	r6,16(r4)
 20101c8:	2805d17a 	srai	r2,r5,5
 20101cc:	20c00504 	addi	r3,r4,20
 20101d0:	30800f0e 	bge	r6,r2,2010210 <__any_on+0x4c>
 20101d4:	3005883a 	mov	r2,r6
 20101d8:	10800144 	addi	r2,r2,5
 20101dc:	1085883a 	add	r2,r2,r2
 20101e0:	1085883a 	add	r2,r2,r2
 20101e4:	2089883a 	add	r4,r4,r2
 20101e8:	1900152e 	bgeu	r3,r4,2010240 <__any_on+0x7c>
 20101ec:	20bfff17 	ldw	r2,-4(r4)
 20101f0:	213fff04 	addi	r4,r4,-4
 20101f4:	1000041e 	bne	r2,zero,2010208 <__any_on+0x44>
 20101f8:	1900112e 	bgeu	r3,r4,2010240 <__any_on+0x7c>
 20101fc:	213fff04 	addi	r4,r4,-4
 2010200:	20800017 	ldw	r2,0(r4)
 2010204:	103ffc26 	beq	r2,zero,20101f8 <__any_on+0x34>
 2010208:	00800044 	movi	r2,1
 201020c:	f800283a 	ret
 2010210:	11bff10e 	bge	r2,r6,20101d8 <__any_on+0x14>
 2010214:	294007cc 	andi	r5,r5,31
 2010218:	283fef26 	beq	r5,zero,20101d8 <__any_on+0x14>
 201021c:	11800144 	addi	r6,r2,5
 2010220:	318d883a 	add	r6,r6,r6
 2010224:	318d883a 	add	r6,r6,r6
 2010228:	218d883a 	add	r6,r4,r6
 201022c:	31800017 	ldw	r6,0(r6)
 2010230:	314ed83a 	srl	r7,r6,r5
 2010234:	394a983a 	sll	r5,r7,r5
 2010238:	29bff31e 	bne	r5,r6,2010208 <__any_on+0x44>
 201023c:	003fe606 	br	20101d8 <__any_on+0x14>
 2010240:	0005883a 	mov	r2,zero
 2010244:	f800283a 	ret

02010248 <_realloc_r>:
 2010248:	defff504 	addi	sp,sp,-44
 201024c:	dd400615 	stw	r21,24(sp)
 2010250:	dc800315 	stw	r18,12(sp)
 2010254:	dc000115 	stw	r16,4(sp)
 2010258:	dfc00a15 	stw	ra,40(sp)
 201025c:	df000915 	stw	fp,36(sp)
 2010260:	ddc00815 	stw	r23,32(sp)
 2010264:	dd800715 	stw	r22,28(sp)
 2010268:	dd000515 	stw	r20,20(sp)
 201026c:	dcc00415 	stw	r19,16(sp)
 2010270:	dc400215 	stw	r17,8(sp)
 2010274:	2821883a 	mov	r16,r5
 2010278:	202b883a 	mov	r21,r4
 201027c:	3025883a 	mov	r18,r6
 2010280:	28009626 	beq	r5,zero,20104dc <_realloc_r+0x294>
 2010284:	2012b8c0 	call	2012b8c <__malloc_lock>
 2010288:	80bfff17 	ldw	r2,-4(r16)
 201028c:	04ffff04 	movi	r19,-4
 2010290:	90c002c4 	addi	r3,r18,11
 2010294:	01000584 	movi	r4,22
 2010298:	85bffe04 	addi	r22,r16,-8
 201029c:	14e6703a 	and	r19,r2,r19
 20102a0:	20c0372e 	bgeu	r4,r3,2010380 <_realloc_r+0x138>
 20102a4:	047ffe04 	movi	r17,-8
 20102a8:	1c62703a 	and	r17,r3,r17
 20102ac:	8807883a 	mov	r3,r17
 20102b0:	88005a16 	blt	r17,zero,201041c <_realloc_r+0x1d4>
 20102b4:	8c805936 	bltu	r17,r18,201041c <_realloc_r+0x1d4>
 20102b8:	98c0340e 	bge	r19,r3,201038c <_realloc_r+0x144>
 20102bc:	07008074 	movhi	fp,513
 20102c0:	e71f0604 	addi	fp,fp,31768
 20102c4:	e1400217 	ldw	r5,8(fp)
 20102c8:	b4c9883a 	add	r4,r22,r19
 20102cc:	29009026 	beq	r5,r4,2010510 <_realloc_r+0x2c8>
 20102d0:	21800117 	ldw	r6,4(r4)
 20102d4:	01ffff84 	movi	r7,-2
 20102d8:	31ce703a 	and	r7,r6,r7
 20102dc:	21cf883a 	add	r7,r4,r7
 20102e0:	39c00117 	ldw	r7,4(r7)
 20102e4:	39c0004c 	andi	r7,r7,1
 20102e8:	38004326 	beq	r7,zero,20103f8 <_realloc_r+0x1b0>
 20102ec:	000d883a 	mov	r6,zero
 20102f0:	0009883a 	mov	r4,zero
 20102f4:	1080004c 	andi	r2,r2,1
 20102f8:	10005a1e 	bne	r2,zero,2010464 <_realloc_r+0x21c>
 20102fc:	85fffe17 	ldw	r23,-8(r16)
 2010300:	00bfff04 	movi	r2,-4
 2010304:	b5efc83a 	sub	r23,r22,r23
 2010308:	b9c00117 	ldw	r7,4(r23)
 201030c:	388e703a 	and	r7,r7,r2
 2010310:	3ccf883a 	add	r7,r7,r19
 2010314:	20005226 	beq	r4,zero,2010460 <_realloc_r+0x218>
 2010318:	31e9883a 	add	r20,r6,r7
 201031c:	2140c726 	beq	r4,r5,201063c <_realloc_r+0x3f4>
 2010320:	a0c04f16 	blt	r20,r3,2010460 <_realloc_r+0x218>
 2010324:	20800317 	ldw	r2,12(r4)
 2010328:	20c00217 	ldw	r3,8(r4)
 201032c:	99bfff04 	addi	r6,r19,-4
 2010330:	01000904 	movi	r4,36
 2010334:	18800315 	stw	r2,12(r3)
 2010338:	10c00215 	stw	r3,8(r2)
 201033c:	b8c00217 	ldw	r3,8(r23)
 2010340:	b8800317 	ldw	r2,12(r23)
 2010344:	bc800204 	addi	r18,r23,8
 2010348:	18800315 	stw	r2,12(r3)
 201034c:	10c00215 	stw	r3,8(r2)
 2010350:	2180ed36 	bltu	r4,r6,2010708 <_realloc_r+0x4c0>
 2010354:	008004c4 	movi	r2,19
 2010358:	11809b2e 	bgeu	r2,r6,20105c8 <_realloc_r+0x380>
 201035c:	80800017 	ldw	r2,0(r16)
 2010360:	b8800215 	stw	r2,8(r23)
 2010364:	80800117 	ldw	r2,4(r16)
 2010368:	b8800315 	stw	r2,12(r23)
 201036c:	008006c4 	movi	r2,27
 2010370:	1180f936 	bltu	r2,r6,2010758 <_realloc_r+0x510>
 2010374:	b8800404 	addi	r2,r23,16
 2010378:	80c00204 	addi	r3,r16,8
 201037c:	00009406 	br	20105d0 <_realloc_r+0x388>
 2010380:	00c00404 	movi	r3,16
 2010384:	1823883a 	mov	r17,r3
 2010388:	003fca06 	br	20102b4 <_realloc_r+0x6c>
 201038c:	9829883a 	mov	r20,r19
 2010390:	a447c83a 	sub	r3,r20,r17
 2010394:	010003c4 	movi	r4,15
 2010398:	1080004c 	andi	r2,r2,1
 201039c:	20c02336 	bltu	r4,r3,201042c <_realloc_r+0x1e4>
 20103a0:	1504b03a 	or	r2,r2,r20
 20103a4:	b0800115 	stw	r2,4(r22)
 20103a8:	b52d883a 	add	r22,r22,r20
 20103ac:	b0800117 	ldw	r2,4(r22)
 20103b0:	10800054 	ori	r2,r2,1
 20103b4:	b0800115 	stw	r2,4(r22)
 20103b8:	a809883a 	mov	r4,r21
 20103bc:	2012bac0 	call	2012bac <__malloc_unlock>
 20103c0:	8025883a 	mov	r18,r16
 20103c4:	9005883a 	mov	r2,r18
 20103c8:	dfc00a17 	ldw	ra,40(sp)
 20103cc:	df000917 	ldw	fp,36(sp)
 20103d0:	ddc00817 	ldw	r23,32(sp)
 20103d4:	dd800717 	ldw	r22,28(sp)
 20103d8:	dd400617 	ldw	r21,24(sp)
 20103dc:	dd000517 	ldw	r20,20(sp)
 20103e0:	dcc00417 	ldw	r19,16(sp)
 20103e4:	dc800317 	ldw	r18,12(sp)
 20103e8:	dc400217 	ldw	r17,8(sp)
 20103ec:	dc000117 	ldw	r16,4(sp)
 20103f0:	dec00b04 	addi	sp,sp,44
 20103f4:	f800283a 	ret
 20103f8:	01ffff04 	movi	r7,-4
 20103fc:	31cc703a 	and	r6,r6,r7
 2010400:	34e9883a 	add	r20,r6,r19
 2010404:	a0ffbb16 	blt	r20,r3,20102f4 <_realloc_r+0xac>
 2010408:	20c00317 	ldw	r3,12(r4)
 201040c:	21000217 	ldw	r4,8(r4)
 2010410:	20c00315 	stw	r3,12(r4)
 2010414:	19000215 	stw	r4,8(r3)
 2010418:	003fdd06 	br	2010390 <_realloc_r+0x148>
 201041c:	00800304 	movi	r2,12
 2010420:	a8800015 	stw	r2,0(r21)
 2010424:	0025883a 	mov	r18,zero
 2010428:	003fe606 	br	20103c4 <_realloc_r+0x17c>
 201042c:	1444b03a 	or	r2,r2,r17
 2010430:	b0800115 	stw	r2,4(r22)
 2010434:	b44b883a 	add	r5,r22,r17
 2010438:	18800054 	ori	r2,r3,1
 201043c:	28800115 	stw	r2,4(r5)
 2010440:	28c7883a 	add	r3,r5,r3
 2010444:	18800117 	ldw	r2,4(r3)
 2010448:	a809883a 	mov	r4,r21
 201044c:	29400204 	addi	r5,r5,8
 2010450:	10800054 	ori	r2,r2,1
 2010454:	18800115 	stw	r2,4(r3)
 2010458:	200da3c0 	call	200da3c <_free_r>
 201045c:	003fd606 	br	20103b8 <_realloc_r+0x170>
 2010460:	38c0330e 	bge	r7,r3,2010530 <_realloc_r+0x2e8>
 2010464:	900b883a 	mov	r5,r18
 2010468:	a809883a 	mov	r4,r21
 201046c:	200e5d40 	call	200e5d4 <_malloc_r>
 2010470:	1025883a 	mov	r18,r2
 2010474:	10001626 	beq	r2,zero,20104d0 <_realloc_r+0x288>
 2010478:	80bfff17 	ldw	r2,-4(r16)
 201047c:	00ffff84 	movi	r3,-2
 2010480:	913ffe04 	addi	r4,r18,-8
 2010484:	10c6703a 	and	r3,r2,r3
 2010488:	b0c7883a 	add	r3,r22,r3
 201048c:	20c09926 	beq	r4,r3,20106f4 <_realloc_r+0x4ac>
 2010490:	99bfff04 	addi	r6,r19,-4
 2010494:	00800904 	movi	r2,36
 2010498:	11806436 	bltu	r2,r6,201062c <_realloc_r+0x3e4>
 201049c:	00c004c4 	movi	r3,19
 20104a0:	19804036 	bltu	r3,r6,20105a4 <_realloc_r+0x35c>
 20104a4:	9005883a 	mov	r2,r18
 20104a8:	8007883a 	mov	r3,r16
 20104ac:	19000017 	ldw	r4,0(r3)
 20104b0:	11000015 	stw	r4,0(r2)
 20104b4:	19000117 	ldw	r4,4(r3)
 20104b8:	11000115 	stw	r4,4(r2)
 20104bc:	18c00217 	ldw	r3,8(r3)
 20104c0:	10c00215 	stw	r3,8(r2)
 20104c4:	a809883a 	mov	r4,r21
 20104c8:	800b883a 	mov	r5,r16
 20104cc:	200da3c0 	call	200da3c <_free_r>
 20104d0:	a809883a 	mov	r4,r21
 20104d4:	2012bac0 	call	2012bac <__malloc_unlock>
 20104d8:	003fba06 	br	20103c4 <_realloc_r+0x17c>
 20104dc:	300b883a 	mov	r5,r6
 20104e0:	dfc00a17 	ldw	ra,40(sp)
 20104e4:	df000917 	ldw	fp,36(sp)
 20104e8:	ddc00817 	ldw	r23,32(sp)
 20104ec:	dd800717 	ldw	r22,28(sp)
 20104f0:	dd400617 	ldw	r21,24(sp)
 20104f4:	dd000517 	ldw	r20,20(sp)
 20104f8:	dcc00417 	ldw	r19,16(sp)
 20104fc:	dc800317 	ldw	r18,12(sp)
 2010500:	dc400217 	ldw	r17,8(sp)
 2010504:	dc000117 	ldw	r16,4(sp)
 2010508:	dec00b04 	addi	sp,sp,44
 201050c:	200e5d41 	jmpi	200e5d4 <_malloc_r>
 2010510:	29800117 	ldw	r6,4(r5)
 2010514:	013fff04 	movi	r4,-4
 2010518:	89c00404 	addi	r7,r17,16
 201051c:	310c703a 	and	r6,r6,r4
 2010520:	34c9883a 	add	r4,r6,r19
 2010524:	21c0340e 	bge	r4,r7,20105f8 <_realloc_r+0x3b0>
 2010528:	2809883a 	mov	r4,r5
 201052c:	003f7106 	br	20102f4 <_realloc_r+0xac>
 2010530:	b8800317 	ldw	r2,12(r23)
 2010534:	b8c00217 	ldw	r3,8(r23)
 2010538:	99bfff04 	addi	r6,r19,-4
 201053c:	01000904 	movi	r4,36
 2010540:	18800315 	stw	r2,12(r3)
 2010544:	10c00215 	stw	r3,8(r2)
 2010548:	bc800204 	addi	r18,r23,8
 201054c:	21807836 	bltu	r4,r6,2010730 <_realloc_r+0x4e8>
 2010550:	008004c4 	movi	r2,19
 2010554:	1180732e 	bgeu	r2,r6,2010724 <_realloc_r+0x4dc>
 2010558:	80800017 	ldw	r2,0(r16)
 201055c:	b8800215 	stw	r2,8(r23)
 2010560:	80800117 	ldw	r2,4(r16)
 2010564:	b8800315 	stw	r2,12(r23)
 2010568:	008006c4 	movi	r2,27
 201056c:	11808936 	bltu	r2,r6,2010794 <_realloc_r+0x54c>
 2010570:	b8800404 	addi	r2,r23,16
 2010574:	80c00204 	addi	r3,r16,8
 2010578:	19000017 	ldw	r4,0(r3)
 201057c:	9021883a 	mov	r16,r18
 2010580:	3829883a 	mov	r20,r7
 2010584:	11000015 	stw	r4,0(r2)
 2010588:	19000117 	ldw	r4,4(r3)
 201058c:	b82d883a 	mov	r22,r23
 2010590:	11000115 	stw	r4,4(r2)
 2010594:	18c00217 	ldw	r3,8(r3)
 2010598:	10c00215 	stw	r3,8(r2)
 201059c:	b8800117 	ldw	r2,4(r23)
 20105a0:	003f7b06 	br	2010390 <_realloc_r+0x148>
 20105a4:	80c00017 	ldw	r3,0(r16)
 20105a8:	90c00015 	stw	r3,0(r18)
 20105ac:	80c00117 	ldw	r3,4(r16)
 20105b0:	90c00115 	stw	r3,4(r18)
 20105b4:	00c006c4 	movi	r3,27
 20105b8:	19804636 	bltu	r3,r6,20106d4 <_realloc_r+0x48c>
 20105bc:	90800204 	addi	r2,r18,8
 20105c0:	80c00204 	addi	r3,r16,8
 20105c4:	003fb906 	br	20104ac <_realloc_r+0x264>
 20105c8:	9005883a 	mov	r2,r18
 20105cc:	8007883a 	mov	r3,r16
 20105d0:	19000017 	ldw	r4,0(r3)
 20105d4:	9021883a 	mov	r16,r18
 20105d8:	b82d883a 	mov	r22,r23
 20105dc:	11000015 	stw	r4,0(r2)
 20105e0:	19000117 	ldw	r4,4(r3)
 20105e4:	11000115 	stw	r4,4(r2)
 20105e8:	18c00217 	ldw	r3,8(r3)
 20105ec:	10c00215 	stw	r3,8(r2)
 20105f0:	b8800117 	ldw	r2,4(r23)
 20105f4:	003f6606 	br	2010390 <_realloc_r+0x148>
 20105f8:	2445c83a 	sub	r2,r4,r17
 20105fc:	b46d883a 	add	r22,r22,r17
 2010600:	10800054 	ori	r2,r2,1
 2010604:	b0800115 	stw	r2,4(r22)
 2010608:	80bfff17 	ldw	r2,-4(r16)
 201060c:	a809883a 	mov	r4,r21
 2010610:	e5800215 	stw	r22,8(fp)
 2010614:	1080004c 	andi	r2,r2,1
 2010618:	88a2b03a 	or	r17,r17,r2
 201061c:	847fff15 	stw	r17,-4(r16)
 2010620:	2012bac0 	call	2012bac <__malloc_unlock>
 2010624:	8025883a 	mov	r18,r16
 2010628:	003f6606 	br	20103c4 <_realloc_r+0x17c>
 201062c:	9009883a 	mov	r4,r18
 2010630:	800b883a 	mov	r5,r16
 2010634:	200ef900 	call	200ef90 <memmove>
 2010638:	003fa206 	br	20104c4 <_realloc_r+0x27c>
 201063c:	88800404 	addi	r2,r17,16
 2010640:	a0bf8716 	blt	r20,r2,2010460 <_realloc_r+0x218>
 2010644:	b8800317 	ldw	r2,12(r23)
 2010648:	b8c00217 	ldw	r3,8(r23)
 201064c:	99bfff04 	addi	r6,r19,-4
 2010650:	01000904 	movi	r4,36
 2010654:	18800315 	stw	r2,12(r3)
 2010658:	10c00215 	stw	r3,8(r2)
 201065c:	bc800204 	addi	r18,r23,8
 2010660:	21806536 	bltu	r4,r6,20107f8 <_realloc_r+0x5b0>
 2010664:	008004c4 	movi	r2,19
 2010668:	1180592e 	bgeu	r2,r6,20107d0 <_realloc_r+0x588>
 201066c:	80800017 	ldw	r2,0(r16)
 2010670:	b8800215 	stw	r2,8(r23)
 2010674:	80800117 	ldw	r2,4(r16)
 2010678:	b8800315 	stw	r2,12(r23)
 201067c:	008006c4 	movi	r2,27
 2010680:	11806136 	bltu	r2,r6,2010808 <_realloc_r+0x5c0>
 2010684:	b8800404 	addi	r2,r23,16
 2010688:	80c00204 	addi	r3,r16,8
 201068c:	19000017 	ldw	r4,0(r3)
 2010690:	11000015 	stw	r4,0(r2)
 2010694:	19000117 	ldw	r4,4(r3)
 2010698:	11000115 	stw	r4,4(r2)
 201069c:	18c00217 	ldw	r3,8(r3)
 20106a0:	10c00215 	stw	r3,8(r2)
 20106a4:	a447c83a 	sub	r3,r20,r17
 20106a8:	bc45883a 	add	r2,r23,r17
 20106ac:	18c00054 	ori	r3,r3,1
 20106b0:	10c00115 	stw	r3,4(r2)
 20106b4:	b8c00117 	ldw	r3,4(r23)
 20106b8:	e0800215 	stw	r2,8(fp)
 20106bc:	a809883a 	mov	r4,r21
 20106c0:	1880004c 	andi	r2,r3,1
 20106c4:	88a2b03a 	or	r17,r17,r2
 20106c8:	bc400115 	stw	r17,4(r23)
 20106cc:	2012bac0 	call	2012bac <__malloc_unlock>
 20106d0:	003f3c06 	br	20103c4 <_realloc_r+0x17c>
 20106d4:	80c00217 	ldw	r3,8(r16)
 20106d8:	90c00215 	stw	r3,8(r18)
 20106dc:	80c00317 	ldw	r3,12(r16)
 20106e0:	90c00315 	stw	r3,12(r18)
 20106e4:	30802426 	beq	r6,r2,2010778 <_realloc_r+0x530>
 20106e8:	90800404 	addi	r2,r18,16
 20106ec:	80c00404 	addi	r3,r16,16
 20106f0:	003f6e06 	br	20104ac <_realloc_r+0x264>
 20106f4:	953fff17 	ldw	r20,-4(r18)
 20106f8:	00ffff04 	movi	r3,-4
 20106fc:	a0e8703a 	and	r20,r20,r3
 2010700:	a4e9883a 	add	r20,r20,r19
 2010704:	003f2206 	br	2010390 <_realloc_r+0x148>
 2010708:	800b883a 	mov	r5,r16
 201070c:	9009883a 	mov	r4,r18
 2010710:	200ef900 	call	200ef90 <memmove>
 2010714:	9021883a 	mov	r16,r18
 2010718:	b8800117 	ldw	r2,4(r23)
 201071c:	b82d883a 	mov	r22,r23
 2010720:	003f1b06 	br	2010390 <_realloc_r+0x148>
 2010724:	9005883a 	mov	r2,r18
 2010728:	8007883a 	mov	r3,r16
 201072c:	003f9206 	br	2010578 <_realloc_r+0x330>
 2010730:	800b883a 	mov	r5,r16
 2010734:	9009883a 	mov	r4,r18
 2010738:	d9c00015 	stw	r7,0(sp)
 201073c:	200ef900 	call	200ef90 <memmove>
 2010740:	d9c00017 	ldw	r7,0(sp)
 2010744:	9021883a 	mov	r16,r18
 2010748:	b8800117 	ldw	r2,4(r23)
 201074c:	3829883a 	mov	r20,r7
 2010750:	b82d883a 	mov	r22,r23
 2010754:	003f0e06 	br	2010390 <_realloc_r+0x148>
 2010758:	80800217 	ldw	r2,8(r16)
 201075c:	b8800415 	stw	r2,16(r23)
 2010760:	80800317 	ldw	r2,12(r16)
 2010764:	b8800515 	stw	r2,20(r23)
 2010768:	31001226 	beq	r6,r4,20107b4 <_realloc_r+0x56c>
 201076c:	b8800604 	addi	r2,r23,24
 2010770:	80c00404 	addi	r3,r16,16
 2010774:	003f9606 	br	20105d0 <_realloc_r+0x388>
 2010778:	81000417 	ldw	r4,16(r16)
 201077c:	90800604 	addi	r2,r18,24
 2010780:	80c00604 	addi	r3,r16,24
 2010784:	91000415 	stw	r4,16(r18)
 2010788:	81000517 	ldw	r4,20(r16)
 201078c:	91000515 	stw	r4,20(r18)
 2010790:	003f4606 	br	20104ac <_realloc_r+0x264>
 2010794:	80800217 	ldw	r2,8(r16)
 2010798:	b8800415 	stw	r2,16(r23)
 201079c:	80800317 	ldw	r2,12(r16)
 20107a0:	b8800515 	stw	r2,20(r23)
 20107a4:	31000d26 	beq	r6,r4,20107dc <_realloc_r+0x594>
 20107a8:	b8800604 	addi	r2,r23,24
 20107ac:	80c00404 	addi	r3,r16,16
 20107b0:	003f7106 	br	2010578 <_realloc_r+0x330>
 20107b4:	81000417 	ldw	r4,16(r16)
 20107b8:	b8800804 	addi	r2,r23,32
 20107bc:	80c00604 	addi	r3,r16,24
 20107c0:	b9000615 	stw	r4,24(r23)
 20107c4:	81000517 	ldw	r4,20(r16)
 20107c8:	b9000715 	stw	r4,28(r23)
 20107cc:	003f8006 	br	20105d0 <_realloc_r+0x388>
 20107d0:	9005883a 	mov	r2,r18
 20107d4:	8007883a 	mov	r3,r16
 20107d8:	003fac06 	br	201068c <_realloc_r+0x444>
 20107dc:	81000417 	ldw	r4,16(r16)
 20107e0:	b8800804 	addi	r2,r23,32
 20107e4:	80c00604 	addi	r3,r16,24
 20107e8:	b9000615 	stw	r4,24(r23)
 20107ec:	81000517 	ldw	r4,20(r16)
 20107f0:	b9000715 	stw	r4,28(r23)
 20107f4:	003f6006 	br	2010578 <_realloc_r+0x330>
 20107f8:	9009883a 	mov	r4,r18
 20107fc:	800b883a 	mov	r5,r16
 2010800:	200ef900 	call	200ef90 <memmove>
 2010804:	003fa706 	br	20106a4 <_realloc_r+0x45c>
 2010808:	80800217 	ldw	r2,8(r16)
 201080c:	b8800415 	stw	r2,16(r23)
 2010810:	80800317 	ldw	r2,12(r16)
 2010814:	b8800515 	stw	r2,20(r23)
 2010818:	31000326 	beq	r6,r4,2010828 <_realloc_r+0x5e0>
 201081c:	b8800604 	addi	r2,r23,24
 2010820:	80c00404 	addi	r3,r16,16
 2010824:	003f9906 	br	201068c <_realloc_r+0x444>
 2010828:	81000417 	ldw	r4,16(r16)
 201082c:	b8800804 	addi	r2,r23,32
 2010830:	80c00604 	addi	r3,r16,24
 2010834:	b9000615 	stw	r4,24(r23)
 2010838:	81000517 	ldw	r4,20(r16)
 201083c:	b9000715 	stw	r4,28(r23)
 2010840:	003f9206 	br	201068c <_realloc_r+0x444>

02010844 <__isinfd>:
 2010844:	0105c83a 	sub	r2,zero,r4
 2010848:	1108b03a 	or	r4,r2,r4
 201084c:	2004d7fa 	srli	r2,r4,31
 2010850:	00e00034 	movhi	r3,32768
 2010854:	18ffffc4 	addi	r3,r3,-1
 2010858:	28ca703a 	and	r5,r5,r3
 201085c:	1144b03a 	or	r2,r2,r5
 2010860:	00dffc34 	movhi	r3,32752
 2010864:	1885c83a 	sub	r2,r3,r2
 2010868:	0087c83a 	sub	r3,zero,r2
 201086c:	1884b03a 	or	r2,r3,r2
 2010870:	1005d7fa 	srai	r2,r2,31
 2010874:	10800044 	addi	r2,r2,1
 2010878:	f800283a 	ret

0201087c <__isnand>:
 201087c:	0105c83a 	sub	r2,zero,r4
 2010880:	1108b03a 	or	r4,r2,r4
 2010884:	2004d7fa 	srli	r2,r4,31
 2010888:	00e00034 	movhi	r3,32768
 201088c:	18ffffc4 	addi	r3,r3,-1
 2010890:	28ca703a 	and	r5,r5,r3
 2010894:	1144b03a 	or	r2,r2,r5
 2010898:	00dffc34 	movhi	r3,32752
 201089c:	1885c83a 	sub	r2,r3,r2
 20108a0:	1004d7fa 	srli	r2,r2,31
 20108a4:	f800283a 	ret

020108a8 <_sbrk_r>:
 20108a8:	defffd04 	addi	sp,sp,-12
 20108ac:	dc400115 	stw	r17,4(sp)
 20108b0:	dc000015 	stw	r16,0(sp)
 20108b4:	2023883a 	mov	r17,r4
 20108b8:	040080b4 	movhi	r16,514
 20108bc:	84250504 	addi	r16,r16,-27628
 20108c0:	2809883a 	mov	r4,r5
 20108c4:	dfc00215 	stw	ra,8(sp)
 20108c8:	80000015 	stw	zero,0(r16)
 20108cc:	2012d900 	call	2012d90 <sbrk>
 20108d0:	00ffffc4 	movi	r3,-1
 20108d4:	10c00526 	beq	r2,r3,20108ec <_sbrk_r+0x44>
 20108d8:	dfc00217 	ldw	ra,8(sp)
 20108dc:	dc400117 	ldw	r17,4(sp)
 20108e0:	dc000017 	ldw	r16,0(sp)
 20108e4:	dec00304 	addi	sp,sp,12
 20108e8:	f800283a 	ret
 20108ec:	80c00017 	ldw	r3,0(r16)
 20108f0:	183ff926 	beq	r3,zero,20108d8 <_sbrk_r+0x30>
 20108f4:	88c00015 	stw	r3,0(r17)
 20108f8:	dfc00217 	ldw	ra,8(sp)
 20108fc:	dc400117 	ldw	r17,4(sp)
 2010900:	dc000017 	ldw	r16,0(sp)
 2010904:	dec00304 	addi	sp,sp,12
 2010908:	f800283a 	ret

0201090c <__sread>:
 201090c:	defffe04 	addi	sp,sp,-8
 2010910:	dc000015 	stw	r16,0(sp)
 2010914:	2821883a 	mov	r16,r5
 2010918:	2940038f 	ldh	r5,14(r5)
 201091c:	dfc00115 	stw	ra,4(sp)
 2010920:	2010f140 	call	2010f14 <_read_r>
 2010924:	10000716 	blt	r2,zero,2010944 <__sread+0x38>
 2010928:	80c01417 	ldw	r3,80(r16)
 201092c:	1887883a 	add	r3,r3,r2
 2010930:	80c01415 	stw	r3,80(r16)
 2010934:	dfc00117 	ldw	ra,4(sp)
 2010938:	dc000017 	ldw	r16,0(sp)
 201093c:	dec00204 	addi	sp,sp,8
 2010940:	f800283a 	ret
 2010944:	80c0030b 	ldhu	r3,12(r16)
 2010948:	18fbffcc 	andi	r3,r3,61439
 201094c:	80c0030d 	sth	r3,12(r16)
 2010950:	dfc00117 	ldw	ra,4(sp)
 2010954:	dc000017 	ldw	r16,0(sp)
 2010958:	dec00204 	addi	sp,sp,8
 201095c:	f800283a 	ret

02010960 <__swrite>:
 2010960:	2880030b 	ldhu	r2,12(r5)
 2010964:	defffb04 	addi	sp,sp,-20
 2010968:	dcc00315 	stw	r19,12(sp)
 201096c:	10c0400c 	andi	r3,r2,256
 2010970:	18ffffcc 	andi	r3,r3,65535
 2010974:	18e0001c 	xori	r3,r3,32768
 2010978:	dc800215 	stw	r18,8(sp)
 201097c:	dc400115 	stw	r17,4(sp)
 2010980:	dc000015 	stw	r16,0(sp)
 2010984:	dfc00415 	stw	ra,16(sp)
 2010988:	18e00004 	addi	r3,r3,-32768
 201098c:	2821883a 	mov	r16,r5
 2010990:	2027883a 	mov	r19,r4
 2010994:	3025883a 	mov	r18,r6
 2010998:	3823883a 	mov	r17,r7
 201099c:	18000526 	beq	r3,zero,20109b4 <__swrite+0x54>
 20109a0:	2940038f 	ldh	r5,14(r5)
 20109a4:	000d883a 	mov	r6,zero
 20109a8:	01c00084 	movi	r7,2
 20109ac:	2010ea80 	call	2010ea8 <_lseek_r>
 20109b0:	8080030b 	ldhu	r2,12(r16)
 20109b4:	8140038f 	ldh	r5,14(r16)
 20109b8:	10bbffcc 	andi	r2,r2,61439
 20109bc:	9809883a 	mov	r4,r19
 20109c0:	900d883a 	mov	r6,r18
 20109c4:	880f883a 	mov	r7,r17
 20109c8:	8080030d 	sth	r2,12(r16)
 20109cc:	dfc00417 	ldw	ra,16(sp)
 20109d0:	dcc00317 	ldw	r19,12(sp)
 20109d4:	dc800217 	ldw	r18,8(sp)
 20109d8:	dc400117 	ldw	r17,4(sp)
 20109dc:	dc000017 	ldw	r16,0(sp)
 20109e0:	dec00504 	addi	sp,sp,20
 20109e4:	2010af01 	jmpi	2010af0 <_write_r>

020109e8 <__sseek>:
 20109e8:	defffe04 	addi	sp,sp,-8
 20109ec:	dc000015 	stw	r16,0(sp)
 20109f0:	2821883a 	mov	r16,r5
 20109f4:	2940038f 	ldh	r5,14(r5)
 20109f8:	dfc00115 	stw	ra,4(sp)
 20109fc:	2010ea80 	call	2010ea8 <_lseek_r>
 2010a00:	00ffffc4 	movi	r3,-1
 2010a04:	10c00826 	beq	r2,r3,2010a28 <__sseek+0x40>
 2010a08:	80c0030b 	ldhu	r3,12(r16)
 2010a0c:	80801415 	stw	r2,80(r16)
 2010a10:	18c40014 	ori	r3,r3,4096
 2010a14:	80c0030d 	sth	r3,12(r16)
 2010a18:	dfc00117 	ldw	ra,4(sp)
 2010a1c:	dc000017 	ldw	r16,0(sp)
 2010a20:	dec00204 	addi	sp,sp,8
 2010a24:	f800283a 	ret
 2010a28:	80c0030b 	ldhu	r3,12(r16)
 2010a2c:	18fbffcc 	andi	r3,r3,61439
 2010a30:	80c0030d 	sth	r3,12(r16)
 2010a34:	dfc00117 	ldw	ra,4(sp)
 2010a38:	dc000017 	ldw	r16,0(sp)
 2010a3c:	dec00204 	addi	sp,sp,8
 2010a40:	f800283a 	ret

02010a44 <__sclose>:
 2010a44:	2940038f 	ldh	r5,14(r5)
 2010a48:	2010c281 	jmpi	2010c28 <_close_r>

02010a4c <strcmp>:
 2010a4c:	2904b03a 	or	r2,r5,r4
 2010a50:	108000cc 	andi	r2,r2,3
 2010a54:	1000171e 	bne	r2,zero,2010ab4 <strcmp+0x68>
 2010a58:	20800017 	ldw	r2,0(r4)
 2010a5c:	28c00017 	ldw	r3,0(r5)
 2010a60:	10c0141e 	bne	r2,r3,2010ab4 <strcmp+0x68>
 2010a64:	027fbff4 	movhi	r9,65279
 2010a68:	4a7fbfc4 	addi	r9,r9,-257
 2010a6c:	1247883a 	add	r3,r2,r9
 2010a70:	0084303a 	nor	r2,zero,r2
 2010a74:	1884703a 	and	r2,r3,r2
 2010a78:	02202074 	movhi	r8,32897
 2010a7c:	42202004 	addi	r8,r8,-32640
 2010a80:	1204703a 	and	r2,r2,r8
 2010a84:	10000226 	beq	r2,zero,2010a90 <strcmp+0x44>
 2010a88:	00001706 	br	2010ae8 <strcmp+0x9c>
 2010a8c:	3000161e 	bne	r6,zero,2010ae8 <strcmp+0x9c>
 2010a90:	21000104 	addi	r4,r4,4
 2010a94:	20800017 	ldw	r2,0(r4)
 2010a98:	29400104 	addi	r5,r5,4
 2010a9c:	28c00017 	ldw	r3,0(r5)
 2010aa0:	124f883a 	add	r7,r2,r9
 2010aa4:	008c303a 	nor	r6,zero,r2
 2010aa8:	398c703a 	and	r6,r7,r6
 2010aac:	320c703a 	and	r6,r6,r8
 2010ab0:	10fff626 	beq	r2,r3,2010a8c <strcmp+0x40>
 2010ab4:	20800007 	ldb	r2,0(r4)
 2010ab8:	1000051e 	bne	r2,zero,2010ad0 <strcmp+0x84>
 2010abc:	00000606 	br	2010ad8 <strcmp+0x8c>
 2010ac0:	21000044 	addi	r4,r4,1
 2010ac4:	20800007 	ldb	r2,0(r4)
 2010ac8:	29400044 	addi	r5,r5,1
 2010acc:	10000226 	beq	r2,zero,2010ad8 <strcmp+0x8c>
 2010ad0:	28c00007 	ldb	r3,0(r5)
 2010ad4:	10fffa26 	beq	r2,r3,2010ac0 <strcmp+0x74>
 2010ad8:	20c00003 	ldbu	r3,0(r4)
 2010adc:	28800003 	ldbu	r2,0(r5)
 2010ae0:	1885c83a 	sub	r2,r3,r2
 2010ae4:	f800283a 	ret
 2010ae8:	0005883a 	mov	r2,zero
 2010aec:	f800283a 	ret

02010af0 <_write_r>:
 2010af0:	defffd04 	addi	sp,sp,-12
 2010af4:	dc400115 	stw	r17,4(sp)
 2010af8:	dc000015 	stw	r16,0(sp)
 2010afc:	2023883a 	mov	r17,r4
 2010b00:	040080b4 	movhi	r16,514
 2010b04:	84250504 	addi	r16,r16,-27628
 2010b08:	2809883a 	mov	r4,r5
 2010b0c:	300b883a 	mov	r5,r6
 2010b10:	380d883a 	mov	r6,r7
 2010b14:	dfc00215 	stw	ra,8(sp)
 2010b18:	80000015 	stw	zero,0(r16)
 2010b1c:	2012e900 	call	2012e90 <write>
 2010b20:	00ffffc4 	movi	r3,-1
 2010b24:	10c00526 	beq	r2,r3,2010b3c <_write_r+0x4c>
 2010b28:	dfc00217 	ldw	ra,8(sp)
 2010b2c:	dc400117 	ldw	r17,4(sp)
 2010b30:	dc000017 	ldw	r16,0(sp)
 2010b34:	dec00304 	addi	sp,sp,12
 2010b38:	f800283a 	ret
 2010b3c:	80c00017 	ldw	r3,0(r16)
 2010b40:	183ff926 	beq	r3,zero,2010b28 <_write_r+0x38>
 2010b44:	88c00015 	stw	r3,0(r17)
 2010b48:	dfc00217 	ldw	ra,8(sp)
 2010b4c:	dc400117 	ldw	r17,4(sp)
 2010b50:	dc000017 	ldw	r16,0(sp)
 2010b54:	dec00304 	addi	sp,sp,12
 2010b58:	f800283a 	ret

02010b5c <_calloc_r>:
 2010b5c:	defffe04 	addi	sp,sp,-8
 2010b60:	dc000015 	stw	r16,0(sp)
 2010b64:	2021883a 	mov	r16,r4
 2010b68:	3009883a 	mov	r4,r6
 2010b6c:	dfc00115 	stw	ra,4(sp)
 2010b70:	20093b80 	call	20093b8 <__mulsi3>
 2010b74:	8009883a 	mov	r4,r16
 2010b78:	100b883a 	mov	r5,r2
 2010b7c:	200e5d40 	call	200e5d4 <_malloc_r>
 2010b80:	1021883a 	mov	r16,r2
 2010b84:	10000c26 	beq	r2,zero,2010bb8 <_calloc_r+0x5c>
 2010b88:	11bfff17 	ldw	r6,-4(r2)
 2010b8c:	00ffff04 	movi	r3,-4
 2010b90:	00800904 	movi	r2,36
 2010b94:	30cc703a 	and	r6,r6,r3
 2010b98:	30cd883a 	add	r6,r6,r3
 2010b9c:	11801436 	bltu	r2,r6,2010bf0 <_calloc_r+0x94>
 2010ba0:	00c004c4 	movi	r3,19
 2010ba4:	19800936 	bltu	r3,r6,2010bcc <_calloc_r+0x70>
 2010ba8:	8005883a 	mov	r2,r16
 2010bac:	10000015 	stw	zero,0(r2)
 2010bb0:	10000115 	stw	zero,4(r2)
 2010bb4:	10000215 	stw	zero,8(r2)
 2010bb8:	8005883a 	mov	r2,r16
 2010bbc:	dfc00117 	ldw	ra,4(sp)
 2010bc0:	dc000017 	ldw	r16,0(sp)
 2010bc4:	dec00204 	addi	sp,sp,8
 2010bc8:	f800283a 	ret
 2010bcc:	80000015 	stw	zero,0(r16)
 2010bd0:	80000115 	stw	zero,4(r16)
 2010bd4:	00c006c4 	movi	r3,27
 2010bd8:	19800d2e 	bgeu	r3,r6,2010c10 <_calloc_r+0xb4>
 2010bdc:	80000215 	stw	zero,8(r16)
 2010be0:	80000315 	stw	zero,12(r16)
 2010be4:	30800c26 	beq	r6,r2,2010c18 <_calloc_r+0xbc>
 2010be8:	80800404 	addi	r2,r16,16
 2010bec:	003fef06 	br	2010bac <_calloc_r+0x50>
 2010bf0:	8009883a 	mov	r4,r16
 2010bf4:	000b883a 	mov	r5,zero
 2010bf8:	200f11c0 	call	200f11c <memset>
 2010bfc:	8005883a 	mov	r2,r16
 2010c00:	dfc00117 	ldw	ra,4(sp)
 2010c04:	dc000017 	ldw	r16,0(sp)
 2010c08:	dec00204 	addi	sp,sp,8
 2010c0c:	f800283a 	ret
 2010c10:	80800204 	addi	r2,r16,8
 2010c14:	003fe506 	br	2010bac <_calloc_r+0x50>
 2010c18:	80000415 	stw	zero,16(r16)
 2010c1c:	80000515 	stw	zero,20(r16)
 2010c20:	80800604 	addi	r2,r16,24
 2010c24:	003fe106 	br	2010bac <_calloc_r+0x50>

02010c28 <_close_r>:
 2010c28:	defffd04 	addi	sp,sp,-12
 2010c2c:	dc400115 	stw	r17,4(sp)
 2010c30:	dc000015 	stw	r16,0(sp)
 2010c34:	2023883a 	mov	r17,r4
 2010c38:	040080b4 	movhi	r16,514
 2010c3c:	84250504 	addi	r16,r16,-27628
 2010c40:	2809883a 	mov	r4,r5
 2010c44:	dfc00215 	stw	ra,8(sp)
 2010c48:	80000015 	stw	zero,0(r16)
 2010c4c:	201243c0 	call	201243c <close>
 2010c50:	00ffffc4 	movi	r3,-1
 2010c54:	10c00526 	beq	r2,r3,2010c6c <_close_r+0x44>
 2010c58:	dfc00217 	ldw	ra,8(sp)
 2010c5c:	dc400117 	ldw	r17,4(sp)
 2010c60:	dc000017 	ldw	r16,0(sp)
 2010c64:	dec00304 	addi	sp,sp,12
 2010c68:	f800283a 	ret
 2010c6c:	80c00017 	ldw	r3,0(r16)
 2010c70:	183ff926 	beq	r3,zero,2010c58 <_close_r+0x30>
 2010c74:	88c00015 	stw	r3,0(r17)
 2010c78:	dfc00217 	ldw	ra,8(sp)
 2010c7c:	dc400117 	ldw	r17,4(sp)
 2010c80:	dc000017 	ldw	r16,0(sp)
 2010c84:	dec00304 	addi	sp,sp,12
 2010c88:	f800283a 	ret

02010c8c <_fclose_r>:
 2010c8c:	defffc04 	addi	sp,sp,-16
 2010c90:	dc400115 	stw	r17,4(sp)
 2010c94:	dc000015 	stw	r16,0(sp)
 2010c98:	dfc00315 	stw	ra,12(sp)
 2010c9c:	dc800215 	stw	r18,8(sp)
 2010ca0:	2821883a 	mov	r16,r5
 2010ca4:	2023883a 	mov	r17,r4
 2010ca8:	28003426 	beq	r5,zero,2010d7c <_fclose_r+0xf0>
 2010cac:	200d8c00 	call	200d8c0 <__sfp_lock_acquire>
 2010cb0:	88000226 	beq	r17,zero,2010cbc <_fclose_r+0x30>
 2010cb4:	88800e17 	ldw	r2,56(r17)
 2010cb8:	10003826 	beq	r2,zero,2010d9c <_fclose_r+0x110>
 2010cbc:	8080030f 	ldh	r2,12(r16)
 2010cc0:	10002526 	beq	r2,zero,2010d58 <_fclose_r+0xcc>
 2010cc4:	8809883a 	mov	r4,r17
 2010cc8:	800b883a 	mov	r5,r16
 2010ccc:	200d3fc0 	call	200d3fc <_fflush_r>
 2010cd0:	1025883a 	mov	r18,r2
 2010cd4:	80800b17 	ldw	r2,44(r16)
 2010cd8:	10000426 	beq	r2,zero,2010cec <_fclose_r+0x60>
 2010cdc:	81400717 	ldw	r5,28(r16)
 2010ce0:	8809883a 	mov	r4,r17
 2010ce4:	103ee83a 	callr	r2
 2010ce8:	10003516 	blt	r2,zero,2010dc0 <_fclose_r+0x134>
 2010cec:	8080030b 	ldhu	r2,12(r16)
 2010cf0:	1080200c 	andi	r2,r2,128
 2010cf4:	10bfffcc 	andi	r2,r2,65535
 2010cf8:	10a0001c 	xori	r2,r2,32768
 2010cfc:	10a00004 	addi	r2,r2,-32768
 2010d00:	10002b1e 	bne	r2,zero,2010db0 <_fclose_r+0x124>
 2010d04:	81400c17 	ldw	r5,48(r16)
 2010d08:	28000526 	beq	r5,zero,2010d20 <_fclose_r+0x94>
 2010d0c:	80801004 	addi	r2,r16,64
 2010d10:	28800226 	beq	r5,r2,2010d1c <_fclose_r+0x90>
 2010d14:	8809883a 	mov	r4,r17
 2010d18:	200da3c0 	call	200da3c <_free_r>
 2010d1c:	80000c15 	stw	zero,48(r16)
 2010d20:	81401117 	ldw	r5,68(r16)
 2010d24:	28000326 	beq	r5,zero,2010d34 <_fclose_r+0xa8>
 2010d28:	8809883a 	mov	r4,r17
 2010d2c:	200da3c0 	call	200da3c <_free_r>
 2010d30:	80001115 	stw	zero,68(r16)
 2010d34:	8000030d 	sth	zero,12(r16)
 2010d38:	200d8c40 	call	200d8c4 <__sfp_lock_release>
 2010d3c:	9005883a 	mov	r2,r18
 2010d40:	dfc00317 	ldw	ra,12(sp)
 2010d44:	dc800217 	ldw	r18,8(sp)
 2010d48:	dc400117 	ldw	r17,4(sp)
 2010d4c:	dc000017 	ldw	r16,0(sp)
 2010d50:	dec00404 	addi	sp,sp,16
 2010d54:	f800283a 	ret
 2010d58:	200d8c40 	call	200d8c4 <__sfp_lock_release>
 2010d5c:	0025883a 	mov	r18,zero
 2010d60:	9005883a 	mov	r2,r18
 2010d64:	dfc00317 	ldw	ra,12(sp)
 2010d68:	dc800217 	ldw	r18,8(sp)
 2010d6c:	dc400117 	ldw	r17,4(sp)
 2010d70:	dc000017 	ldw	r16,0(sp)
 2010d74:	dec00404 	addi	sp,sp,16
 2010d78:	f800283a 	ret
 2010d7c:	0025883a 	mov	r18,zero
 2010d80:	9005883a 	mov	r2,r18
 2010d84:	dfc00317 	ldw	ra,12(sp)
 2010d88:	dc800217 	ldw	r18,8(sp)
 2010d8c:	dc400117 	ldw	r17,4(sp)
 2010d90:	dc000017 	ldw	r16,0(sp)
 2010d94:	dec00404 	addi	sp,sp,16
 2010d98:	f800283a 	ret
 2010d9c:	8809883a 	mov	r4,r17
 2010da0:	200d6b80 	call	200d6b8 <__sinit>
 2010da4:	8080030f 	ldh	r2,12(r16)
 2010da8:	103fc61e 	bne	r2,zero,2010cc4 <_fclose_r+0x38>
 2010dac:	003fea06 	br	2010d58 <_fclose_r+0xcc>
 2010db0:	81400417 	ldw	r5,16(r16)
 2010db4:	8809883a 	mov	r4,r17
 2010db8:	200da3c0 	call	200da3c <_free_r>
 2010dbc:	003fd106 	br	2010d04 <_fclose_r+0x78>
 2010dc0:	04bfffc4 	movi	r18,-1
 2010dc4:	003fc906 	br	2010cec <_fclose_r+0x60>

02010dc8 <fclose>:
 2010dc8:	008080b4 	movhi	r2,514
 2010dcc:	10a4ee04 	addi	r2,r2,-27720
 2010dd0:	200b883a 	mov	r5,r4
 2010dd4:	11000017 	ldw	r4,0(r2)
 2010dd8:	2010c8c1 	jmpi	2010c8c <_fclose_r>

02010ddc <_fstat_r>:
 2010ddc:	defffd04 	addi	sp,sp,-12
 2010de0:	dc400115 	stw	r17,4(sp)
 2010de4:	dc000015 	stw	r16,0(sp)
 2010de8:	2023883a 	mov	r17,r4
 2010dec:	040080b4 	movhi	r16,514
 2010df0:	84250504 	addi	r16,r16,-27628
 2010df4:	2809883a 	mov	r4,r5
 2010df8:	300b883a 	mov	r5,r6
 2010dfc:	dfc00215 	stw	ra,8(sp)
 2010e00:	80000015 	stw	zero,0(r16)
 2010e04:	20125840 	call	2012584 <fstat>
 2010e08:	00ffffc4 	movi	r3,-1
 2010e0c:	10c00526 	beq	r2,r3,2010e24 <_fstat_r+0x48>
 2010e10:	dfc00217 	ldw	ra,8(sp)
 2010e14:	dc400117 	ldw	r17,4(sp)
 2010e18:	dc000017 	ldw	r16,0(sp)
 2010e1c:	dec00304 	addi	sp,sp,12
 2010e20:	f800283a 	ret
 2010e24:	80c00017 	ldw	r3,0(r16)
 2010e28:	183ff926 	beq	r3,zero,2010e10 <_fstat_r+0x34>
 2010e2c:	88c00015 	stw	r3,0(r17)
 2010e30:	dfc00217 	ldw	ra,8(sp)
 2010e34:	dc400117 	ldw	r17,4(sp)
 2010e38:	dc000017 	ldw	r16,0(sp)
 2010e3c:	dec00304 	addi	sp,sp,12
 2010e40:	f800283a 	ret

02010e44 <_isatty_r>:
 2010e44:	defffd04 	addi	sp,sp,-12
 2010e48:	dc400115 	stw	r17,4(sp)
 2010e4c:	dc000015 	stw	r16,0(sp)
 2010e50:	2023883a 	mov	r17,r4
 2010e54:	040080b4 	movhi	r16,514
 2010e58:	84250504 	addi	r16,r16,-27628
 2010e5c:	2809883a 	mov	r4,r5
 2010e60:	dfc00215 	stw	ra,8(sp)
 2010e64:	80000015 	stw	zero,0(r16)
 2010e68:	201294c0 	call	201294c <isatty>
 2010e6c:	00ffffc4 	movi	r3,-1
 2010e70:	10c00526 	beq	r2,r3,2010e88 <_isatty_r+0x44>
 2010e74:	dfc00217 	ldw	ra,8(sp)
 2010e78:	dc400117 	ldw	r17,4(sp)
 2010e7c:	dc000017 	ldw	r16,0(sp)
 2010e80:	dec00304 	addi	sp,sp,12
 2010e84:	f800283a 	ret
 2010e88:	80c00017 	ldw	r3,0(r16)
 2010e8c:	183ff926 	beq	r3,zero,2010e74 <_isatty_r+0x30>
 2010e90:	88c00015 	stw	r3,0(r17)
 2010e94:	dfc00217 	ldw	ra,8(sp)
 2010e98:	dc400117 	ldw	r17,4(sp)
 2010e9c:	dc000017 	ldw	r16,0(sp)
 2010ea0:	dec00304 	addi	sp,sp,12
 2010ea4:	f800283a 	ret

02010ea8 <_lseek_r>:
 2010ea8:	defffd04 	addi	sp,sp,-12
 2010eac:	dc400115 	stw	r17,4(sp)
 2010eb0:	dc000015 	stw	r16,0(sp)
 2010eb4:	2023883a 	mov	r17,r4
 2010eb8:	040080b4 	movhi	r16,514
 2010ebc:	84250504 	addi	r16,r16,-27628
 2010ec0:	2809883a 	mov	r4,r5
 2010ec4:	300b883a 	mov	r5,r6
 2010ec8:	380d883a 	mov	r6,r7
 2010ecc:	dfc00215 	stw	ra,8(sp)
 2010ed0:	80000015 	stw	zero,0(r16)
 2010ed4:	2012a400 	call	2012a40 <lseek>
 2010ed8:	00ffffc4 	movi	r3,-1
 2010edc:	10c00526 	beq	r2,r3,2010ef4 <_lseek_r+0x4c>
 2010ee0:	dfc00217 	ldw	ra,8(sp)
 2010ee4:	dc400117 	ldw	r17,4(sp)
 2010ee8:	dc000017 	ldw	r16,0(sp)
 2010eec:	dec00304 	addi	sp,sp,12
 2010ef0:	f800283a 	ret
 2010ef4:	80c00017 	ldw	r3,0(r16)
 2010ef8:	183ff926 	beq	r3,zero,2010ee0 <_lseek_r+0x38>
 2010efc:	88c00015 	stw	r3,0(r17)
 2010f00:	dfc00217 	ldw	ra,8(sp)
 2010f04:	dc400117 	ldw	r17,4(sp)
 2010f08:	dc000017 	ldw	r16,0(sp)
 2010f0c:	dec00304 	addi	sp,sp,12
 2010f10:	f800283a 	ret

02010f14 <_read_r>:
 2010f14:	defffd04 	addi	sp,sp,-12
 2010f18:	dc400115 	stw	r17,4(sp)
 2010f1c:	dc000015 	stw	r16,0(sp)
 2010f20:	2023883a 	mov	r17,r4
 2010f24:	040080b4 	movhi	r16,514
 2010f28:	84250504 	addi	r16,r16,-27628
 2010f2c:	2809883a 	mov	r4,r5
 2010f30:	300b883a 	mov	r5,r6
 2010f34:	380d883a 	mov	r6,r7
 2010f38:	dfc00215 	stw	ra,8(sp)
 2010f3c:	80000015 	stw	zero,0(r16)
 2010f40:	2012c1c0 	call	2012c1c <read>
 2010f44:	00ffffc4 	movi	r3,-1
 2010f48:	10c00526 	beq	r2,r3,2010f60 <_read_r+0x4c>
 2010f4c:	dfc00217 	ldw	ra,8(sp)
 2010f50:	dc400117 	ldw	r17,4(sp)
 2010f54:	dc000017 	ldw	r16,0(sp)
 2010f58:	dec00304 	addi	sp,sp,12
 2010f5c:	f800283a 	ret
 2010f60:	80c00017 	ldw	r3,0(r16)
 2010f64:	183ff926 	beq	r3,zero,2010f4c <_read_r+0x38>
 2010f68:	88c00015 	stw	r3,0(r17)
 2010f6c:	dfc00217 	ldw	ra,8(sp)
 2010f70:	dc400117 	ldw	r17,4(sp)
 2010f74:	dc000017 	ldw	r16,0(sp)
 2010f78:	dec00304 	addi	sp,sp,12
 2010f7c:	f800283a 	ret

02010f80 <__udivdi3>:
 2010f80:	defff504 	addi	sp,sp,-44
 2010f84:	dd000515 	stw	r20,20(sp)
 2010f88:	dcc00415 	stw	r19,16(sp)
 2010f8c:	dc800315 	stw	r18,12(sp)
 2010f90:	dc400215 	stw	r17,8(sp)
 2010f94:	dc000115 	stw	r16,4(sp)
 2010f98:	dfc00a15 	stw	ra,40(sp)
 2010f9c:	df000915 	stw	fp,36(sp)
 2010fa0:	ddc00815 	stw	r23,32(sp)
 2010fa4:	dd800715 	stw	r22,28(sp)
 2010fa8:	dd400615 	stw	r21,24(sp)
 2010fac:	2025883a 	mov	r18,r4
 2010fb0:	2823883a 	mov	r17,r5
 2010fb4:	3021883a 	mov	r16,r6
 2010fb8:	2027883a 	mov	r19,r4
 2010fbc:	2829883a 	mov	r20,r5
 2010fc0:	3800451e 	bne	r7,zero,20110d8 <__udivdi3+0x158>
 2010fc4:	2980652e 	bgeu	r5,r6,201115c <__udivdi3+0x1dc>
 2010fc8:	00bfffd4 	movui	r2,65535
 2010fcc:	1180b436 	bltu	r2,r6,20112a0 <__udivdi3+0x320>
 2010fd0:	00803fc4 	movi	r2,255
 2010fd4:	11816636 	bltu	r2,r6,2011570 <__udivdi3+0x5f0>
 2010fd8:	0005883a 	mov	r2,zero
 2010fdc:	0007883a 	mov	r3,zero
 2010fe0:	3084d83a 	srl	r2,r6,r2
 2010fe4:	01008074 	movhi	r4,513
 2010fe8:	211cfd04 	addi	r4,r4,29684
 2010fec:	2085883a 	add	r2,r4,r2
 2010ff0:	10800003 	ldbu	r2,0(r2)
 2010ff4:	10c7883a 	add	r3,r2,r3
 2010ff8:	00800804 	movi	r2,32
 2010ffc:	10c5c83a 	sub	r2,r2,r3
 2011000:	10000526 	beq	r2,zero,2011018 <__udivdi3+0x98>
 2011004:	88a2983a 	sll	r17,r17,r2
 2011008:	90c6d83a 	srl	r3,r18,r3
 201100c:	30a0983a 	sll	r16,r6,r2
 2011010:	90a6983a 	sll	r19,r18,r2
 2011014:	88e8b03a 	or	r20,r17,r3
 2011018:	8022d43a 	srli	r17,r16,16
 201101c:	a009883a 	mov	r4,r20
 2011020:	857fffcc 	andi	r21,r16,65535
 2011024:	880b883a 	mov	r5,r17
 2011028:	20093b00 	call	20093b0 <__umodsi3>
 201102c:	a009883a 	mov	r4,r20
 2011030:	880b883a 	mov	r5,r17
 2011034:	102d883a 	mov	r22,r2
 2011038:	20093a80 	call	20093a8 <__udivsi3>
 201103c:	1009883a 	mov	r4,r2
 2011040:	a80b883a 	mov	r5,r21
 2011044:	1025883a 	mov	r18,r2
 2011048:	20093b80 	call	20093b8 <__mulsi3>
 201104c:	1009883a 	mov	r4,r2
 2011050:	b006943a 	slli	r3,r22,16
 2011054:	9804d43a 	srli	r2,r19,16
 2011058:	1886b03a 	or	r3,r3,r2
 201105c:	1900052e 	bgeu	r3,r4,2011074 <__udivdi3+0xf4>
 2011060:	1c07883a 	add	r3,r3,r16
 2011064:	90bfffc4 	addi	r2,r18,-1
 2011068:	1c000136 	bltu	r3,r16,2011070 <__udivdi3+0xf0>
 201106c:	19015536 	bltu	r3,r4,20115c4 <__udivdi3+0x644>
 2011070:	1025883a 	mov	r18,r2
 2011074:	1929c83a 	sub	r20,r3,r4
 2011078:	880b883a 	mov	r5,r17
 201107c:	a009883a 	mov	r4,r20
 2011080:	20093b00 	call	20093b0 <__umodsi3>
 2011084:	102d883a 	mov	r22,r2
 2011088:	880b883a 	mov	r5,r17
 201108c:	a009883a 	mov	r4,r20
 2011090:	b02c943a 	slli	r22,r22,16
 2011094:	20093a80 	call	20093a8 <__udivsi3>
 2011098:	1009883a 	mov	r4,r2
 201109c:	a80b883a 	mov	r5,r21
 20110a0:	9cffffcc 	andi	r19,r19,65535
 20110a4:	1023883a 	mov	r17,r2
 20110a8:	b4e6b03a 	or	r19,r22,r19
 20110ac:	20093b80 	call	20093b8 <__mulsi3>
 20110b0:	9880052e 	bgeu	r19,r2,20110c8 <__udivdi3+0x148>
 20110b4:	9c27883a 	add	r19,r19,r16
 20110b8:	88ffffc4 	addi	r3,r17,-1
 20110bc:	9c011436 	bltu	r19,r16,2011510 <__udivdi3+0x590>
 20110c0:	9881132e 	bgeu	r19,r2,2011510 <__udivdi3+0x590>
 20110c4:	8c7fff84 	addi	r17,r17,-2
 20110c8:	9004943a 	slli	r2,r18,16
 20110cc:	0007883a 	mov	r3,zero
 20110d0:	8884b03a 	or	r2,r17,r2
 20110d4:	00001506 	br	201112c <__udivdi3+0x1ac>
 20110d8:	29c06a36 	bltu	r5,r7,2011284 <__udivdi3+0x304>
 20110dc:	00bfffd4 	movui	r2,65535
 20110e0:	11c06a2e 	bgeu	r2,r7,201128c <__udivdi3+0x30c>
 20110e4:	00804034 	movhi	r2,256
 20110e8:	10bfffc4 	addi	r2,r2,-1
 20110ec:	11c11436 	bltu	r2,r7,2011540 <__udivdi3+0x5c0>
 20110f0:	00c00404 	movi	r3,16
 20110f4:	180b883a 	mov	r5,r3
 20110f8:	38c6d83a 	srl	r3,r7,r3
 20110fc:	01008074 	movhi	r4,513
 2011100:	211cfd04 	addi	r4,r4,29684
 2011104:	04000804 	movi	r16,32
 2011108:	20c7883a 	add	r3,r4,r3
 201110c:	18800003 	ldbu	r2,0(r3)
 2011110:	1145883a 	add	r2,r2,r5
 2011114:	80a1c83a 	sub	r16,r16,r2
 2011118:	80006e1e 	bne	r16,zero,20112d4 <__udivdi3+0x354>
 201111c:	0007883a 	mov	r3,zero
 2011120:	3c406a36 	bltu	r7,r17,20112cc <__udivdi3+0x34c>
 2011124:	9180692e 	bgeu	r18,r6,20112cc <__udivdi3+0x34c>
 2011128:	0005883a 	mov	r2,zero
 201112c:	dfc00a17 	ldw	ra,40(sp)
 2011130:	df000917 	ldw	fp,36(sp)
 2011134:	ddc00817 	ldw	r23,32(sp)
 2011138:	dd800717 	ldw	r22,28(sp)
 201113c:	dd400617 	ldw	r21,24(sp)
 2011140:	dd000517 	ldw	r20,20(sp)
 2011144:	dcc00417 	ldw	r19,16(sp)
 2011148:	dc800317 	ldw	r18,12(sp)
 201114c:	dc400217 	ldw	r17,8(sp)
 2011150:	dc000117 	ldw	r16,4(sp)
 2011154:	dec00b04 	addi	sp,sp,44
 2011158:	f800283a 	ret
 201115c:	3000041e 	bne	r6,zero,2011170 <__udivdi3+0x1f0>
 2011160:	01000044 	movi	r4,1
 2011164:	000b883a 	mov	r5,zero
 2011168:	20093a80 	call	20093a8 <__udivsi3>
 201116c:	1021883a 	mov	r16,r2
 2011170:	00bfffd4 	movui	r2,65535
 2011174:	1400502e 	bgeu	r2,r16,20112b8 <__udivdi3+0x338>
 2011178:	00804034 	movhi	r2,256
 201117c:	10bfffc4 	addi	r2,r2,-1
 2011180:	1400f536 	bltu	r2,r16,2011558 <__udivdi3+0x5d8>
 2011184:	00800404 	movi	r2,16
 2011188:	1007883a 	mov	r3,r2
 201118c:	8084d83a 	srl	r2,r16,r2
 2011190:	01008074 	movhi	r4,513
 2011194:	211cfd04 	addi	r4,r4,29684
 2011198:	2085883a 	add	r2,r4,r2
 201119c:	10800003 	ldbu	r2,0(r2)
 20111a0:	10c7883a 	add	r3,r2,r3
 20111a4:	00800804 	movi	r2,32
 20111a8:	10c5c83a 	sub	r2,r2,r3
 20111ac:	1000a01e 	bne	r2,zero,2011430 <__udivdi3+0x4b0>
 20111b0:	8028d43a 	srli	r20,r16,16
 20111b4:	8c23c83a 	sub	r17,r17,r16
 20111b8:	857fffcc 	andi	r21,r16,65535
 20111bc:	00c00044 	movi	r3,1
 20111c0:	8809883a 	mov	r4,r17
 20111c4:	a00b883a 	mov	r5,r20
 20111c8:	d8c00015 	stw	r3,0(sp)
 20111cc:	20093b00 	call	20093b0 <__umodsi3>
 20111d0:	8809883a 	mov	r4,r17
 20111d4:	a00b883a 	mov	r5,r20
 20111d8:	102d883a 	mov	r22,r2
 20111dc:	20093a80 	call	20093a8 <__udivsi3>
 20111e0:	1009883a 	mov	r4,r2
 20111e4:	a80b883a 	mov	r5,r21
 20111e8:	1025883a 	mov	r18,r2
 20111ec:	20093b80 	call	20093b8 <__mulsi3>
 20111f0:	1009883a 	mov	r4,r2
 20111f4:	b00c943a 	slli	r6,r22,16
 20111f8:	9804d43a 	srli	r2,r19,16
 20111fc:	d8c00017 	ldw	r3,0(sp)
 2011200:	308cb03a 	or	r6,r6,r2
 2011204:	3100052e 	bgeu	r6,r4,201121c <__udivdi3+0x29c>
 2011208:	340d883a 	add	r6,r6,r16
 201120c:	90bfffc4 	addi	r2,r18,-1
 2011210:	34000136 	bltu	r6,r16,2011218 <__udivdi3+0x298>
 2011214:	3100e836 	bltu	r6,r4,20115b8 <__udivdi3+0x638>
 2011218:	1025883a 	mov	r18,r2
 201121c:	3123c83a 	sub	r17,r6,r4
 2011220:	8809883a 	mov	r4,r17
 2011224:	a00b883a 	mov	r5,r20
 2011228:	d8c00015 	stw	r3,0(sp)
 201122c:	20093b00 	call	20093b0 <__umodsi3>
 2011230:	102d883a 	mov	r22,r2
 2011234:	8809883a 	mov	r4,r17
 2011238:	a00b883a 	mov	r5,r20
 201123c:	b02c943a 	slli	r22,r22,16
 2011240:	20093a80 	call	20093a8 <__udivsi3>
 2011244:	1009883a 	mov	r4,r2
 2011248:	a80b883a 	mov	r5,r21
 201124c:	9cffffcc 	andi	r19,r19,65535
 2011250:	1023883a 	mov	r17,r2
 2011254:	b4e6b03a 	or	r19,r22,r19
 2011258:	20093b80 	call	20093b8 <__mulsi3>
 201125c:	d8c00017 	ldw	r3,0(sp)
 2011260:	9880052e 	bgeu	r19,r2,2011278 <__udivdi3+0x2f8>
 2011264:	9c27883a 	add	r19,r19,r16
 2011268:	893fffc4 	addi	r4,r17,-1
 201126c:	9c00aa36 	bltu	r19,r16,2011518 <__udivdi3+0x598>
 2011270:	9880a92e 	bgeu	r19,r2,2011518 <__udivdi3+0x598>
 2011274:	8c7fff84 	addi	r17,r17,-2
 2011278:	9004943a 	slli	r2,r18,16
 201127c:	8884b03a 	or	r2,r17,r2
 2011280:	003faa06 	br	201112c <__udivdi3+0x1ac>
 2011284:	0007883a 	mov	r3,zero
 2011288:	003fa706 	br	2011128 <__udivdi3+0x1a8>
 201128c:	00803fc4 	movi	r2,255
 2011290:	11c0ae36 	bltu	r2,r7,201154c <__udivdi3+0x5cc>
 2011294:	0007883a 	mov	r3,zero
 2011298:	000b883a 	mov	r5,zero
 201129c:	003f9606 	br	20110f8 <__udivdi3+0x178>
 20112a0:	00804034 	movhi	r2,256
 20112a4:	10bfffc4 	addi	r2,r2,-1
 20112a8:	1180ae36 	bltu	r2,r6,2011564 <__udivdi3+0x5e4>
 20112ac:	00800404 	movi	r2,16
 20112b0:	1007883a 	mov	r3,r2
 20112b4:	003f4a06 	br	2010fe0 <__udivdi3+0x60>
 20112b8:	00803fc4 	movi	r2,255
 20112bc:	1400af36 	bltu	r2,r16,201157c <__udivdi3+0x5fc>
 20112c0:	0005883a 	mov	r2,zero
 20112c4:	0007883a 	mov	r3,zero
 20112c8:	003fb006 	br	201118c <__udivdi3+0x20c>
 20112cc:	00800044 	movi	r2,1
 20112d0:	003f9606 	br	201112c <__udivdi3+0x1ac>
 20112d4:	3c0e983a 	sll	r7,r7,r16
 20112d8:	3086d83a 	srl	r3,r6,r2
 20112dc:	88aed83a 	srl	r23,r17,r2
 20112e0:	9084d83a 	srl	r2,r18,r2
 20112e4:	38e6b03a 	or	r19,r7,r3
 20112e8:	9828d43a 	srli	r20,r19,16
 20112ec:	8c22983a 	sll	r17,r17,r16
 20112f0:	b809883a 	mov	r4,r23
 20112f4:	a00b883a 	mov	r5,r20
 20112f8:	342a983a 	sll	r21,r6,r16
 20112fc:	88a2b03a 	or	r17,r17,r2
 2011300:	20093b00 	call	20093b0 <__umodsi3>
 2011304:	b809883a 	mov	r4,r23
 2011308:	a00b883a 	mov	r5,r20
 201130c:	1039883a 	mov	fp,r2
 2011310:	9dbfffcc 	andi	r22,r19,65535
 2011314:	20093a80 	call	20093a8 <__udivsi3>
 2011318:	1009883a 	mov	r4,r2
 201131c:	b00b883a 	mov	r5,r22
 2011320:	102f883a 	mov	r23,r2
 2011324:	20093b80 	call	20093b8 <__mulsi3>
 2011328:	1009883a 	mov	r4,r2
 201132c:	e00e943a 	slli	r7,fp,16
 2011330:	8804d43a 	srli	r2,r17,16
 2011334:	388eb03a 	or	r7,r7,r2
 2011338:	3900042e 	bgeu	r7,r4,201134c <__udivdi3+0x3cc>
 201133c:	3ccf883a 	add	r7,r7,r19
 2011340:	b8bfffc4 	addi	r2,r23,-1
 2011344:	3cc0942e 	bgeu	r7,r19,2011598 <__udivdi3+0x618>
 2011348:	102f883a 	mov	r23,r2
 201134c:	3939c83a 	sub	fp,r7,r4
 2011350:	a00b883a 	mov	r5,r20
 2011354:	e009883a 	mov	r4,fp
 2011358:	20093b00 	call	20093b0 <__umodsi3>
 201135c:	a00b883a 	mov	r5,r20
 2011360:	e009883a 	mov	r4,fp
 2011364:	d8800015 	stw	r2,0(sp)
 2011368:	20093a80 	call	20093a8 <__udivsi3>
 201136c:	1009883a 	mov	r4,r2
 2011370:	b00b883a 	mov	r5,r22
 2011374:	1029883a 	mov	r20,r2
 2011378:	20093b80 	call	20093b8 <__mulsi3>
 201137c:	d8c00017 	ldw	r3,0(sp)
 2011380:	8c7fffcc 	andi	r17,r17,65535
 2011384:	1806943a 	slli	r3,r3,16
 2011388:	1c46b03a 	or	r3,r3,r17
 201138c:	1880042e 	bgeu	r3,r2,20113a0 <__udivdi3+0x420>
 2011390:	1cc7883a 	add	r3,r3,r19
 2011394:	a13fffc4 	addi	r4,r20,-1
 2011398:	1cc07b2e 	bgeu	r3,r19,2011588 <__udivdi3+0x608>
 201139c:	2029883a 	mov	r20,r4
 20113a0:	b82e943a 	slli	r23,r23,16
 20113a4:	a822d43a 	srli	r17,r21,16
 20113a8:	ad7fffcc 	andi	r21,r21,65535
 20113ac:	a5e8b03a 	or	r20,r20,r23
 20113b0:	a5bfffcc 	andi	r22,r20,65535
 20113b4:	b009883a 	mov	r4,r22
 20113b8:	a80b883a 	mov	r5,r21
 20113bc:	18afc83a 	sub	r23,r3,r2
 20113c0:	a026d43a 	srli	r19,r20,16
 20113c4:	20093b80 	call	20093b8 <__mulsi3>
 20113c8:	b009883a 	mov	r4,r22
 20113cc:	880b883a 	mov	r5,r17
 20113d0:	1039883a 	mov	fp,r2
 20113d4:	20093b80 	call	20093b8 <__mulsi3>
 20113d8:	a80b883a 	mov	r5,r21
 20113dc:	9809883a 	mov	r4,r19
 20113e0:	102d883a 	mov	r22,r2
 20113e4:	20093b80 	call	20093b8 <__mulsi3>
 20113e8:	9809883a 	mov	r4,r19
 20113ec:	880b883a 	mov	r5,r17
 20113f0:	102b883a 	mov	r21,r2
 20113f4:	20093b80 	call	20093b8 <__mulsi3>
 20113f8:	100b883a 	mov	r5,r2
 20113fc:	e004d43a 	srli	r2,fp,16
 2011400:	ad89883a 	add	r4,r21,r22
 2011404:	2089883a 	add	r4,r4,r2
 2011408:	2540022e 	bgeu	r4,r21,2011414 <__udivdi3+0x494>
 201140c:	00800074 	movhi	r2,1
 2011410:	288b883a 	add	r5,r5,r2
 2011414:	2004d43a 	srli	r2,r4,16
 2011418:	288b883a 	add	r5,r5,r2
 201141c:	b9404536 	bltu	r23,r5,2011534 <__udivdi3+0x5b4>
 2011420:	b9403f26 	beq	r23,r5,2011520 <__udivdi3+0x5a0>
 2011424:	a005883a 	mov	r2,r20
 2011428:	0007883a 	mov	r3,zero
 201142c:	003f3f06 	br	201112c <__udivdi3+0x1ac>
 2011430:	80a0983a 	sll	r16,r16,r2
 2011434:	88eed83a 	srl	r23,r17,r3
 2011438:	90c6d83a 	srl	r3,r18,r3
 201143c:	8028d43a 	srli	r20,r16,16
 2011440:	88a2983a 	sll	r17,r17,r2
 2011444:	b809883a 	mov	r4,r23
 2011448:	a00b883a 	mov	r5,r20
 201144c:	88ecb03a 	or	r22,r17,r3
 2011450:	90a6983a 	sll	r19,r18,r2
 2011454:	20093b00 	call	20093b0 <__umodsi3>
 2011458:	b809883a 	mov	r4,r23
 201145c:	a00b883a 	mov	r5,r20
 2011460:	1023883a 	mov	r17,r2
 2011464:	857fffcc 	andi	r21,r16,65535
 2011468:	20093a80 	call	20093a8 <__udivsi3>
 201146c:	1009883a 	mov	r4,r2
 2011470:	a80b883a 	mov	r5,r21
 2011474:	102f883a 	mov	r23,r2
 2011478:	20093b80 	call	20093b8 <__mulsi3>
 201147c:	1009883a 	mov	r4,r2
 2011480:	880a943a 	slli	r5,r17,16
 2011484:	b004d43a 	srli	r2,r22,16
 2011488:	288ab03a 	or	r5,r5,r2
 201148c:	2900062e 	bgeu	r5,r4,20114a8 <__udivdi3+0x528>
 2011490:	2c0b883a 	add	r5,r5,r16
 2011494:	b8bfffc4 	addi	r2,r23,-1
 2011498:	2c004536 	bltu	r5,r16,20115b0 <__udivdi3+0x630>
 201149c:	2900442e 	bgeu	r5,r4,20115b0 <__udivdi3+0x630>
 20114a0:	bdffff84 	addi	r23,r23,-2
 20114a4:	2c0b883a 	add	r5,r5,r16
 20114a8:	2925c83a 	sub	r18,r5,r4
 20114ac:	9009883a 	mov	r4,r18
 20114b0:	a00b883a 	mov	r5,r20
 20114b4:	20093b00 	call	20093b0 <__umodsi3>
 20114b8:	1023883a 	mov	r17,r2
 20114bc:	9009883a 	mov	r4,r18
 20114c0:	a00b883a 	mov	r5,r20
 20114c4:	8822943a 	slli	r17,r17,16
 20114c8:	20093a80 	call	20093a8 <__udivsi3>
 20114cc:	1009883a 	mov	r4,r2
 20114d0:	a80b883a 	mov	r5,r21
 20114d4:	b5bfffcc 	andi	r22,r22,65535
 20114d8:	1025883a 	mov	r18,r2
 20114dc:	8da2b03a 	or	r17,r17,r22
 20114e0:	20093b80 	call	20093b8 <__mulsi3>
 20114e4:	8880062e 	bgeu	r17,r2,2011500 <__udivdi3+0x580>
 20114e8:	8c23883a 	add	r17,r17,r16
 20114ec:	90ffffc4 	addi	r3,r18,-1
 20114f0:	8c002d36 	bltu	r17,r16,20115a8 <__udivdi3+0x628>
 20114f4:	88802c2e 	bgeu	r17,r2,20115a8 <__udivdi3+0x628>
 20114f8:	94bfff84 	addi	r18,r18,-2
 20114fc:	8c23883a 	add	r17,r17,r16
 2011500:	b806943a 	slli	r3,r23,16
 2011504:	88a3c83a 	sub	r17,r17,r2
 2011508:	90c6b03a 	or	r3,r18,r3
 201150c:	003f2c06 	br	20111c0 <__udivdi3+0x240>
 2011510:	1823883a 	mov	r17,r3
 2011514:	003eec06 	br	20110c8 <__udivdi3+0x148>
 2011518:	2023883a 	mov	r17,r4
 201151c:	003f5606 	br	2011278 <__udivdi3+0x2f8>
 2011520:	2008943a 	slli	r4,r4,16
 2011524:	9420983a 	sll	r16,r18,r16
 2011528:	e73fffcc 	andi	fp,fp,65535
 201152c:	2709883a 	add	r4,r4,fp
 2011530:	813fbc2e 	bgeu	r16,r4,2011424 <__udivdi3+0x4a4>
 2011534:	a0bfffc4 	addi	r2,r20,-1
 2011538:	0007883a 	mov	r3,zero
 201153c:	003efb06 	br	201112c <__udivdi3+0x1ac>
 2011540:	00c00604 	movi	r3,24
 2011544:	180b883a 	mov	r5,r3
 2011548:	003eeb06 	br	20110f8 <__udivdi3+0x178>
 201154c:	00c00204 	movi	r3,8
 2011550:	180b883a 	mov	r5,r3
 2011554:	003ee806 	br	20110f8 <__udivdi3+0x178>
 2011558:	00800604 	movi	r2,24
 201155c:	1007883a 	mov	r3,r2
 2011560:	003f0a06 	br	201118c <__udivdi3+0x20c>
 2011564:	00800604 	movi	r2,24
 2011568:	1007883a 	mov	r3,r2
 201156c:	003e9c06 	br	2010fe0 <__udivdi3+0x60>
 2011570:	00800204 	movi	r2,8
 2011574:	1007883a 	mov	r3,r2
 2011578:	003e9906 	br	2010fe0 <__udivdi3+0x60>
 201157c:	00800204 	movi	r2,8
 2011580:	1007883a 	mov	r3,r2
 2011584:	003f0106 	br	201118c <__udivdi3+0x20c>
 2011588:	18bf842e 	bgeu	r3,r2,201139c <__udivdi3+0x41c>
 201158c:	a53fff84 	addi	r20,r20,-2
 2011590:	1cc7883a 	add	r3,r3,r19
 2011594:	003f8206 	br	20113a0 <__udivdi3+0x420>
 2011598:	393f6b2e 	bgeu	r7,r4,2011348 <__udivdi3+0x3c8>
 201159c:	bdffff84 	addi	r23,r23,-2
 20115a0:	3ccf883a 	add	r7,r7,r19
 20115a4:	003f6906 	br	201134c <__udivdi3+0x3cc>
 20115a8:	1825883a 	mov	r18,r3
 20115ac:	003fd406 	br	2011500 <__udivdi3+0x580>
 20115b0:	102f883a 	mov	r23,r2
 20115b4:	003fbc06 	br	20114a8 <__udivdi3+0x528>
 20115b8:	94bfff84 	addi	r18,r18,-2
 20115bc:	340d883a 	add	r6,r6,r16
 20115c0:	003f1606 	br	201121c <__udivdi3+0x29c>
 20115c4:	94bfff84 	addi	r18,r18,-2
 20115c8:	1c07883a 	add	r3,r3,r16
 20115cc:	003ea906 	br	2011074 <__udivdi3+0xf4>

020115d0 <__umoddi3>:
 20115d0:	defff304 	addi	sp,sp,-52
 20115d4:	dd000715 	stw	r20,28(sp)
 20115d8:	dcc00615 	stw	r19,24(sp)
 20115dc:	dc800515 	stw	r18,20(sp)
 20115e0:	dc400415 	stw	r17,16(sp)
 20115e4:	dc000315 	stw	r16,12(sp)
 20115e8:	dfc00c15 	stw	ra,48(sp)
 20115ec:	df000b15 	stw	fp,44(sp)
 20115f0:	ddc00a15 	stw	r23,40(sp)
 20115f4:	dd800915 	stw	r22,36(sp)
 20115f8:	dd400815 	stw	r21,32(sp)
 20115fc:	2025883a 	mov	r18,r4
 2011600:	2823883a 	mov	r17,r5
 2011604:	3021883a 	mov	r16,r6
 2011608:	2027883a 	mov	r19,r4
 201160c:	2829883a 	mov	r20,r5
 2011610:	38003a1e 	bne	r7,zero,20116fc <__umoddi3+0x12c>
 2011614:	2980522e 	bgeu	r5,r6,2011760 <__umoddi3+0x190>
 2011618:	00bfffd4 	movui	r2,65535
 201161c:	1180a436 	bltu	r2,r6,20118b0 <__umoddi3+0x2e0>
 2011620:	00803fc4 	movi	r2,255
 2011624:	11816036 	bltu	r2,r6,2011ba8 <__umoddi3+0x5d8>
 2011628:	0005883a 	mov	r2,zero
 201162c:	0009883a 	mov	r4,zero
 2011630:	3084d83a 	srl	r2,r6,r2
 2011634:	00c08074 	movhi	r3,513
 2011638:	18dcfd04 	addi	r3,r3,29684
 201163c:	05400804 	movi	r21,32
 2011640:	1885883a 	add	r2,r3,r2
 2011644:	10800003 	ldbu	r2,0(r2)
 2011648:	1109883a 	add	r4,r2,r4
 201164c:	a92bc83a 	sub	r21,r21,r4
 2011650:	a8010e26 	beq	r21,zero,2011a8c <__umoddi3+0x4bc>
 2011654:	8d62983a 	sll	r17,r17,r21
 2011658:	9108d83a 	srl	r4,r18,r4
 201165c:	3560983a 	sll	r16,r6,r21
 2011660:	9566983a 	sll	r19,r18,r21
 2011664:	8928b03a 	or	r20,r17,r4
 2011668:	8022d43a 	srli	r17,r16,16
 201166c:	a009883a 	mov	r4,r20
 2011670:	84bfffcc 	andi	r18,r16,65535
 2011674:	880b883a 	mov	r5,r17
 2011678:	20093b00 	call	20093b0 <__umodsi3>
 201167c:	a009883a 	mov	r4,r20
 2011680:	880b883a 	mov	r5,r17
 2011684:	102d883a 	mov	r22,r2
 2011688:	20093a80 	call	20093a8 <__udivsi3>
 201168c:	1009883a 	mov	r4,r2
 2011690:	900b883a 	mov	r5,r18
 2011694:	20093b80 	call	20093b8 <__mulsi3>
 2011698:	1009883a 	mov	r4,r2
 201169c:	b006943a 	slli	r3,r22,16
 20116a0:	9804d43a 	srli	r2,r19,16
 20116a4:	1886b03a 	or	r3,r3,r2
 20116a8:	1900042e 	bgeu	r3,r4,20116bc <__umoddi3+0xec>
 20116ac:	1c07883a 	add	r3,r3,r16
 20116b0:	1c000236 	bltu	r3,r16,20116bc <__umoddi3+0xec>
 20116b4:	1900012e 	bgeu	r3,r4,20116bc <__umoddi3+0xec>
 20116b8:	1c07883a 	add	r3,r3,r16
 20116bc:	1929c83a 	sub	r20,r3,r4
 20116c0:	a009883a 	mov	r4,r20
 20116c4:	880b883a 	mov	r5,r17
 20116c8:	20093b00 	call	20093b0 <__umodsi3>
 20116cc:	102d883a 	mov	r22,r2
 20116d0:	a009883a 	mov	r4,r20
 20116d4:	880b883a 	mov	r5,r17
 20116d8:	b02c943a 	slli	r22,r22,16
 20116dc:	20093a80 	call	20093a8 <__udivsi3>
 20116e0:	1009883a 	mov	r4,r2
 20116e4:	900b883a 	mov	r5,r18
 20116e8:	9cffffcc 	andi	r19,r19,65535
 20116ec:	20093b80 	call	20093b8 <__mulsi3>
 20116f0:	b4e6b03a 	or	r19,r22,r19
 20116f4:	9880572e 	bgeu	r19,r2,2011854 <__umoddi3+0x284>
 20116f8:	00005206 	br	2011844 <__umoddi3+0x274>
 20116fc:	29c05936 	bltu	r5,r7,2011864 <__umoddi3+0x294>
 2011700:	00bfffd4 	movui	r2,65535
 2011704:	11c0652e 	bgeu	r2,r7,201189c <__umoddi3+0x2cc>
 2011708:	00804034 	movhi	r2,256
 201170c:	10bfffc4 	addi	r2,r2,-1
 2011710:	11c11936 	bltu	r2,r7,2011b78 <__umoddi3+0x5a8>
 2011714:	00c00404 	movi	r3,16
 2011718:	1827883a 	mov	r19,r3
 201171c:	38c6d83a 	srl	r3,r7,r3
 2011720:	01008074 	movhi	r4,513
 2011724:	211cfd04 	addi	r4,r4,29684
 2011728:	04000804 	movi	r16,32
 201172c:	20c7883a 	add	r3,r4,r3
 2011730:	18800003 	ldbu	r2,0(r3)
 2011734:	14e7883a 	add	r19,r2,r19
 2011738:	84e1c83a 	sub	r16,r16,r19
 201173c:	8000671e 	bne	r16,zero,20118dc <__umoddi3+0x30c>
 2011740:	3c400136 	bltu	r7,r17,2011748 <__umoddi3+0x178>
 2011744:	91812536 	bltu	r18,r6,2011bdc <__umoddi3+0x60c>
 2011748:	9185c83a 	sub	r2,r18,r6
 201174c:	89e3c83a 	sub	r17,r17,r7
 2011750:	90a5803a 	cmpltu	r18,r18,r2
 2011754:	8ca9c83a 	sub	r20,r17,r18
 2011758:	a007883a 	mov	r3,r20
 201175c:	00004306 	br	201186c <__umoddi3+0x29c>
 2011760:	3000041e 	bne	r6,zero,2011774 <__umoddi3+0x1a4>
 2011764:	01000044 	movi	r4,1
 2011768:	000b883a 	mov	r5,zero
 201176c:	20093a80 	call	20093a8 <__udivsi3>
 2011770:	1021883a 	mov	r16,r2
 2011774:	00bfffd4 	movui	r2,65535
 2011778:	1400532e 	bgeu	r2,r16,20118c8 <__umoddi3+0x2f8>
 201177c:	00804034 	movhi	r2,256
 2011780:	10bfffc4 	addi	r2,r2,-1
 2011784:	14010536 	bltu	r2,r16,2011b9c <__umoddi3+0x5cc>
 2011788:	00800404 	movi	r2,16
 201178c:	1007883a 	mov	r3,r2
 2011790:	8084d83a 	srl	r2,r16,r2
 2011794:	01008074 	movhi	r4,513
 2011798:	211cfd04 	addi	r4,r4,29684
 201179c:	05400804 	movi	r21,32
 20117a0:	2085883a 	add	r2,r4,r2
 20117a4:	10800003 	ldbu	r2,0(r2)
 20117a8:	10c7883a 	add	r3,r2,r3
 20117ac:	a8ebc83a 	sub	r21,r21,r3
 20117b0:	a800b81e 	bne	r21,zero,2011a94 <__umoddi3+0x4c4>
 20117b4:	8028d43a 	srli	r20,r16,16
 20117b8:	8c23c83a 	sub	r17,r17,r16
 20117bc:	85bfffcc 	andi	r22,r16,65535
 20117c0:	8809883a 	mov	r4,r17
 20117c4:	a00b883a 	mov	r5,r20
 20117c8:	20093b00 	call	20093b0 <__umodsi3>
 20117cc:	8809883a 	mov	r4,r17
 20117d0:	a00b883a 	mov	r5,r20
 20117d4:	1025883a 	mov	r18,r2
 20117d8:	20093a80 	call	20093a8 <__udivsi3>
 20117dc:	1009883a 	mov	r4,r2
 20117e0:	b00b883a 	mov	r5,r22
 20117e4:	20093b80 	call	20093b8 <__mulsi3>
 20117e8:	1009883a 	mov	r4,r2
 20117ec:	9006943a 	slli	r3,r18,16
 20117f0:	9804d43a 	srli	r2,r19,16
 20117f4:	1886b03a 	or	r3,r3,r2
 20117f8:	1900032e 	bgeu	r3,r4,2011808 <__umoddi3+0x238>
 20117fc:	1c07883a 	add	r3,r3,r16
 2011800:	1c000136 	bltu	r3,r16,2011808 <__umoddi3+0x238>
 2011804:	1900f336 	bltu	r3,r4,2011bd4 <__umoddi3+0x604>
 2011808:	1923c83a 	sub	r17,r3,r4
 201180c:	8809883a 	mov	r4,r17
 2011810:	a00b883a 	mov	r5,r20
 2011814:	20093b00 	call	20093b0 <__umodsi3>
 2011818:	102f883a 	mov	r23,r2
 201181c:	8809883a 	mov	r4,r17
 2011820:	a00b883a 	mov	r5,r20
 2011824:	b82e943a 	slli	r23,r23,16
 2011828:	20093a80 	call	20093a8 <__udivsi3>
 201182c:	1009883a 	mov	r4,r2
 2011830:	b00b883a 	mov	r5,r22
 2011834:	9cffffcc 	andi	r19,r19,65535
 2011838:	20093b80 	call	20093b8 <__mulsi3>
 201183c:	bce6b03a 	or	r19,r23,r19
 2011840:	9880042e 	bgeu	r19,r2,2011854 <__umoddi3+0x284>
 2011844:	9c27883a 	add	r19,r19,r16
 2011848:	9c000236 	bltu	r19,r16,2011854 <__umoddi3+0x284>
 201184c:	9880012e 	bgeu	r19,r2,2011854 <__umoddi3+0x284>
 2011850:	9c27883a 	add	r19,r19,r16
 2011854:	9885c83a 	sub	r2,r19,r2
 2011858:	1544d83a 	srl	r2,r2,r21
 201185c:	0007883a 	mov	r3,zero
 2011860:	00000206 	br	201186c <__umoddi3+0x29c>
 2011864:	2005883a 	mov	r2,r4
 2011868:	2807883a 	mov	r3,r5
 201186c:	dfc00c17 	ldw	ra,48(sp)
 2011870:	df000b17 	ldw	fp,44(sp)
 2011874:	ddc00a17 	ldw	r23,40(sp)
 2011878:	dd800917 	ldw	r22,36(sp)
 201187c:	dd400817 	ldw	r21,32(sp)
 2011880:	dd000717 	ldw	r20,28(sp)
 2011884:	dcc00617 	ldw	r19,24(sp)
 2011888:	dc800517 	ldw	r18,20(sp)
 201188c:	dc400417 	ldw	r17,16(sp)
 2011890:	dc000317 	ldw	r16,12(sp)
 2011894:	dec00d04 	addi	sp,sp,52
 2011898:	f800283a 	ret
 201189c:	00803fc4 	movi	r2,255
 20118a0:	11c0b236 	bltu	r2,r7,2011b6c <__umoddi3+0x59c>
 20118a4:	0007883a 	mov	r3,zero
 20118a8:	0027883a 	mov	r19,zero
 20118ac:	003f9b06 	br	201171c <__umoddi3+0x14c>
 20118b0:	00804034 	movhi	r2,256
 20118b4:	10bfffc4 	addi	r2,r2,-1
 20118b8:	1180b236 	bltu	r2,r6,2011b84 <__umoddi3+0x5b4>
 20118bc:	00800404 	movi	r2,16
 20118c0:	1009883a 	mov	r4,r2
 20118c4:	003f5a06 	br	2011630 <__umoddi3+0x60>
 20118c8:	00803fc4 	movi	r2,255
 20118cc:	1400b036 	bltu	r2,r16,2011b90 <__umoddi3+0x5c0>
 20118d0:	0005883a 	mov	r2,zero
 20118d4:	0007883a 	mov	r3,zero
 20118d8:	003fad06 	br	2011790 <__umoddi3+0x1c0>
 20118dc:	34c4d83a 	srl	r2,r6,r19
 20118e0:	3c0e983a 	sll	r7,r7,r16
 20118e4:	8cf8d83a 	srl	fp,r17,r19
 20118e8:	8c22983a 	sll	r17,r17,r16
 20118ec:	38a8b03a 	or	r20,r7,r2
 20118f0:	a02ad43a 	srli	r21,r20,16
 20118f4:	94c4d83a 	srl	r2,r18,r19
 20118f8:	e009883a 	mov	r4,fp
 20118fc:	a80b883a 	mov	r5,r21
 2011900:	342c983a 	sll	r22,r6,r16
 2011904:	88a2b03a 	or	r17,r17,r2
 2011908:	20093b00 	call	20093b0 <__umodsi3>
 201190c:	e009883a 	mov	r4,fp
 2011910:	a80b883a 	mov	r5,r21
 2011914:	a5ffffcc 	andi	r23,r20,65535
 2011918:	d8800215 	stw	r2,8(sp)
 201191c:	20093a80 	call	20093a8 <__udivsi3>
 2011920:	1009883a 	mov	r4,r2
 2011924:	b80b883a 	mov	r5,r23
 2011928:	1039883a 	mov	fp,r2
 201192c:	20093b80 	call	20093b8 <__mulsi3>
 2011930:	d8c00217 	ldw	r3,8(sp)
 2011934:	1009883a 	mov	r4,r2
 2011938:	8804d43a 	srli	r2,r17,16
 201193c:	1806943a 	slli	r3,r3,16
 2011940:	9424983a 	sll	r18,r18,r16
 2011944:	1886b03a 	or	r3,r3,r2
 2011948:	1900042e 	bgeu	r3,r4,201195c <__umoddi3+0x38c>
 201194c:	1d07883a 	add	r3,r3,r20
 2011950:	e0bfffc4 	addi	r2,fp,-1
 2011954:	1d009b2e 	bgeu	r3,r20,2011bc4 <__umoddi3+0x5f4>
 2011958:	1039883a 	mov	fp,r2
 201195c:	1907c83a 	sub	r3,r3,r4
 2011960:	1809883a 	mov	r4,r3
 2011964:	a80b883a 	mov	r5,r21
 2011968:	d8c00215 	stw	r3,8(sp)
 201196c:	20093b00 	call	20093b0 <__umodsi3>
 2011970:	d8c00217 	ldw	r3,8(sp)
 2011974:	a80b883a 	mov	r5,r21
 2011978:	d8800015 	stw	r2,0(sp)
 201197c:	1809883a 	mov	r4,r3
 2011980:	20093a80 	call	20093a8 <__udivsi3>
 2011984:	1009883a 	mov	r4,r2
 2011988:	b80b883a 	mov	r5,r23
 201198c:	102b883a 	mov	r21,r2
 2011990:	20093b80 	call	20093b8 <__mulsi3>
 2011994:	d9c00017 	ldw	r7,0(sp)
 2011998:	8c7fffcc 	andi	r17,r17,65535
 201199c:	380e943a 	slli	r7,r7,16
 20119a0:	3c4eb03a 	or	r7,r7,r17
 20119a4:	3880042e 	bgeu	r7,r2,20119b8 <__umoddi3+0x3e8>
 20119a8:	3d0f883a 	add	r7,r7,r20
 20119ac:	a8ffffc4 	addi	r3,r21,-1
 20119b0:	3d00802e 	bgeu	r7,r20,2011bb4 <__umoddi3+0x5e4>
 20119b4:	182b883a 	mov	r21,r3
 20119b8:	e038943a 	slli	fp,fp,16
 20119bc:	b010d43a 	srli	r8,r22,16
 20119c0:	b1bfffcc 	andi	r6,r22,65535
 20119c4:	af2ab03a 	or	r21,r21,fp
 20119c8:	a82ed43a 	srli	r23,r21,16
 20119cc:	ad7fffcc 	andi	r21,r21,65535
 20119d0:	300b883a 	mov	r5,r6
 20119d4:	a809883a 	mov	r4,r21
 20119d8:	38a3c83a 	sub	r17,r7,r2
 20119dc:	d9800115 	stw	r6,4(sp)
 20119e0:	da000015 	stw	r8,0(sp)
 20119e4:	20093b80 	call	20093b8 <__mulsi3>
 20119e8:	da000017 	ldw	r8,0(sp)
 20119ec:	a809883a 	mov	r4,r21
 20119f0:	1039883a 	mov	fp,r2
 20119f4:	400b883a 	mov	r5,r8
 20119f8:	da000215 	stw	r8,8(sp)
 20119fc:	20093b80 	call	20093b8 <__mulsi3>
 2011a00:	d9800117 	ldw	r6,4(sp)
 2011a04:	b809883a 	mov	r4,r23
 2011a08:	d8800015 	stw	r2,0(sp)
 2011a0c:	300b883a 	mov	r5,r6
 2011a10:	20093b80 	call	20093b8 <__mulsi3>
 2011a14:	d8c00217 	ldw	r3,8(sp)
 2011a18:	b809883a 	mov	r4,r23
 2011a1c:	102b883a 	mov	r21,r2
 2011a20:	180b883a 	mov	r5,r3
 2011a24:	20093b80 	call	20093b8 <__mulsi3>
 2011a28:	d9c00017 	ldw	r7,0(sp)
 2011a2c:	1007883a 	mov	r3,r2
 2011a30:	e004d43a 	srli	r2,fp,16
 2011a34:	a9c9883a 	add	r4,r21,r7
 2011a38:	2089883a 	add	r4,r4,r2
 2011a3c:	2540022e 	bgeu	r4,r21,2011a48 <__umoddi3+0x478>
 2011a40:	00800074 	movhi	r2,1
 2011a44:	1887883a 	add	r3,r3,r2
 2011a48:	2004d43a 	srli	r2,r4,16
 2011a4c:	2008943a 	slli	r4,r4,16
 2011a50:	e73fffcc 	andi	fp,fp,65535
 2011a54:	1887883a 	add	r3,r3,r2
 2011a58:	2709883a 	add	r4,r4,fp
 2011a5c:	88c03d36 	bltu	r17,r3,2011b54 <__umoddi3+0x584>
 2011a60:	88c06126 	beq	r17,r3,2011be8 <__umoddi3+0x618>
 2011a64:	88c7c83a 	sub	r3,r17,r3
 2011a68:	202d883a 	mov	r22,r4
 2011a6c:	95adc83a 	sub	r22,r18,r22
 2011a70:	95a5803a 	cmpltu	r18,r18,r22
 2011a74:	1c87c83a 	sub	r3,r3,r18
 2011a78:	1cc4983a 	sll	r2,r3,r19
 2011a7c:	b42cd83a 	srl	r22,r22,r16
 2011a80:	1c06d83a 	srl	r3,r3,r16
 2011a84:	1584b03a 	or	r2,r2,r22
 2011a88:	003f7806 	br	201186c <__umoddi3+0x29c>
 2011a8c:	002b883a 	mov	r21,zero
 2011a90:	003ef506 	br	2011668 <__umoddi3+0x98>
 2011a94:	8560983a 	sll	r16,r16,r21
 2011a98:	88e6d83a 	srl	r19,r17,r3
 2011a9c:	90c6d83a 	srl	r3,r18,r3
 2011aa0:	8028d43a 	srli	r20,r16,16
 2011aa4:	8d62983a 	sll	r17,r17,r21
 2011aa8:	9809883a 	mov	r4,r19
 2011aac:	a00b883a 	mov	r5,r20
 2011ab0:	88eeb03a 	or	r23,r17,r3
 2011ab4:	20093b00 	call	20093b0 <__umodsi3>
 2011ab8:	9809883a 	mov	r4,r19
 2011abc:	a00b883a 	mov	r5,r20
 2011ac0:	1023883a 	mov	r17,r2
 2011ac4:	85bfffcc 	andi	r22,r16,65535
 2011ac8:	20093a80 	call	20093a8 <__udivsi3>
 2011acc:	1009883a 	mov	r4,r2
 2011ad0:	b00b883a 	mov	r5,r22
 2011ad4:	20093b80 	call	20093b8 <__mulsi3>
 2011ad8:	1007883a 	mov	r3,r2
 2011adc:	8808943a 	slli	r4,r17,16
 2011ae0:	b804d43a 	srli	r2,r23,16
 2011ae4:	9566983a 	sll	r19,r18,r21
 2011ae8:	2088b03a 	or	r4,r4,r2
 2011aec:	20c0042e 	bgeu	r4,r3,2011b00 <__umoddi3+0x530>
 2011af0:	2409883a 	add	r4,r4,r16
 2011af4:	24000236 	bltu	r4,r16,2011b00 <__umoddi3+0x530>
 2011af8:	20c0012e 	bgeu	r4,r3,2011b00 <__umoddi3+0x530>
 2011afc:	2409883a 	add	r4,r4,r16
 2011b00:	20e5c83a 	sub	r18,r4,r3
 2011b04:	9009883a 	mov	r4,r18
 2011b08:	a00b883a 	mov	r5,r20
 2011b0c:	20093b00 	call	20093b0 <__umodsi3>
 2011b10:	1023883a 	mov	r17,r2
 2011b14:	9009883a 	mov	r4,r18
 2011b18:	a00b883a 	mov	r5,r20
 2011b1c:	8822943a 	slli	r17,r17,16
 2011b20:	20093a80 	call	20093a8 <__udivsi3>
 2011b24:	1009883a 	mov	r4,r2
 2011b28:	b00b883a 	mov	r5,r22
 2011b2c:	bdffffcc 	andi	r23,r23,65535
 2011b30:	20093b80 	call	20093b8 <__mulsi3>
 2011b34:	8de2b03a 	or	r17,r17,r23
 2011b38:	8880042e 	bgeu	r17,r2,2011b4c <__umoddi3+0x57c>
 2011b3c:	8c23883a 	add	r17,r17,r16
 2011b40:	8c000236 	bltu	r17,r16,2011b4c <__umoddi3+0x57c>
 2011b44:	8880012e 	bgeu	r17,r2,2011b4c <__umoddi3+0x57c>
 2011b48:	8c23883a 	add	r17,r17,r16
 2011b4c:	88a3c83a 	sub	r17,r17,r2
 2011b50:	003f1b06 	br	20117c0 <__umoddi3+0x1f0>
 2011b54:	25adc83a 	sub	r22,r4,r22
 2011b58:	1d07c83a 	sub	r3,r3,r20
 2011b5c:	2589803a 	cmpltu	r4,r4,r22
 2011b60:	1907c83a 	sub	r3,r3,r4
 2011b64:	88c7c83a 	sub	r3,r17,r3
 2011b68:	003fc006 	br	2011a6c <__umoddi3+0x49c>
 2011b6c:	00c00204 	movi	r3,8
 2011b70:	1827883a 	mov	r19,r3
 2011b74:	003ee906 	br	201171c <__umoddi3+0x14c>
 2011b78:	00c00604 	movi	r3,24
 2011b7c:	1827883a 	mov	r19,r3
 2011b80:	003ee606 	br	201171c <__umoddi3+0x14c>
 2011b84:	00800604 	movi	r2,24
 2011b88:	1009883a 	mov	r4,r2
 2011b8c:	003ea806 	br	2011630 <__umoddi3+0x60>
 2011b90:	00800204 	movi	r2,8
 2011b94:	1007883a 	mov	r3,r2
 2011b98:	003efd06 	br	2011790 <__umoddi3+0x1c0>
 2011b9c:	00800604 	movi	r2,24
 2011ba0:	1007883a 	mov	r3,r2
 2011ba4:	003efa06 	br	2011790 <__umoddi3+0x1c0>
 2011ba8:	00800204 	movi	r2,8
 2011bac:	1009883a 	mov	r4,r2
 2011bb0:	003e9f06 	br	2011630 <__umoddi3+0x60>
 2011bb4:	38bf7f2e 	bgeu	r7,r2,20119b4 <__umoddi3+0x3e4>
 2011bb8:	ad7fff84 	addi	r21,r21,-2
 2011bbc:	3d0f883a 	add	r7,r7,r20
 2011bc0:	003f7d06 	br	20119b8 <__umoddi3+0x3e8>
 2011bc4:	193f642e 	bgeu	r3,r4,2011958 <__umoddi3+0x388>
 2011bc8:	e73fff84 	addi	fp,fp,-2
 2011bcc:	1d07883a 	add	r3,r3,r20
 2011bd0:	003f6206 	br	201195c <__umoddi3+0x38c>
 2011bd4:	1c07883a 	add	r3,r3,r16
 2011bd8:	003f0b06 	br	2011808 <__umoddi3+0x238>
 2011bdc:	9005883a 	mov	r2,r18
 2011be0:	a007883a 	mov	r3,r20
 2011be4:	003f2106 	br	201186c <__umoddi3+0x29c>
 2011be8:	913fda36 	bltu	r18,r4,2011b54 <__umoddi3+0x584>
 2011bec:	202d883a 	mov	r22,r4
 2011bf0:	0007883a 	mov	r3,zero
 2011bf4:	003f9d06 	br	2011a6c <__umoddi3+0x49c>

02011bf8 <__muldf3>:
 2011bf8:	deffe404 	addi	sp,sp,-112
 2011bfc:	d9001115 	stw	r4,68(sp)
 2011c00:	d9401215 	stw	r5,72(sp)
 2011c04:	d9001104 	addi	r4,sp,68
 2011c08:	d9400a04 	addi	r5,sp,40
 2011c0c:	dfc01b15 	stw	ra,108(sp)
 2011c10:	d9800f15 	stw	r6,60(sp)
 2011c14:	d9c01015 	stw	r7,64(sp)
 2011c18:	ddc01a15 	stw	r23,104(sp)
 2011c1c:	dd801915 	stw	r22,100(sp)
 2011c20:	dd401815 	stw	r21,96(sp)
 2011c24:	dd001715 	stw	r20,92(sp)
 2011c28:	dcc01615 	stw	r19,88(sp)
 2011c2c:	dc801515 	stw	r18,84(sp)
 2011c30:	dc401415 	stw	r17,80(sp)
 2011c34:	dc001315 	stw	r16,76(sp)
 2011c38:	20096b00 	call	20096b0 <__unpack_d>
 2011c3c:	d9000f04 	addi	r4,sp,60
 2011c40:	d9400504 	addi	r5,sp,20
 2011c44:	20096b00 	call	20096b0 <__unpack_d>
 2011c48:	d8c00a17 	ldw	r3,40(sp)
 2011c4c:	00800044 	movi	r2,1
 2011c50:	10c01136 	bltu	r2,r3,2011c98 <__muldf3+0xa0>
 2011c54:	d8c00b17 	ldw	r3,44(sp)
 2011c58:	d8800617 	ldw	r2,24(sp)
 2011c5c:	d9000a04 	addi	r4,sp,40
 2011c60:	1884c03a 	cmpne	r2,r3,r2
 2011c64:	d8800b15 	stw	r2,44(sp)
 2011c68:	200948c0 	call	200948c <__pack_d>
 2011c6c:	dfc01b17 	ldw	ra,108(sp)
 2011c70:	ddc01a17 	ldw	r23,104(sp)
 2011c74:	dd801917 	ldw	r22,100(sp)
 2011c78:	dd401817 	ldw	r21,96(sp)
 2011c7c:	dd001717 	ldw	r20,92(sp)
 2011c80:	dcc01617 	ldw	r19,88(sp)
 2011c84:	dc801517 	ldw	r18,84(sp)
 2011c88:	dc401417 	ldw	r17,80(sp)
 2011c8c:	dc001317 	ldw	r16,76(sp)
 2011c90:	dec01c04 	addi	sp,sp,112
 2011c94:	f800283a 	ret
 2011c98:	d9000517 	ldw	r4,20(sp)
 2011c9c:	11000636 	bltu	r2,r4,2011cb8 <__muldf3+0xc0>
 2011ca0:	d8800617 	ldw	r2,24(sp)
 2011ca4:	d8c00b17 	ldw	r3,44(sp)
 2011ca8:	d9000504 	addi	r4,sp,20
 2011cac:	1884c03a 	cmpne	r2,r3,r2
 2011cb0:	d8800615 	stw	r2,24(sp)
 2011cb4:	003fec06 	br	2011c68 <__muldf3+0x70>
 2011cb8:	00800104 	movi	r2,4
 2011cbc:	1880051e 	bne	r3,r2,2011cd4 <__muldf3+0xdc>
 2011cc0:	00800084 	movi	r2,2
 2011cc4:	20bfe31e 	bne	r4,r2,2011c54 <__muldf3+0x5c>
 2011cc8:	01008074 	movhi	r4,513
 2011ccc:	211cf804 	addi	r4,r4,29664
 2011cd0:	003fe506 	br	2011c68 <__muldf3+0x70>
 2011cd4:	2080031e 	bne	r4,r2,2011ce4 <__muldf3+0xec>
 2011cd8:	00800084 	movi	r2,2
 2011cdc:	18bffa26 	beq	r3,r2,2011cc8 <__muldf3+0xd0>
 2011ce0:	003fef06 	br	2011ca0 <__muldf3+0xa8>
 2011ce4:	00800084 	movi	r2,2
 2011ce8:	18bfda26 	beq	r3,r2,2011c54 <__muldf3+0x5c>
 2011cec:	20bfec26 	beq	r4,r2,2011ca0 <__muldf3+0xa8>
 2011cf0:	dc000d17 	ldw	r16,52(sp)
 2011cf4:	dd000817 	ldw	r20,32(sp)
 2011cf8:	dc800917 	ldw	r18,36(sp)
 2011cfc:	8009883a 	mov	r4,r16
 2011d00:	000b883a 	mov	r5,zero
 2011d04:	a00d883a 	mov	r6,r20
 2011d08:	000f883a 	mov	r7,zero
 2011d0c:	20122dc0 	call	20122dc <__muldi3>
 2011d10:	dc400e17 	ldw	r17,56(sp)
 2011d14:	9009883a 	mov	r4,r18
 2011d18:	800d883a 	mov	r6,r16
 2011d1c:	000b883a 	mov	r5,zero
 2011d20:	000f883a 	mov	r7,zero
 2011d24:	102f883a 	mov	r23,r2
 2011d28:	1827883a 	mov	r19,r3
 2011d2c:	20122dc0 	call	20122dc <__muldi3>
 2011d30:	900d883a 	mov	r6,r18
 2011d34:	8809883a 	mov	r4,r17
 2011d38:	000b883a 	mov	r5,zero
 2011d3c:	000f883a 	mov	r7,zero
 2011d40:	102b883a 	mov	r21,r2
 2011d44:	1821883a 	mov	r16,r3
 2011d48:	20122dc0 	call	20122dc <__muldi3>
 2011d4c:	8809883a 	mov	r4,r17
 2011d50:	000b883a 	mov	r5,zero
 2011d54:	a00d883a 	mov	r6,r20
 2011d58:	000f883a 	mov	r7,zero
 2011d5c:	102d883a 	mov	r22,r2
 2011d60:	1825883a 	mov	r18,r3
 2011d64:	20122dc0 	call	20122dc <__muldi3>
 2011d68:	154b883a 	add	r5,r2,r21
 2011d6c:	2889803a 	cmpltu	r4,r5,r2
 2011d70:	1c07883a 	add	r3,r3,r16
 2011d74:	20c9883a 	add	r4,r4,r3
 2011d78:	24004b36 	bltu	r4,r16,2011ea8 <__muldf3+0x2b0>
 2011d7c:	8100011e 	bne	r16,r4,2011d84 <__muldf3+0x18c>
 2011d80:	2d404936 	bltu	r5,r21,2011ea8 <__muldf3+0x2b0>
 2011d84:	0011883a 	mov	r8,zero
 2011d88:	0007883a 	mov	r3,zero
 2011d8c:	2ccb883a 	add	r5,r5,r19
 2011d90:	b80d883a 	mov	r6,r23
 2011d94:	2cc0012e 	bgeu	r5,r19,2011d9c <__muldf3+0x1a4>
 2011d98:	02000044 	movi	r8,1
 2011d9c:	258f883a 	add	r7,r4,r22
 2011da0:	3909803a 	cmpltu	r4,r7,r4
 2011da4:	da400c17 	ldw	r9,48(sp)
 2011da8:	2489883a 	add	r4,r4,r18
 2011dac:	d8800717 	ldw	r2,28(sp)
 2011db0:	20c9883a 	add	r4,r4,r3
 2011db4:	da800b17 	ldw	r10,44(sp)
 2011db8:	d8c00617 	ldw	r3,24(sp)
 2011dbc:	3a11883a 	add	r8,r7,r8
 2011dc0:	4885883a 	add	r2,r9,r2
 2011dc4:	50c6c03a 	cmpne	r3,r10,r3
 2011dc8:	41cf803a 	cmpltu	r7,r8,r7
 2011dcc:	12400104 	addi	r9,r2,4
 2011dd0:	d8c00115 	stw	r3,4(sp)
 2011dd4:	3909883a 	add	r4,r7,r4
 2011dd8:	da400215 	stw	r9,8(sp)
 2011ddc:	03480034 	movhi	r13,8192
 2011de0:	6b7fffc4 	addi	r13,r13,-1
 2011de4:	4007883a 	mov	r3,r8
 2011de8:	6900102e 	bgeu	r13,r4,2011e2c <__muldf3+0x234>
 2011dec:	10800144 	addi	r2,r2,5
 2011df0:	180ed07a 	srli	r7,r3,1
 2011df4:	18c0004c 	andi	r3,r3,1
 2011df8:	201097fa 	slli	r8,r4,31
 2011dfc:	281697fa 	slli	r11,r5,31
 2011e00:	2008d07a 	srli	r4,r4,1
 2011e04:	3014d07a 	srli	r10,r6,1
 2011e08:	2812d07a 	srli	r9,r5,1
 2011e0c:	1019883a 	mov	r12,r2
 2011e10:	18000226 	beq	r3,zero,2011e1c <__muldf3+0x224>
 2011e14:	5a8cb03a 	or	r6,r11,r10
 2011e18:	49600034 	orhi	r5,r9,32768
 2011e1c:	41c6b03a 	or	r3,r8,r7
 2011e20:	10800044 	addi	r2,r2,1
 2011e24:	693ff236 	bltu	r13,r4,2011df0 <__muldf3+0x1f8>
 2011e28:	db000215 	stw	r12,8(sp)
 2011e2c:	03440034 	movhi	r13,4096
 2011e30:	6b7fffc4 	addi	r13,r13,-1
 2011e34:	69001336 	bltu	r13,r4,2011e84 <__muldf3+0x28c>
 2011e38:	d8800217 	ldw	r2,8(sp)
 2011e3c:	10bfffc4 	addi	r2,r2,-1
 2011e40:	18d3883a 	add	r9,r3,r3
 2011e44:	48c7803a 	cmpltu	r3,r9,r3
 2011e48:	2109883a 	add	r4,r4,r4
 2011e4c:	190f883a 	add	r7,r3,r4
 2011e50:	3191883a 	add	r8,r6,r6
 2011e54:	4197803a 	cmpltu	r11,r8,r6
 2011e58:	2955883a 	add	r10,r5,r5
 2011e5c:	1019883a 	mov	r12,r2
 2011e60:	4807883a 	mov	r3,r9
 2011e64:	3809883a 	mov	r4,r7
 2011e68:	2800010e 	bge	r5,zero,2011e70 <__muldf3+0x278>
 2011e6c:	48c00054 	ori	r3,r9,1
 2011e70:	400d883a 	mov	r6,r8
 2011e74:	5a8b883a 	add	r5,r11,r10
 2011e78:	10bfffc4 	addi	r2,r2,-1
 2011e7c:	69fff02e 	bgeu	r13,r7,2011e40 <__muldf3+0x248>
 2011e80:	db000215 	stw	r12,8(sp)
 2011e84:	18803fcc 	andi	r2,r3,255
 2011e88:	01c02004 	movi	r7,128
 2011e8c:	11c00926 	beq	r2,r7,2011eb4 <__muldf3+0x2bc>
 2011e90:	008000c4 	movi	r2,3
 2011e94:	d9000415 	stw	r4,16(sp)
 2011e98:	d8c00315 	stw	r3,12(sp)
 2011e9c:	d8800015 	stw	r2,0(sp)
 2011ea0:	d809883a 	mov	r4,sp
 2011ea4:	003f7006 	br	2011c68 <__muldf3+0x70>
 2011ea8:	0011883a 	mov	r8,zero
 2011eac:	00c00044 	movi	r3,1
 2011eb0:	003fb606 	br	2011d8c <__muldf3+0x194>
 2011eb4:	19c0400c 	andi	r7,r3,256
 2011eb8:	383ff51e 	bne	r7,zero,2011e90 <__muldf3+0x298>
 2011ebc:	314ab03a 	or	r5,r6,r5
 2011ec0:	283ff326 	beq	r5,zero,2011e90 <__muldf3+0x298>
 2011ec4:	1885883a 	add	r2,r3,r2
 2011ec8:	10cb803a 	cmpltu	r5,r2,r3
 2011ecc:	00ffc004 	movi	r3,-256
 2011ed0:	10c6703a 	and	r3,r2,r3
 2011ed4:	2909883a 	add	r4,r5,r4
 2011ed8:	003fed06 	br	2011e90 <__muldf3+0x298>

02011edc <__divdf3>:
 2011edc:	defff104 	addi	sp,sp,-60
 2011ee0:	d9000c15 	stw	r4,48(sp)
 2011ee4:	d9400d15 	stw	r5,52(sp)
 2011ee8:	d9000c04 	addi	r4,sp,48
 2011eec:	d9400504 	addi	r5,sp,20
 2011ef0:	dfc00e15 	stw	ra,56(sp)
 2011ef4:	d9800a15 	stw	r6,40(sp)
 2011ef8:	d9c00b15 	stw	r7,44(sp)
 2011efc:	20096b00 	call	20096b0 <__unpack_d>
 2011f00:	d9000a04 	addi	r4,sp,40
 2011f04:	d80b883a 	mov	r5,sp
 2011f08:	20096b00 	call	20096b0 <__unpack_d>
 2011f0c:	d8c00517 	ldw	r3,20(sp)
 2011f10:	00800044 	movi	r2,1
 2011f14:	10c00536 	bltu	r2,r3,2011f2c <__divdf3+0x50>
 2011f18:	d9000504 	addi	r4,sp,20
 2011f1c:	200948c0 	call	200948c <__pack_d>
 2011f20:	dfc00e17 	ldw	ra,56(sp)
 2011f24:	dec00f04 	addi	sp,sp,60
 2011f28:	f800283a 	ret
 2011f2c:	d9000017 	ldw	r4,0(sp)
 2011f30:	11000536 	bltu	r2,r4,2011f48 <__divdf3+0x6c>
 2011f34:	d809883a 	mov	r4,sp
 2011f38:	200948c0 	call	200948c <__pack_d>
 2011f3c:	dfc00e17 	ldw	ra,56(sp)
 2011f40:	dec00f04 	addi	sp,sp,60
 2011f44:	f800283a 	ret
 2011f48:	d9800617 	ldw	r6,24(sp)
 2011f4c:	d9400117 	ldw	r5,4(sp)
 2011f50:	00800104 	movi	r2,4
 2011f54:	314af03a 	xor	r5,r6,r5
 2011f58:	d9400615 	stw	r5,24(sp)
 2011f5c:	18800226 	beq	r3,r2,2011f68 <__divdf3+0x8c>
 2011f60:	01400084 	movi	r5,2
 2011f64:	1940041e 	bne	r3,r5,2011f78 <__divdf3+0x9c>
 2011f68:	193feb1e 	bne	r3,r4,2011f18 <__divdf3+0x3c>
 2011f6c:	01008074 	movhi	r4,513
 2011f70:	211cf804 	addi	r4,r4,29664
 2011f74:	003fe906 	br	2011f1c <__divdf3+0x40>
 2011f78:	20803326 	beq	r4,r2,2012048 <__divdf3+0x16c>
 2011f7c:	21403726 	beq	r4,r5,201205c <__divdf3+0x180>
 2011f80:	d8800217 	ldw	r2,8(sp)
 2011f84:	d9000717 	ldw	r4,28(sp)
 2011f88:	d8c00917 	ldw	r3,36(sp)
 2011f8c:	da000417 	ldw	r8,16(sp)
 2011f90:	2089c83a 	sub	r4,r4,r2
 2011f94:	d9000715 	stw	r4,28(sp)
 2011f98:	d8800817 	ldw	r2,32(sp)
 2011f9c:	dbc00317 	ldw	r15,12(sp)
 2011fa0:	1a000236 	bltu	r3,r8,2011fac <__divdf3+0xd0>
 2011fa4:	40c0081e 	bne	r8,r3,2011fc8 <__divdf3+0xec>
 2011fa8:	13c0072e 	bgeu	r2,r15,2011fc8 <__divdf3+0xec>
 2011fac:	108b883a 	add	r5,r2,r2
 2011fb0:	288d803a 	cmpltu	r6,r5,r2
 2011fb4:	18c7883a 	add	r3,r3,r3
 2011fb8:	213fffc4 	addi	r4,r4,-1
 2011fbc:	2805883a 	mov	r2,r5
 2011fc0:	30c7883a 	add	r3,r6,r3
 2011fc4:	d9000715 	stw	r4,28(sp)
 2011fc8:	01400f44 	movi	r5,61
 2011fcc:	000f883a 	mov	r7,zero
 2011fd0:	01040034 	movhi	r4,4096
 2011fd4:	0019883a 	mov	r12,zero
 2011fd8:	001b883a 	mov	r13,zero
 2011fdc:	201697fa 	slli	r11,r4,31
 2011fe0:	3814d07a 	srli	r10,r7,1
 2011fe4:	297fffc4 	addi	r5,r5,-1
 2011fe8:	1a000936 	bltu	r3,r8,2012010 <__divdf3+0x134>
 2011fec:	13cdc83a 	sub	r6,r2,r15
 2011ff0:	1193803a 	cmpltu	r9,r2,r6
 2011ff4:	1a1dc83a 	sub	r14,r3,r8
 2011ff8:	40c0011e 	bne	r8,r3,2012000 <__divdf3+0x124>
 2011ffc:	13c00436 	bltu	r2,r15,2012010 <__divdf3+0x134>
 2012000:	3005883a 	mov	r2,r6
 2012004:	7247c83a 	sub	r3,r14,r9
 2012008:	61d8b03a 	or	r12,r12,r7
 201200c:	691ab03a 	or	r13,r13,r4
 2012010:	108d883a 	add	r6,r2,r2
 2012014:	3093803a 	cmpltu	r9,r6,r2
 2012018:	18c7883a 	add	r3,r3,r3
 201201c:	5a8eb03a 	or	r7,r11,r10
 2012020:	2008d07a 	srli	r4,r4,1
 2012024:	3005883a 	mov	r2,r6
 2012028:	48c7883a 	add	r3,r9,r3
 201202c:	283feb1e 	bne	r5,zero,2011fdc <__divdf3+0x100>
 2012030:	61003fcc 	andi	r4,r12,255
 2012034:	01402004 	movi	r5,128
 2012038:	21400b26 	beq	r4,r5,2012068 <__divdf3+0x18c>
 201203c:	db000815 	stw	r12,32(sp)
 2012040:	db400915 	stw	r13,36(sp)
 2012044:	003fb406 	br	2011f18 <__divdf3+0x3c>
 2012048:	d8000815 	stw	zero,32(sp)
 201204c:	d8000915 	stw	zero,36(sp)
 2012050:	d8000715 	stw	zero,28(sp)
 2012054:	d9000504 	addi	r4,sp,20
 2012058:	003fb006 	br	2011f1c <__divdf3+0x40>
 201205c:	d8800515 	stw	r2,20(sp)
 2012060:	d9000504 	addi	r4,sp,20
 2012064:	003fad06 	br	2011f1c <__divdf3+0x40>
 2012068:	6140400c 	andi	r5,r12,256
 201206c:	283ff31e 	bne	r5,zero,201203c <__divdf3+0x160>
 2012070:	30c4b03a 	or	r2,r6,r3
 2012074:	103ff126 	beq	r2,zero,201203c <__divdf3+0x160>
 2012078:	6109883a 	add	r4,r12,r4
 201207c:	2305803a 	cmpltu	r2,r4,r12
 2012080:	033fc004 	movi	r12,-256
 2012084:	2318703a 	and	r12,r4,r12
 2012088:	135b883a 	add	r13,r2,r13
 201208c:	003feb06 	br	201203c <__divdf3+0x160>

02012090 <__eqdf2>:
 2012090:	defff104 	addi	sp,sp,-60
 2012094:	d9000c15 	stw	r4,48(sp)
 2012098:	d9400d15 	stw	r5,52(sp)
 201209c:	d9000c04 	addi	r4,sp,48
 20120a0:	d9400504 	addi	r5,sp,20
 20120a4:	dfc00e15 	stw	ra,56(sp)
 20120a8:	d9800a15 	stw	r6,40(sp)
 20120ac:	d9c00b15 	stw	r7,44(sp)
 20120b0:	20096b00 	call	20096b0 <__unpack_d>
 20120b4:	d9000a04 	addi	r4,sp,40
 20120b8:	d80b883a 	mov	r5,sp
 20120bc:	20096b00 	call	20096b0 <__unpack_d>
 20120c0:	d8c00517 	ldw	r3,20(sp)
 20120c4:	00800044 	movi	r2,1
 20120c8:	10c0052e 	bgeu	r2,r3,20120e0 <__eqdf2+0x50>
 20120cc:	d8c00017 	ldw	r3,0(sp)
 20120d0:	10c0032e 	bgeu	r2,r3,20120e0 <__eqdf2+0x50>
 20120d4:	d9000504 	addi	r4,sp,20
 20120d8:	d80b883a 	mov	r5,sp
 20120dc:	20097b40 	call	20097b4 <__fpcmp_parts_d>
 20120e0:	dfc00e17 	ldw	ra,56(sp)
 20120e4:	dec00f04 	addi	sp,sp,60
 20120e8:	f800283a 	ret

020120ec <__nedf2>:
 20120ec:	defff104 	addi	sp,sp,-60
 20120f0:	d9000c15 	stw	r4,48(sp)
 20120f4:	d9400d15 	stw	r5,52(sp)
 20120f8:	d9000c04 	addi	r4,sp,48
 20120fc:	d9400504 	addi	r5,sp,20
 2012100:	dfc00e15 	stw	ra,56(sp)
 2012104:	d9800a15 	stw	r6,40(sp)
 2012108:	d9c00b15 	stw	r7,44(sp)
 201210c:	20096b00 	call	20096b0 <__unpack_d>
 2012110:	d9000a04 	addi	r4,sp,40
 2012114:	d80b883a 	mov	r5,sp
 2012118:	20096b00 	call	20096b0 <__unpack_d>
 201211c:	d8c00517 	ldw	r3,20(sp)
 2012120:	00800044 	movi	r2,1
 2012124:	10c0052e 	bgeu	r2,r3,201213c <__nedf2+0x50>
 2012128:	d8c00017 	ldw	r3,0(sp)
 201212c:	10c0032e 	bgeu	r2,r3,201213c <__nedf2+0x50>
 2012130:	d9000504 	addi	r4,sp,20
 2012134:	d80b883a 	mov	r5,sp
 2012138:	20097b40 	call	20097b4 <__fpcmp_parts_d>
 201213c:	dfc00e17 	ldw	ra,56(sp)
 2012140:	dec00f04 	addi	sp,sp,60
 2012144:	f800283a 	ret

02012148 <__gtdf2>:
 2012148:	defff104 	addi	sp,sp,-60
 201214c:	d9000c15 	stw	r4,48(sp)
 2012150:	d9400d15 	stw	r5,52(sp)
 2012154:	d9000c04 	addi	r4,sp,48
 2012158:	d9400504 	addi	r5,sp,20
 201215c:	dfc00e15 	stw	ra,56(sp)
 2012160:	d9800a15 	stw	r6,40(sp)
 2012164:	d9c00b15 	stw	r7,44(sp)
 2012168:	20096b00 	call	20096b0 <__unpack_d>
 201216c:	d9000a04 	addi	r4,sp,40
 2012170:	d80b883a 	mov	r5,sp
 2012174:	20096b00 	call	20096b0 <__unpack_d>
 2012178:	d8c00517 	ldw	r3,20(sp)
 201217c:	00800044 	movi	r2,1
 2012180:	10c0082e 	bgeu	r2,r3,20121a4 <__gtdf2+0x5c>
 2012184:	d8c00017 	ldw	r3,0(sp)
 2012188:	10c0062e 	bgeu	r2,r3,20121a4 <__gtdf2+0x5c>
 201218c:	d9000504 	addi	r4,sp,20
 2012190:	d80b883a 	mov	r5,sp
 2012194:	20097b40 	call	20097b4 <__fpcmp_parts_d>
 2012198:	dfc00e17 	ldw	ra,56(sp)
 201219c:	dec00f04 	addi	sp,sp,60
 20121a0:	f800283a 	ret
 20121a4:	00bfffc4 	movi	r2,-1
 20121a8:	003ffb06 	br	2012198 <__gtdf2+0x50>

020121ac <__ltdf2>:
 20121ac:	defff104 	addi	sp,sp,-60
 20121b0:	d9000c15 	stw	r4,48(sp)
 20121b4:	d9400d15 	stw	r5,52(sp)
 20121b8:	d9000c04 	addi	r4,sp,48
 20121bc:	d9400504 	addi	r5,sp,20
 20121c0:	dfc00e15 	stw	ra,56(sp)
 20121c4:	d9800a15 	stw	r6,40(sp)
 20121c8:	d9c00b15 	stw	r7,44(sp)
 20121cc:	20096b00 	call	20096b0 <__unpack_d>
 20121d0:	d9000a04 	addi	r4,sp,40
 20121d4:	d80b883a 	mov	r5,sp
 20121d8:	20096b00 	call	20096b0 <__unpack_d>
 20121dc:	d8c00517 	ldw	r3,20(sp)
 20121e0:	00800044 	movi	r2,1
 20121e4:	10c0052e 	bgeu	r2,r3,20121fc <__ltdf2+0x50>
 20121e8:	d8c00017 	ldw	r3,0(sp)
 20121ec:	10c0032e 	bgeu	r2,r3,20121fc <__ltdf2+0x50>
 20121f0:	d9000504 	addi	r4,sp,20
 20121f4:	d80b883a 	mov	r5,sp
 20121f8:	20097b40 	call	20097b4 <__fpcmp_parts_d>
 20121fc:	dfc00e17 	ldw	ra,56(sp)
 2012200:	dec00f04 	addi	sp,sp,60
 2012204:	f800283a 	ret

02012208 <__floatsidf>:
 2012208:	2004d7fa 	srli	r2,r4,31
 201220c:	defff904 	addi	sp,sp,-28
 2012210:	00c000c4 	movi	r3,3
 2012214:	dfc00615 	stw	ra,24(sp)
 2012218:	dc000515 	stw	r16,20(sp)
 201221c:	d8c00015 	stw	r3,0(sp)
 2012220:	d8800115 	stw	r2,4(sp)
 2012224:	2000081e 	bne	r4,zero,2012248 <__floatsidf+0x40>
 2012228:	00800084 	movi	r2,2
 201222c:	d8800015 	stw	r2,0(sp)
 2012230:	d809883a 	mov	r4,sp
 2012234:	200948c0 	call	200948c <__pack_d>
 2012238:	dfc00617 	ldw	ra,24(sp)
 201223c:	dc000517 	ldw	r16,20(sp)
 2012240:	dec00704 	addi	sp,sp,28
 2012244:	f800283a 	ret
 2012248:	00c00f04 	movi	r3,60
 201224c:	d8c00215 	stw	r3,8(sp)
 2012250:	10000f1e 	bne	r2,zero,2012290 <__floatsidf+0x88>
 2012254:	2021883a 	mov	r16,r4
 2012258:	8009883a 	mov	r4,r16
 201225c:	20093e00 	call	20093e0 <__clzsi2>
 2012260:	11000744 	addi	r4,r2,29
 2012264:	0100110e 	bge	zero,r4,20122ac <__floatsidf+0xa4>
 2012268:	10ffff44 	addi	r3,r2,-3
 201226c:	18001216 	blt	r3,zero,20122b8 <__floatsidf+0xb0>
 2012270:	80c6983a 	sll	r3,r16,r3
 2012274:	0009883a 	mov	r4,zero
 2012278:	014007c4 	movi	r5,31
 201227c:	2885c83a 	sub	r2,r5,r2
 2012280:	d9000315 	stw	r4,12(sp)
 2012284:	d8c00415 	stw	r3,16(sp)
 2012288:	d8800215 	stw	r2,8(sp)
 201228c:	003fe806 	br	2012230 <__floatsidf+0x28>
 2012290:	00a00034 	movhi	r2,32768
 2012294:	20800e26 	beq	r4,r2,20122d0 <__floatsidf+0xc8>
 2012298:	0121c83a 	sub	r16,zero,r4
 201229c:	8009883a 	mov	r4,r16
 20122a0:	20093e00 	call	20093e0 <__clzsi2>
 20122a4:	11000744 	addi	r4,r2,29
 20122a8:	013fef16 	blt	zero,r4,2012268 <__floatsidf+0x60>
 20122ac:	dc000315 	stw	r16,12(sp)
 20122b0:	d8000415 	stw	zero,16(sp)
 20122b4:	003fde06 	br	2012230 <__floatsidf+0x28>
 20122b8:	800ad07a 	srli	r5,r16,1
 20122bc:	00c007c4 	movi	r3,31
 20122c0:	1907c83a 	sub	r3,r3,r4
 20122c4:	28c6d83a 	srl	r3,r5,r3
 20122c8:	8108983a 	sll	r4,r16,r4
 20122cc:	003fea06 	br	2012278 <__floatsidf+0x70>
 20122d0:	0005883a 	mov	r2,zero
 20122d4:	00f07834 	movhi	r3,49632
 20122d8:	003fd706 	br	2012238 <__floatsidf+0x30>

020122dc <__muldi3>:
 20122dc:	defff604 	addi	sp,sp,-40
 20122e0:	dd400515 	stw	r21,20(sp)
 20122e4:	dd000415 	stw	r20,16(sp)
 20122e8:	257fffcc 	andi	r21,r4,65535
 20122ec:	353fffcc 	andi	r20,r6,65535
 20122f0:	dcc00315 	stw	r19,12(sp)
 20122f4:	3026d43a 	srli	r19,r6,16
 20122f8:	dd800615 	stw	r22,24(sp)
 20122fc:	dc800215 	stw	r18,8(sp)
 2012300:	dc400115 	stw	r17,4(sp)
 2012304:	2024d43a 	srli	r18,r4,16
 2012308:	2023883a 	mov	r17,r4
 201230c:	282d883a 	mov	r22,r5
 2012310:	a009883a 	mov	r4,r20
 2012314:	a80b883a 	mov	r5,r21
 2012318:	dfc00915 	stw	ra,36(sp)
 201231c:	df000815 	stw	fp,32(sp)
 2012320:	ddc00715 	stw	r23,28(sp)
 2012324:	3839883a 	mov	fp,r7
 2012328:	dc000015 	stw	r16,0(sp)
 201232c:	3021883a 	mov	r16,r6
 2012330:	20093b80 	call	20093b8 <__mulsi3>
 2012334:	a80b883a 	mov	r5,r21
 2012338:	9809883a 	mov	r4,r19
 201233c:	102f883a 	mov	r23,r2
 2012340:	20093b80 	call	20093b8 <__mulsi3>
 2012344:	a009883a 	mov	r4,r20
 2012348:	900b883a 	mov	r5,r18
 201234c:	102b883a 	mov	r21,r2
 2012350:	20093b80 	call	20093b8 <__mulsi3>
 2012354:	9809883a 	mov	r4,r19
 2012358:	900b883a 	mov	r5,r18
 201235c:	1029883a 	mov	r20,r2
 2012360:	20093b80 	call	20093b8 <__mulsi3>
 2012364:	1007883a 	mov	r3,r2
 2012368:	b804d43a 	srli	r2,r23,16
 201236c:	a549883a 	add	r4,r20,r21
 2012370:	2089883a 	add	r4,r4,r2
 2012374:	2500022e 	bgeu	r4,r20,2012380 <__muldi3+0xa4>
 2012378:	00800074 	movhi	r2,1
 201237c:	1887883a 	add	r3,r3,r2
 2012380:	200cd43a 	srli	r6,r4,16
 2012384:	2004943a 	slli	r2,r4,16
 2012388:	e00b883a 	mov	r5,fp
 201238c:	8809883a 	mov	r4,r17
 2012390:	bdffffcc 	andi	r23,r23,65535
 2012394:	19a3883a 	add	r17,r3,r6
 2012398:	15ef883a 	add	r23,r2,r23
 201239c:	20093b80 	call	20093b8 <__mulsi3>
 20123a0:	8009883a 	mov	r4,r16
 20123a4:	b00b883a 	mov	r5,r22
 20123a8:	1025883a 	mov	r18,r2
 20123ac:	20093b80 	call	20093b8 <__mulsi3>
 20123b0:	9085883a 	add	r2,r18,r2
 20123b4:	1447883a 	add	r3,r2,r17
 20123b8:	b805883a 	mov	r2,r23
 20123bc:	dfc00917 	ldw	ra,36(sp)
 20123c0:	df000817 	ldw	fp,32(sp)
 20123c4:	ddc00717 	ldw	r23,28(sp)
 20123c8:	dd800617 	ldw	r22,24(sp)
 20123cc:	dd400517 	ldw	r21,20(sp)
 20123d0:	dd000417 	ldw	r20,16(sp)
 20123d4:	dcc00317 	ldw	r19,12(sp)
 20123d8:	dc800217 	ldw	r18,8(sp)
 20123dc:	dc400117 	ldw	r17,4(sp)
 20123e0:	dc000017 	ldw	r16,0(sp)
 20123e4:	dec00a04 	addi	sp,sp,40
 20123e8:	f800283a 	ret

020123ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20123ec:	defffe04 	addi	sp,sp,-8
 20123f0:	dfc00115 	stw	ra,4(sp)
 20123f4:	df000015 	stw	fp,0(sp)
 20123f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20123fc:	008080b4 	movhi	r2,514
 2012400:	10a4f704 	addi	r2,r2,-27684
 2012404:	10800017 	ldw	r2,0(r2)
 2012408:	10000526 	beq	r2,zero,2012420 <alt_get_errno+0x34>
 201240c:	008080b4 	movhi	r2,514
 2012410:	10a4f704 	addi	r2,r2,-27684
 2012414:	10800017 	ldw	r2,0(r2)
 2012418:	103ee83a 	callr	r2
 201241c:	00000206 	br	2012428 <alt_get_errno+0x3c>
 2012420:	008080b4 	movhi	r2,514
 2012424:	10a50504 	addi	r2,r2,-27628
}
 2012428:	e037883a 	mov	sp,fp
 201242c:	dfc00117 	ldw	ra,4(sp)
 2012430:	df000017 	ldw	fp,0(sp)
 2012434:	dec00204 	addi	sp,sp,8
 2012438:	f800283a 	ret

0201243c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 201243c:	defffb04 	addi	sp,sp,-20
 2012440:	dfc00415 	stw	ra,16(sp)
 2012444:	df000315 	stw	fp,12(sp)
 2012448:	df000304 	addi	fp,sp,12
 201244c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2012450:	e0bfff17 	ldw	r2,-4(fp)
 2012454:	10000716 	blt	r2,zero,2012474 <close+0x38>
 2012458:	e13fff17 	ldw	r4,-4(fp)
 201245c:	01400304 	movi	r5,12
 2012460:	20093b80 	call	20093b8 <__mulsi3>
 2012464:	00c080b4 	movhi	r3,514
 2012468:	18e01204 	addi	r3,r3,-32696
 201246c:	10c5883a 	add	r2,r2,r3
 2012470:	00000106 	br	2012478 <close+0x3c>
 2012474:	0005883a 	mov	r2,zero
 2012478:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 201247c:	e0bffd17 	ldw	r2,-12(fp)
 2012480:	10001826 	beq	r2,zero,20124e4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2012484:	e0bffd17 	ldw	r2,-12(fp)
 2012488:	10800017 	ldw	r2,0(r2)
 201248c:	10800417 	ldw	r2,16(r2)
 2012490:	10000626 	beq	r2,zero,20124ac <close+0x70>
 2012494:	e0bffd17 	ldw	r2,-12(fp)
 2012498:	10800017 	ldw	r2,0(r2)
 201249c:	10800417 	ldw	r2,16(r2)
 20124a0:	e13ffd17 	ldw	r4,-12(fp)
 20124a4:	103ee83a 	callr	r2
 20124a8:	00000106 	br	20124b0 <close+0x74>
 20124ac:	0005883a 	mov	r2,zero
 20124b0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 20124b4:	e13fff17 	ldw	r4,-4(fp)
 20124b8:	2012d100 	call	2012d10 <alt_release_fd>
    if (rval < 0)
 20124bc:	e0bffe17 	ldw	r2,-8(fp)
 20124c0:	1000060e 	bge	r2,zero,20124dc <close+0xa0>
    {
      ALT_ERRNO = -rval;
 20124c4:	20123ec0 	call	20123ec <alt_get_errno>
 20124c8:	e0fffe17 	ldw	r3,-8(fp)
 20124cc:	00c7c83a 	sub	r3,zero,r3
 20124d0:	10c00015 	stw	r3,0(r2)
      return -1;
 20124d4:	00bfffc4 	movi	r2,-1
 20124d8:	00000606 	br	20124f4 <close+0xb8>
    }
    return 0;
 20124dc:	0005883a 	mov	r2,zero
 20124e0:	00000406 	br	20124f4 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20124e4:	20123ec0 	call	20123ec <alt_get_errno>
 20124e8:	00c01444 	movi	r3,81
 20124ec:	10c00015 	stw	r3,0(r2)
    return -1;
 20124f0:	00bfffc4 	movi	r2,-1
  }
}
 20124f4:	e037883a 	mov	sp,fp
 20124f8:	dfc00117 	ldw	ra,4(sp)
 20124fc:	df000017 	ldw	fp,0(sp)
 2012500:	dec00204 	addi	sp,sp,8
 2012504:	f800283a 	ret

02012508 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2012508:	defffc04 	addi	sp,sp,-16
 201250c:	df000315 	stw	fp,12(sp)
 2012510:	df000304 	addi	fp,sp,12
 2012514:	e13ffd15 	stw	r4,-12(fp)
 2012518:	e17ffe15 	stw	r5,-8(fp)
 201251c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2012520:	e0bfff17 	ldw	r2,-4(fp)
}
 2012524:	e037883a 	mov	sp,fp
 2012528:	df000017 	ldw	fp,0(sp)
 201252c:	dec00104 	addi	sp,sp,4
 2012530:	f800283a 	ret

02012534 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2012534:	defffe04 	addi	sp,sp,-8
 2012538:	dfc00115 	stw	ra,4(sp)
 201253c:	df000015 	stw	fp,0(sp)
 2012540:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2012544:	008080b4 	movhi	r2,514
 2012548:	10a4f704 	addi	r2,r2,-27684
 201254c:	10800017 	ldw	r2,0(r2)
 2012550:	10000526 	beq	r2,zero,2012568 <alt_get_errno+0x34>
 2012554:	008080b4 	movhi	r2,514
 2012558:	10a4f704 	addi	r2,r2,-27684
 201255c:	10800017 	ldw	r2,0(r2)
 2012560:	103ee83a 	callr	r2
 2012564:	00000206 	br	2012570 <alt_get_errno+0x3c>
 2012568:	008080b4 	movhi	r2,514
 201256c:	10a50504 	addi	r2,r2,-27628
}
 2012570:	e037883a 	mov	sp,fp
 2012574:	dfc00117 	ldw	ra,4(sp)
 2012578:	df000017 	ldw	fp,0(sp)
 201257c:	dec00204 	addi	sp,sp,8
 2012580:	f800283a 	ret

02012584 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2012584:	defffb04 	addi	sp,sp,-20
 2012588:	dfc00415 	stw	ra,16(sp)
 201258c:	df000315 	stw	fp,12(sp)
 2012590:	df000304 	addi	fp,sp,12
 2012594:	e13ffe15 	stw	r4,-8(fp)
 2012598:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201259c:	e0bffe17 	ldw	r2,-8(fp)
 20125a0:	10000716 	blt	r2,zero,20125c0 <fstat+0x3c>
 20125a4:	e13ffe17 	ldw	r4,-8(fp)
 20125a8:	01400304 	movi	r5,12
 20125ac:	20093b80 	call	20093b8 <__mulsi3>
 20125b0:	00c080b4 	movhi	r3,514
 20125b4:	18e01204 	addi	r3,r3,-32696
 20125b8:	10c5883a 	add	r2,r2,r3
 20125bc:	00000106 	br	20125c4 <fstat+0x40>
 20125c0:	0005883a 	mov	r2,zero
 20125c4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 20125c8:	e0bffd17 	ldw	r2,-12(fp)
 20125cc:	10001026 	beq	r2,zero,2012610 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 20125d0:	e0bffd17 	ldw	r2,-12(fp)
 20125d4:	10800017 	ldw	r2,0(r2)
 20125d8:	10800817 	ldw	r2,32(r2)
 20125dc:	10000726 	beq	r2,zero,20125fc <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
 20125e0:	e0bffd17 	ldw	r2,-12(fp)
 20125e4:	10800017 	ldw	r2,0(r2)
 20125e8:	10800817 	ldw	r2,32(r2)
 20125ec:	e13ffd17 	ldw	r4,-12(fp)
 20125f0:	e17fff17 	ldw	r5,-4(fp)
 20125f4:	103ee83a 	callr	r2
 20125f8:	00000906 	br	2012620 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 20125fc:	e0bfff17 	ldw	r2,-4(fp)
 2012600:	00c80004 	movi	r3,8192
 2012604:	10c00115 	stw	r3,4(r2)
      return 0;
 2012608:	0005883a 	mov	r2,zero
 201260c:	00000406 	br	2012620 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2012610:	20125340 	call	2012534 <alt_get_errno>
 2012614:	00c01444 	movi	r3,81
 2012618:	10c00015 	stw	r3,0(r2)
    return -1;
 201261c:	00bfffc4 	movi	r2,-1
  }
}
 2012620:	e037883a 	mov	sp,fp
 2012624:	dfc00117 	ldw	ra,4(sp)
 2012628:	df000017 	ldw	fp,0(sp)
 201262c:	dec00204 	addi	sp,sp,8
 2012630:	f800283a 	ret

02012634 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2012634:	defff904 	addi	sp,sp,-28
 2012638:	dfc00615 	stw	ra,24(sp)
 201263c:	df000515 	stw	fp,20(sp)
 2012640:	df000504 	addi	fp,sp,20
 2012644:	e13ffc15 	stw	r4,-16(fp)
 2012648:	e17ffd15 	stw	r5,-12(fp)
 201264c:	e1bffe15 	stw	r6,-8(fp)
 2012650:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2012654:	e0800217 	ldw	r2,8(fp)
 2012658:	d8800015 	stw	r2,0(sp)
 201265c:	e13ffc17 	ldw	r4,-16(fp)
 2012660:	e17ffd17 	ldw	r5,-12(fp)
 2012664:	e1bffe17 	ldw	r6,-8(fp)
 2012668:	e1ffff17 	ldw	r7,-4(fp)
 201266c:	201280c0 	call	201280c <alt_iic_isr_register>
}  
 2012670:	e037883a 	mov	sp,fp
 2012674:	dfc00117 	ldw	ra,4(sp)
 2012678:	df000017 	ldw	fp,0(sp)
 201267c:	dec00204 	addi	sp,sp,8
 2012680:	f800283a 	ret

02012684 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2012684:	defff904 	addi	sp,sp,-28
 2012688:	df000615 	stw	fp,24(sp)
 201268c:	df000604 	addi	fp,sp,24
 2012690:	e13ffe15 	stw	r4,-8(fp)
 2012694:	e17fff15 	stw	r5,-4(fp)
 2012698:	e0bfff17 	ldw	r2,-4(fp)
 201269c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20126a0:	0005303a 	rdctl	r2,status
 20126a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20126a8:	e0fffb17 	ldw	r3,-20(fp)
 20126ac:	00bfff84 	movi	r2,-2
 20126b0:	1884703a 	and	r2,r3,r2
 20126b4:	1001703a 	wrctl	status,r2
  
  return context;
 20126b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 20126bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 20126c0:	e0bffa17 	ldw	r2,-24(fp)
 20126c4:	00c00044 	movi	r3,1
 20126c8:	1884983a 	sll	r2,r3,r2
 20126cc:	1007883a 	mov	r3,r2
 20126d0:	008080b4 	movhi	r2,514
 20126d4:	10a50604 	addi	r2,r2,-27624
 20126d8:	10800017 	ldw	r2,0(r2)
 20126dc:	1886b03a 	or	r3,r3,r2
 20126e0:	008080b4 	movhi	r2,514
 20126e4:	10a50604 	addi	r2,r2,-27624
 20126e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20126ec:	008080b4 	movhi	r2,514
 20126f0:	10a50604 	addi	r2,r2,-27624
 20126f4:	10800017 	ldw	r2,0(r2)
 20126f8:	100170fa 	wrctl	ienable,r2
 20126fc:	e0bffc17 	ldw	r2,-16(fp)
 2012700:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012704:	e0bffd17 	ldw	r2,-12(fp)
 2012708:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201270c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 2012710:	e037883a 	mov	sp,fp
 2012714:	df000017 	ldw	fp,0(sp)
 2012718:	dec00104 	addi	sp,sp,4
 201271c:	f800283a 	ret

02012720 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2012720:	defff904 	addi	sp,sp,-28
 2012724:	df000615 	stw	fp,24(sp)
 2012728:	df000604 	addi	fp,sp,24
 201272c:	e13ffe15 	stw	r4,-8(fp)
 2012730:	e17fff15 	stw	r5,-4(fp)
 2012734:	e0bfff17 	ldw	r2,-4(fp)
 2012738:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201273c:	0005303a 	rdctl	r2,status
 2012740:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012744:	e0fffb17 	ldw	r3,-20(fp)
 2012748:	00bfff84 	movi	r2,-2
 201274c:	1884703a 	and	r2,r3,r2
 2012750:	1001703a 	wrctl	status,r2
  
  return context;
 2012754:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2012758:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 201275c:	e0bffa17 	ldw	r2,-24(fp)
 2012760:	00c00044 	movi	r3,1
 2012764:	1884983a 	sll	r2,r3,r2
 2012768:	0084303a 	nor	r2,zero,r2
 201276c:	1007883a 	mov	r3,r2
 2012770:	008080b4 	movhi	r2,514
 2012774:	10a50604 	addi	r2,r2,-27624
 2012778:	10800017 	ldw	r2,0(r2)
 201277c:	1886703a 	and	r3,r3,r2
 2012780:	008080b4 	movhi	r2,514
 2012784:	10a50604 	addi	r2,r2,-27624
 2012788:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201278c:	008080b4 	movhi	r2,514
 2012790:	10a50604 	addi	r2,r2,-27624
 2012794:	10800017 	ldw	r2,0(r2)
 2012798:	100170fa 	wrctl	ienable,r2
 201279c:	e0bffc17 	ldw	r2,-16(fp)
 20127a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20127a4:	e0bffd17 	ldw	r2,-12(fp)
 20127a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20127ac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 20127b0:	e037883a 	mov	sp,fp
 20127b4:	df000017 	ldw	fp,0(sp)
 20127b8:	dec00104 	addi	sp,sp,4
 20127bc:	f800283a 	ret

020127c0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 20127c0:	defffc04 	addi	sp,sp,-16
 20127c4:	df000315 	stw	fp,12(sp)
 20127c8:	df000304 	addi	fp,sp,12
 20127cc:	e13ffe15 	stw	r4,-8(fp)
 20127d0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 20127d4:	000530fa 	rdctl	r2,ienable
 20127d8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 20127dc:	e0bfff17 	ldw	r2,-4(fp)
 20127e0:	00c00044 	movi	r3,1
 20127e4:	1884983a 	sll	r2,r3,r2
 20127e8:	1007883a 	mov	r3,r2
 20127ec:	e0bffd17 	ldw	r2,-12(fp)
 20127f0:	1884703a 	and	r2,r3,r2
 20127f4:	1004c03a 	cmpne	r2,r2,zero
 20127f8:	10803fcc 	andi	r2,r2,255
}
 20127fc:	e037883a 	mov	sp,fp
 2012800:	df000017 	ldw	fp,0(sp)
 2012804:	dec00104 	addi	sp,sp,4
 2012808:	f800283a 	ret

0201280c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 201280c:	defff504 	addi	sp,sp,-44
 2012810:	dfc00a15 	stw	ra,40(sp)
 2012814:	df000915 	stw	fp,36(sp)
 2012818:	df000904 	addi	fp,sp,36
 201281c:	e13ffc15 	stw	r4,-16(fp)
 2012820:	e17ffd15 	stw	r5,-12(fp)
 2012824:	e1bffe15 	stw	r6,-8(fp)
 2012828:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 201282c:	00bffa84 	movi	r2,-22
 2012830:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2012834:	e0bffd17 	ldw	r2,-12(fp)
 2012838:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 201283c:	e0bff817 	ldw	r2,-32(fp)
 2012840:	10800808 	cmpgei	r2,r2,32
 2012844:	1000271e 	bne	r2,zero,20128e4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012848:	0005303a 	rdctl	r2,status
 201284c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012850:	e0fffa17 	ldw	r3,-24(fp)
 2012854:	00bfff84 	movi	r2,-2
 2012858:	1884703a 	and	r2,r3,r2
 201285c:	1001703a 	wrctl	status,r2
  
  return context;
 2012860:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2012864:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 2012868:	00c080b4 	movhi	r3,514
 201286c:	18e51b04 	addi	r3,r3,-27540
 2012870:	e0bff817 	ldw	r2,-32(fp)
 2012874:	100490fa 	slli	r2,r2,3
 2012878:	1885883a 	add	r2,r3,r2
 201287c:	e0fffe17 	ldw	r3,-8(fp)
 2012880:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2012884:	00c080b4 	movhi	r3,514
 2012888:	18e51b04 	addi	r3,r3,-27540
 201288c:	e0bff817 	ldw	r2,-32(fp)
 2012890:	100490fa 	slli	r2,r2,3
 2012894:	1885883a 	add	r2,r3,r2
 2012898:	10800104 	addi	r2,r2,4
 201289c:	e0ffff17 	ldw	r3,-4(fp)
 20128a0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 20128a4:	e0bffe17 	ldw	r2,-8(fp)
 20128a8:	10000526 	beq	r2,zero,20128c0 <alt_iic_isr_register+0xb4>
 20128ac:	e0bff817 	ldw	r2,-32(fp)
 20128b0:	e13ffc17 	ldw	r4,-16(fp)
 20128b4:	100b883a 	mov	r5,r2
 20128b8:	20126840 	call	2012684 <alt_ic_irq_enable>
 20128bc:	00000406 	br	20128d0 <alt_iic_isr_register+0xc4>
 20128c0:	e0bff817 	ldw	r2,-32(fp)
 20128c4:	e13ffc17 	ldw	r4,-16(fp)
 20128c8:	100b883a 	mov	r5,r2
 20128cc:	20127200 	call	2012720 <alt_ic_irq_disable>
 20128d0:	e0bff715 	stw	r2,-36(fp)
 20128d4:	e0bff917 	ldw	r2,-28(fp)
 20128d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20128dc:	e0bffb17 	ldw	r2,-20(fp)
 20128e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 20128e4:	e0bff717 	ldw	r2,-36(fp)
}
 20128e8:	e037883a 	mov	sp,fp
 20128ec:	dfc00117 	ldw	ra,4(sp)
 20128f0:	df000017 	ldw	fp,0(sp)
 20128f4:	dec00204 	addi	sp,sp,8
 20128f8:	f800283a 	ret

020128fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20128fc:	defffe04 	addi	sp,sp,-8
 2012900:	dfc00115 	stw	ra,4(sp)
 2012904:	df000015 	stw	fp,0(sp)
 2012908:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201290c:	008080b4 	movhi	r2,514
 2012910:	10a4f704 	addi	r2,r2,-27684
 2012914:	10800017 	ldw	r2,0(r2)
 2012918:	10000526 	beq	r2,zero,2012930 <alt_get_errno+0x34>
 201291c:	008080b4 	movhi	r2,514
 2012920:	10a4f704 	addi	r2,r2,-27684
 2012924:	10800017 	ldw	r2,0(r2)
 2012928:	103ee83a 	callr	r2
 201292c:	00000206 	br	2012938 <alt_get_errno+0x3c>
 2012930:	008080b4 	movhi	r2,514
 2012934:	10a50504 	addi	r2,r2,-27628
}
 2012938:	e037883a 	mov	sp,fp
 201293c:	dfc00117 	ldw	ra,4(sp)
 2012940:	df000017 	ldw	fp,0(sp)
 2012944:	dec00204 	addi	sp,sp,8
 2012948:	f800283a 	ret

0201294c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 201294c:	deffed04 	addi	sp,sp,-76
 2012950:	dfc01215 	stw	ra,72(sp)
 2012954:	df001115 	stw	fp,68(sp)
 2012958:	df001104 	addi	fp,sp,68
 201295c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2012960:	e0bfff17 	ldw	r2,-4(fp)
 2012964:	10000716 	blt	r2,zero,2012984 <isatty+0x38>
 2012968:	e13fff17 	ldw	r4,-4(fp)
 201296c:	01400304 	movi	r5,12
 2012970:	20093b80 	call	20093b8 <__mulsi3>
 2012974:	00c080b4 	movhi	r3,514
 2012978:	18e01204 	addi	r3,r3,-32696
 201297c:	10c5883a 	add	r2,r2,r3
 2012980:	00000106 	br	2012988 <isatty+0x3c>
 2012984:	0005883a 	mov	r2,zero
 2012988:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 201298c:	e0bfef17 	ldw	r2,-68(fp)
 2012990:	10000e26 	beq	r2,zero,20129cc <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2012994:	e0bfef17 	ldw	r2,-68(fp)
 2012998:	10800017 	ldw	r2,0(r2)
 201299c:	10800817 	ldw	r2,32(r2)
 20129a0:	1000021e 	bne	r2,zero,20129ac <isatty+0x60>
    {
      return 1;
 20129a4:	00800044 	movi	r2,1
 20129a8:	00000c06 	br	20129dc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 20129ac:	e0bff004 	addi	r2,fp,-64
 20129b0:	e13fff17 	ldw	r4,-4(fp)
 20129b4:	100b883a 	mov	r5,r2
 20129b8:	20125840 	call	2012584 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 20129bc:	e0bff117 	ldw	r2,-60(fp)
 20129c0:	10880020 	cmpeqi	r2,r2,8192
 20129c4:	10803fcc 	andi	r2,r2,255
 20129c8:	00000406 	br	20129dc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20129cc:	20128fc0 	call	20128fc <alt_get_errno>
 20129d0:	00c01444 	movi	r3,81
 20129d4:	10c00015 	stw	r3,0(r2)
    return 0;
 20129d8:	0005883a 	mov	r2,zero
  }
}
 20129dc:	e037883a 	mov	sp,fp
 20129e0:	dfc00117 	ldw	ra,4(sp)
 20129e4:	df000017 	ldw	fp,0(sp)
 20129e8:	dec00204 	addi	sp,sp,8
 20129ec:	f800283a 	ret

020129f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20129f0:	defffe04 	addi	sp,sp,-8
 20129f4:	dfc00115 	stw	ra,4(sp)
 20129f8:	df000015 	stw	fp,0(sp)
 20129fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2012a00:	008080b4 	movhi	r2,514
 2012a04:	10a4f704 	addi	r2,r2,-27684
 2012a08:	10800017 	ldw	r2,0(r2)
 2012a0c:	10000526 	beq	r2,zero,2012a24 <alt_get_errno+0x34>
 2012a10:	008080b4 	movhi	r2,514
 2012a14:	10a4f704 	addi	r2,r2,-27684
 2012a18:	10800017 	ldw	r2,0(r2)
 2012a1c:	103ee83a 	callr	r2
 2012a20:	00000206 	br	2012a2c <alt_get_errno+0x3c>
 2012a24:	008080b4 	movhi	r2,514
 2012a28:	10a50504 	addi	r2,r2,-27628
}
 2012a2c:	e037883a 	mov	sp,fp
 2012a30:	dfc00117 	ldw	ra,4(sp)
 2012a34:	df000017 	ldw	fp,0(sp)
 2012a38:	dec00204 	addi	sp,sp,8
 2012a3c:	f800283a 	ret

02012a40 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2012a40:	defff904 	addi	sp,sp,-28
 2012a44:	dfc00615 	stw	ra,24(sp)
 2012a48:	df000515 	stw	fp,20(sp)
 2012a4c:	df000504 	addi	fp,sp,20
 2012a50:	e13ffd15 	stw	r4,-12(fp)
 2012a54:	e17ffe15 	stw	r5,-8(fp)
 2012a58:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2012a5c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2012a60:	e0bffd17 	ldw	r2,-12(fp)
 2012a64:	10000716 	blt	r2,zero,2012a84 <lseek+0x44>
 2012a68:	e13ffd17 	ldw	r4,-12(fp)
 2012a6c:	01400304 	movi	r5,12
 2012a70:	20093b80 	call	20093b8 <__mulsi3>
 2012a74:	00c080b4 	movhi	r3,514
 2012a78:	18e01204 	addi	r3,r3,-32696
 2012a7c:	10c5883a 	add	r2,r2,r3
 2012a80:	00000106 	br	2012a88 <lseek+0x48>
 2012a84:	0005883a 	mov	r2,zero
 2012a88:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 2012a8c:	e0bffc17 	ldw	r2,-16(fp)
 2012a90:	10001026 	beq	r2,zero,2012ad4 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2012a94:	e0bffc17 	ldw	r2,-16(fp)
 2012a98:	10800017 	ldw	r2,0(r2)
 2012a9c:	10800717 	ldw	r2,28(r2)
 2012aa0:	10000926 	beq	r2,zero,2012ac8 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2012aa4:	e0bffc17 	ldw	r2,-16(fp)
 2012aa8:	10800017 	ldw	r2,0(r2)
 2012aac:	10800717 	ldw	r2,28(r2)
 2012ab0:	e13ffc17 	ldw	r4,-16(fp)
 2012ab4:	e17ffe17 	ldw	r5,-8(fp)
 2012ab8:	e1bfff17 	ldw	r6,-4(fp)
 2012abc:	103ee83a 	callr	r2
 2012ac0:	e0bffb15 	stw	r2,-20(fp)
 2012ac4:	00000506 	br	2012adc <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2012ac8:	00bfde84 	movi	r2,-134
 2012acc:	e0bffb15 	stw	r2,-20(fp)
 2012ad0:	00000206 	br	2012adc <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
 2012ad4:	00bfebc4 	movi	r2,-81
 2012ad8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2012adc:	e0bffb17 	ldw	r2,-20(fp)
 2012ae0:	1000060e 	bge	r2,zero,2012afc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 2012ae4:	20129f00 	call	20129f0 <alt_get_errno>
 2012ae8:	e0fffb17 	ldw	r3,-20(fp)
 2012aec:	00c7c83a 	sub	r3,zero,r3
 2012af0:	10c00015 	stw	r3,0(r2)
    rc = -1;
 2012af4:	00bfffc4 	movi	r2,-1
 2012af8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 2012afc:	e0bffb17 	ldw	r2,-20(fp)
}
 2012b00:	e037883a 	mov	sp,fp
 2012b04:	dfc00117 	ldw	ra,4(sp)
 2012b08:	df000017 	ldw	fp,0(sp)
 2012b0c:	dec00204 	addi	sp,sp,8
 2012b10:	f800283a 	ret

02012b14 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2012b14:	defffd04 	addi	sp,sp,-12
 2012b18:	dfc00215 	stw	ra,8(sp)
 2012b1c:	df000115 	stw	fp,4(sp)
 2012b20:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2012b24:	0009883a 	mov	r4,zero
 2012b28:	2012fb80 	call	2012fb8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 2012b2c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2012b30:	2012fec0 	call	2012fec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2012b34:	01008074 	movhi	r4,513
 2012b38:	211db804 	addi	r4,r4,30432
 2012b3c:	01408074 	movhi	r5,513
 2012b40:	295db804 	addi	r5,r5,30432
 2012b44:	01808074 	movhi	r6,513
 2012b48:	319db804 	addi	r6,r6,30432
 2012b4c:	20157fc0 	call	20157fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2012b50:	20155ac0 	call	20155ac <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2012b54:	01008074 	movhi	r4,513
 2012b58:	21158204 	addi	r4,r4,22024
 2012b5c:	20161480 	call	2016148 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2012b60:	d1201a17 	ldw	r4,-32664(gp)
 2012b64:	d0e01b17 	ldw	r3,-32660(gp)
 2012b68:	d0a01c17 	ldw	r2,-32656(gp)
 2012b6c:	180b883a 	mov	r5,r3
 2012b70:	100d883a 	mov	r6,r2
 2012b74:	20025700 	call	2002570 <main>
 2012b78:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2012b7c:	01000044 	movi	r4,1
 2012b80:	201243c0 	call	201243c <close>
  exit (result);
 2012b84:	e13fff17 	ldw	r4,-4(fp)
 2012b88:	201615c0 	call	201615c <exit>

02012b8c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 2012b8c:	defffe04 	addi	sp,sp,-8
 2012b90:	df000115 	stw	fp,4(sp)
 2012b94:	df000104 	addi	fp,sp,4
 2012b98:	e13fff15 	stw	r4,-4(fp)
}
 2012b9c:	e037883a 	mov	sp,fp
 2012ba0:	df000017 	ldw	fp,0(sp)
 2012ba4:	dec00104 	addi	sp,sp,4
 2012ba8:	f800283a 	ret

02012bac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2012bac:	defffe04 	addi	sp,sp,-8
 2012bb0:	df000115 	stw	fp,4(sp)
 2012bb4:	df000104 	addi	fp,sp,4
 2012bb8:	e13fff15 	stw	r4,-4(fp)
}
 2012bbc:	e037883a 	mov	sp,fp
 2012bc0:	df000017 	ldw	fp,0(sp)
 2012bc4:	dec00104 	addi	sp,sp,4
 2012bc8:	f800283a 	ret

02012bcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2012bcc:	defffe04 	addi	sp,sp,-8
 2012bd0:	dfc00115 	stw	ra,4(sp)
 2012bd4:	df000015 	stw	fp,0(sp)
 2012bd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2012bdc:	008080b4 	movhi	r2,514
 2012be0:	10a4f704 	addi	r2,r2,-27684
 2012be4:	10800017 	ldw	r2,0(r2)
 2012be8:	10000526 	beq	r2,zero,2012c00 <alt_get_errno+0x34>
 2012bec:	008080b4 	movhi	r2,514
 2012bf0:	10a4f704 	addi	r2,r2,-27684
 2012bf4:	10800017 	ldw	r2,0(r2)
 2012bf8:	103ee83a 	callr	r2
 2012bfc:	00000206 	br	2012c08 <alt_get_errno+0x3c>
 2012c00:	008080b4 	movhi	r2,514
 2012c04:	10a50504 	addi	r2,r2,-27628
}
 2012c08:	e037883a 	mov	sp,fp
 2012c0c:	dfc00117 	ldw	ra,4(sp)
 2012c10:	df000017 	ldw	fp,0(sp)
 2012c14:	dec00204 	addi	sp,sp,8
 2012c18:	f800283a 	ret

02012c1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2012c1c:	defff904 	addi	sp,sp,-28
 2012c20:	dfc00615 	stw	ra,24(sp)
 2012c24:	df000515 	stw	fp,20(sp)
 2012c28:	df000504 	addi	fp,sp,20
 2012c2c:	e13ffd15 	stw	r4,-12(fp)
 2012c30:	e17ffe15 	stw	r5,-8(fp)
 2012c34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2012c38:	e0bffd17 	ldw	r2,-12(fp)
 2012c3c:	10000716 	blt	r2,zero,2012c5c <read+0x40>
 2012c40:	e13ffd17 	ldw	r4,-12(fp)
 2012c44:	01400304 	movi	r5,12
 2012c48:	20093b80 	call	20093b8 <__mulsi3>
 2012c4c:	00c080b4 	movhi	r3,514
 2012c50:	18e01204 	addi	r3,r3,-32696
 2012c54:	10c5883a 	add	r2,r2,r3
 2012c58:	00000106 	br	2012c60 <read+0x44>
 2012c5c:	0005883a 	mov	r2,zero
 2012c60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2012c64:	e0bffb17 	ldw	r2,-20(fp)
 2012c68:	10002026 	beq	r2,zero,2012cec <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2012c6c:	e0bffb17 	ldw	r2,-20(fp)
 2012c70:	10800217 	ldw	r2,8(r2)
 2012c74:	108000cc 	andi	r2,r2,3
 2012c78:	10800060 	cmpeqi	r2,r2,1
 2012c7c:	1000171e 	bne	r2,zero,2012cdc <read+0xc0>
        (fd->dev->read))
 2012c80:	e0bffb17 	ldw	r2,-20(fp)
 2012c84:	10800017 	ldw	r2,0(r2)
 2012c88:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2012c8c:	10001326 	beq	r2,zero,2012cdc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2012c90:	e0bffb17 	ldw	r2,-20(fp)
 2012c94:	10800017 	ldw	r2,0(r2)
 2012c98:	10c00517 	ldw	r3,20(r2)
 2012c9c:	e0bfff17 	ldw	r2,-4(fp)
 2012ca0:	e13ffb17 	ldw	r4,-20(fp)
 2012ca4:	e17ffe17 	ldw	r5,-8(fp)
 2012ca8:	100d883a 	mov	r6,r2
 2012cac:	183ee83a 	callr	r3
 2012cb0:	e0bffc15 	stw	r2,-16(fp)
 2012cb4:	e0bffc17 	ldw	r2,-16(fp)
 2012cb8:	1000060e 	bge	r2,zero,2012cd4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 2012cbc:	2012bcc0 	call	2012bcc <alt_get_errno>
 2012cc0:	e0fffc17 	ldw	r3,-16(fp)
 2012cc4:	00c7c83a 	sub	r3,zero,r3
 2012cc8:	10c00015 	stw	r3,0(r2)
          return -1;
 2012ccc:	00bfffc4 	movi	r2,-1
 2012cd0:	00000a06 	br	2012cfc <read+0xe0>
        }
        return rval;
 2012cd4:	e0bffc17 	ldw	r2,-16(fp)
 2012cd8:	00000806 	br	2012cfc <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2012cdc:	2012bcc0 	call	2012bcc <alt_get_errno>
 2012ce0:	00c00344 	movi	r3,13
 2012ce4:	10c00015 	stw	r3,0(r2)
 2012ce8:	00000306 	br	2012cf8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2012cec:	2012bcc0 	call	2012bcc <alt_get_errno>
 2012cf0:	00c01444 	movi	r3,81
 2012cf4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 2012cf8:	00bfffc4 	movi	r2,-1
}
 2012cfc:	e037883a 	mov	sp,fp
 2012d00:	dfc00117 	ldw	ra,4(sp)
 2012d04:	df000017 	ldw	fp,0(sp)
 2012d08:	dec00204 	addi	sp,sp,8
 2012d0c:	f800283a 	ret

02012d10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2012d10:	defffc04 	addi	sp,sp,-16
 2012d14:	dfc00315 	stw	ra,12(sp)
 2012d18:	df000215 	stw	fp,8(sp)
 2012d1c:	dc000115 	stw	r16,4(sp)
 2012d20:	df000104 	addi	fp,sp,4
 2012d24:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2012d28:	e0bfff17 	ldw	r2,-4(fp)
 2012d2c:	108000d0 	cmplti	r2,r2,3
 2012d30:	1000111e 	bne	r2,zero,2012d78 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 2012d34:	040080b4 	movhi	r16,514
 2012d38:	84201204 	addi	r16,r16,-32696
 2012d3c:	e0bfff17 	ldw	r2,-4(fp)
 2012d40:	1009883a 	mov	r4,r2
 2012d44:	01400304 	movi	r5,12
 2012d48:	20093b80 	call	20093b8 <__mulsi3>
 2012d4c:	8085883a 	add	r2,r16,r2
 2012d50:	10800204 	addi	r2,r2,8
 2012d54:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2012d58:	040080b4 	movhi	r16,514
 2012d5c:	84201204 	addi	r16,r16,-32696
 2012d60:	e0bfff17 	ldw	r2,-4(fp)
 2012d64:	1009883a 	mov	r4,r2
 2012d68:	01400304 	movi	r5,12
 2012d6c:	20093b80 	call	20093b8 <__mulsi3>
 2012d70:	8085883a 	add	r2,r16,r2
 2012d74:	10000015 	stw	zero,0(r2)
  }
}
 2012d78:	e037883a 	mov	sp,fp
 2012d7c:	dfc00217 	ldw	ra,8(sp)
 2012d80:	df000117 	ldw	fp,4(sp)
 2012d84:	dc000017 	ldw	r16,0(sp)
 2012d88:	dec00304 	addi	sp,sp,12
 2012d8c:	f800283a 	ret

02012d90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2012d90:	defff904 	addi	sp,sp,-28
 2012d94:	df000615 	stw	fp,24(sp)
 2012d98:	df000604 	addi	fp,sp,24
 2012d9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012da0:	0005303a 	rdctl	r2,status
 2012da4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012da8:	e0fffc17 	ldw	r3,-16(fp)
 2012dac:	00bfff84 	movi	r2,-2
 2012db0:	1884703a 	and	r2,r3,r2
 2012db4:	1001703a 	wrctl	status,r2
  
  return context;
 2012db8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2012dbc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2012dc0:	d0a00c17 	ldw	r2,-32720(gp)
 2012dc4:	10c000c4 	addi	r3,r2,3
 2012dc8:	00bfff04 	movi	r2,-4
 2012dcc:	1884703a 	and	r2,r3,r2
 2012dd0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2012dd4:	d0e00c17 	ldw	r3,-32720(gp)
 2012dd8:	e0bfff17 	ldw	r2,-4(fp)
 2012ddc:	1885883a 	add	r2,r3,r2
 2012de0:	00c10034 	movhi	r3,1024
 2012de4:	18c00004 	addi	r3,r3,0
 2012de8:	1880062e 	bgeu	r3,r2,2012e04 <sbrk+0x74>
 2012dec:	e0bffa17 	ldw	r2,-24(fp)
 2012df0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012df4:	e0bffd17 	ldw	r2,-12(fp)
 2012df8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2012dfc:	00bfffc4 	movi	r2,-1
 2012e00:	00000b06 	br	2012e30 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 2012e04:	d0a00c17 	ldw	r2,-32720(gp)
 2012e08:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 2012e0c:	d0e00c17 	ldw	r3,-32720(gp)
 2012e10:	e0bfff17 	ldw	r2,-4(fp)
 2012e14:	1885883a 	add	r2,r3,r2
 2012e18:	d0a00c15 	stw	r2,-32720(gp)
 2012e1c:	e0bffa17 	ldw	r2,-24(fp)
 2012e20:	e0bffe15 	stw	r2,-8(fp)
 2012e24:	e0bffe17 	ldw	r2,-8(fp)
 2012e28:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2012e2c:	e0bffb17 	ldw	r2,-20(fp)
} 
 2012e30:	e037883a 	mov	sp,fp
 2012e34:	df000017 	ldw	fp,0(sp)
 2012e38:	dec00104 	addi	sp,sp,4
 2012e3c:	f800283a 	ret

02012e40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2012e40:	defffe04 	addi	sp,sp,-8
 2012e44:	dfc00115 	stw	ra,4(sp)
 2012e48:	df000015 	stw	fp,0(sp)
 2012e4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2012e50:	008080b4 	movhi	r2,514
 2012e54:	10a4f704 	addi	r2,r2,-27684
 2012e58:	10800017 	ldw	r2,0(r2)
 2012e5c:	10000526 	beq	r2,zero,2012e74 <alt_get_errno+0x34>
 2012e60:	008080b4 	movhi	r2,514
 2012e64:	10a4f704 	addi	r2,r2,-27684
 2012e68:	10800017 	ldw	r2,0(r2)
 2012e6c:	103ee83a 	callr	r2
 2012e70:	00000206 	br	2012e7c <alt_get_errno+0x3c>
 2012e74:	008080b4 	movhi	r2,514
 2012e78:	10a50504 	addi	r2,r2,-27628
}
 2012e7c:	e037883a 	mov	sp,fp
 2012e80:	dfc00117 	ldw	ra,4(sp)
 2012e84:	df000017 	ldw	fp,0(sp)
 2012e88:	dec00204 	addi	sp,sp,8
 2012e8c:	f800283a 	ret

02012e90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2012e90:	defff904 	addi	sp,sp,-28
 2012e94:	dfc00615 	stw	ra,24(sp)
 2012e98:	df000515 	stw	fp,20(sp)
 2012e9c:	df000504 	addi	fp,sp,20
 2012ea0:	e13ffd15 	stw	r4,-12(fp)
 2012ea4:	e17ffe15 	stw	r5,-8(fp)
 2012ea8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2012eac:	e0bffd17 	ldw	r2,-12(fp)
 2012eb0:	10000716 	blt	r2,zero,2012ed0 <write+0x40>
 2012eb4:	e13ffd17 	ldw	r4,-12(fp)
 2012eb8:	01400304 	movi	r5,12
 2012ebc:	20093b80 	call	20093b8 <__mulsi3>
 2012ec0:	00c080b4 	movhi	r3,514
 2012ec4:	18e01204 	addi	r3,r3,-32696
 2012ec8:	10c5883a 	add	r2,r2,r3
 2012ecc:	00000106 	br	2012ed4 <write+0x44>
 2012ed0:	0005883a 	mov	r2,zero
 2012ed4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2012ed8:	e0bffb17 	ldw	r2,-20(fp)
 2012edc:	10001f26 	beq	r2,zero,2012f5c <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2012ee0:	e0bffb17 	ldw	r2,-20(fp)
 2012ee4:	10800217 	ldw	r2,8(r2)
 2012ee8:	108000cc 	andi	r2,r2,3
 2012eec:	10001726 	beq	r2,zero,2012f4c <write+0xbc>
 2012ef0:	e0bffb17 	ldw	r2,-20(fp)
 2012ef4:	10800017 	ldw	r2,0(r2)
 2012ef8:	10800617 	ldw	r2,24(r2)
 2012efc:	10001326 	beq	r2,zero,2012f4c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2012f00:	e0bffb17 	ldw	r2,-20(fp)
 2012f04:	10800017 	ldw	r2,0(r2)
 2012f08:	10c00617 	ldw	r3,24(r2)
 2012f0c:	e0bfff17 	ldw	r2,-4(fp)
 2012f10:	e13ffb17 	ldw	r4,-20(fp)
 2012f14:	e17ffe17 	ldw	r5,-8(fp)
 2012f18:	100d883a 	mov	r6,r2
 2012f1c:	183ee83a 	callr	r3
 2012f20:	e0bffc15 	stw	r2,-16(fp)
 2012f24:	e0bffc17 	ldw	r2,-16(fp)
 2012f28:	1000060e 	bge	r2,zero,2012f44 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 2012f2c:	2012e400 	call	2012e40 <alt_get_errno>
 2012f30:	e0fffc17 	ldw	r3,-16(fp)
 2012f34:	00c7c83a 	sub	r3,zero,r3
 2012f38:	10c00015 	stw	r3,0(r2)
        return -1;
 2012f3c:	00bfffc4 	movi	r2,-1
 2012f40:	00000a06 	br	2012f6c <write+0xdc>
      }
      return rval;
 2012f44:	e0bffc17 	ldw	r2,-16(fp)
 2012f48:	00000806 	br	2012f6c <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2012f4c:	2012e400 	call	2012e40 <alt_get_errno>
 2012f50:	00c00344 	movi	r3,13
 2012f54:	10c00015 	stw	r3,0(r2)
 2012f58:	00000306 	br	2012f68 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2012f5c:	2012e400 	call	2012e40 <alt_get_errno>
 2012f60:	00c01444 	movi	r3,81
 2012f64:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 2012f68:	00bfffc4 	movi	r2,-1
}
 2012f6c:	e037883a 	mov	sp,fp
 2012f70:	dfc00117 	ldw	ra,4(sp)
 2012f74:	df000017 	ldw	fp,0(sp)
 2012f78:	dec00204 	addi	sp,sp,8
 2012f7c:	f800283a 	ret

02012f80 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2012f80:	defffd04 	addi	sp,sp,-12
 2012f84:	dfc00215 	stw	ra,8(sp)
 2012f88:	df000115 	stw	fp,4(sp)
 2012f8c:	df000104 	addi	fp,sp,4
 2012f90:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2012f94:	e13fff17 	ldw	r4,-4(fp)
 2012f98:	014080b4 	movhi	r5,514
 2012f9c:	2964f404 	addi	r5,r5,-27696
 2012fa0:	201550c0 	call	201550c <alt_dev_llist_insert>
}
 2012fa4:	e037883a 	mov	sp,fp
 2012fa8:	dfc00117 	ldw	ra,4(sp)
 2012fac:	df000017 	ldw	fp,0(sp)
 2012fb0:	dec00204 	addi	sp,sp,8
 2012fb4:	f800283a 	ret

02012fb8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2012fb8:	defffd04 	addi	sp,sp,-12
 2012fbc:	dfc00215 	stw	ra,8(sp)
 2012fc0:	df000115 	stw	fp,4(sp)
 2012fc4:	df000104 	addi	fp,sp,4
 2012fc8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 2012fcc:	2015ca80 	call	2015ca8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2012fd0:	00800044 	movi	r2,1
 2012fd4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2012fd8:	e037883a 	mov	sp,fp
 2012fdc:	dfc00117 	ldw	ra,4(sp)
 2012fe0:	df000017 	ldw	fp,0(sp)
 2012fe4:	dec00204 	addi	sp,sp,8
 2012fe8:	f800283a 	ret

02012fec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2012fec:	defffe04 	addi	sp,sp,-8
 2012ff0:	dfc00115 	stw	ra,4(sp)
 2012ff4:	df000015 	stw	fp,0(sp)
 2012ff8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 2012ffc:	010080b4 	movhi	r4,514
 2013000:	21207204 	addi	r4,r4,-32312
 2013004:	20130980 	call	2013098 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2013008:	010080b4 	movhi	r4,514
 201300c:	2120ae04 	addi	r4,r4,-32072
 2013010:	000b883a 	mov	r5,zero
 2013014:	01800144 	movi	r6,5
 2013018:	2013b540 	call	2013b54 <altera_avalon_jtag_uart_init>
 201301c:	010080b4 	movhi	r4,514
 2013020:	2120a404 	addi	r4,r4,-32112
 2013024:	2012f800 	call	2012f80 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 2013028:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
 201302c:	010080b4 	movhi	r4,514
 2013030:	2124c604 	addi	r4,r4,-27880
 2013034:	000b883a 	mov	r5,zero
 2013038:	01800184 	movi	r6,6
 201303c:	20145640 	call	2014564 <altera_avalon_uart_init>
 2013040:	010080b4 	movhi	r4,514
 2013044:	2124bc04 	addi	r4,r4,-27920
 2013048:	2012f800 	call	2012f80 <alt_dev_reg>
}
 201304c:	e037883a 	mov	sp,fp
 2013050:	dfc00117 	ldw	ra,4(sp)
 2013054:	df000017 	ldw	fp,0(sp)
 2013058:	dec00204 	addi	sp,sp,8
 201305c:	f800283a 	ret

02013060 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 2013060:	defffd04 	addi	sp,sp,-12
 2013064:	dfc00215 	stw	ra,8(sp)
 2013068:	df000115 	stw	fp,4(sp)
 201306c:	df000104 	addi	fp,sp,4
 2013070:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 2013074:	e13fff17 	ldw	r4,-4(fp)
 2013078:	014080b4 	movhi	r5,514
 201307c:	2964fa04 	addi	r5,r5,-27672
 2013080:	201550c0 	call	201550c <alt_dev_llist_insert>
}
 2013084:	e037883a 	mov	sp,fp
 2013088:	dfc00117 	ldw	ra,4(sp)
 201308c:	df000017 	ldw	fp,0(sp)
 2013090:	dec00204 	addi	sp,sp,8
 2013094:	f800283a 	ret

02013098 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 2013098:	defffc04 	addi	sp,sp,-16
 201309c:	dfc00315 	stw	ra,12(sp)
 20130a0:	df000215 	stw	fp,8(sp)
 20130a4:	df000204 	addi	fp,sp,8
 20130a8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 20130ac:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 20130b0:	e13fff17 	ldw	r4,-4(fp)
 20130b4:	20130ec0 	call	20130ec <alt_epcs_flash_query>
 20130b8:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 20130bc:	e0bffe17 	ldw	r2,-8(fp)
 20130c0:	1000041e 	bne	r2,zero,20130d4 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 20130c4:	e0bfff17 	ldw	r2,-4(fp)
 20130c8:	1009883a 	mov	r4,r2
 20130cc:	20130600 	call	2013060 <alt_flash_device_register>
 20130d0:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 20130d4:	e0bffe17 	ldw	r2,-8(fp)
}
 20130d8:	e037883a 	mov	sp,fp
 20130dc:	dfc00117 	ldw	ra,4(sp)
 20130e0:	df000017 	ldw	fp,0(sp)
 20130e4:	dec00204 	addi	sp,sp,8
 20130e8:	f800283a 	ret

020130ec <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 20130ec:	defffc04 	addi	sp,sp,-16
 20130f0:	dfc00315 	stw	ra,12(sp)
 20130f4:	df000215 	stw	fp,8(sp)
 20130f8:	df000204 	addi	fp,sp,8
 20130fc:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2013100:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 2013104:	e0bfff17 	ldw	r2,-4(fp)
 2013108:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 201310c:	e0bfff17 	ldw	r2,-4(fp)
 2013110:	10802d17 	ldw	r2,180(r2)
 2013114:	1009883a 	mov	r4,r2
 2013118:	20151e40 	call	20151e4 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 201311c:	10c03fcc 	andi	r3,r2,255
 2013120:	e0bfff17 	ldw	r2,-4(fp)
 2013124:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 2013128:	e0bfff17 	ldw	r2,-4(fp)
 201312c:	10802f17 	ldw	r2,188(r2)
 2013130:	10800598 	cmpnei	r2,r2,22
 2013134:	10000a1e 	bne	r2,zero,2013160 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2013138:	e0bfff17 	ldw	r2,-4(fp)
 201313c:	00c02034 	movhi	r3,128
 2013140:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 2013144:	e0bfff17 	ldw	r2,-4(fp)
 2013148:	00c02004 	movi	r3,128
 201314c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2013150:	e0bfff17 	ldw	r2,-4(fp)
 2013154:	00c00074 	movhi	r3,1
 2013158:	10c01015 	stw	r3,64(r2)
 201315c:	00007306 	br	201332c <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 2013160:	e0bfff17 	ldw	r2,-4(fp)
 2013164:	10802f17 	ldw	r2,188(r2)
 2013168:	10800518 	cmpnei	r2,r2,20
 201316c:	10000a1e 	bne	r2,zero,2013198 <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2013170:	e0bfff17 	ldw	r2,-4(fp)
 2013174:	00c00834 	movhi	r3,32
 2013178:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 201317c:	e0bfff17 	ldw	r2,-4(fp)
 2013180:	00c00804 	movi	r3,32
 2013184:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2013188:	e0bfff17 	ldw	r2,-4(fp)
 201318c:	00c00074 	movhi	r3,1
 2013190:	10c01015 	stw	r3,64(r2)
 2013194:	00006506 	br	201332c <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 2013198:	e0bfff17 	ldw	r2,-4(fp)
 201319c:	10802f17 	ldw	r2,188(r2)
 20131a0:	108004d8 	cmpnei	r2,r2,19
 20131a4:	10000a1e 	bne	r2,zero,20131d0 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 20131a8:	e0bfff17 	ldw	r2,-4(fp)
 20131ac:	00c00434 	movhi	r3,16
 20131b0:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 20131b4:	e0bfff17 	ldw	r2,-4(fp)
 20131b8:	00c00404 	movi	r3,16
 20131bc:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20131c0:	e0bfff17 	ldw	r2,-4(fp)
 20131c4:	00c00074 	movhi	r3,1
 20131c8:	10c01015 	stw	r3,64(r2)
 20131cc:	00005706 	br	201332c <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 20131d0:	e0bfff17 	ldw	r2,-4(fp)
 20131d4:	10802f17 	ldw	r2,188(r2)
 20131d8:	10800498 	cmpnei	r2,r2,18
 20131dc:	10000a1e 	bne	r2,zero,2013208 <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 20131e0:	e0bfff17 	ldw	r2,-4(fp)
 20131e4:	00c00234 	movhi	r3,8
 20131e8:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 20131ec:	e0bfff17 	ldw	r2,-4(fp)
 20131f0:	00c00204 	movi	r3,8
 20131f4:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 20131f8:	e0bfff17 	ldw	r2,-4(fp)
 20131fc:	00c00074 	movhi	r3,1
 2013200:	10c01015 	stw	r3,64(r2)
 2013204:	00004906 	br	201332c <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 2013208:	e0bfff17 	ldw	r2,-4(fp)
 201320c:	10802f17 	ldw	r2,188(r2)
 2013210:	10800418 	cmpnei	r2,r2,16
 2013214:	10000a1e 	bne	r2,zero,2013240 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 2013218:	e0bfff17 	ldw	r2,-4(fp)
 201321c:	00c000b4 	movhi	r3,2
 2013220:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 2013224:	e0bfff17 	ldw	r2,-4(fp)
 2013228:	00c00104 	movi	r3,4
 201322c:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 2013230:	e0bfff17 	ldw	r2,-4(fp)
 2013234:	00e00014 	movui	r3,32768
 2013238:	10c01015 	stw	r3,64(r2)
 201323c:	00003b06 	br	201332c <alt_epcs_flash_query+0x240>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 2013240:	e0bfff17 	ldw	r2,-4(fp)
 2013244:	10802d17 	ldw	r2,180(r2)
 2013248:	1009883a 	mov	r4,r2
 201324c:	201524c0 	call	201524c <epcs_read_device_id>
 2013250:	e0ffff17 	ldw	r3,-4(fp)
 2013254:	18802f15 	stw	r2,188(r3)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 2013258:	e0bfff17 	ldw	r2,-4(fp)
 201325c:	10c02f17 	ldw	r3,188(r2)
 2013260:	00804034 	movhi	r2,256
 2013264:	10bfffc4 	addi	r2,r2,-1
 2013268:	1886703a 	and	r3,r3,r2
 201326c:	00800874 	movhi	r2,33
 2013270:	10ae8604 	addi	r2,r2,-17896
 2013274:	18800a1e 	bne	r3,r2,20132a0 <alt_epcs_flash_query+0x1b4>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2013278:	e0bfff17 	ldw	r2,-4(fp)
 201327c:	00c04034 	movhi	r3,256
 2013280:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 2013284:	e0bfff17 	ldw	r2,-4(fp)
 2013288:	00c04004 	movi	r3,256
 201328c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2013290:	e0bfff17 	ldw	r2,-4(fp)
 2013294:	00c00074 	movhi	r3,1
 2013298:	10c01015 	stw	r3,64(r2)
 201329c:	00002306 	br	201332c <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 20132a0:	e0bfff17 	ldw	r2,-4(fp)
 20132a4:	10802f17 	ldw	r2,188(r2)
 20132a8:	10803fcc 	andi	r2,r2,255
 20132ac:	10800618 	cmpnei	r2,r2,24
 20132b0:	10000a1e 	bne	r2,zero,20132dc <alt_epcs_flash_query+0x1f0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 20132b4:	e0bfff17 	ldw	r2,-4(fp)
 20132b8:	00c04034 	movhi	r3,256
 20132bc:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 20132c0:	e0bfff17 	ldw	r2,-4(fp)
 20132c4:	00c01004 	movi	r3,64
 20132c8:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 20132cc:	e0bfff17 	ldw	r2,-4(fp)
 20132d0:	00c00134 	movhi	r3,4
 20132d4:	10c01015 	stw	r3,64(r2)
 20132d8:	00001406 	br	201332c <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 20132dc:	e0bfff17 	ldw	r2,-4(fp)
 20132e0:	10802f17 	ldw	r2,188(r2)
 20132e4:	10803fcc 	andi	r2,r2,255
 20132e8:	10800658 	cmpnei	r2,r2,25
 20132ec:	10000d1e 	bne	r2,zero,2013324 <alt_epcs_flash_query+0x238>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 20132f0:	e0bfff17 	ldw	r2,-4(fp)
 20132f4:	00c08034 	movhi	r3,512
 20132f8:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 20132fc:	e0bfff17 	ldw	r2,-4(fp)
 2013300:	00c08004 	movi	r3,512
 2013304:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2013308:	e0bfff17 	ldw	r2,-4(fp)
 201330c:	00c00074 	movhi	r3,1
 2013310:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 2013314:	e0bfff17 	ldw	r2,-4(fp)
 2013318:	00c00044 	movi	r3,1
 201331c:	10c03115 	stw	r3,196(r2)
 2013320:	00000206 	br	201332c <alt_epcs_flash_query+0x240>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 2013324:	00bffb44 	movi	r2,-19
 2013328:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 201332c:	e0bfff17 	ldw	r2,-4(fp)
 2013330:	10800e17 	ldw	r2,56(r2)
 2013334:	1007883a 	mov	r3,r2
 2013338:	e0bfff17 	ldw	r2,-4(fp)
 201333c:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 2013340:	e0bfff17 	ldw	r2,-4(fp)
 2013344:	00c00044 	movi	r3,1
 2013348:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 201334c:	e0bfff17 	ldw	r2,-4(fp)
 2013350:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 2013354:	e0bfff17 	ldw	r2,-4(fp)
 2013358:	00c04004 	movi	r3,256
 201335c:	10c03015 	stw	r3,192(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 2013360:	e0bffe17 	ldw	r2,-8(fp)
}
 2013364:	e037883a 	mov	sp,fp
 2013368:	dfc00117 	ldw	ra,4(sp)
 201336c:	df000017 	ldw	fp,0(sp)
 2013370:	dec00204 	addi	sp,sp,8
 2013374:	f800283a 	ret

02013378 <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 2013378:	deffee04 	addi	sp,sp,-72
 201337c:	dfc01115 	stw	ra,68(sp)
 2013380:	df001015 	stw	fp,64(sp)
 2013384:	df001004 	addi	fp,sp,64
 2013388:	e13ffc15 	stw	r4,-16(fp)
 201338c:	e17ffd15 	stw	r5,-12(fp)
 2013390:	e1bffe15 	stw	r6,-8(fp)
 2013394:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 2013398:	00800804 	movi	r2,32
 201339c:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 20133a0:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 20133a4:	00002606 	br	2013440 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 20133a8:	e0bff117 	ldw	r2,-60(fp)
 20133ac:	e0ffff17 	ldw	r3,-4(fp)
 20133b0:	1880012e 	bgeu	r3,r2,20133b8 <alt_epcs_flash_memcmp+0x40>
 20133b4:	1805883a 	mov	r2,r3
 20133b8:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 20133bc:	e0fffe17 	ldw	r3,-8(fp)
 20133c0:	e0bff017 	ldw	r2,-64(fp)
 20133c4:	1887883a 	add	r3,r3,r2
 20133c8:	e0bff404 	addi	r2,fp,-48
 20133cc:	e13ffc17 	ldw	r4,-16(fp)
 20133d0:	180b883a 	mov	r5,r3
 20133d4:	100d883a 	mov	r6,r2
 20133d8:	e1fff217 	ldw	r7,-56(fp)
 20133dc:	20139580 	call	2013958 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 20133e0:	1000020e 	bge	r2,zero,20133ec <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 20133e4:	00bfffc4 	movi	r2,-1
 20133e8:	00001806 	br	201344c <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 20133ec:	e0bff017 	ldw	r2,-64(fp)
 20133f0:	e0fffd17 	ldw	r3,-12(fp)
 20133f4:	1889883a 	add	r4,r3,r2
 20133f8:	e0bff217 	ldw	r2,-56(fp)
 20133fc:	e0fff404 	addi	r3,fp,-48
 2013400:	180b883a 	mov	r5,r3
 2013404:	100d883a 	mov	r6,r2
 2013408:	20161940 	call	2016194 <memcmp>
 201340c:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 2013410:	e0bff317 	ldw	r2,-52(fp)
 2013414:	10000226 	beq	r2,zero,2013420 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
 2013418:	e0bff317 	ldw	r2,-52(fp)
 201341c:	00000b06 	br	201344c <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
 2013420:	e0bff217 	ldw	r2,-56(fp)
 2013424:	e0ffff17 	ldw	r3,-4(fp)
 2013428:	1885c83a 	sub	r2,r3,r2
 201342c:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 2013430:	e0fff017 	ldw	r3,-64(fp)
 2013434:	e0bff217 	ldw	r2,-56(fp)
 2013438:	1885883a 	add	r2,r3,r2
 201343c:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 2013440:	e0bfff17 	ldw	r2,-4(fp)
 2013444:	103fd81e 	bne	r2,zero,20133a8 <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 2013448:	0005883a 	mov	r2,zero
}
 201344c:	e037883a 	mov	sp,fp
 2013450:	dfc00117 	ldw	ra,4(sp)
 2013454:	df000017 	ldw	fp,0(sp)
 2013458:	dec00204 	addi	sp,sp,8
 201345c:	f800283a 	ret

02013460 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 2013460:	defff404 	addi	sp,sp,-48
 2013464:	dfc00b15 	stw	ra,44(sp)
 2013468:	df000a15 	stw	fp,40(sp)
 201346c:	df000a04 	addi	fp,sp,40
 2013470:	e13ffc15 	stw	r4,-16(fp)
 2013474:	e17ffd15 	stw	r5,-12(fp)
 2013478:	e1bffe15 	stw	r6,-8(fp)
 201347c:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 2013480:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2013484:	e03ff815 	stw	zero,-32(fp)
 2013488:	00008306 	br	2013698 <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 201348c:	e0fffc17 	ldw	r3,-16(fp)
 2013490:	e0bff817 	ldw	r2,-32(fp)
 2013494:	1004913a 	slli	r2,r2,4
 2013498:	1885883a 	add	r2,r3,r2
 201349c:	10800d04 	addi	r2,r2,52
 20134a0:	10800017 	ldw	r2,0(r2)
 20134a4:	e0fffd17 	ldw	r3,-12(fp)
 20134a8:	18807816 	blt	r3,r2,201368c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 20134ac:	e0fffc17 	ldw	r3,-16(fp)
 20134b0:	e0bff817 	ldw	r2,-32(fp)
 20134b4:	1004913a 	slli	r2,r2,4
 20134b8:	1885883a 	add	r2,r3,r2
 20134bc:	10800d04 	addi	r2,r2,52
 20134c0:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 20134c4:	e13ffc17 	ldw	r4,-16(fp)
 20134c8:	e0bff817 	ldw	r2,-32(fp)
 20134cc:	1004913a 	slli	r2,r2,4
 20134d0:	2085883a 	add	r2,r4,r2
 20134d4:	10800e04 	addi	r2,r2,56
 20134d8:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 20134dc:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 20134e0:	e0fffd17 	ldw	r3,-12(fp)
 20134e4:	1880690e 	bge	r3,r2,201368c <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 20134e8:	e0fffc17 	ldw	r3,-16(fp)
 20134ec:	e0bff817 	ldw	r2,-32(fp)
 20134f0:	1004913a 	slli	r2,r2,4
 20134f4:	1885883a 	add	r2,r3,r2
 20134f8:	10800d04 	addi	r2,r2,52
 20134fc:	10800017 	ldw	r2,0(r2)
 2013500:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2013504:	e03ff915 	stw	zero,-28(fp)
 2013508:	00005806 	br	201366c <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 201350c:	e0fffd17 	ldw	r3,-12(fp)
 2013510:	e0bffa17 	ldw	r2,-24(fp)
 2013514:	18804916 	blt	r3,r2,201363c <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 2013518:	e0fffc17 	ldw	r3,-16(fp)
 201351c:	e0bff817 	ldw	r2,-32(fp)
 2013520:	10800104 	addi	r2,r2,4
 2013524:	1004913a 	slli	r2,r2,4
 2013528:	1885883a 	add	r2,r3,r2
 201352c:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 2013530:	e0bffa17 	ldw	r2,-24(fp)
 2013534:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 2013538:	e0fffd17 	ldw	r3,-12(fp)
 201353c:	18803f0e 	bge	r3,r2,201363c <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 2013540:	e0fffc17 	ldw	r3,-16(fp)
 2013544:	e0bff817 	ldw	r2,-32(fp)
 2013548:	10800104 	addi	r2,r2,4
 201354c:	1004913a 	slli	r2,r2,4
 2013550:	1885883a 	add	r2,r3,r2
 2013554:	10c00017 	ldw	r3,0(r2)
 2013558:	e0bffa17 	ldw	r2,-24(fp)
 201355c:	1887883a 	add	r3,r3,r2
 2013560:	e0bffd17 	ldw	r2,-12(fp)
 2013564:	1885c83a 	sub	r2,r3,r2
 2013568:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 201356c:	e0fffb17 	ldw	r3,-20(fp)
 2013570:	e0bfff17 	ldw	r2,-4(fp)
 2013574:	1880010e 	bge	r3,r2,201357c <alt_epcs_flash_write+0x11c>
 2013578:	1805883a 	mov	r2,r3
 201357c:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 2013580:	e0bffb17 	ldw	r2,-20(fp)
 2013584:	e13ffc17 	ldw	r4,-16(fp)
 2013588:	e17ffe17 	ldw	r5,-8(fp)
 201358c:	e1bffd17 	ldw	r6,-12(fp)
 2013590:	100f883a 	mov	r7,r2
 2013594:	20133780 	call	2013378 <alt_epcs_flash_memcmp>
 2013598:	10001226 	beq	r2,zero,20135e4 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 201359c:	e0bffc17 	ldw	r2,-16(fp)
 20135a0:	10800817 	ldw	r2,32(r2)
 20135a4:	e13ffc17 	ldw	r4,-16(fp)
 20135a8:	e17ffa17 	ldw	r5,-24(fp)
 20135ac:	103ee83a 	callr	r2
 20135b0:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 20135b4:	e0bff717 	ldw	r2,-36(fp)
 20135b8:	10000a1e 	bne	r2,zero,20135e4 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 20135bc:	e0bffc17 	ldw	r2,-16(fp)
 20135c0:	10800917 	ldw	r2,36(r2)
 20135c4:	e0fffb17 	ldw	r3,-20(fp)
 20135c8:	d8c00015 	stw	r3,0(sp)
 20135cc:	e13ffc17 	ldw	r4,-16(fp)
 20135d0:	e17ffa17 	ldw	r5,-24(fp)
 20135d4:	e1bffd17 	ldw	r6,-12(fp)
 20135d8:	e1fffe17 	ldw	r7,-8(fp)
 20135dc:	103ee83a 	callr	r2
 20135e0:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 20135e4:	e0ffff17 	ldw	r3,-4(fp)
 20135e8:	e0bffb17 	ldw	r2,-20(fp)
 20135ec:	18802e26 	beq	r3,r2,20136a8 <alt_epcs_flash_write+0x248>
 20135f0:	e0bff717 	ldw	r2,-36(fp)
 20135f4:	10002c1e 	bne	r2,zero,20136a8 <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 20135f8:	e0ffff17 	ldw	r3,-4(fp)
 20135fc:	e0bffb17 	ldw	r2,-20(fp)
 2013600:	1885c83a 	sub	r2,r3,r2
 2013604:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 2013608:	e0fffc17 	ldw	r3,-16(fp)
 201360c:	e0bff817 	ldw	r2,-32(fp)
 2013610:	10800104 	addi	r2,r2,4
 2013614:	1004913a 	slli	r2,r2,4
 2013618:	1885883a 	add	r2,r3,r2
 201361c:	10c00017 	ldw	r3,0(r2)
 2013620:	e0bffa17 	ldw	r2,-24(fp)
 2013624:	1885883a 	add	r2,r3,r2
 2013628:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 201362c:	e0bffb17 	ldw	r2,-20(fp)
 2013630:	e0fffe17 	ldw	r3,-8(fp)
 2013634:	1885883a 	add	r2,r3,r2
 2013638:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 201363c:	e0fffc17 	ldw	r3,-16(fp)
 2013640:	e0bff817 	ldw	r2,-32(fp)
 2013644:	10800104 	addi	r2,r2,4
 2013648:	1004913a 	slli	r2,r2,4
 201364c:	1885883a 	add	r2,r3,r2
 2013650:	10800017 	ldw	r2,0(r2)
 2013654:	e0fffa17 	ldw	r3,-24(fp)
 2013658:	1885883a 	add	r2,r3,r2
 201365c:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2013660:	e0bff917 	ldw	r2,-28(fp)
 2013664:	10800044 	addi	r2,r2,1
 2013668:	e0bff915 	stw	r2,-28(fp)
 201366c:	e0fffc17 	ldw	r3,-16(fp)
 2013670:	e0bff817 	ldw	r2,-32(fp)
 2013674:	1004913a 	slli	r2,r2,4
 2013678:	1885883a 	add	r2,r3,r2
 201367c:	10800f04 	addi	r2,r2,60
 2013680:	10800017 	ldw	r2,0(r2)
 2013684:	e0fff917 	ldw	r3,-28(fp)
 2013688:	18bfa016 	blt	r3,r2,201350c <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 201368c:	e0bff817 	ldw	r2,-32(fp)
 2013690:	10800044 	addi	r2,r2,1
 2013694:	e0bff815 	stw	r2,-32(fp)
 2013698:	e0bffc17 	ldw	r2,-16(fp)
 201369c:	10800c17 	ldw	r2,48(r2)
 20136a0:	e0fff817 	ldw	r3,-32(fp)
 20136a4:	18bf7916 	blt	r3,r2,201348c <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 20136a8:	e0bff717 	ldw	r2,-36(fp)
}
 20136ac:	e037883a 	mov	sp,fp
 20136b0:	dfc00117 	ldw	ra,4(sp)
 20136b4:	df000017 	ldw	fp,0(sp)
 20136b8:	dec00204 	addi	sp,sp,8
 20136bc:	f800283a 	ret

020136c0 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 20136c0:	defffa04 	addi	sp,sp,-24
 20136c4:	df000515 	stw	fp,20(sp)
 20136c8:	df000504 	addi	fp,sp,20
 20136cc:	e13ffd15 	stw	r4,-12(fp)
 20136d0:	e17ffe15 	stw	r5,-8(fp)
 20136d4:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 20136d8:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 20136dc:	e0bffd17 	ldw	r2,-12(fp)
 20136e0:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 20136e4:	e0bffc17 	ldw	r2,-16(fp)
 20136e8:	10c00c17 	ldw	r3,48(r2)
 20136ec:	e0bfff17 	ldw	r2,-4(fp)
 20136f0:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 20136f4:	e0bffc17 	ldw	r2,-16(fp)
 20136f8:	10800c17 	ldw	r2,48(r2)
 20136fc:	1000031e 	bne	r2,zero,201370c <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 2013700:	00bffec4 	movi	r2,-5
 2013704:	e0bffb15 	stw	r2,-20(fp)
 2013708:	00000b06 	br	2013738 <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 201370c:	e0bffc17 	ldw	r2,-16(fp)
 2013710:	10800c17 	ldw	r2,48(r2)
 2013714:	10800250 	cmplti	r2,r2,9
 2013718:	1000031e 	bne	r2,zero,2013728 <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 201371c:	00bffd04 	movi	r2,-12
 2013720:	e0bffb15 	stw	r2,-20(fp)
 2013724:	00000406 	br	2013738 <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 2013728:	e0bffc17 	ldw	r2,-16(fp)
 201372c:	10c00d04 	addi	r3,r2,52
 2013730:	e0bffe17 	ldw	r2,-8(fp)
 2013734:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 2013738:	e0bffb17 	ldw	r2,-20(fp)
}
 201373c:	e037883a 	mov	sp,fp
 2013740:	df000017 	ldw	fp,0(sp)
 2013744:	dec00104 	addi	sp,sp,4
 2013748:	f800283a 	ret

0201374c <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 201374c:	defff904 	addi	sp,sp,-28
 2013750:	df000615 	stw	fp,24(sp)
 2013754:	df000604 	addi	fp,sp,24
 2013758:	e13ffe15 	stw	r4,-8(fp)
 201375c:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2013760:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2013764:	e0bffe17 	ldw	r2,-8(fp)
 2013768:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 201376c:	e0bffb17 	ldw	r2,-20(fp)
 2013770:	10800c17 	ldw	r2,48(r2)
 2013774:	10bfffc4 	addi	r2,r2,-1
 2013778:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 201377c:	e0fffb17 	ldw	r3,-20(fp)
 2013780:	e0bffc17 	ldw	r2,-16(fp)
 2013784:	1004913a 	slli	r2,r2,4
 2013788:	1885883a 	add	r2,r3,r2
 201378c:	10800d04 	addi	r2,r2,52
 2013790:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 2013794:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 2013798:	e13ffb17 	ldw	r4,-20(fp)
 201379c:	e0bffc17 	ldw	r2,-16(fp)
 20137a0:	1004913a 	slli	r2,r2,4
 20137a4:	2085883a 	add	r2,r4,r2
 20137a8:	10800e04 	addi	r2,r2,56
 20137ac:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 20137b0:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 20137b4:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 20137b8:	e0bfff17 	ldw	r2,-4(fp)
 20137bc:	e0fffd17 	ldw	r3,-12(fp)
 20137c0:	1880022e 	bgeu	r3,r2,20137cc <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 20137c4:	00bffec4 	movi	r2,-5
 20137c8:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 20137cc:	e0bffa17 	ldw	r2,-24(fp)
}
 20137d0:	e037883a 	mov	sp,fp
 20137d4:	df000017 	ldw	fp,0(sp)
 20137d8:	dec00104 	addi	sp,sp,4
 20137dc:	f800283a 	ret

020137e0 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 20137e0:	defffa04 	addi	sp,sp,-24
 20137e4:	dfc00515 	stw	ra,20(sp)
 20137e8:	df000415 	stw	fp,16(sp)
 20137ec:	df000404 	addi	fp,sp,16
 20137f0:	e13ffe15 	stw	r4,-8(fp)
 20137f4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 20137f8:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20137fc:	e0bffe17 	ldw	r2,-8(fp)
 2013800:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 2013804:	e13ffe17 	ldw	r4,-8(fp)
 2013808:	e17fff17 	ldw	r5,-4(fp)
 201380c:	201374c0 	call	201374c <alt_epcs_test_address>
 2013810:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 2013814:	e0bffc17 	ldw	r2,-16(fp)
 2013818:	10000816 	blt	r2,zero,201383c <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 201381c:	e0bffd17 	ldw	r2,-12(fp)
 2013820:	11002d17 	ldw	r4,180(r2)
 2013824:	e0ffff17 	ldw	r3,-4(fp)
 2013828:	e0bffd17 	ldw	r2,-12(fp)
 201382c:	10803117 	ldw	r2,196(r2)
 2013830:	180b883a 	mov	r5,r3
 2013834:	100d883a 	mov	r6,r2
 2013838:	2014e240 	call	2014e24 <epcs_sector_erase>
  }
  return ret_code;
 201383c:	e0bffc17 	ldw	r2,-16(fp)
}
 2013840:	e037883a 	mov	sp,fp
 2013844:	dfc00117 	ldw	ra,4(sp)
 2013848:	df000017 	ldw	fp,0(sp)
 201384c:	dec00204 	addi	sp,sp,8
 2013850:	f800283a 	ret

02013854 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 2013854:	defff404 	addi	sp,sp,-48
 2013858:	dfc00b15 	stw	ra,44(sp)
 201385c:	df000a15 	stw	fp,40(sp)
 2013860:	df000a04 	addi	fp,sp,40
 2013864:	e13ffc15 	stw	r4,-16(fp)
 2013868:	e17ffd15 	stw	r5,-12(fp)
 201386c:	e1bffe15 	stw	r6,-8(fp)
 2013870:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2013874:	e0bffc17 	ldw	r2,-16(fp)
 2013878:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 201387c:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 2013880:	e13ffc17 	ldw	r4,-16(fp)
 2013884:	e17ffe17 	ldw	r5,-8(fp)
 2013888:	201374c0 	call	201374c <alt_epcs_test_address>
 201388c:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 2013890:	e0bff917 	ldw	r2,-28(fp)
 2013894:	10002a16 	blt	r2,zero,2013940 <alt_epcs_flash_write_block+0xec>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2013898:	00002706 	br	2013938 <alt_epcs_flash_write_block+0xe4>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 201389c:	e0bff817 	ldw	r2,-32(fp)
 20138a0:	10c03017 	ldw	r3,192(r2)
 20138a4:	e0bffe17 	ldw	r2,-8(fp)
 20138a8:	1887883a 	add	r3,r3,r2
 20138ac:	e0bff817 	ldw	r2,-32(fp)
 20138b0:	10803017 	ldw	r2,192(r2)
 20138b4:	0085c83a 	sub	r2,zero,r2
 20138b8:	1884703a 	and	r2,r3,r2
 20138bc:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 20138c0:	e0fffa17 	ldw	r3,-24(fp)
 20138c4:	e0bffe17 	ldw	r2,-8(fp)
 20138c8:	1885c83a 	sub	r2,r3,r2
 20138cc:	e0c00217 	ldw	r3,8(fp)
 20138d0:	1880010e 	bge	r3,r2,20138d8 <alt_epcs_flash_write_block+0x84>
 20138d4:	1805883a 	mov	r2,r3
 20138d8:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 20138dc:	e0bff817 	ldw	r2,-32(fp)
 20138e0:	10c02d17 	ldw	r3,180(r2)
 20138e4:	e0bff717 	ldw	r2,-36(fp)
 20138e8:	e13fff17 	ldw	r4,-4(fp)
 20138ec:	2085883a 	add	r2,r4,r2
          f->four_bytes_mode);
 20138f0:	e13ff817 	ldw	r4,-32(fp)
    while (length)
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
      length_of_current_write = MIN(length, next_page_start - data_offset);

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 20138f4:	21003117 	ldw	r4,196(r4)
 20138f8:	d9000015 	stw	r4,0(sp)
 20138fc:	1809883a 	mov	r4,r3
 2013900:	e17ffe17 	ldw	r5,-8(fp)
 2013904:	100d883a 	mov	r6,r2
 2013908:	e1fffb17 	ldw	r7,-20(fp)
 201390c:	20150c80 	call	20150c8 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 2013910:	e0c00217 	ldw	r3,8(fp)
 2013914:	e0bffb17 	ldw	r2,-20(fp)
 2013918:	1885c83a 	sub	r2,r3,r2
 201391c:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 2013920:	e0fff717 	ldw	r3,-36(fp)
 2013924:	e0bffb17 	ldw	r2,-20(fp)
 2013928:	1885883a 	add	r2,r3,r2
 201392c:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 2013930:	e0bffa17 	ldw	r2,-24(fp)
 2013934:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2013938:	e0800217 	ldw	r2,8(fp)
 201393c:	103fd71e 	bne	r2,zero,201389c <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 2013940:	e0bff917 	ldw	r2,-28(fp)
}
 2013944:	e037883a 	mov	sp,fp
 2013948:	dfc00117 	ldw	ra,4(sp)
 201394c:	df000017 	ldw	fp,0(sp)
 2013950:	dec00204 	addi	sp,sp,8
 2013954:	f800283a 	ret

02013958 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 2013958:	defff704 	addi	sp,sp,-36
 201395c:	dfc00815 	stw	ra,32(sp)
 2013960:	df000715 	stw	fp,28(sp)
 2013964:	df000704 	addi	fp,sp,28
 2013968:	e13ffc15 	stw	r4,-16(fp)
 201396c:	e17ffd15 	stw	r5,-12(fp)
 2013970:	e1bffe15 	stw	r6,-8(fp)
 2013974:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 2013978:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 201397c:	e0bffc17 	ldw	r2,-16(fp)
 2013980:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 2013984:	e13ffc17 	ldw	r4,-16(fp)
 2013988:	e17ffd17 	ldw	r5,-12(fp)
 201398c:	201374c0 	call	201374c <alt_epcs_test_address>
 2013990:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 2013994:	e0bffa17 	ldw	r2,-24(fp)
 2013998:	10000f16 	blt	r2,zero,20139d8 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 201399c:	e0bffb17 	ldw	r2,-20(fp)
 20139a0:	10802d17 	ldw	r2,180(r2)
                                f->four_bytes_mode);
 20139a4:	e0fffb17 	ldw	r3,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);

  if (ret_code >= 0)
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 20139a8:	18c03117 	ldw	r3,196(r3)
 20139ac:	d8c00015 	stw	r3,0(sp)
 20139b0:	1009883a 	mov	r4,r2
 20139b4:	e17ffd17 	ldw	r5,-12(fp)
 20139b8:	e1bffe17 	ldw	r6,-8(fp)
 20139bc:	e1ffff17 	ldw	r7,-4(fp)
 20139c0:	2014f1c0 	call	2014f1c <epcs_read_buffer>
 20139c4:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 20139c8:	e0fffa17 	ldw	r3,-24(fp)
 20139cc:	e0bfff17 	ldw	r2,-4(fp)
 20139d0:	1880011e 	bne	r3,r2,20139d8 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 20139d4:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 20139d8:	e0bffa17 	ldw	r2,-24(fp)
}
 20139dc:	e037883a 	mov	sp,fp
 20139e0:	dfc00117 	ldw	ra,4(sp)
 20139e4:	df000017 	ldw	fp,0(sp)
 20139e8:	dec00204 	addi	sp,sp,8
 20139ec:	f800283a 	ret

020139f0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 20139f0:	defffa04 	addi	sp,sp,-24
 20139f4:	dfc00515 	stw	ra,20(sp)
 20139f8:	df000415 	stw	fp,16(sp)
 20139fc:	df000404 	addi	fp,sp,16
 2013a00:	e13ffd15 	stw	r4,-12(fp)
 2013a04:	e17ffe15 	stw	r5,-8(fp)
 2013a08:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2013a0c:	e0bffd17 	ldw	r2,-12(fp)
 2013a10:	10800017 	ldw	r2,0(r2)
 2013a14:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2013a18:	e0bffc17 	ldw	r2,-16(fp)
 2013a1c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 2013a20:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2013a24:	10800217 	ldw	r2,8(r2)
 2013a28:	1809883a 	mov	r4,r3
 2013a2c:	e17ffe17 	ldw	r5,-8(fp)
 2013a30:	e1bfff17 	ldw	r6,-4(fp)
 2013a34:	100f883a 	mov	r7,r2
 2013a38:	20140180 	call	2014018 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2013a3c:	e037883a 	mov	sp,fp
 2013a40:	dfc00117 	ldw	ra,4(sp)
 2013a44:	df000017 	ldw	fp,0(sp)
 2013a48:	dec00204 	addi	sp,sp,8
 2013a4c:	f800283a 	ret

02013a50 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2013a50:	defffa04 	addi	sp,sp,-24
 2013a54:	dfc00515 	stw	ra,20(sp)
 2013a58:	df000415 	stw	fp,16(sp)
 2013a5c:	df000404 	addi	fp,sp,16
 2013a60:	e13ffd15 	stw	r4,-12(fp)
 2013a64:	e17ffe15 	stw	r5,-8(fp)
 2013a68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2013a6c:	e0bffd17 	ldw	r2,-12(fp)
 2013a70:	10800017 	ldw	r2,0(r2)
 2013a74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2013a78:	e0bffc17 	ldw	r2,-16(fp)
 2013a7c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 2013a80:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2013a84:	10800217 	ldw	r2,8(r2)
 2013a88:	1809883a 	mov	r4,r3
 2013a8c:	e17ffe17 	ldw	r5,-8(fp)
 2013a90:	e1bfff17 	ldw	r6,-4(fp)
 2013a94:	100f883a 	mov	r7,r2
 2013a98:	20142300 	call	2014230 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2013a9c:	e037883a 	mov	sp,fp
 2013aa0:	dfc00117 	ldw	ra,4(sp)
 2013aa4:	df000017 	ldw	fp,0(sp)
 2013aa8:	dec00204 	addi	sp,sp,8
 2013aac:	f800283a 	ret

02013ab0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2013ab0:	defffc04 	addi	sp,sp,-16
 2013ab4:	dfc00315 	stw	ra,12(sp)
 2013ab8:	df000215 	stw	fp,8(sp)
 2013abc:	df000204 	addi	fp,sp,8
 2013ac0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2013ac4:	e0bfff17 	ldw	r2,-4(fp)
 2013ac8:	10800017 	ldw	r2,0(r2)
 2013acc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2013ad0:	e0bffe17 	ldw	r2,-8(fp)
 2013ad4:	10c00a04 	addi	r3,r2,40
 2013ad8:	e0bfff17 	ldw	r2,-4(fp)
 2013adc:	10800217 	ldw	r2,8(r2)
 2013ae0:	1809883a 	mov	r4,r3
 2013ae4:	100b883a 	mov	r5,r2
 2013ae8:	2013ebc0 	call	2013ebc <altera_avalon_jtag_uart_close>
}
 2013aec:	e037883a 	mov	sp,fp
 2013af0:	dfc00117 	ldw	ra,4(sp)
 2013af4:	df000017 	ldw	fp,0(sp)
 2013af8:	dec00204 	addi	sp,sp,8
 2013afc:	f800283a 	ret

02013b00 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2013b00:	defffa04 	addi	sp,sp,-24
 2013b04:	dfc00515 	stw	ra,20(sp)
 2013b08:	df000415 	stw	fp,16(sp)
 2013b0c:	df000404 	addi	fp,sp,16
 2013b10:	e13ffd15 	stw	r4,-12(fp)
 2013b14:	e17ffe15 	stw	r5,-8(fp)
 2013b18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2013b1c:	e0bffd17 	ldw	r2,-12(fp)
 2013b20:	10800017 	ldw	r2,0(r2)
 2013b24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2013b28:	e0bffc17 	ldw	r2,-16(fp)
 2013b2c:	10800a04 	addi	r2,r2,40
 2013b30:	1009883a 	mov	r4,r2
 2013b34:	e17ffe17 	ldw	r5,-8(fp)
 2013b38:	e1bfff17 	ldw	r6,-4(fp)
 2013b3c:	2013f240 	call	2013f24 <altera_avalon_jtag_uart_ioctl>
}
 2013b40:	e037883a 	mov	sp,fp
 2013b44:	dfc00117 	ldw	ra,4(sp)
 2013b48:	df000017 	ldw	fp,0(sp)
 2013b4c:	dec00204 	addi	sp,sp,8
 2013b50:	f800283a 	ret

02013b54 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2013b54:	defffa04 	addi	sp,sp,-24
 2013b58:	dfc00515 	stw	ra,20(sp)
 2013b5c:	df000415 	stw	fp,16(sp)
 2013b60:	df000404 	addi	fp,sp,16
 2013b64:	e13ffd15 	stw	r4,-12(fp)
 2013b68:	e17ffe15 	stw	r5,-8(fp)
 2013b6c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2013b70:	e0bffd17 	ldw	r2,-12(fp)
 2013b74:	00c00044 	movi	r3,1
 2013b78:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2013b7c:	e0bffd17 	ldw	r2,-12(fp)
 2013b80:	10800017 	ldw	r2,0(r2)
 2013b84:	10800104 	addi	r2,r2,4
 2013b88:	e0fffd17 	ldw	r3,-12(fp)
 2013b8c:	18c00817 	ldw	r3,32(r3)
 2013b90:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 2013b94:	e0fffe17 	ldw	r3,-8(fp)
 2013b98:	e0bfff17 	ldw	r2,-4(fp)
 2013b9c:	d8000015 	stw	zero,0(sp)
 2013ba0:	1809883a 	mov	r4,r3
 2013ba4:	100b883a 	mov	r5,r2
 2013ba8:	01808074 	movhi	r6,513
 2013bac:	318f0504 	addi	r6,r6,15380
 2013bb0:	e1fffd17 	ldw	r7,-12(fp)
 2013bb4:	20126340 	call	2012634 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2013bb8:	e0bffd17 	ldw	r2,-12(fp)
 2013bbc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2013bc0:	e0bffd17 	ldw	r2,-12(fp)
 2013bc4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2013bc8:	008080b4 	movhi	r2,514
 2013bcc:	10a50a04 	addi	r2,r2,-27608
 2013bd0:	10800017 	ldw	r2,0(r2)
 2013bd4:	1809883a 	mov	r4,r3
 2013bd8:	100b883a 	mov	r5,r2
 2013bdc:	01808074 	movhi	r6,513
 2013be0:	318f8604 	addi	r6,r6,15896
 2013be4:	e1fffd17 	ldw	r7,-12(fp)
 2013be8:	201537c0 	call	201537c <alt_alarm_start>
 2013bec:	1000040e 	bge	r2,zero,2013c00 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2013bf0:	e0bffd17 	ldw	r2,-12(fp)
 2013bf4:	00e00034 	movhi	r3,32768
 2013bf8:	18ffffc4 	addi	r3,r3,-1
 2013bfc:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2013c00:	e037883a 	mov	sp,fp
 2013c04:	dfc00117 	ldw	ra,4(sp)
 2013c08:	df000017 	ldw	fp,0(sp)
 2013c0c:	dec00204 	addi	sp,sp,8
 2013c10:	f800283a 	ret

02013c14 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2013c14:	defff804 	addi	sp,sp,-32
 2013c18:	df000715 	stw	fp,28(sp)
 2013c1c:	df000704 	addi	fp,sp,28
 2013c20:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2013c24:	e0bfff17 	ldw	r2,-4(fp)
 2013c28:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 2013c2c:	e0bffb17 	ldw	r2,-20(fp)
 2013c30:	10800017 	ldw	r2,0(r2)
 2013c34:	e0bffc15 	stw	r2,-16(fp)
 2013c38:	00000106 	br	2013c40 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 2013c3c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2013c40:	e0bffc17 	ldw	r2,-16(fp)
 2013c44:	10800104 	addi	r2,r2,4
 2013c48:	10800037 	ldwio	r2,0(r2)
 2013c4c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2013c50:	e0bffd17 	ldw	r2,-12(fp)
 2013c54:	1080c00c 	andi	r2,r2,768
 2013c58:	10006a26 	beq	r2,zero,2013e04 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2013c5c:	e0bffd17 	ldw	r2,-12(fp)
 2013c60:	1080400c 	andi	r2,r2,256
 2013c64:	10003326 	beq	r2,zero,2013d34 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2013c68:	00800074 	movhi	r2,1
 2013c6c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2013c70:	e0bffb17 	ldw	r2,-20(fp)
 2013c74:	10800a17 	ldw	r2,40(r2)
 2013c78:	10800044 	addi	r2,r2,1
 2013c7c:	1081ffcc 	andi	r2,r2,2047
 2013c80:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 2013c84:	e0bffb17 	ldw	r2,-20(fp)
 2013c88:	10c00b17 	ldw	r3,44(r2)
 2013c8c:	e0bffe17 	ldw	r2,-8(fp)
 2013c90:	18801426 	beq	r3,r2,2013ce4 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2013c94:	e0bffc17 	ldw	r2,-16(fp)
 2013c98:	10800037 	ldwio	r2,0(r2)
 2013c9c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2013ca0:	e0bff917 	ldw	r2,-28(fp)
 2013ca4:	10a0000c 	andi	r2,r2,32768
 2013ca8:	10001026 	beq	r2,zero,2013cec <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2013cac:	e0bffb17 	ldw	r2,-20(fp)
 2013cb0:	10800a17 	ldw	r2,40(r2)
 2013cb4:	e0fff917 	ldw	r3,-28(fp)
 2013cb8:	e13ffb17 	ldw	r4,-20(fp)
 2013cbc:	2085883a 	add	r2,r4,r2
 2013cc0:	10800e04 	addi	r2,r2,56
 2013cc4:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2013cc8:	e0bffb17 	ldw	r2,-20(fp)
 2013ccc:	10800a17 	ldw	r2,40(r2)
 2013cd0:	10800044 	addi	r2,r2,1
 2013cd4:	10c1ffcc 	andi	r3,r2,2047
 2013cd8:	e0bffb17 	ldw	r2,-20(fp)
 2013cdc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2013ce0:	003fe306 	br	2013c70 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 2013ce4:	0001883a 	nop
 2013ce8:	00000106 	br	2013cf0 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 2013cec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2013cf0:	e0bff917 	ldw	r2,-28(fp)
 2013cf4:	10bfffec 	andhi	r2,r2,65535
 2013cf8:	10000e26 	beq	r2,zero,2013d34 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2013cfc:	e0bffb17 	ldw	r2,-20(fp)
 2013d00:	10c00817 	ldw	r3,32(r2)
 2013d04:	00bfff84 	movi	r2,-2
 2013d08:	1886703a 	and	r3,r3,r2
 2013d0c:	e0bffb17 	ldw	r2,-20(fp)
 2013d10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2013d14:	e0bffc17 	ldw	r2,-16(fp)
 2013d18:	10800104 	addi	r2,r2,4
 2013d1c:	e0fffb17 	ldw	r3,-20(fp)
 2013d20:	18c00817 	ldw	r3,32(r3)
 2013d24:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2013d28:	e0bffc17 	ldw	r2,-16(fp)
 2013d2c:	10800104 	addi	r2,r2,4
 2013d30:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2013d34:	e0bffd17 	ldw	r2,-12(fp)
 2013d38:	1080800c 	andi	r2,r2,512
 2013d3c:	103fbf26 	beq	r2,zero,2013c3c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2013d40:	e0bffd17 	ldw	r2,-12(fp)
 2013d44:	1004d43a 	srli	r2,r2,16
 2013d48:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2013d4c:	00001406 	br	2013da0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2013d50:	e0bffc17 	ldw	r2,-16(fp)
 2013d54:	e0fffb17 	ldw	r3,-20(fp)
 2013d58:	18c00d17 	ldw	r3,52(r3)
 2013d5c:	e13ffb17 	ldw	r4,-20(fp)
 2013d60:	20c7883a 	add	r3,r4,r3
 2013d64:	18c20e04 	addi	r3,r3,2104
 2013d68:	18c00003 	ldbu	r3,0(r3)
 2013d6c:	18c03fcc 	andi	r3,r3,255
 2013d70:	18c0201c 	xori	r3,r3,128
 2013d74:	18ffe004 	addi	r3,r3,-128
 2013d78:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2013d7c:	e0bffb17 	ldw	r2,-20(fp)
 2013d80:	10800d17 	ldw	r2,52(r2)
 2013d84:	10800044 	addi	r2,r2,1
 2013d88:	10c1ffcc 	andi	r3,r2,2047
 2013d8c:	e0bffb17 	ldw	r2,-20(fp)
 2013d90:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2013d94:	e0bffa17 	ldw	r2,-24(fp)
 2013d98:	10bfffc4 	addi	r2,r2,-1
 2013d9c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2013da0:	e0bffa17 	ldw	r2,-24(fp)
 2013da4:	10000526 	beq	r2,zero,2013dbc <altera_avalon_jtag_uart_irq+0x1a8>
 2013da8:	e0bffb17 	ldw	r2,-20(fp)
 2013dac:	10c00d17 	ldw	r3,52(r2)
 2013db0:	e0bffb17 	ldw	r2,-20(fp)
 2013db4:	10800c17 	ldw	r2,48(r2)
 2013db8:	18bfe51e 	bne	r3,r2,2013d50 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2013dbc:	e0bffa17 	ldw	r2,-24(fp)
 2013dc0:	103f9e26 	beq	r2,zero,2013c3c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2013dc4:	e0bffb17 	ldw	r2,-20(fp)
 2013dc8:	10c00817 	ldw	r3,32(r2)
 2013dcc:	00bfff44 	movi	r2,-3
 2013dd0:	1886703a 	and	r3,r3,r2
 2013dd4:	e0bffb17 	ldw	r2,-20(fp)
 2013dd8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2013ddc:	e0bffb17 	ldw	r2,-20(fp)
 2013de0:	10800017 	ldw	r2,0(r2)
 2013de4:	10800104 	addi	r2,r2,4
 2013de8:	e0fffb17 	ldw	r3,-20(fp)
 2013dec:	18c00817 	ldw	r3,32(r3)
 2013df0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2013df4:	e0bffc17 	ldw	r2,-16(fp)
 2013df8:	10800104 	addi	r2,r2,4
 2013dfc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2013e00:	003f8e06 	br	2013c3c <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 2013e04:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 2013e08:	e037883a 	mov	sp,fp
 2013e0c:	df000017 	ldw	fp,0(sp)
 2013e10:	dec00104 	addi	sp,sp,4
 2013e14:	f800283a 	ret

02013e18 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2013e18:	defffc04 	addi	sp,sp,-16
 2013e1c:	df000315 	stw	fp,12(sp)
 2013e20:	df000304 	addi	fp,sp,12
 2013e24:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2013e28:	e0bfff17 	ldw	r2,-4(fp)
 2013e2c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2013e30:	e0bffd17 	ldw	r2,-12(fp)
 2013e34:	10800017 	ldw	r2,0(r2)
 2013e38:	10800104 	addi	r2,r2,4
 2013e3c:	10800037 	ldwio	r2,0(r2)
 2013e40:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2013e44:	e0bffe17 	ldw	r2,-8(fp)
 2013e48:	1081000c 	andi	r2,r2,1024
 2013e4c:	10000a26 	beq	r2,zero,2013e78 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2013e50:	e0bffd17 	ldw	r2,-12(fp)
 2013e54:	10800017 	ldw	r2,0(r2)
 2013e58:	10800104 	addi	r2,r2,4
 2013e5c:	e0fffd17 	ldw	r3,-12(fp)
 2013e60:	18c00817 	ldw	r3,32(r3)
 2013e64:	18c10014 	ori	r3,r3,1024
 2013e68:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2013e6c:	e0bffd17 	ldw	r2,-12(fp)
 2013e70:	10000915 	stw	zero,36(r2)
 2013e74:	00000a06 	br	2013ea0 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2013e78:	e0bffd17 	ldw	r2,-12(fp)
 2013e7c:	10800917 	ldw	r2,36(r2)
 2013e80:	00e00034 	movhi	r3,32768
 2013e84:	18ffff04 	addi	r3,r3,-4
 2013e88:	18800536 	bltu	r3,r2,2013ea0 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 2013e8c:	e0bffd17 	ldw	r2,-12(fp)
 2013e90:	10800917 	ldw	r2,36(r2)
 2013e94:	10c00044 	addi	r3,r2,1
 2013e98:	e0bffd17 	ldw	r2,-12(fp)
 2013e9c:	10c00915 	stw	r3,36(r2)
 2013ea0:	008080b4 	movhi	r2,514
 2013ea4:	10a50a04 	addi	r2,r2,-27608
 2013ea8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2013eac:	e037883a 	mov	sp,fp
 2013eb0:	df000017 	ldw	fp,0(sp)
 2013eb4:	dec00104 	addi	sp,sp,4
 2013eb8:	f800283a 	ret

02013ebc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2013ebc:	defffd04 	addi	sp,sp,-12
 2013ec0:	df000215 	stw	fp,8(sp)
 2013ec4:	df000204 	addi	fp,sp,8
 2013ec8:	e13ffe15 	stw	r4,-8(fp)
 2013ecc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2013ed0:	00000506 	br	2013ee8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2013ed4:	e0bfff17 	ldw	r2,-4(fp)
 2013ed8:	1090000c 	andi	r2,r2,16384
 2013edc:	10000226 	beq	r2,zero,2013ee8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2013ee0:	00bffd44 	movi	r2,-11
 2013ee4:	00000b06 	br	2013f14 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2013ee8:	e0bffe17 	ldw	r2,-8(fp)
 2013eec:	10c00d17 	ldw	r3,52(r2)
 2013ef0:	e0bffe17 	ldw	r2,-8(fp)
 2013ef4:	10800c17 	ldw	r2,48(r2)
 2013ef8:	18800526 	beq	r3,r2,2013f10 <altera_avalon_jtag_uart_close+0x54>
 2013efc:	e0bffe17 	ldw	r2,-8(fp)
 2013f00:	10c00917 	ldw	r3,36(r2)
 2013f04:	e0bffe17 	ldw	r2,-8(fp)
 2013f08:	10800117 	ldw	r2,4(r2)
 2013f0c:	18bff136 	bltu	r3,r2,2013ed4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2013f10:	0005883a 	mov	r2,zero
}
 2013f14:	e037883a 	mov	sp,fp
 2013f18:	df000017 	ldw	fp,0(sp)
 2013f1c:	dec00104 	addi	sp,sp,4
 2013f20:	f800283a 	ret

02013f24 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2013f24:	defffa04 	addi	sp,sp,-24
 2013f28:	df000515 	stw	fp,20(sp)
 2013f2c:	df000504 	addi	fp,sp,20
 2013f30:	e13ffd15 	stw	r4,-12(fp)
 2013f34:	e17ffe15 	stw	r5,-8(fp)
 2013f38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 2013f3c:	00bff9c4 	movi	r2,-25
 2013f40:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2013f44:	e0bffe17 	ldw	r2,-8(fp)
 2013f48:	10da8060 	cmpeqi	r3,r2,27137
 2013f4c:	1800031e 	bne	r3,zero,2013f5c <altera_avalon_jtag_uart_ioctl+0x38>
 2013f50:	109a80a0 	cmpeqi	r2,r2,27138
 2013f54:	1000181e 	bne	r2,zero,2013fb8 <altera_avalon_jtag_uart_ioctl+0x94>
 2013f58:	00002606 	br	2013ff4 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2013f5c:	e0bffd17 	ldw	r2,-12(fp)
 2013f60:	10c00117 	ldw	r3,4(r2)
 2013f64:	00a00034 	movhi	r2,32768
 2013f68:	10bfffc4 	addi	r2,r2,-1
 2013f6c:	18802226 	beq	r3,r2,2013ff8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 2013f70:	e0bfff17 	ldw	r2,-4(fp)
 2013f74:	10800017 	ldw	r2,0(r2)
 2013f78:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2013f7c:	e0bffc17 	ldw	r2,-16(fp)
 2013f80:	10800090 	cmplti	r2,r2,2
 2013f84:	1000061e 	bne	r2,zero,2013fa0 <altera_avalon_jtag_uart_ioctl+0x7c>
 2013f88:	e0fffc17 	ldw	r3,-16(fp)
 2013f8c:	00a00034 	movhi	r2,32768
 2013f90:	10bfffc4 	addi	r2,r2,-1
 2013f94:	18800226 	beq	r3,r2,2013fa0 <altera_avalon_jtag_uart_ioctl+0x7c>
 2013f98:	e0bffc17 	ldw	r2,-16(fp)
 2013f9c:	00000206 	br	2013fa8 <altera_avalon_jtag_uart_ioctl+0x84>
 2013fa0:	00a00034 	movhi	r2,32768
 2013fa4:	10bfff84 	addi	r2,r2,-2
 2013fa8:	e0fffd17 	ldw	r3,-12(fp)
 2013fac:	18800115 	stw	r2,4(r3)
      rc = 0;
 2013fb0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2013fb4:	00001006 	br	2013ff8 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2013fb8:	e0bffd17 	ldw	r2,-12(fp)
 2013fbc:	10c00117 	ldw	r3,4(r2)
 2013fc0:	00a00034 	movhi	r2,32768
 2013fc4:	10bfffc4 	addi	r2,r2,-1
 2013fc8:	18800d26 	beq	r3,r2,2014000 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2013fcc:	e0bffd17 	ldw	r2,-12(fp)
 2013fd0:	10c00917 	ldw	r3,36(r2)
 2013fd4:	e0bffd17 	ldw	r2,-12(fp)
 2013fd8:	10800117 	ldw	r2,4(r2)
 2013fdc:	1885803a 	cmpltu	r2,r3,r2
 2013fe0:	10c03fcc 	andi	r3,r2,255
 2013fe4:	e0bfff17 	ldw	r2,-4(fp)
 2013fe8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2013fec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2013ff0:	00000306 	br	2014000 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 2013ff4:	00000306 	br	2014004 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 2013ff8:	0001883a 	nop
 2013ffc:	00000106 	br	2014004 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 2014000:	0001883a 	nop

  default:
    break;
  }

  return rc;
 2014004:	e0bffb17 	ldw	r2,-20(fp)
}
 2014008:	e037883a 	mov	sp,fp
 201400c:	df000017 	ldw	fp,0(sp)
 2014010:	dec00104 	addi	sp,sp,4
 2014014:	f800283a 	ret

02014018 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2014018:	defff304 	addi	sp,sp,-52
 201401c:	dfc00c15 	stw	ra,48(sp)
 2014020:	df000b15 	stw	fp,44(sp)
 2014024:	df000b04 	addi	fp,sp,44
 2014028:	e13ffc15 	stw	r4,-16(fp)
 201402c:	e17ffd15 	stw	r5,-12(fp)
 2014030:	e1bffe15 	stw	r6,-8(fp)
 2014034:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 2014038:	e0bffd17 	ldw	r2,-12(fp)
 201403c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2014040:	00004706 	br	2014160 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2014044:	e0bffc17 	ldw	r2,-16(fp)
 2014048:	10800a17 	ldw	r2,40(r2)
 201404c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2014050:	e0bffc17 	ldw	r2,-16(fp)
 2014054:	10800b17 	ldw	r2,44(r2)
 2014058:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 201405c:	e0fff717 	ldw	r3,-36(fp)
 2014060:	e0bff817 	ldw	r2,-32(fp)
 2014064:	18800536 	bltu	r3,r2,201407c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2014068:	e0fff717 	ldw	r3,-36(fp)
 201406c:	e0bff817 	ldw	r2,-32(fp)
 2014070:	1885c83a 	sub	r2,r3,r2
 2014074:	e0bff615 	stw	r2,-40(fp)
 2014078:	00000406 	br	201408c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 201407c:	00c20004 	movi	r3,2048
 2014080:	e0bff817 	ldw	r2,-32(fp)
 2014084:	1885c83a 	sub	r2,r3,r2
 2014088:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 201408c:	e0bff617 	ldw	r2,-40(fp)
 2014090:	10001e26 	beq	r2,zero,201410c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 2014094:	e0fffe17 	ldw	r3,-8(fp)
 2014098:	e0bff617 	ldw	r2,-40(fp)
 201409c:	1880022e 	bgeu	r3,r2,20140a8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 20140a0:	e0bffe17 	ldw	r2,-8(fp)
 20140a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 20140a8:	e0bff817 	ldw	r2,-32(fp)
 20140ac:	10800e04 	addi	r2,r2,56
 20140b0:	e0fffc17 	ldw	r3,-16(fp)
 20140b4:	1885883a 	add	r2,r3,r2
 20140b8:	e13ff517 	ldw	r4,-44(fp)
 20140bc:	100b883a 	mov	r5,r2
 20140c0:	e1bff617 	ldw	r6,-40(fp)
 20140c4:	200ee500 	call	200ee50 <memcpy>
      ptr   += n;
 20140c8:	e0fff517 	ldw	r3,-44(fp)
 20140cc:	e0bff617 	ldw	r2,-40(fp)
 20140d0:	1885883a 	add	r2,r3,r2
 20140d4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 20140d8:	e0fffe17 	ldw	r3,-8(fp)
 20140dc:	e0bff617 	ldw	r2,-40(fp)
 20140e0:	1885c83a 	sub	r2,r3,r2
 20140e4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20140e8:	e0fff817 	ldw	r3,-32(fp)
 20140ec:	e0bff617 	ldw	r2,-40(fp)
 20140f0:	1885883a 	add	r2,r3,r2
 20140f4:	10c1ffcc 	andi	r3,r2,2047
 20140f8:	e0bffc17 	ldw	r2,-16(fp)
 20140fc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2014100:	e0bffe17 	ldw	r2,-8(fp)
 2014104:	00bfcf16 	blt	zero,r2,2014044 <altera_avalon_jtag_uart_read+0x2c>
 2014108:	00000106 	br	2014110 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 201410c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 2014110:	e0fff517 	ldw	r3,-44(fp)
 2014114:	e0bffd17 	ldw	r2,-12(fp)
 2014118:	1880141e 	bne	r3,r2,201416c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 201411c:	e0bfff17 	ldw	r2,-4(fp)
 2014120:	1090000c 	andi	r2,r2,16384
 2014124:	1000131e 	bne	r2,zero,2014174 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2014128:	0001883a 	nop
 201412c:	e0bffc17 	ldw	r2,-16(fp)
 2014130:	10c00a17 	ldw	r3,40(r2)
 2014134:	e0bff717 	ldw	r2,-36(fp)
 2014138:	1880051e 	bne	r3,r2,2014150 <altera_avalon_jtag_uart_read+0x138>
 201413c:	e0bffc17 	ldw	r2,-16(fp)
 2014140:	10c00917 	ldw	r3,36(r2)
 2014144:	e0bffc17 	ldw	r2,-16(fp)
 2014148:	10800117 	ldw	r2,4(r2)
 201414c:	18bff736 	bltu	r3,r2,201412c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2014150:	e0bffc17 	ldw	r2,-16(fp)
 2014154:	10c00a17 	ldw	r3,40(r2)
 2014158:	e0bff717 	ldw	r2,-36(fp)
 201415c:	18800726 	beq	r3,r2,201417c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2014160:	e0bffe17 	ldw	r2,-8(fp)
 2014164:	00bfb716 	blt	zero,r2,2014044 <altera_avalon_jtag_uart_read+0x2c>
 2014168:	00000506 	br	2014180 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 201416c:	0001883a 	nop
 2014170:	00000306 	br	2014180 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2014174:	0001883a 	nop
 2014178:	00000106 	br	2014180 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 201417c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2014180:	e0fff517 	ldw	r3,-44(fp)
 2014184:	e0bffd17 	ldw	r2,-12(fp)
 2014188:	18801726 	beq	r3,r2,20141e8 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201418c:	0005303a 	rdctl	r2,status
 2014190:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014194:	e0fffa17 	ldw	r3,-24(fp)
 2014198:	00bfff84 	movi	r2,-2
 201419c:	1884703a 	and	r2,r3,r2
 20141a0:	1001703a 	wrctl	status,r2
  
  return context;
 20141a4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 20141a8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20141ac:	e0bffc17 	ldw	r2,-16(fp)
 20141b0:	10800817 	ldw	r2,32(r2)
 20141b4:	10c00054 	ori	r3,r2,1
 20141b8:	e0bffc17 	ldw	r2,-16(fp)
 20141bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20141c0:	e0bffc17 	ldw	r2,-16(fp)
 20141c4:	10800017 	ldw	r2,0(r2)
 20141c8:	10800104 	addi	r2,r2,4
 20141cc:	e0fffc17 	ldw	r3,-16(fp)
 20141d0:	18c00817 	ldw	r3,32(r3)
 20141d4:	10c00035 	stwio	r3,0(r2)
 20141d8:	e0bff917 	ldw	r2,-28(fp)
 20141dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20141e0:	e0bffb17 	ldw	r2,-20(fp)
 20141e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 20141e8:	e0fff517 	ldw	r3,-44(fp)
 20141ec:	e0bffd17 	ldw	r2,-12(fp)
 20141f0:	18800426 	beq	r3,r2,2014204 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 20141f4:	e0fff517 	ldw	r3,-44(fp)
 20141f8:	e0bffd17 	ldw	r2,-12(fp)
 20141fc:	1885c83a 	sub	r2,r3,r2
 2014200:	00000606 	br	201421c <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 2014204:	e0bfff17 	ldw	r2,-4(fp)
 2014208:	1090000c 	andi	r2,r2,16384
 201420c:	10000226 	beq	r2,zero,2014218 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 2014210:	00bffd44 	movi	r2,-11
 2014214:	00000106 	br	201421c <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 2014218:	00bffec4 	movi	r2,-5
}
 201421c:	e037883a 	mov	sp,fp
 2014220:	dfc00117 	ldw	ra,4(sp)
 2014224:	df000017 	ldw	fp,0(sp)
 2014228:	dec00204 	addi	sp,sp,8
 201422c:	f800283a 	ret

02014230 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2014230:	defff304 	addi	sp,sp,-52
 2014234:	dfc00c15 	stw	ra,48(sp)
 2014238:	df000b15 	stw	fp,44(sp)
 201423c:	df000b04 	addi	fp,sp,44
 2014240:	e13ffc15 	stw	r4,-16(fp)
 2014244:	e17ffd15 	stw	r5,-12(fp)
 2014248:	e1bffe15 	stw	r6,-8(fp)
 201424c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2014250:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2014254:	e0bffd17 	ldw	r2,-12(fp)
 2014258:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201425c:	00003706 	br	201433c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2014260:	e0bffc17 	ldw	r2,-16(fp)
 2014264:	10800c17 	ldw	r2,48(r2)
 2014268:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 201426c:	e0bffc17 	ldw	r2,-16(fp)
 2014270:	10800d17 	ldw	r2,52(r2)
 2014274:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2014278:	e0fff817 	ldw	r3,-32(fp)
 201427c:	e0bff517 	ldw	r2,-44(fp)
 2014280:	1880062e 	bgeu	r3,r2,201429c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2014284:	e0fff517 	ldw	r3,-44(fp)
 2014288:	e0bff817 	ldw	r2,-32(fp)
 201428c:	1885c83a 	sub	r2,r3,r2
 2014290:	10bfffc4 	addi	r2,r2,-1
 2014294:	e0bff615 	stw	r2,-40(fp)
 2014298:	00000b06 	br	20142c8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 201429c:	e0bff517 	ldw	r2,-44(fp)
 20142a0:	10000526 	beq	r2,zero,20142b8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 20142a4:	00c20004 	movi	r3,2048
 20142a8:	e0bff817 	ldw	r2,-32(fp)
 20142ac:	1885c83a 	sub	r2,r3,r2
 20142b0:	e0bff615 	stw	r2,-40(fp)
 20142b4:	00000406 	br	20142c8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 20142b8:	00c1ffc4 	movi	r3,2047
 20142bc:	e0bff817 	ldw	r2,-32(fp)
 20142c0:	1885c83a 	sub	r2,r3,r2
 20142c4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 20142c8:	e0bff617 	ldw	r2,-40(fp)
 20142cc:	10001e26 	beq	r2,zero,2014348 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 20142d0:	e0fffe17 	ldw	r3,-8(fp)
 20142d4:	e0bff617 	ldw	r2,-40(fp)
 20142d8:	1880022e 	bgeu	r3,r2,20142e4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 20142dc:	e0bffe17 	ldw	r2,-8(fp)
 20142e0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 20142e4:	e0bff817 	ldw	r2,-32(fp)
 20142e8:	10820e04 	addi	r2,r2,2104
 20142ec:	e0fffc17 	ldw	r3,-16(fp)
 20142f0:	1885883a 	add	r2,r3,r2
 20142f4:	1009883a 	mov	r4,r2
 20142f8:	e17ffd17 	ldw	r5,-12(fp)
 20142fc:	e1bff617 	ldw	r6,-40(fp)
 2014300:	200ee500 	call	200ee50 <memcpy>
      ptr   += n;
 2014304:	e0fffd17 	ldw	r3,-12(fp)
 2014308:	e0bff617 	ldw	r2,-40(fp)
 201430c:	1885883a 	add	r2,r3,r2
 2014310:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 2014314:	e0fffe17 	ldw	r3,-8(fp)
 2014318:	e0bff617 	ldw	r2,-40(fp)
 201431c:	1885c83a 	sub	r2,r3,r2
 2014320:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2014324:	e0fff817 	ldw	r3,-32(fp)
 2014328:	e0bff617 	ldw	r2,-40(fp)
 201432c:	1885883a 	add	r2,r3,r2
 2014330:	10c1ffcc 	andi	r3,r2,2047
 2014334:	e0bffc17 	ldw	r2,-16(fp)
 2014338:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201433c:	e0bffe17 	ldw	r2,-8(fp)
 2014340:	00bfc716 	blt	zero,r2,2014260 <altera_avalon_jtag_uart_write+0x30>
 2014344:	00000106 	br	201434c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2014348:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201434c:	0005303a 	rdctl	r2,status
 2014350:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014354:	e0fffa17 	ldw	r3,-24(fp)
 2014358:	00bfff84 	movi	r2,-2
 201435c:	1884703a 	and	r2,r3,r2
 2014360:	1001703a 	wrctl	status,r2
  
  return context;
 2014364:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2014368:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 201436c:	e0bffc17 	ldw	r2,-16(fp)
 2014370:	10800817 	ldw	r2,32(r2)
 2014374:	10c00094 	ori	r3,r2,2
 2014378:	e0bffc17 	ldw	r2,-16(fp)
 201437c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2014380:	e0bffc17 	ldw	r2,-16(fp)
 2014384:	10800017 	ldw	r2,0(r2)
 2014388:	10800104 	addi	r2,r2,4
 201438c:	e0fffc17 	ldw	r3,-16(fp)
 2014390:	18c00817 	ldw	r3,32(r3)
 2014394:	10c00035 	stwio	r3,0(r2)
 2014398:	e0bff917 	ldw	r2,-28(fp)
 201439c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20143a0:	e0bffb17 	ldw	r2,-20(fp)
 20143a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 20143a8:	e0bffe17 	ldw	r2,-8(fp)
 20143ac:	0080110e 	bge	zero,r2,20143f4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 20143b0:	e0bfff17 	ldw	r2,-4(fp)
 20143b4:	1090000c 	andi	r2,r2,16384
 20143b8:	1000111e 	bne	r2,zero,2014400 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 20143bc:	0001883a 	nop
 20143c0:	e0bffc17 	ldw	r2,-16(fp)
 20143c4:	10c00d17 	ldw	r3,52(r2)
 20143c8:	e0bff517 	ldw	r2,-44(fp)
 20143cc:	1880051e 	bne	r3,r2,20143e4 <altera_avalon_jtag_uart_write+0x1b4>
 20143d0:	e0bffc17 	ldw	r2,-16(fp)
 20143d4:	10c00917 	ldw	r3,36(r2)
 20143d8:	e0bffc17 	ldw	r2,-16(fp)
 20143dc:	10800117 	ldw	r2,4(r2)
 20143e0:	18bff736 	bltu	r3,r2,20143c0 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 20143e4:	e0bffc17 	ldw	r2,-16(fp)
 20143e8:	10c00d17 	ldw	r3,52(r2)
 20143ec:	e0bff517 	ldw	r2,-44(fp)
 20143f0:	18800526 	beq	r3,r2,2014408 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 20143f4:	e0bffe17 	ldw	r2,-8(fp)
 20143f8:	00bfd016 	blt	zero,r2,201433c <altera_avalon_jtag_uart_write+0x10c>
 20143fc:	00000306 	br	201440c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 2014400:	0001883a 	nop
 2014404:	00000106 	br	201440c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 2014408:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 201440c:	e0fffd17 	ldw	r3,-12(fp)
 2014410:	e0bff717 	ldw	r2,-36(fp)
 2014414:	18800426 	beq	r3,r2,2014428 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 2014418:	e0fffd17 	ldw	r3,-12(fp)
 201441c:	e0bff717 	ldw	r2,-36(fp)
 2014420:	1885c83a 	sub	r2,r3,r2
 2014424:	00000606 	br	2014440 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 2014428:	e0bfff17 	ldw	r2,-4(fp)
 201442c:	1090000c 	andi	r2,r2,16384
 2014430:	10000226 	beq	r2,zero,201443c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 2014434:	00bffd44 	movi	r2,-11
 2014438:	00000106 	br	2014440 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 201443c:	00bffec4 	movi	r2,-5
}
 2014440:	e037883a 	mov	sp,fp
 2014444:	dfc00117 	ldw	ra,4(sp)
 2014448:	df000017 	ldw	fp,0(sp)
 201444c:	dec00204 	addi	sp,sp,8
 2014450:	f800283a 	ret

02014454 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2014454:	defffa04 	addi	sp,sp,-24
 2014458:	dfc00515 	stw	ra,20(sp)
 201445c:	df000415 	stw	fp,16(sp)
 2014460:	df000404 	addi	fp,sp,16
 2014464:	e13ffd15 	stw	r4,-12(fp)
 2014468:	e17ffe15 	stw	r5,-8(fp)
 201446c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2014470:	e0bffd17 	ldw	r2,-12(fp)
 2014474:	10800017 	ldw	r2,0(r2)
 2014478:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 201447c:	e0bffc17 	ldw	r2,-16(fp)
 2014480:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 2014484:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
 2014488:	10800217 	ldw	r2,8(r2)
 201448c:	1809883a 	mov	r4,r3
 2014490:	e17ffe17 	ldw	r5,-8(fp)
 2014494:	e1bfff17 	ldw	r6,-4(fp)
 2014498:	100f883a 	mov	r7,r2
 201449c:	201495c0 	call	201495c <altera_avalon_uart_read>
      fd->fd_flags);
}
 20144a0:	e037883a 	mov	sp,fp
 20144a4:	dfc00117 	ldw	ra,4(sp)
 20144a8:	df000017 	ldw	fp,0(sp)
 20144ac:	dec00204 	addi	sp,sp,8
 20144b0:	f800283a 	ret

020144b4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 20144b4:	defffa04 	addi	sp,sp,-24
 20144b8:	dfc00515 	stw	ra,20(sp)
 20144bc:	df000415 	stw	fp,16(sp)
 20144c0:	df000404 	addi	fp,sp,16
 20144c4:	e13ffd15 	stw	r4,-12(fp)
 20144c8:	e17ffe15 	stw	r5,-8(fp)
 20144cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 20144d0:	e0bffd17 	ldw	r2,-12(fp)
 20144d4:	10800017 	ldw	r2,0(r2)
 20144d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 20144dc:	e0bffc17 	ldw	r2,-16(fp)
 20144e0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 20144e4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
 20144e8:	10800217 	ldw	r2,8(r2)
 20144ec:	1809883a 	mov	r4,r3
 20144f0:	e17ffe17 	ldw	r5,-8(fp)
 20144f4:	e1bfff17 	ldw	r6,-4(fp)
 20144f8:	100f883a 	mov	r7,r2
 20144fc:	2014bb00 	call	2014bb0 <altera_avalon_uart_write>
      fd->fd_flags);
}
 2014500:	e037883a 	mov	sp,fp
 2014504:	dfc00117 	ldw	ra,4(sp)
 2014508:	df000017 	ldw	fp,0(sp)
 201450c:	dec00204 	addi	sp,sp,8
 2014510:	f800283a 	ret

02014514 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 2014514:	defffc04 	addi	sp,sp,-16
 2014518:	dfc00315 	stw	ra,12(sp)
 201451c:	df000215 	stw	fp,8(sp)
 2014520:	df000204 	addi	fp,sp,8
 2014524:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2014528:	e0bfff17 	ldw	r2,-4(fp)
 201452c:	10800017 	ldw	r2,0(r2)
 2014530:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 2014534:	e0bffe17 	ldw	r2,-8(fp)
 2014538:	10c00a04 	addi	r3,r2,40
 201453c:	e0bfff17 	ldw	r2,-4(fp)
 2014540:	10800217 	ldw	r2,8(r2)
 2014544:	1809883a 	mov	r4,r3
 2014548:	100b883a 	mov	r5,r2
 201454c:	20148b80 	call	20148b8 <altera_avalon_uart_close>
}
 2014550:	e037883a 	mov	sp,fp
 2014554:	dfc00117 	ldw	ra,4(sp)
 2014558:	df000017 	ldw	fp,0(sp)
 201455c:	dec00204 	addi	sp,sp,8
 2014560:	f800283a 	ret

02014564 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 2014564:	defff804 	addi	sp,sp,-32
 2014568:	dfc00715 	stw	ra,28(sp)
 201456c:	df000615 	stw	fp,24(sp)
 2014570:	df000604 	addi	fp,sp,24
 2014574:	e13ffd15 	stw	r4,-12(fp)
 2014578:	e17ffe15 	stw	r5,-8(fp)
 201457c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 2014580:	e0bffd17 	ldw	r2,-12(fp)
 2014584:	10800017 	ldw	r2,0(r2)
 2014588:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 201458c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 2014590:	1000041e 	bne	r2,zero,20145a4 <altera_avalon_uart_init+0x40>
 2014594:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2014598:	1000021e 	bne	r2,zero,20145a4 <altera_avalon_uart_init+0x40>
 201459c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 20145a0:	10000226 	beq	r2,zero,20145ac <altera_avalon_uart_init+0x48>
 20145a4:	00800044 	movi	r2,1
 20145a8:	00000106 	br	20145b0 <altera_avalon_uart_init+0x4c>
 20145ac:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 20145b0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 20145b4:	e0bffc17 	ldw	r2,-16(fp)
 20145b8:	10000f1e 	bne	r2,zero,20145f8 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 20145bc:	e0bffd17 	ldw	r2,-12(fp)
 20145c0:	00c32004 	movi	r3,3200
 20145c4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 20145c8:	e0bffb17 	ldw	r2,-20(fp)
 20145cc:	10800304 	addi	r2,r2,12
 20145d0:	e0fffd17 	ldw	r3,-12(fp)
 20145d4:	18c00117 	ldw	r3,4(r3)
 20145d8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 20145dc:	d8000015 	stw	zero,0(sp)
 20145e0:	e13ffe17 	ldw	r4,-8(fp)
 20145e4:	e17fff17 	ldw	r5,-4(fp)
 20145e8:	01808074 	movhi	r6,513
 20145ec:	31918304 	addi	r6,r6,17932
 20145f0:	e1fffd17 	ldw	r7,-12(fp)
 20145f4:	20126340 	call	2012634 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 20145f8:	e037883a 	mov	sp,fp
 20145fc:	dfc00117 	ldw	ra,4(sp)
 2014600:	df000017 	ldw	fp,0(sp)
 2014604:	dec00204 	addi	sp,sp,8
 2014608:	f800283a 	ret

0201460c <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 201460c:	defffa04 	addi	sp,sp,-24
 2014610:	dfc00515 	stw	ra,20(sp)
 2014614:	df000415 	stw	fp,16(sp)
 2014618:	df000404 	addi	fp,sp,16
 201461c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 2014620:	e0bfff17 	ldw	r2,-4(fp)
 2014624:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 2014628:	e0bffc17 	ldw	r2,-16(fp)
 201462c:	10800017 	ldw	r2,0(r2)
 2014630:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 2014634:	e0bffd17 	ldw	r2,-12(fp)
 2014638:	10800204 	addi	r2,r2,8
 201463c:	10800037 	ldwio	r2,0(r2)
 2014640:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 2014644:	e0bffd17 	ldw	r2,-12(fp)
 2014648:	10800204 	addi	r2,r2,8
 201464c:	0007883a 	mov	r3,zero
 2014650:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 2014654:	e0bffd17 	ldw	r2,-12(fp)
 2014658:	10800204 	addi	r2,r2,8
 201465c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 2014660:	e0bffe17 	ldw	r2,-8(fp)
 2014664:	1080200c 	andi	r2,r2,128
 2014668:	10000326 	beq	r2,zero,2014678 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 201466c:	e13ffc17 	ldw	r4,-16(fp)
 2014670:	e17ffe17 	ldw	r5,-8(fp)
 2014674:	20146a40 	call	20146a4 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 2014678:	e0bffe17 	ldw	r2,-8(fp)
 201467c:	1081100c 	andi	r2,r2,1088
 2014680:	10000326 	beq	r2,zero,2014690 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 2014684:	e13ffc17 	ldw	r4,-16(fp)
 2014688:	e17ffe17 	ldw	r5,-8(fp)
 201468c:	201477c0 	call	201477c <altera_avalon_uart_txirq>
  }
  

}
 2014690:	e037883a 	mov	sp,fp
 2014694:	dfc00117 	ldw	ra,4(sp)
 2014698:	df000017 	ldw	fp,0(sp)
 201469c:	dec00204 	addi	sp,sp,8
 20146a0:	f800283a 	ret

020146a4 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 20146a4:	defffc04 	addi	sp,sp,-16
 20146a8:	df000315 	stw	fp,12(sp)
 20146ac:	df000304 	addi	fp,sp,12
 20146b0:	e13ffe15 	stw	r4,-8(fp)
 20146b4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 20146b8:	e0bfff17 	ldw	r2,-4(fp)
 20146bc:	108000cc 	andi	r2,r2,3
 20146c0:	1000291e 	bne	r2,zero,2014768 <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 20146c4:	e0bffe17 	ldw	r2,-8(fp)
 20146c8:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 20146cc:	e0bffe17 	ldw	r2,-8(fp)
 20146d0:	10800317 	ldw	r2,12(r2)
 20146d4:	10800044 	addi	r2,r2,1
 20146d8:	10800fcc 	andi	r2,r2,63
 20146dc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 20146e0:	e0bffe17 	ldw	r2,-8(fp)
 20146e4:	10800317 	ldw	r2,12(r2)
 20146e8:	e0fffe17 	ldw	r3,-8(fp)
 20146ec:	18c00017 	ldw	r3,0(r3)
 20146f0:	18c00037 	ldwio	r3,0(r3)
 20146f4:	e13ffe17 	ldw	r4,-8(fp)
 20146f8:	2085883a 	add	r2,r4,r2
 20146fc:	10800704 	addi	r2,r2,28
 2014700:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
 2014704:	e0bffe17 	ldw	r2,-8(fp)
 2014708:	e0fffd17 	ldw	r3,-12(fp)
 201470c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2014710:	e0bffe17 	ldw	r2,-8(fp)
 2014714:	10800317 	ldw	r2,12(r2)
 2014718:	10800044 	addi	r2,r2,1
 201471c:	10800fcc 	andi	r2,r2,63
 2014720:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 2014724:	e0bffe17 	ldw	r2,-8(fp)
 2014728:	10c00217 	ldw	r3,8(r2)
 201472c:	e0bffd17 	ldw	r2,-12(fp)
 2014730:	18800e1e 	bne	r3,r2,201476c <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2014734:	e0bffe17 	ldw	r2,-8(fp)
 2014738:	10c00117 	ldw	r3,4(r2)
 201473c:	00bfdfc4 	movi	r2,-129
 2014740:	1886703a 	and	r3,r3,r2
 2014744:	e0bffe17 	ldw	r2,-8(fp)
 2014748:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 201474c:	e0bffe17 	ldw	r2,-8(fp)
 2014750:	10800017 	ldw	r2,0(r2)
 2014754:	10800304 	addi	r2,r2,12
 2014758:	e0fffe17 	ldw	r3,-8(fp)
 201475c:	18c00117 	ldw	r3,4(r3)
 2014760:	10c00035 	stwio	r3,0(r2)
 2014764:	00000106 	br	201476c <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 2014768:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 201476c:	e037883a 	mov	sp,fp
 2014770:	df000017 	ldw	fp,0(sp)
 2014774:	dec00104 	addi	sp,sp,4
 2014778:	f800283a 	ret

0201477c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 201477c:	defffd04 	addi	sp,sp,-12
 2014780:	df000215 	stw	fp,8(sp)
 2014784:	df000204 	addi	fp,sp,8
 2014788:	e13ffe15 	stw	r4,-8(fp)
 201478c:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 2014790:	e0bffe17 	ldw	r2,-8(fp)
 2014794:	10c00417 	ldw	r3,16(r2)
 2014798:	e0bffe17 	ldw	r2,-8(fp)
 201479c:	10800517 	ldw	r2,20(r2)
 20147a0:	18803026 	beq	r3,r2,2014864 <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 20147a4:	e0bffe17 	ldw	r2,-8(fp)
 20147a8:	10800617 	ldw	r2,24(r2)
 20147ac:	1080008c 	andi	r2,r2,2
 20147b0:	10000326 	beq	r2,zero,20147c0 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 20147b4:	e0bfff17 	ldw	r2,-4(fp)
 20147b8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 20147bc:	10001b26 	beq	r2,zero,201482c <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 20147c0:	e0bffe17 	ldw	r2,-8(fp)
 20147c4:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 20147c8:	e0bffe17 	ldw	r2,-8(fp)
 20147cc:	10800017 	ldw	r2,0(r2)
 20147d0:	10800104 	addi	r2,r2,4
 20147d4:	e0fffe17 	ldw	r3,-8(fp)
 20147d8:	18c00417 	ldw	r3,16(r3)
 20147dc:	e13ffe17 	ldw	r4,-8(fp)
 20147e0:	20c7883a 	add	r3,r4,r3
 20147e4:	18c01704 	addi	r3,r3,92
 20147e8:	18c00003 	ldbu	r3,0(r3)
 20147ec:	18c03fcc 	andi	r3,r3,255
 20147f0:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 20147f4:	e0bffe17 	ldw	r2,-8(fp)
 20147f8:	10800417 	ldw	r2,16(r2)
 20147fc:	10800044 	addi	r2,r2,1
 2014800:	e0fffe17 	ldw	r3,-8(fp)
 2014804:	18800415 	stw	r2,16(r3)
 2014808:	10c00fcc 	andi	r3,r2,63
 201480c:	e0bffe17 	ldw	r2,-8(fp)
 2014810:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2014814:	e0bffe17 	ldw	r2,-8(fp)
 2014818:	10800117 	ldw	r2,4(r2)
 201481c:	10c01014 	ori	r3,r2,64
 2014820:	e0bffe17 	ldw	r2,-8(fp)
 2014824:	10c00115 	stw	r3,4(r2)
 2014828:	00000e06 	br	2014864 <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 201482c:	e0bffe17 	ldw	r2,-8(fp)
 2014830:	10800017 	ldw	r2,0(r2)
 2014834:	10800204 	addi	r2,r2,8
 2014838:	10800037 	ldwio	r2,0(r2)
 201483c:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 2014840:	e0bfff17 	ldw	r2,-4(fp)
 2014844:	1082000c 	andi	r2,r2,2048
 2014848:	1000061e 	bne	r2,zero,2014864 <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 201484c:	e0bffe17 	ldw	r2,-8(fp)
 2014850:	10c00117 	ldw	r3,4(r2)
 2014854:	00bfefc4 	movi	r2,-65
 2014858:	1886703a 	and	r3,r3,r2
 201485c:	e0bffe17 	ldw	r2,-8(fp)
 2014860:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 2014864:	e0bffe17 	ldw	r2,-8(fp)
 2014868:	10c00417 	ldw	r3,16(r2)
 201486c:	e0bffe17 	ldw	r2,-8(fp)
 2014870:	10800517 	ldw	r2,20(r2)
 2014874:	1880061e 	bne	r3,r2,2014890 <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2014878:	e0bffe17 	ldw	r2,-8(fp)
 201487c:	10c00117 	ldw	r3,4(r2)
 2014880:	00beefc4 	movi	r2,-1089
 2014884:	1886703a 	and	r3,r3,r2
 2014888:	e0bffe17 	ldw	r2,-8(fp)
 201488c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2014890:	e0bffe17 	ldw	r2,-8(fp)
 2014894:	10800017 	ldw	r2,0(r2)
 2014898:	10800304 	addi	r2,r2,12
 201489c:	e0fffe17 	ldw	r3,-8(fp)
 20148a0:	18c00117 	ldw	r3,4(r3)
 20148a4:	10c00035 	stwio	r3,0(r2)
}
 20148a8:	e037883a 	mov	sp,fp
 20148ac:	df000017 	ldw	fp,0(sp)
 20148b0:	dec00104 	addi	sp,sp,4
 20148b4:	f800283a 	ret

020148b8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 20148b8:	defffd04 	addi	sp,sp,-12
 20148bc:	df000215 	stw	fp,8(sp)
 20148c0:	df000204 	addi	fp,sp,8
 20148c4:	e13ffe15 	stw	r4,-8(fp)
 20148c8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 20148cc:	00000506 	br	20148e4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 20148d0:	e0bfff17 	ldw	r2,-4(fp)
 20148d4:	1090000c 	andi	r2,r2,16384
 20148d8:	10000226 	beq	r2,zero,20148e4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 20148dc:	00bffd44 	movi	r2,-11
 20148e0:	00000606 	br	20148fc <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 20148e4:	e0bffe17 	ldw	r2,-8(fp)
 20148e8:	10c00417 	ldw	r3,16(r2)
 20148ec:	e0bffe17 	ldw	r2,-8(fp)
 20148f0:	10800517 	ldw	r2,20(r2)
 20148f4:	18bff61e 	bne	r3,r2,20148d0 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 20148f8:	0005883a 	mov	r2,zero
}
 20148fc:	e037883a 	mov	sp,fp
 2014900:	df000017 	ldw	fp,0(sp)
 2014904:	dec00104 	addi	sp,sp,4
 2014908:	f800283a 	ret

0201490c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201490c:	defffe04 	addi	sp,sp,-8
 2014910:	dfc00115 	stw	ra,4(sp)
 2014914:	df000015 	stw	fp,0(sp)
 2014918:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 201491c:	008080b4 	movhi	r2,514
 2014920:	10a4f704 	addi	r2,r2,-27684
 2014924:	10800017 	ldw	r2,0(r2)
 2014928:	10000526 	beq	r2,zero,2014940 <alt_get_errno+0x34>
 201492c:	008080b4 	movhi	r2,514
 2014930:	10a4f704 	addi	r2,r2,-27684
 2014934:	10800017 	ldw	r2,0(r2)
 2014938:	103ee83a 	callr	r2
 201493c:	00000206 	br	2014948 <alt_get_errno+0x3c>
 2014940:	008080b4 	movhi	r2,514
 2014944:	10a50504 	addi	r2,r2,-27628
}
 2014948:	e037883a 	mov	sp,fp
 201494c:	dfc00117 	ldw	ra,4(sp)
 2014950:	df000017 	ldw	fp,0(sp)
 2014954:	dec00204 	addi	sp,sp,8
 2014958:	f800283a 	ret

0201495c <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 201495c:	defff104 	addi	sp,sp,-60
 2014960:	dfc00e15 	stw	ra,56(sp)
 2014964:	df000d15 	stw	fp,52(sp)
 2014968:	df000d04 	addi	fp,sp,52
 201496c:	e13ffc15 	stw	r4,-16(fp)
 2014970:	e17ffd15 	stw	r5,-12(fp)
 2014974:	e1bffe15 	stw	r6,-8(fp)
 2014978:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
 201497c:	e03ff305 	stb	zero,-52(fp)
  int             count = 0;
 2014980:	e03ff415 	stw	zero,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 2014984:	e0bfff17 	ldw	r2,-4(fp)
 2014988:	1090000c 	andi	r2,r2,16384
 201498c:	1005003a 	cmpeq	r2,r2,zero
 2014990:	10803fcc 	andi	r2,r2,255
 2014994:	e0bff515 	stw	r2,-44(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 2014998:	e0bffc17 	ldw	r2,-16(fp)
 201499c:	10800217 	ldw	r2,8(r2)
 20149a0:	10800044 	addi	r2,r2,1
 20149a4:	10800fcc 	andi	r2,r2,63
 20149a8:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 20149ac:	00001906 	br	2014a14 <altera_avalon_uart_read+0xb8>
    {
      count++;
 20149b0:	e0bff417 	ldw	r2,-48(fp)
 20149b4:	10800044 	addi	r2,r2,1
 20149b8:	e0bff415 	stw	r2,-48(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 20149bc:	e0bffc17 	ldw	r2,-16(fp)
 20149c0:	10800217 	ldw	r2,8(r2)
 20149c4:	e0fffc17 	ldw	r3,-16(fp)
 20149c8:	1885883a 	add	r2,r3,r2
 20149cc:	10800704 	addi	r2,r2,28
 20149d0:	10800003 	ldbu	r2,0(r2)
 20149d4:	1007883a 	mov	r3,r2
 20149d8:	e0bffd17 	ldw	r2,-12(fp)
 20149dc:	10c00005 	stb	r3,0(r2)
 20149e0:	e0bffd17 	ldw	r2,-12(fp)
 20149e4:	10800044 	addi	r2,r2,1
 20149e8:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 20149ec:	e0bffc17 	ldw	r2,-16(fp)
 20149f0:	10800217 	ldw	r2,8(r2)
 20149f4:	10c00044 	addi	r3,r2,1
 20149f8:	e0bffc17 	ldw	r2,-16(fp)
 20149fc:	10c00215 	stw	r3,8(r2)
 2014a00:	e0bffc17 	ldw	r2,-16(fp)
 2014a04:	10800217 	ldw	r2,8(r2)
 2014a08:	10c00fcc 	andi	r3,r2,63
 2014a0c:	e0bffc17 	ldw	r2,-16(fp)
 2014a10:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 2014a14:	e0fff417 	ldw	r3,-48(fp)
 2014a18:	e0bffe17 	ldw	r2,-8(fp)
 2014a1c:	1880050e 	bge	r3,r2,2014a34 <altera_avalon_uart_read+0xd8>
 2014a20:	e0bffc17 	ldw	r2,-16(fp)
 2014a24:	10c00217 	ldw	r3,8(r2)
 2014a28:	e0bffc17 	ldw	r2,-16(fp)
 2014a2c:	10800317 	ldw	r2,12(r2)
 2014a30:	18bfdf1e 	bne	r3,r2,20149b0 <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 2014a34:	e0bff417 	ldw	r2,-48(fp)
 2014a38:	1000241e 	bne	r2,zero,2014acc <altera_avalon_uart_read+0x170>
 2014a3c:	e0bffc17 	ldw	r2,-16(fp)
 2014a40:	10c00217 	ldw	r3,8(r2)
 2014a44:	e0bffc17 	ldw	r2,-16(fp)
 2014a48:	10800317 	ldw	r2,12(r2)
 2014a4c:	18801f1e 	bne	r3,r2,2014acc <altera_avalon_uart_read+0x170>
    {
      if (!block)
 2014a50:	e0bff517 	ldw	r2,-44(fp)
 2014a54:	1000061e 	bne	r2,zero,2014a70 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 2014a58:	201490c0 	call	201490c <alt_get_errno>
 2014a5c:	00c002c4 	movi	r3,11
 2014a60:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
 2014a64:	00800044 	movi	r2,1
 2014a68:	e0bff305 	stb	r2,-52(fp)
        break;
 2014a6c:	00001b06 	br	2014adc <altera_avalon_uart_read+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014a70:	0005303a 	rdctl	r2,status
 2014a74:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014a78:	e0fff817 	ldw	r3,-32(fp)
 2014a7c:	00bfff84 	movi	r2,-2
 2014a80:	1884703a 	and	r2,r3,r2
 2014a84:	1001703a 	wrctl	status,r2
  
  return context;
 2014a88:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 2014a8c:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2014a90:	e0bffc17 	ldw	r2,-16(fp)
 2014a94:	10800117 	ldw	r2,4(r2)
 2014a98:	10c02014 	ori	r3,r2,128
 2014a9c:	e0bffc17 	ldw	r2,-16(fp)
 2014aa0:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2014aa4:	e0bffc17 	ldw	r2,-16(fp)
 2014aa8:	10800017 	ldw	r2,0(r2)
 2014aac:	10800304 	addi	r2,r2,12
 2014ab0:	e0fffc17 	ldw	r3,-16(fp)
 2014ab4:	18c00117 	ldw	r3,4(r3)
 2014ab8:	10c00035 	stwio	r3,0(r2)
 2014abc:	e0bff717 	ldw	r2,-36(fp)
 2014ac0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014ac4:	e0bff917 	ldw	r2,-28(fp)
 2014ac8:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 2014acc:	e0bff417 	ldw	r2,-48(fp)
 2014ad0:	1000021e 	bne	r2,zero,2014adc <altera_avalon_uart_read+0x180>
 2014ad4:	e0bffe17 	ldw	r2,-8(fp)
 2014ad8:	103fce1e 	bne	r2,zero,2014a14 <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014adc:	0005303a 	rdctl	r2,status
 2014ae0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014ae4:	e0fffa17 	ldw	r3,-24(fp)
 2014ae8:	00bfff84 	movi	r2,-2
 2014aec:	1884703a 	and	r2,r3,r2
 2014af0:	1001703a 	wrctl	status,r2
  
  return context;
 2014af4:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 2014af8:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2014afc:	e0bffc17 	ldw	r2,-16(fp)
 2014b00:	10800117 	ldw	r2,4(r2)
 2014b04:	10c02014 	ori	r3,r2,128
 2014b08:	e0bffc17 	ldw	r2,-16(fp)
 2014b0c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2014b10:	e0bffc17 	ldw	r2,-16(fp)
 2014b14:	10800017 	ldw	r2,0(r2)
 2014b18:	10800304 	addi	r2,r2,12
 2014b1c:	e0fffc17 	ldw	r3,-16(fp)
 2014b20:	18c00117 	ldw	r3,4(r3)
 2014b24:	10c00035 	stwio	r3,0(r2)
 2014b28:	e0bff717 	ldw	r2,-36(fp)
 2014b2c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014b30:	e0bffb17 	ldw	r2,-20(fp)
 2014b34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 2014b38:	e0bff303 	ldbu	r2,-52(fp)
 2014b3c:	10000226 	beq	r2,zero,2014b48 <altera_avalon_uart_read+0x1ec>
    return -EWOULDBLOCK;
 2014b40:	00bffd44 	movi	r2,-11
 2014b44:	00000106 	br	2014b4c <altera_avalon_uart_read+0x1f0>
  }
  else {
    return count;
 2014b48:	e0bff417 	ldw	r2,-48(fp)
  }
}
 2014b4c:	e037883a 	mov	sp,fp
 2014b50:	dfc00117 	ldw	ra,4(sp)
 2014b54:	df000017 	ldw	fp,0(sp)
 2014b58:	dec00204 	addi	sp,sp,8
 2014b5c:	f800283a 	ret

02014b60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2014b60:	defffe04 	addi	sp,sp,-8
 2014b64:	dfc00115 	stw	ra,4(sp)
 2014b68:	df000015 	stw	fp,0(sp)
 2014b6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2014b70:	008080b4 	movhi	r2,514
 2014b74:	10a4f704 	addi	r2,r2,-27684
 2014b78:	10800017 	ldw	r2,0(r2)
 2014b7c:	10000526 	beq	r2,zero,2014b94 <alt_get_errno+0x34>
 2014b80:	008080b4 	movhi	r2,514
 2014b84:	10a4f704 	addi	r2,r2,-27684
 2014b88:	10800017 	ldw	r2,0(r2)
 2014b8c:	103ee83a 	callr	r2
 2014b90:	00000206 	br	2014b9c <alt_get_errno+0x3c>
 2014b94:	008080b4 	movhi	r2,514
 2014b98:	10a50504 	addi	r2,r2,-27628
}
 2014b9c:	e037883a 	mov	sp,fp
 2014ba0:	dfc00117 	ldw	ra,4(sp)
 2014ba4:	df000017 	ldw	fp,0(sp)
 2014ba8:	dec00204 	addi	sp,sp,8
 2014bac:	f800283a 	ret

02014bb0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 2014bb0:	defff204 	addi	sp,sp,-56
 2014bb4:	dfc00d15 	stw	ra,52(sp)
 2014bb8:	df000c15 	stw	fp,48(sp)
 2014bbc:	df000c04 	addi	fp,sp,48
 2014bc0:	e13ffc15 	stw	r4,-16(fp)
 2014bc4:	e17ffd15 	stw	r5,-12(fp)
 2014bc8:	e1bffe15 	stw	r6,-8(fp)
 2014bcc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 2014bd0:	e0bffe17 	ldw	r2,-8(fp)
 2014bd4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 2014bd8:	e0bfff17 	ldw	r2,-4(fp)
 2014bdc:	1090000c 	andi	r2,r2,16384
 2014be0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 2014be4:	00003b06 	br	2014cd4 <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2014be8:	e0bffc17 	ldw	r2,-16(fp)
 2014bec:	10800517 	ldw	r2,20(r2)
 2014bf0:	10800044 	addi	r2,r2,1
 2014bf4:	10800fcc 	andi	r2,r2,63
 2014bf8:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 2014bfc:	e0bffc17 	ldw	r2,-16(fp)
 2014c00:	10c00417 	ldw	r3,16(r2)
 2014c04:	e0bff617 	ldw	r2,-40(fp)
 2014c08:	1880211e 	bne	r3,r2,2014c90 <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
 2014c0c:	e0bff517 	ldw	r2,-44(fp)
 2014c10:	10000426 	beq	r2,zero,2014c24 <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 2014c14:	2014b600 	call	2014b60 <alt_get_errno>
 2014c18:	00c002c4 	movi	r3,11
 2014c1c:	10c00015 	stw	r3,0(r2)
        break;
 2014c20:	00002e06 	br	2014cdc <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014c24:	0005303a 	rdctl	r2,status
 2014c28:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014c2c:	e0fff817 	ldw	r3,-32(fp)
 2014c30:	00bfff84 	movi	r2,-2
 2014c34:	1884703a 	and	r2,r3,r2
 2014c38:	1001703a 	wrctl	status,r2
  
  return context;
 2014c3c:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 2014c40:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2014c44:	e0bffc17 	ldw	r2,-16(fp)
 2014c48:	10800117 	ldw	r2,4(r2)
 2014c4c:	10c11014 	ori	r3,r2,1088
 2014c50:	e0bffc17 	ldw	r2,-16(fp)
 2014c54:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2014c58:	e0bffc17 	ldw	r2,-16(fp)
 2014c5c:	10800017 	ldw	r2,0(r2)
 2014c60:	10800304 	addi	r2,r2,12
 2014c64:	e0fffc17 	ldw	r3,-16(fp)
 2014c68:	18c00117 	ldw	r3,4(r3)
 2014c6c:	10c00035 	stwio	r3,0(r2)
 2014c70:	e0bff717 	ldw	r2,-36(fp)
 2014c74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014c78:	e0bff917 	ldw	r2,-28(fp)
 2014c7c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 2014c80:	e0bffc17 	ldw	r2,-16(fp)
 2014c84:	10c00417 	ldw	r3,16(r2)
 2014c88:	e0bff617 	ldw	r2,-40(fp)
 2014c8c:	18bffc26 	beq	r3,r2,2014c80 <altera_avalon_uart_write+0xd0>
      }
    }

    count--;
 2014c90:	e0bff417 	ldw	r2,-48(fp)
 2014c94:	10bfffc4 	addi	r2,r2,-1
 2014c98:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 2014c9c:	e0bffc17 	ldw	r2,-16(fp)
 2014ca0:	10800517 	ldw	r2,20(r2)
 2014ca4:	e0fffd17 	ldw	r3,-12(fp)
 2014ca8:	18c00003 	ldbu	r3,0(r3)
 2014cac:	e13ffc17 	ldw	r4,-16(fp)
 2014cb0:	2085883a 	add	r2,r4,r2
 2014cb4:	10801704 	addi	r2,r2,92
 2014cb8:	10c00005 	stb	r3,0(r2)
 2014cbc:	e0bffd17 	ldw	r2,-12(fp)
 2014cc0:	10800044 	addi	r2,r2,1
 2014cc4:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 2014cc8:	e0bffc17 	ldw	r2,-16(fp)
 2014ccc:	e0fff617 	ldw	r3,-40(fp)
 2014cd0:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 2014cd4:	e0bff417 	ldw	r2,-48(fp)
 2014cd8:	103fc31e 	bne	r2,zero,2014be8 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014cdc:	0005303a 	rdctl	r2,status
 2014ce0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014ce4:	e0fffa17 	ldw	r3,-24(fp)
 2014ce8:	00bfff84 	movi	r2,-2
 2014cec:	1884703a 	and	r2,r3,r2
 2014cf0:	1001703a 	wrctl	status,r2
  
  return context;
 2014cf4:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 2014cf8:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2014cfc:	e0bffc17 	ldw	r2,-16(fp)
 2014d00:	10800117 	ldw	r2,4(r2)
 2014d04:	10c11014 	ori	r3,r2,1088
 2014d08:	e0bffc17 	ldw	r2,-16(fp)
 2014d0c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2014d10:	e0bffc17 	ldw	r2,-16(fp)
 2014d14:	10800017 	ldw	r2,0(r2)
 2014d18:	10800304 	addi	r2,r2,12
 2014d1c:	e0fffc17 	ldw	r3,-16(fp)
 2014d20:	18c00117 	ldw	r3,4(r3)
 2014d24:	10c00035 	stwio	r3,0(r2)
 2014d28:	e0bff717 	ldw	r2,-36(fp)
 2014d2c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014d30:	e0bffb17 	ldw	r2,-20(fp)
 2014d34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 2014d38:	e0fffe17 	ldw	r3,-8(fp)
 2014d3c:	e0bff417 	ldw	r2,-48(fp)
 2014d40:	1885c83a 	sub	r2,r3,r2
}
 2014d44:	e037883a 	mov	sp,fp
 2014d48:	dfc00117 	ldw	ra,4(sp)
 2014d4c:	df000017 	ldw	fp,0(sp)
 2014d50:	dec00204 	addi	sp,sp,8
 2014d54:	f800283a 	ret

02014d58 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 2014d58:	defff904 	addi	sp,sp,-28
 2014d5c:	dfc00615 	stw	ra,24(sp)
 2014d60:	df000515 	stw	fp,20(sp)
 2014d64:	df000504 	addi	fp,sp,20
 2014d68:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 2014d6c:	00800144 	movi	r2,5
 2014d70:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 2014d74:	00800044 	movi	r2,1
 2014d78:	d8800015 	stw	r2,0(sp)
 2014d7c:	e0bffe44 	addi	r2,fp,-7
 2014d80:	d8800115 	stw	r2,4(sp)
 2014d84:	d8000215 	stw	zero,8(sp)
 2014d88:	e13fff17 	ldw	r4,-4(fp)
 2014d8c:	000b883a 	mov	r5,zero
 2014d90:	01800044 	movi	r6,1
 2014d94:	e1fffe04 	addi	r7,fp,-8
 2014d98:	2015cc80 	call	2015cc8 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 2014d9c:	e0bffe43 	ldbu	r2,-7(fp)
}
 2014da0:	e037883a 	mov	sp,fp
 2014da4:	dfc00117 	ldw	ra,4(sp)
 2014da8:	df000017 	ldw	fp,0(sp)
 2014dac:	dec00204 	addi	sp,sp,8
 2014db0:	f800283a 	ret

02014db4 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2014db4:	defffd04 	addi	sp,sp,-12
 2014db8:	dfc00215 	stw	ra,8(sp)
 2014dbc:	df000115 	stw	fp,4(sp)
 2014dc0:	df000104 	addi	fp,sp,4
 2014dc4:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 2014dc8:	e13fff17 	ldw	r4,-4(fp)
 2014dcc:	2014d580 	call	2014d58 <epcs_read_status_register>
 2014dd0:	10803fcc 	andi	r2,r2,255
 2014dd4:	1080004c 	andi	r2,r2,1
}
 2014dd8:	e037883a 	mov	sp,fp
 2014ddc:	dfc00117 	ldw	ra,4(sp)
 2014de0:	df000017 	ldw	fp,0(sp)
 2014de4:	dec00204 	addi	sp,sp,8
 2014de8:	f800283a 	ret

02014dec <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 2014dec:	defffd04 	addi	sp,sp,-12
 2014df0:	dfc00215 	stw	ra,8(sp)
 2014df4:	df000115 	stw	fp,4(sp)
 2014df8:	df000104 	addi	fp,sp,4
 2014dfc:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 2014e00:	0001883a 	nop
 2014e04:	e13fff17 	ldw	r4,-4(fp)
 2014e08:	2014db40 	call	2014db4 <epcs_test_wip>
 2014e0c:	103ffd1e 	bne	r2,zero,2014e04 <epcs_await_wip_released+0x18>
  {
  }
}
 2014e10:	e037883a 	mov	sp,fp
 2014e14:	dfc00117 	ldw	ra,4(sp)
 2014e18:	df000017 	ldw	fp,0(sp)
 2014e1c:	dec00204 	addi	sp,sp,8
 2014e20:	f800283a 	ret

02014e24 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 2014e24:	defff604 	addi	sp,sp,-40
 2014e28:	dfc00915 	stw	ra,36(sp)
 2014e2c:	df000815 	stw	fp,32(sp)
 2014e30:	df000804 	addi	fp,sp,32
 2014e34:	e13ffd15 	stw	r4,-12(fp)
 2014e38:	e17ffe15 	stw	r5,-8(fp)
 2014e3c:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 2014e40:	e0bfff17 	ldw	r2,-4(fp)
 2014e44:	10001226 	beq	r2,zero,2014e90 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 2014e48:	00bff604 	movi	r2,-40
 2014e4c:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 2014e50:	e0bffe17 	ldw	r2,-8(fp)
 2014e54:	1004d63a 	srli	r2,r2,24
 2014e58:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 2014e5c:	e0bffe17 	ldw	r2,-8(fp)
 2014e60:	1004d43a 	srli	r2,r2,16
 2014e64:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 2014e68:	e0bffe17 	ldw	r2,-8(fp)
 2014e6c:	1004d23a 	srli	r2,r2,8
 2014e70:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 2014e74:	e0bffe17 	ldw	r2,-8(fp)
 2014e78:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 2014e7c:	00800144 	movi	r2,5
 2014e80:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 2014e84:	e13ffd17 	ldw	r4,-12(fp)
 2014e88:	20152cc0 	call	20152cc <epcs_enter_4_bytes_mode>
 2014e8c:	00000c06 	br	2014ec0 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 2014e90:	00bff604 	movi	r2,-40
 2014e94:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 2014e98:	e0bffe17 	ldw	r2,-8(fp)
 2014e9c:	1004d43a 	srli	r2,r2,16
 2014ea0:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 2014ea4:	e0bffe17 	ldw	r2,-8(fp)
 2014ea8:	1004d23a 	srli	r2,r2,8
 2014eac:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2014eb0:	e0bffe17 	ldw	r2,-8(fp)
 2014eb4:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 2014eb8:	00800104 	movi	r2,4
 2014ebc:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 2014ec0:	e13ffd17 	ldw	r4,-12(fp)
 2014ec4:	20150100 	call	2015010 <epcs_write_enable>

  alt_avalon_spi_command(
 2014ec8:	e0fffb03 	ldbu	r3,-20(fp)
    base,
    0,
    len,
    se,
 2014ecc:	e0bffb44 	addi	r2,fp,-19
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);

  alt_avalon_spi_command(
 2014ed0:	d8000015 	stw	zero,0(sp)
 2014ed4:	d8000115 	stw	zero,4(sp)
 2014ed8:	d8000215 	stw	zero,8(sp)
 2014edc:	e13ffd17 	ldw	r4,-12(fp)
 2014ee0:	000b883a 	mov	r5,zero
 2014ee4:	180d883a 	mov	r6,r3
 2014ee8:	100f883a 	mov	r7,r2
 2014eec:	2015cc80 	call	2015cc8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2014ef0:	e13ffd17 	ldw	r4,-12(fp)
 2014ef4:	2014dec0 	call	2014dec <epcs_await_wip_released>

  if(four_bytes_mode)
 2014ef8:	e0bfff17 	ldw	r2,-4(fp)
 2014efc:	10000226 	beq	r2,zero,2014f08 <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 2014f00:	e13ffd17 	ldw	r4,-12(fp)
 2014f04:	20153240 	call	2015324 <epcs_exit_4_bytes_mode>
  }
}
 2014f08:	e037883a 	mov	sp,fp
 2014f0c:	dfc00117 	ldw	ra,4(sp)
 2014f10:	df000017 	ldw	fp,0(sp)
 2014f14:	dec00204 	addi	sp,sp,8
 2014f18:	f800283a 	ret

02014f1c <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 2014f1c:	defff404 	addi	sp,sp,-48
 2014f20:	dfc00b15 	stw	ra,44(sp)
 2014f24:	df000a15 	stw	fp,40(sp)
 2014f28:	df000a04 	addi	fp,sp,40
 2014f2c:	e13ffc15 	stw	r4,-16(fp)
 2014f30:	e17ffd15 	stw	r5,-12(fp)
 2014f34:	e1bffe15 	stw	r6,-8(fp)
 2014f38:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 2014f3c:	008000c4 	movi	r2,3
 2014f40:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2014f44:	e0800217 	ldw	r2,8(fp)
 2014f48:	10001026 	beq	r2,zero,2014f8c <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 2014f4c:	e0bffd17 	ldw	r2,-12(fp)
 2014f50:	1004d63a 	srli	r2,r2,24
 2014f54:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 2014f58:	e0bffd17 	ldw	r2,-12(fp)
 2014f5c:	1005d43a 	srai	r2,r2,16
 2014f60:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 2014f64:	e0bffd17 	ldw	r2,-12(fp)
 2014f68:	1005d23a 	srai	r2,r2,8
 2014f6c:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 2014f70:	e0bffd17 	ldw	r2,-12(fp)
 2014f74:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 2014f78:	00800144 	movi	r2,5
 2014f7c:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 2014f80:	e13ffc17 	ldw	r4,-16(fp)
 2014f84:	20152cc0 	call	20152cc <epcs_enter_4_bytes_mode>
 2014f88:	00000a06 	br	2014fb4 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 2014f8c:	e0bffd17 	ldw	r2,-12(fp)
 2014f90:	1005d43a 	srai	r2,r2,16
 2014f94:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 2014f98:	e0bffd17 	ldw	r2,-12(fp)
 2014f9c:	1005d23a 	srai	r2,r2,8
 2014fa0:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2014fa4:	e0bffd17 	ldw	r2,-12(fp)
 2014fa8:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 2014fac:	00800104 	movi	r2,4
 2014fb0:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 2014fb4:	e13ffc17 	ldw	r4,-16(fp)
 2014fb8:	2014dec0 	call	2014dec <epcs_await_wip_released>

  alt_avalon_spi_command(
 2014fbc:	e0ffff17 	ldw	r3,-4(fp)
    base,
    0,
    cmd_len,
    read_command,
 2014fc0:	e0bffa04 	addi	r2,fp,-24
        cmd_len = 4;
  }

  epcs_await_wip_released(base);

  alt_avalon_spi_command(
 2014fc4:	d8c00015 	stw	r3,0(sp)
 2014fc8:	e0fffe17 	ldw	r3,-8(fp)
 2014fcc:	d8c00115 	stw	r3,4(sp)
 2014fd0:	d8000215 	stw	zero,8(sp)
 2014fd4:	e13ffc17 	ldw	r4,-16(fp)
 2014fd8:	000b883a 	mov	r5,zero
 2014fdc:	e1bff917 	ldw	r6,-28(fp)
 2014fe0:	100f883a 	mov	r7,r2
 2014fe4:	2015cc80 	call	2015cc8 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 2014fe8:	e0800217 	ldw	r2,8(fp)
 2014fec:	10000226 	beq	r2,zero,2014ff8 <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 2014ff0:	e13ffc17 	ldw	r4,-16(fp)
 2014ff4:	20153240 	call	2015324 <epcs_exit_4_bytes_mode>
  }

  return length;
 2014ff8:	e0bfff17 	ldw	r2,-4(fp)
}
 2014ffc:	e037883a 	mov	sp,fp
 2015000:	dfc00117 	ldw	ra,4(sp)
 2015004:	df000017 	ldw	fp,0(sp)
 2015008:	dec00204 	addi	sp,sp,8
 201500c:	f800283a 	ret

02015010 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 2015010:	defff904 	addi	sp,sp,-28
 2015014:	dfc00615 	stw	ra,24(sp)
 2015018:	df000515 	stw	fp,20(sp)
 201501c:	df000504 	addi	fp,sp,20
 2015020:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2015024:	00800184 	movi	r2,6
 2015028:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 201502c:	d8000015 	stw	zero,0(sp)
 2015030:	d8000115 	stw	zero,4(sp)
 2015034:	d8000215 	stw	zero,8(sp)
 2015038:	e13fff17 	ldw	r4,-4(fp)
 201503c:	000b883a 	mov	r5,zero
 2015040:	01800044 	movi	r6,1
 2015044:	e1fffe04 	addi	r7,fp,-8
 2015048:	2015cc80 	call	2015cc8 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 201504c:	e037883a 	mov	sp,fp
 2015050:	dfc00117 	ldw	ra,4(sp)
 2015054:	df000017 	ldw	fp,0(sp)
 2015058:	dec00204 	addi	sp,sp,8
 201505c:	f800283a 	ret

02015060 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 2015060:	defff804 	addi	sp,sp,-32
 2015064:	dfc00715 	stw	ra,28(sp)
 2015068:	df000615 	stw	fp,24(sp)
 201506c:	df000604 	addi	fp,sp,24
 2015070:	e13ffe15 	stw	r4,-8(fp)
 2015074:	2805883a 	mov	r2,r5
 2015078:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 201507c:	00800044 	movi	r2,1
 2015080:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 2015084:	e0bfff03 	ldbu	r2,-4(fp)
 2015088:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 201508c:	d8000015 	stw	zero,0(sp)
 2015090:	d8000115 	stw	zero,4(sp)
 2015094:	d8000215 	stw	zero,8(sp)
 2015098:	e13ffe17 	ldw	r4,-8(fp)
 201509c:	000b883a 	mov	r5,zero
 20150a0:	01800084 	movi	r6,2
 20150a4:	e1fffd04 	addi	r7,fp,-12
 20150a8:	2015cc80 	call	2015cc8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 20150ac:	e13ffe17 	ldw	r4,-8(fp)
 20150b0:	2014dec0 	call	2014dec <epcs_await_wip_released>
}
 20150b4:	e037883a 	mov	sp,fp
 20150b8:	dfc00117 	ldw	ra,4(sp)
 20150bc:	df000017 	ldw	fp,0(sp)
 20150c0:	dec00204 	addi	sp,sp,8
 20150c4:	f800283a 	ret

020150c8 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 20150c8:	defff404 	addi	sp,sp,-48
 20150cc:	dfc00b15 	stw	ra,44(sp)
 20150d0:	df000a15 	stw	fp,40(sp)
 20150d4:	df000a04 	addi	fp,sp,40
 20150d8:	e13ffc15 	stw	r4,-16(fp)
 20150dc:	e17ffd15 	stw	r5,-12(fp)
 20150e0:	e1bffe15 	stw	r6,-8(fp)
 20150e4:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 20150e8:	00800084 	movi	r2,2
 20150ec:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 20150f0:	e0800217 	ldw	r2,8(fp)
 20150f4:	10001026 	beq	r2,zero,2015138 <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 20150f8:	e0bffd17 	ldw	r2,-12(fp)
 20150fc:	1004d63a 	srli	r2,r2,24
 2015100:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 2015104:	e0bffd17 	ldw	r2,-12(fp)
 2015108:	1005d43a 	srai	r2,r2,16
 201510c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 2015110:	e0bffd17 	ldw	r2,-12(fp)
 2015114:	1005d23a 	srai	r2,r2,8
 2015118:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 201511c:	e0bffd17 	ldw	r2,-12(fp)
 2015120:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 2015124:	00800144 	movi	r2,5
 2015128:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 201512c:	e13ffc17 	ldw	r4,-16(fp)
 2015130:	20152cc0 	call	20152cc <epcs_enter_4_bytes_mode>
 2015134:	00000a06 	br	2015160 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 2015138:	e0bffd17 	ldw	r2,-12(fp)
 201513c:	1005d43a 	srai	r2,r2,16
 2015140:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 2015144:	e0bffd17 	ldw	r2,-12(fp)
 2015148:	1005d23a 	srai	r2,r2,8
 201514c:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 2015150:	e0bffd17 	ldw	r2,-12(fp)
 2015154:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 2015158:	00800104 	movi	r2,4
 201515c:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 2015160:	e13ffc17 	ldw	r4,-16(fp)
 2015164:	20150100 	call	2015010 <epcs_write_enable>
  /* Send the PP command */
  alt_avalon_spi_command(
    base,
    0,
    cmd_len,
    pp,
 2015168:	e0bffa04 	addi	r2,fp,-24

  /* First, WREN */
  epcs_write_enable(base);

  /* Send the PP command */
  alt_avalon_spi_command(
 201516c:	d8000015 	stw	zero,0(sp)
 2015170:	d8000115 	stw	zero,4(sp)
 2015174:	00c00044 	movi	r3,1
 2015178:	d8c00215 	stw	r3,8(sp)
 201517c:	e13ffc17 	ldw	r4,-16(fp)
 2015180:	000b883a 	mov	r5,zero
 2015184:	e1bff917 	ldw	r6,-28(fp)
 2015188:	100f883a 	mov	r7,r2
 201518c:	2015cc80 	call	2015cc8 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 2015190:	e0bfff17 	ldw	r2,-4(fp)
 2015194:	d8000015 	stw	zero,0(sp)
 2015198:	d8000115 	stw	zero,4(sp)
 201519c:	d8000215 	stw	zero,8(sp)
 20151a0:	e13ffc17 	ldw	r4,-16(fp)
 20151a4:	000b883a 	mov	r5,zero
 20151a8:	100d883a 	mov	r6,r2
 20151ac:	e1fffe17 	ldw	r7,-8(fp)
 20151b0:	2015cc80 	call	2015cc8 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 20151b4:	e13ffc17 	ldw	r4,-16(fp)
 20151b8:	2014dec0 	call	2014dec <epcs_await_wip_released>

  if(four_bytes_mode)
 20151bc:	e0800217 	ldw	r2,8(fp)
 20151c0:	10000226 	beq	r2,zero,20151cc <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 20151c4:	e13ffc17 	ldw	r4,-16(fp)
 20151c8:	20153240 	call	2015324 <epcs_exit_4_bytes_mode>
  }

  return length;
 20151cc:	e0bfff17 	ldw	r2,-4(fp)
}
 20151d0:	e037883a 	mov	sp,fp
 20151d4:	dfc00117 	ldw	ra,4(sp)
 20151d8:	df000017 	ldw	fp,0(sp)
 20151dc:	dec00204 	addi	sp,sp,8
 20151e0:	f800283a 	ret

020151e4 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 20151e4:	defff804 	addi	sp,sp,-32
 20151e8:	dfc00715 	stw	ra,28(sp)
 20151ec:	df000615 	stw	fp,24(sp)
 20151f0:	df000604 	addi	fp,sp,24
 20151f4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 20151f8:	00bfeac4 	movi	r2,-85
 20151fc:	e0bffd05 	stb	r2,-12(fp)
 2015200:	e03ffd45 	stb	zero,-11(fp)
 2015204:	e03ffd85 	stb	zero,-10(fp)
 2015208:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 201520c:	00800044 	movi	r2,1
 2015210:	d8800015 	stw	r2,0(sp)
 2015214:	e0bffe04 	addi	r2,fp,-8
 2015218:	d8800115 	stw	r2,4(sp)
 201521c:	d8000215 	stw	zero,8(sp)
 2015220:	e13fff17 	ldw	r4,-4(fp)
 2015224:	000b883a 	mov	r5,zero
 2015228:	01800104 	movi	r6,4
 201522c:	e1fffd04 	addi	r7,fp,-12
 2015230:	2015cc80 	call	2015cc8 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2015234:	e0bffe03 	ldbu	r2,-8(fp)
}
 2015238:	e037883a 	mov	sp,fp
 201523c:	dfc00117 	ldw	ra,4(sp)
 2015240:	df000017 	ldw	fp,0(sp)
 2015244:	dec00204 	addi	sp,sp,8
 2015248:	f800283a 	ret

0201524c <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 201524c:	defff904 	addi	sp,sp,-28
 2015250:	dfc00615 	stw	ra,24(sp)
 2015254:	df000515 	stw	fp,20(sp)
 2015258:	df000504 	addi	fp,sp,20
 201525c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 2015260:	00bfe7c4 	movi	r2,-97
 2015264:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 2015268:	008000c4 	movi	r2,3
 201526c:	d8800015 	stw	r2,0(sp)
    base,
    0,
    sizeof(rd_id_cmd) / sizeof(*rd_id_cmd),
    rd_id_cmd,
    3,
    id,
 2015270:	e0bffe44 	addi	r2,fp,-7
alt_u32 epcs_read_device_id(alt_u32 base)
{
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  alt_u8 id[3];

  alt_avalon_spi_command(
 2015274:	d8800115 	stw	r2,4(sp)
 2015278:	d8000215 	stw	zero,8(sp)
 201527c:	e13fff17 	ldw	r4,-4(fp)
 2015280:	000b883a 	mov	r5,zero
 2015284:	01800044 	movi	r6,1
 2015288:	e1fffe04 	addi	r7,fp,-8
 201528c:	2015cc80 	call	2015cc8 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 2015290:	e0bffe43 	ldbu	r2,-7(fp)
 2015294:	10803fcc 	andi	r2,r2,255
 2015298:	1006943a 	slli	r3,r2,16
 201529c:	e0bffe83 	ldbu	r2,-6(fp)
 20152a0:	10803fcc 	andi	r2,r2,255
 20152a4:	1004923a 	slli	r2,r2,8
 20152a8:	1886b03a 	or	r3,r3,r2
 20152ac:	e0bffec3 	ldbu	r2,-5(fp)
 20152b0:	10803fcc 	andi	r2,r2,255
 20152b4:	1884b03a 	or	r2,r3,r2
}
 20152b8:	e037883a 	mov	sp,fp
 20152bc:	dfc00117 	ldw	ra,4(sp)
 20152c0:	df000017 	ldw	fp,0(sp)
 20152c4:	dec00204 	addi	sp,sp,8
 20152c8:	f800283a 	ret

020152cc <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 20152cc:	defff904 	addi	sp,sp,-28
 20152d0:	dfc00615 	stw	ra,24(sp)
 20152d4:	df000515 	stw	fp,20(sp)
 20152d8:	df000504 	addi	fp,sp,20
 20152dc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 20152e0:	00bfedc4 	movi	r2,-73
 20152e4:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 20152e8:	e13fff17 	ldw	r4,-4(fp)
 20152ec:	20150100 	call	2015010 <epcs_write_enable>

  alt_avalon_spi_command(
 20152f0:	d8000015 	stw	zero,0(sp)
 20152f4:	d8000115 	stw	zero,4(sp)
 20152f8:	d8000215 	stw	zero,8(sp)
 20152fc:	e13fff17 	ldw	r4,-4(fp)
 2015300:	000b883a 	mov	r5,zero
 2015304:	01800044 	movi	r6,1
 2015308:	e1fffe04 	addi	r7,fp,-8
 201530c:	2015cc80 	call	2015cc8 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 2015310:	e037883a 	mov	sp,fp
 2015314:	dfc00117 	ldw	ra,4(sp)
 2015318:	df000017 	ldw	fp,0(sp)
 201531c:	dec00204 	addi	sp,sp,8
 2015320:	f800283a 	ret

02015324 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 2015324:	defff904 	addi	sp,sp,-28
 2015328:	dfc00615 	stw	ra,24(sp)
 201532c:	df000515 	stw	fp,20(sp)
 2015330:	df000504 	addi	fp,sp,20
 2015334:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 2015338:	00bffa44 	movi	r2,-23
 201533c:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 2015340:	e13fff17 	ldw	r4,-4(fp)
 2015344:	20150100 	call	2015010 <epcs_write_enable>

  alt_avalon_spi_command(
 2015348:	d8000015 	stw	zero,0(sp)
 201534c:	d8000115 	stw	zero,4(sp)
 2015350:	d8000215 	stw	zero,8(sp)
 2015354:	e13fff17 	ldw	r4,-4(fp)
 2015358:	000b883a 	mov	r5,zero
 201535c:	01800044 	movi	r6,1
 2015360:	e1fffe04 	addi	r7,fp,-8
 2015364:	2015cc80 	call	2015cc8 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 2015368:	e037883a 	mov	sp,fp
 201536c:	dfc00117 	ldw	ra,4(sp)
 2015370:	df000017 	ldw	fp,0(sp)
 2015374:	dec00204 	addi	sp,sp,8
 2015378:	f800283a 	ret

0201537c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 201537c:	defff504 	addi	sp,sp,-44
 2015380:	df000a15 	stw	fp,40(sp)
 2015384:	df000a04 	addi	fp,sp,40
 2015388:	e13ffc15 	stw	r4,-16(fp)
 201538c:	e17ffd15 	stw	r5,-12(fp)
 2015390:	e1bffe15 	stw	r6,-8(fp)
 2015394:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2015398:	e03ff615 	stw	zero,-40(fp)
 201539c:	008080b4 	movhi	r2,514
 20153a0:	10a50a04 	addi	r2,r2,-27608
 20153a4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 20153a8:	10003f26 	beq	r2,zero,20154a8 <alt_alarm_start+0x12c>
  {
    if (alarm)
 20153ac:	e0bffc17 	ldw	r2,-16(fp)
 20153b0:	10003b26 	beq	r2,zero,20154a0 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 20153b4:	e0bffc17 	ldw	r2,-16(fp)
 20153b8:	e0fffe17 	ldw	r3,-8(fp)
 20153bc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 20153c0:	e0bffc17 	ldw	r2,-16(fp)
 20153c4:	e0ffff17 	ldw	r3,-4(fp)
 20153c8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20153cc:	0005303a 	rdctl	r2,status
 20153d0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20153d4:	e0fff817 	ldw	r3,-32(fp)
 20153d8:	00bfff84 	movi	r2,-2
 20153dc:	1884703a 	and	r2,r3,r2
 20153e0:	1001703a 	wrctl	status,r2
  
  return context;
 20153e4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 20153e8:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20153ec:	008080b4 	movhi	r2,514
 20153f0:	10a50b04 	addi	r2,r2,-27604
 20153f4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 20153f8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 20153fc:	e0fffd17 	ldw	r3,-12(fp)
 2015400:	e0bff617 	ldw	r2,-40(fp)
 2015404:	1885883a 	add	r2,r3,r2
 2015408:	10c00044 	addi	r3,r2,1
 201540c:	e0bffc17 	ldw	r2,-16(fp)
 2015410:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2015414:	e0bffc17 	ldw	r2,-16(fp)
 2015418:	10c00217 	ldw	r3,8(r2)
 201541c:	e0bff617 	ldw	r2,-40(fp)
 2015420:	1880042e 	bgeu	r3,r2,2015434 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 2015424:	e0bffc17 	ldw	r2,-16(fp)
 2015428:	00c00044 	movi	r3,1
 201542c:	10c00405 	stb	r3,16(r2)
 2015430:	00000206 	br	201543c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 2015434:	e0bffc17 	ldw	r2,-16(fp)
 2015438:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 201543c:	e0bffc17 	ldw	r2,-16(fp)
 2015440:	00c080b4 	movhi	r3,514
 2015444:	18e4fc04 	addi	r3,r3,-27664
 2015448:	e0fff915 	stw	r3,-28(fp)
 201544c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2015450:	e0bffa17 	ldw	r2,-24(fp)
 2015454:	e0fff917 	ldw	r3,-28(fp)
 2015458:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 201545c:	e0bff917 	ldw	r2,-28(fp)
 2015460:	10c00017 	ldw	r3,0(r2)
 2015464:	e0bffa17 	ldw	r2,-24(fp)
 2015468:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201546c:	e0bff917 	ldw	r2,-28(fp)
 2015470:	10800017 	ldw	r2,0(r2)
 2015474:	e0fffa17 	ldw	r3,-24(fp)
 2015478:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 201547c:	e0bff917 	ldw	r2,-28(fp)
 2015480:	e0fffa17 	ldw	r3,-24(fp)
 2015484:	10c00015 	stw	r3,0(r2)
 2015488:	e0bff717 	ldw	r2,-36(fp)
 201548c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015490:	e0bffb17 	ldw	r2,-20(fp)
 2015494:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2015498:	0005883a 	mov	r2,zero
 201549c:	00000306 	br	20154ac <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 20154a0:	00bffa84 	movi	r2,-22
 20154a4:	00000106 	br	20154ac <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 20154a8:	00bfde84 	movi	r2,-134
  }
}
 20154ac:	e037883a 	mov	sp,fp
 20154b0:	df000017 	ldw	fp,0(sp)
 20154b4:	dec00104 	addi	sp,sp,4
 20154b8:	f800283a 	ret

020154bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20154bc:	defffe04 	addi	sp,sp,-8
 20154c0:	dfc00115 	stw	ra,4(sp)
 20154c4:	df000015 	stw	fp,0(sp)
 20154c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20154cc:	008080b4 	movhi	r2,514
 20154d0:	10a4f704 	addi	r2,r2,-27684
 20154d4:	10800017 	ldw	r2,0(r2)
 20154d8:	10000526 	beq	r2,zero,20154f0 <alt_get_errno+0x34>
 20154dc:	008080b4 	movhi	r2,514
 20154e0:	10a4f704 	addi	r2,r2,-27684
 20154e4:	10800017 	ldw	r2,0(r2)
 20154e8:	103ee83a 	callr	r2
 20154ec:	00000206 	br	20154f8 <alt_get_errno+0x3c>
 20154f0:	008080b4 	movhi	r2,514
 20154f4:	10a50504 	addi	r2,r2,-27628
}
 20154f8:	e037883a 	mov	sp,fp
 20154fc:	dfc00117 	ldw	ra,4(sp)
 2015500:	df000017 	ldw	fp,0(sp)
 2015504:	dec00204 	addi	sp,sp,8
 2015508:	f800283a 	ret

0201550c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 201550c:	defffa04 	addi	sp,sp,-24
 2015510:	dfc00515 	stw	ra,20(sp)
 2015514:	df000415 	stw	fp,16(sp)
 2015518:	df000404 	addi	fp,sp,16
 201551c:	e13ffe15 	stw	r4,-8(fp)
 2015520:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2015524:	e0bffe17 	ldw	r2,-8(fp)
 2015528:	10000326 	beq	r2,zero,2015538 <alt_dev_llist_insert+0x2c>
 201552c:	e0bffe17 	ldw	r2,-8(fp)
 2015530:	10800217 	ldw	r2,8(r2)
 2015534:	1000051e 	bne	r2,zero,201554c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 2015538:	20154bc0 	call	20154bc <alt_get_errno>
 201553c:	00c00584 	movi	r3,22
 2015540:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 2015544:	00bffa84 	movi	r2,-22
 2015548:	00001306 	br	2015598 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 201554c:	e0bffe17 	ldw	r2,-8(fp)
 2015550:	e0ffff17 	ldw	r3,-4(fp)
 2015554:	e0fffc15 	stw	r3,-16(fp)
 2015558:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201555c:	e0bffd17 	ldw	r2,-12(fp)
 2015560:	e0fffc17 	ldw	r3,-16(fp)
 2015564:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2015568:	e0bffc17 	ldw	r2,-16(fp)
 201556c:	10c00017 	ldw	r3,0(r2)
 2015570:	e0bffd17 	ldw	r2,-12(fp)
 2015574:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2015578:	e0bffc17 	ldw	r2,-16(fp)
 201557c:	10800017 	ldw	r2,0(r2)
 2015580:	e0fffd17 	ldw	r3,-12(fp)
 2015584:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2015588:	e0bffc17 	ldw	r2,-16(fp)
 201558c:	e0fffd17 	ldw	r3,-12(fp)
 2015590:	10c00015 	stw	r3,0(r2)

  return 0;  
 2015594:	0005883a 	mov	r2,zero
}
 2015598:	e037883a 	mov	sp,fp
 201559c:	dfc00117 	ldw	ra,4(sp)
 20155a0:	df000017 	ldw	fp,0(sp)
 20155a4:	dec00204 	addi	sp,sp,8
 20155a8:	f800283a 	ret

020155ac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 20155ac:	defffd04 	addi	sp,sp,-12
 20155b0:	dfc00215 	stw	ra,8(sp)
 20155b4:	df000115 	stw	fp,4(sp)
 20155b8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20155bc:	00808074 	movhi	r2,513
 20155c0:	10994604 	addi	r2,r2,25880
 20155c4:	e0bfff15 	stw	r2,-4(fp)
 20155c8:	00000606 	br	20155e4 <_do_ctors+0x38>
        (*ctor) (); 
 20155cc:	e0bfff17 	ldw	r2,-4(fp)
 20155d0:	10800017 	ldw	r2,0(r2)
 20155d4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 20155d8:	e0bfff17 	ldw	r2,-4(fp)
 20155dc:	10bfff04 	addi	r2,r2,-4
 20155e0:	e0bfff15 	stw	r2,-4(fp)
 20155e4:	e0ffff17 	ldw	r3,-4(fp)
 20155e8:	00808074 	movhi	r2,513
 20155ec:	10994704 	addi	r2,r2,25884
 20155f0:	18bff62e 	bgeu	r3,r2,20155cc <_do_ctors+0x20>
        (*ctor) (); 
}
 20155f4:	e037883a 	mov	sp,fp
 20155f8:	dfc00117 	ldw	ra,4(sp)
 20155fc:	df000017 	ldw	fp,0(sp)
 2015600:	dec00204 	addi	sp,sp,8
 2015604:	f800283a 	ret

02015608 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2015608:	defffd04 	addi	sp,sp,-12
 201560c:	dfc00215 	stw	ra,8(sp)
 2015610:	df000115 	stw	fp,4(sp)
 2015614:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2015618:	00808074 	movhi	r2,513
 201561c:	10994604 	addi	r2,r2,25880
 2015620:	e0bfff15 	stw	r2,-4(fp)
 2015624:	00000606 	br	2015640 <_do_dtors+0x38>
        (*dtor) (); 
 2015628:	e0bfff17 	ldw	r2,-4(fp)
 201562c:	10800017 	ldw	r2,0(r2)
 2015630:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2015634:	e0bfff17 	ldw	r2,-4(fp)
 2015638:	10bfff04 	addi	r2,r2,-4
 201563c:	e0bfff15 	stw	r2,-4(fp)
 2015640:	e0ffff17 	ldw	r3,-4(fp)
 2015644:	00808074 	movhi	r2,513
 2015648:	10994704 	addi	r2,r2,25884
 201564c:	18bff62e 	bgeu	r3,r2,2015628 <_do_dtors+0x20>
        (*dtor) (); 
}
 2015650:	e037883a 	mov	sp,fp
 2015654:	dfc00117 	ldw	ra,4(sp)
 2015658:	df000017 	ldw	fp,0(sp)
 201565c:	dec00204 	addi	sp,sp,8
 2015660:	f800283a 	ret

02015664 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 2015664:	defffc04 	addi	sp,sp,-16
 2015668:	dfc00315 	stw	ra,12(sp)
 201566c:	df000215 	stw	fp,8(sp)
 2015670:	df000204 	addi	fp,sp,8
 2015674:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 2015678:	e13fff17 	ldw	r4,-4(fp)
 201567c:	d1600d04 	addi	r5,gp,-32716
 2015680:	2015ed00 	call	2015ed0 <alt_find_dev>
 2015684:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 2015688:	e0bffe17 	ldw	r2,-8(fp)
 201568c:	10000926 	beq	r2,zero,20156b4 <alt_flash_open_dev+0x50>
 2015690:	e0bffe17 	ldw	r2,-8(fp)
 2015694:	10800317 	ldw	r2,12(r2)
 2015698:	10000626 	beq	r2,zero,20156b4 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 201569c:	e0bffe17 	ldw	r2,-8(fp)
 20156a0:	10800317 	ldw	r2,12(r2)
 20156a4:	e13ffe17 	ldw	r4,-8(fp)
 20156a8:	e17fff17 	ldw	r5,-4(fp)
 20156ac:	103ee83a 	callr	r2
 20156b0:	00000106 	br	20156b8 <alt_flash_open_dev+0x54>
  }

  return dev;
 20156b4:	e0bffe17 	ldw	r2,-8(fp)
}
 20156b8:	e037883a 	mov	sp,fp
 20156bc:	dfc00117 	ldw	ra,4(sp)
 20156c0:	df000017 	ldw	fp,0(sp)
 20156c4:	dec00204 	addi	sp,sp,8
 20156c8:	f800283a 	ret

020156cc <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 20156cc:	defffd04 	addi	sp,sp,-12
 20156d0:	dfc00215 	stw	ra,8(sp)
 20156d4:	df000115 	stw	fp,4(sp)
 20156d8:	df000104 	addi	fp,sp,4
 20156dc:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 20156e0:	e0bfff17 	ldw	r2,-4(fp)
 20156e4:	10000726 	beq	r2,zero,2015704 <alt_flash_close_dev+0x38>
 20156e8:	e0bfff17 	ldw	r2,-4(fp)
 20156ec:	10800417 	ldw	r2,16(r2)
 20156f0:	10000426 	beq	r2,zero,2015704 <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
 20156f4:	e0bfff17 	ldw	r2,-4(fp)
 20156f8:	10800417 	ldw	r2,16(r2)
 20156fc:	e13fff17 	ldw	r4,-4(fp)
 2015700:	103ee83a 	callr	r2
  }
  return;
 2015704:	0001883a 	nop
}
 2015708:	e037883a 	mov	sp,fp
 201570c:	dfc00117 	ldw	ra,4(sp)
 2015710:	df000017 	ldw	fp,0(sp)
 2015714:	dec00204 	addi	sp,sp,8
 2015718:	f800283a 	ret

0201571c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 201571c:	defff804 	addi	sp,sp,-32
 2015720:	dfc00715 	stw	ra,28(sp)
 2015724:	df000615 	stw	fp,24(sp)
 2015728:	dc000515 	stw	r16,20(sp)
 201572c:	df000504 	addi	fp,sp,20
 2015730:	e13ffc15 	stw	r4,-16(fp)
 2015734:	e17ffd15 	stw	r5,-12(fp)
 2015738:	e1bffe15 	stw	r6,-8(fp)
 201573c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2015740:	e13ffd17 	ldw	r4,-12(fp)
 2015744:	e17ffe17 	ldw	r5,-8(fp)
 2015748:	e1bfff17 	ldw	r6,-4(fp)
 201574c:	20159b40 	call	20159b4 <open>
 2015750:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2015754:	e0bffb17 	ldw	r2,-20(fp)
 2015758:	10002216 	blt	r2,zero,20157e4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 201575c:	040080b4 	movhi	r16,514
 2015760:	84201204 	addi	r16,r16,-32696
 2015764:	e0bffb17 	ldw	r2,-20(fp)
 2015768:	1009883a 	mov	r4,r2
 201576c:	01400304 	movi	r5,12
 2015770:	20093b80 	call	20093b8 <__mulsi3>
 2015774:	8085883a 	add	r2,r16,r2
 2015778:	10c00017 	ldw	r3,0(r2)
 201577c:	e0bffc17 	ldw	r2,-16(fp)
 2015780:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2015784:	040080b4 	movhi	r16,514
 2015788:	84201204 	addi	r16,r16,-32696
 201578c:	e0bffb17 	ldw	r2,-20(fp)
 2015790:	1009883a 	mov	r4,r2
 2015794:	01400304 	movi	r5,12
 2015798:	20093b80 	call	20093b8 <__mulsi3>
 201579c:	8085883a 	add	r2,r16,r2
 20157a0:	10800104 	addi	r2,r2,4
 20157a4:	10c00017 	ldw	r3,0(r2)
 20157a8:	e0bffc17 	ldw	r2,-16(fp)
 20157ac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 20157b0:	040080b4 	movhi	r16,514
 20157b4:	84201204 	addi	r16,r16,-32696
 20157b8:	e0bffb17 	ldw	r2,-20(fp)
 20157bc:	1009883a 	mov	r4,r2
 20157c0:	01400304 	movi	r5,12
 20157c4:	20093b80 	call	20093b8 <__mulsi3>
 20157c8:	8085883a 	add	r2,r16,r2
 20157cc:	10800204 	addi	r2,r2,8
 20157d0:	10c00017 	ldw	r3,0(r2)
 20157d4:	e0bffc17 	ldw	r2,-16(fp)
 20157d8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 20157dc:	e13ffb17 	ldw	r4,-20(fp)
 20157e0:	2012d100 	call	2012d10 <alt_release_fd>
  }
} 
 20157e4:	e037883a 	mov	sp,fp
 20157e8:	dfc00217 	ldw	ra,8(sp)
 20157ec:	df000117 	ldw	fp,4(sp)
 20157f0:	dc000017 	ldw	r16,0(sp)
 20157f4:	dec00304 	addi	sp,sp,12
 20157f8:	f800283a 	ret

020157fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 20157fc:	defffb04 	addi	sp,sp,-20
 2015800:	dfc00415 	stw	ra,16(sp)
 2015804:	df000315 	stw	fp,12(sp)
 2015808:	df000304 	addi	fp,sp,12
 201580c:	e13ffd15 	stw	r4,-12(fp)
 2015810:	e17ffe15 	stw	r5,-8(fp)
 2015814:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2015818:	010080b4 	movhi	r4,514
 201581c:	21201504 	addi	r4,r4,-32684
 2015820:	e17ffd17 	ldw	r5,-12(fp)
 2015824:	01800044 	movi	r6,1
 2015828:	01c07fc4 	movi	r7,511
 201582c:	201571c0 	call	201571c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2015830:	010080b4 	movhi	r4,514
 2015834:	21201204 	addi	r4,r4,-32696
 2015838:	e17ffe17 	ldw	r5,-8(fp)
 201583c:	000d883a 	mov	r6,zero
 2015840:	01c07fc4 	movi	r7,511
 2015844:	201571c0 	call	201571c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2015848:	010080b4 	movhi	r4,514
 201584c:	21201804 	addi	r4,r4,-32672
 2015850:	e17fff17 	ldw	r5,-4(fp)
 2015854:	01800044 	movi	r6,1
 2015858:	01c07fc4 	movi	r7,511
 201585c:	201571c0 	call	201571c <alt_open_fd>
}  
 2015860:	e037883a 	mov	sp,fp
 2015864:	dfc00117 	ldw	ra,4(sp)
 2015868:	df000017 	ldw	fp,0(sp)
 201586c:	dec00204 	addi	sp,sp,8
 2015870:	f800283a 	ret

02015874 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2015874:	defffe04 	addi	sp,sp,-8
 2015878:	dfc00115 	stw	ra,4(sp)
 201587c:	df000015 	stw	fp,0(sp)
 2015880:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2015884:	008080b4 	movhi	r2,514
 2015888:	10a4f704 	addi	r2,r2,-27684
 201588c:	10800017 	ldw	r2,0(r2)
 2015890:	10000526 	beq	r2,zero,20158a8 <alt_get_errno+0x34>
 2015894:	008080b4 	movhi	r2,514
 2015898:	10a4f704 	addi	r2,r2,-27684
 201589c:	10800017 	ldw	r2,0(r2)
 20158a0:	103ee83a 	callr	r2
 20158a4:	00000206 	br	20158b0 <alt_get_errno+0x3c>
 20158a8:	008080b4 	movhi	r2,514
 20158ac:	10a50504 	addi	r2,r2,-27628
}
 20158b0:	e037883a 	mov	sp,fp
 20158b4:	dfc00117 	ldw	ra,4(sp)
 20158b8:	df000017 	ldw	fp,0(sp)
 20158bc:	dec00204 	addi	sp,sp,8
 20158c0:	f800283a 	ret

020158c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 20158c4:	defffb04 	addi	sp,sp,-20
 20158c8:	dfc00415 	stw	ra,16(sp)
 20158cc:	df000315 	stw	fp,12(sp)
 20158d0:	dc000215 	stw	r16,8(sp)
 20158d4:	df000204 	addi	fp,sp,8
 20158d8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 20158dc:	e0bfff17 	ldw	r2,-4(fp)
 20158e0:	10800217 	ldw	r2,8(r2)
 20158e4:	10d00034 	orhi	r3,r2,16384
 20158e8:	e0bfff17 	ldw	r2,-4(fp)
 20158ec:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 20158f0:	e03ffe15 	stw	zero,-8(fp)
 20158f4:	00002206 	br	2015980 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 20158f8:	040080b4 	movhi	r16,514
 20158fc:	84201204 	addi	r16,r16,-32696
 2015900:	e0bffe17 	ldw	r2,-8(fp)
 2015904:	1009883a 	mov	r4,r2
 2015908:	01400304 	movi	r5,12
 201590c:	20093b80 	call	20093b8 <__mulsi3>
 2015910:	8085883a 	add	r2,r16,r2
 2015914:	10c00017 	ldw	r3,0(r2)
 2015918:	e0bfff17 	ldw	r2,-4(fp)
 201591c:	10800017 	ldw	r2,0(r2)
 2015920:	1880141e 	bne	r3,r2,2015974 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2015924:	040080b4 	movhi	r16,514
 2015928:	84201204 	addi	r16,r16,-32696
 201592c:	e0bffe17 	ldw	r2,-8(fp)
 2015930:	1009883a 	mov	r4,r2
 2015934:	01400304 	movi	r5,12
 2015938:	20093b80 	call	20093b8 <__mulsi3>
 201593c:	8085883a 	add	r2,r16,r2
 2015940:	10800204 	addi	r2,r2,8
 2015944:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2015948:	10000a0e 	bge	r2,zero,2015974 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 201594c:	e13ffe17 	ldw	r4,-8(fp)
 2015950:	01400304 	movi	r5,12
 2015954:	20093b80 	call	20093b8 <__mulsi3>
 2015958:	00c080b4 	movhi	r3,514
 201595c:	18e01204 	addi	r3,r3,-32696
 2015960:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2015964:	e0bfff17 	ldw	r2,-4(fp)
 2015968:	18800226 	beq	r3,r2,2015974 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 201596c:	00bffcc4 	movi	r2,-13
 2015970:	00000a06 	br	201599c <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2015974:	e0bffe17 	ldw	r2,-8(fp)
 2015978:	10800044 	addi	r2,r2,1
 201597c:	e0bffe15 	stw	r2,-8(fp)
 2015980:	008080b4 	movhi	r2,514
 2015984:	10a4f604 	addi	r2,r2,-27688
 2015988:	10800017 	ldw	r2,0(r2)
 201598c:	1007883a 	mov	r3,r2
 2015990:	e0bffe17 	ldw	r2,-8(fp)
 2015994:	18bfd82e 	bgeu	r3,r2,20158f8 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2015998:	0005883a 	mov	r2,zero
}
 201599c:	e037883a 	mov	sp,fp
 20159a0:	dfc00217 	ldw	ra,8(sp)
 20159a4:	df000117 	ldw	fp,4(sp)
 20159a8:	dc000017 	ldw	r16,0(sp)
 20159ac:	dec00304 	addi	sp,sp,12
 20159b0:	f800283a 	ret

020159b4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 20159b4:	defff604 	addi	sp,sp,-40
 20159b8:	dfc00915 	stw	ra,36(sp)
 20159bc:	df000815 	stw	fp,32(sp)
 20159c0:	df000804 	addi	fp,sp,32
 20159c4:	e13ffd15 	stw	r4,-12(fp)
 20159c8:	e17ffe15 	stw	r5,-8(fp)
 20159cc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 20159d0:	00bfffc4 	movi	r2,-1
 20159d4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 20159d8:	00bffb44 	movi	r2,-19
 20159dc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 20159e0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 20159e4:	e13ffd17 	ldw	r4,-12(fp)
 20159e8:	014080b4 	movhi	r5,514
 20159ec:	2964f404 	addi	r5,r5,-27696
 20159f0:	2015ed00 	call	2015ed0 <alt_find_dev>
 20159f4:	e0bff815 	stw	r2,-32(fp)
 20159f8:	e0bff817 	ldw	r2,-32(fp)
 20159fc:	1000051e 	bne	r2,zero,2015a14 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2015a00:	e13ffd17 	ldw	r4,-12(fp)
 2015a04:	2015f600 	call	2015f60 <alt_find_file>
 2015a08:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2015a0c:	00800044 	movi	r2,1
 2015a10:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2015a14:	e0bff817 	ldw	r2,-32(fp)
 2015a18:	10002a26 	beq	r2,zero,2015ac4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2015a1c:	e13ff817 	ldw	r4,-32(fp)
 2015a20:	20160740 	call	2016074 <alt_get_fd>
 2015a24:	e0bff915 	stw	r2,-28(fp)
 2015a28:	e0bff917 	ldw	r2,-28(fp)
 2015a2c:	1000030e 	bge	r2,zero,2015a3c <open+0x88>
    {
      status = index;
 2015a30:	e0bff917 	ldw	r2,-28(fp)
 2015a34:	e0bffa15 	stw	r2,-24(fp)
 2015a38:	00002406 	br	2015acc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 2015a3c:	e13ff917 	ldw	r4,-28(fp)
 2015a40:	01400304 	movi	r5,12
 2015a44:	20093b80 	call	20093b8 <__mulsi3>
 2015a48:	00c080b4 	movhi	r3,514
 2015a4c:	18e01204 	addi	r3,r3,-32696
 2015a50:	10c5883a 	add	r2,r2,r3
 2015a54:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2015a58:	e0fffe17 	ldw	r3,-8(fp)
 2015a5c:	00900034 	movhi	r2,16384
 2015a60:	10bfffc4 	addi	r2,r2,-1
 2015a64:	1886703a 	and	r3,r3,r2
 2015a68:	e0bffc17 	ldw	r2,-16(fp)
 2015a6c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2015a70:	e0bffb17 	ldw	r2,-20(fp)
 2015a74:	1000051e 	bne	r2,zero,2015a8c <open+0xd8>
 2015a78:	e13ffc17 	ldw	r4,-16(fp)
 2015a7c:	20158c40 	call	20158c4 <alt_file_locked>
 2015a80:	e0bffa15 	stw	r2,-24(fp)
 2015a84:	e0bffa17 	ldw	r2,-24(fp)
 2015a88:	10001016 	blt	r2,zero,2015acc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2015a8c:	e0bff817 	ldw	r2,-32(fp)
 2015a90:	10800317 	ldw	r2,12(r2)
 2015a94:	10000826 	beq	r2,zero,2015ab8 <open+0x104>
 2015a98:	e0bff817 	ldw	r2,-32(fp)
 2015a9c:	10800317 	ldw	r2,12(r2)
 2015aa0:	e13ffc17 	ldw	r4,-16(fp)
 2015aa4:	e17ffd17 	ldw	r5,-12(fp)
 2015aa8:	e1bffe17 	ldw	r6,-8(fp)
 2015aac:	e1ffff17 	ldw	r7,-4(fp)
 2015ab0:	103ee83a 	callr	r2
 2015ab4:	00000106 	br	2015abc <open+0x108>
 2015ab8:	0005883a 	mov	r2,zero
 2015abc:	e0bffa15 	stw	r2,-24(fp)
 2015ac0:	00000206 	br	2015acc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2015ac4:	00bffb44 	movi	r2,-19
 2015ac8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2015acc:	e0bffa17 	ldw	r2,-24(fp)
 2015ad0:	1000080e 	bge	r2,zero,2015af4 <open+0x140>
  {
    alt_release_fd (index);  
 2015ad4:	e13ff917 	ldw	r4,-28(fp)
 2015ad8:	2012d100 	call	2012d10 <alt_release_fd>
    ALT_ERRNO = -status;
 2015adc:	20158740 	call	2015874 <alt_get_errno>
 2015ae0:	e0fffa17 	ldw	r3,-24(fp)
 2015ae4:	00c7c83a 	sub	r3,zero,r3
 2015ae8:	10c00015 	stw	r3,0(r2)
    return -1;
 2015aec:	00bfffc4 	movi	r2,-1
 2015af0:	00000106 	br	2015af8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 2015af4:	e0bff917 	ldw	r2,-28(fp)
}
 2015af8:	e037883a 	mov	sp,fp
 2015afc:	dfc00117 	ldw	ra,4(sp)
 2015b00:	df000017 	ldw	fp,0(sp)
 2015b04:	dec00204 	addi	sp,sp,8
 2015b08:	f800283a 	ret

02015b0c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2015b0c:	defffa04 	addi	sp,sp,-24
 2015b10:	df000515 	stw	fp,20(sp)
 2015b14:	df000504 	addi	fp,sp,20
 2015b18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015b1c:	0005303a 	rdctl	r2,status
 2015b20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015b24:	e0fffc17 	ldw	r3,-16(fp)
 2015b28:	00bfff84 	movi	r2,-2
 2015b2c:	1884703a 	and	r2,r3,r2
 2015b30:	1001703a 	wrctl	status,r2
  
  return context;
 2015b34:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2015b38:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2015b3c:	e0bfff17 	ldw	r2,-4(fp)
 2015b40:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2015b44:	e0bffd17 	ldw	r2,-12(fp)
 2015b48:	10800017 	ldw	r2,0(r2)
 2015b4c:	e0fffd17 	ldw	r3,-12(fp)
 2015b50:	18c00117 	ldw	r3,4(r3)
 2015b54:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2015b58:	e0bffd17 	ldw	r2,-12(fp)
 2015b5c:	10800117 	ldw	r2,4(r2)
 2015b60:	e0fffd17 	ldw	r3,-12(fp)
 2015b64:	18c00017 	ldw	r3,0(r3)
 2015b68:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2015b6c:	e0bffd17 	ldw	r2,-12(fp)
 2015b70:	e0fffd17 	ldw	r3,-12(fp)
 2015b74:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2015b78:	e0bffd17 	ldw	r2,-12(fp)
 2015b7c:	e0fffd17 	ldw	r3,-12(fp)
 2015b80:	10c00015 	stw	r3,0(r2)
 2015b84:	e0bffb17 	ldw	r2,-20(fp)
 2015b88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015b8c:	e0bffe17 	ldw	r2,-8(fp)
 2015b90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 2015b94:	e037883a 	mov	sp,fp
 2015b98:	df000017 	ldw	fp,0(sp)
 2015b9c:	dec00104 	addi	sp,sp,4
 2015ba0:	f800283a 	ret

02015ba4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 2015ba4:	defffb04 	addi	sp,sp,-20
 2015ba8:	dfc00415 	stw	ra,16(sp)
 2015bac:	df000315 	stw	fp,12(sp)
 2015bb0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 2015bb4:	d0a00f17 	ldw	r2,-32708(gp)
 2015bb8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2015bbc:	d0a01e17 	ldw	r2,-32648(gp)
 2015bc0:	10800044 	addi	r2,r2,1
 2015bc4:	d0a01e15 	stw	r2,-32648(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2015bc8:	00002e06 	br	2015c84 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 2015bcc:	e0bffd17 	ldw	r2,-12(fp)
 2015bd0:	10800017 	ldw	r2,0(r2)
 2015bd4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2015bd8:	e0bffd17 	ldw	r2,-12(fp)
 2015bdc:	10800403 	ldbu	r2,16(r2)
 2015be0:	10803fcc 	andi	r2,r2,255
 2015be4:	10000426 	beq	r2,zero,2015bf8 <alt_tick+0x54>
 2015be8:	d0a01e17 	ldw	r2,-32648(gp)
 2015bec:	1000021e 	bne	r2,zero,2015bf8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2015bf0:	e0bffd17 	ldw	r2,-12(fp)
 2015bf4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2015bf8:	e0bffd17 	ldw	r2,-12(fp)
 2015bfc:	10800217 	ldw	r2,8(r2)
 2015c00:	d0e01e17 	ldw	r3,-32648(gp)
 2015c04:	18801d36 	bltu	r3,r2,2015c7c <alt_tick+0xd8>
 2015c08:	e0bffd17 	ldw	r2,-12(fp)
 2015c0c:	10800403 	ldbu	r2,16(r2)
 2015c10:	10803fcc 	andi	r2,r2,255
 2015c14:	1000191e 	bne	r2,zero,2015c7c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2015c18:	e0bffd17 	ldw	r2,-12(fp)
 2015c1c:	10c00317 	ldw	r3,12(r2)
 2015c20:	e0bffd17 	ldw	r2,-12(fp)
 2015c24:	10800517 	ldw	r2,20(r2)
 2015c28:	1009883a 	mov	r4,r2
 2015c2c:	183ee83a 	callr	r3
 2015c30:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2015c34:	e0bfff17 	ldw	r2,-4(fp)
 2015c38:	1000031e 	bne	r2,zero,2015c48 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2015c3c:	e13ffd17 	ldw	r4,-12(fp)
 2015c40:	2015b0c0 	call	2015b0c <alt_alarm_stop>
 2015c44:	00000d06 	br	2015c7c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2015c48:	e0bffd17 	ldw	r2,-12(fp)
 2015c4c:	10c00217 	ldw	r3,8(r2)
 2015c50:	e0bfff17 	ldw	r2,-4(fp)
 2015c54:	1887883a 	add	r3,r3,r2
 2015c58:	e0bffd17 	ldw	r2,-12(fp)
 2015c5c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2015c60:	e0bffd17 	ldw	r2,-12(fp)
 2015c64:	10c00217 	ldw	r3,8(r2)
 2015c68:	d0a01e17 	ldw	r2,-32648(gp)
 2015c6c:	1880032e 	bgeu	r3,r2,2015c7c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2015c70:	e0bffd17 	ldw	r2,-12(fp)
 2015c74:	00c00044 	movi	r3,1
 2015c78:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2015c7c:	e0bffe17 	ldw	r2,-8(fp)
 2015c80:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2015c84:	e0fffd17 	ldw	r3,-12(fp)
 2015c88:	d0a00f04 	addi	r2,gp,-32708
 2015c8c:	18bfcf1e 	bne	r3,r2,2015bcc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2015c90:	0001883a 	nop
}
 2015c94:	e037883a 	mov	sp,fp
 2015c98:	dfc00117 	ldw	ra,4(sp)
 2015c9c:	df000017 	ldw	fp,0(sp)
 2015ca0:	dec00204 	addi	sp,sp,8
 2015ca4:	f800283a 	ret

02015ca8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 2015ca8:	deffff04 	addi	sp,sp,-4
 2015cac:	df000015 	stw	fp,0(sp)
 2015cb0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2015cb4:	000170fa 	wrctl	ienable,zero
}
 2015cb8:	e037883a 	mov	sp,fp
 2015cbc:	df000017 	ldw	fp,0(sp)
 2015cc0:	dec00104 	addi	sp,sp,4
 2015cc4:	f800283a 	ret

02015cc8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2015cc8:	defff404 	addi	sp,sp,-48
 2015ccc:	df000b15 	stw	fp,44(sp)
 2015cd0:	df000b04 	addi	fp,sp,44
 2015cd4:	e13ffc15 	stw	r4,-16(fp)
 2015cd8:	e17ffd15 	stw	r5,-12(fp)
 2015cdc:	e1bffe15 	stw	r6,-8(fp)
 2015ce0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 2015ce4:	e0ffff17 	ldw	r3,-4(fp)
 2015ce8:	e0bffe17 	ldw	r2,-8(fp)
 2015cec:	1885883a 	add	r2,r3,r2
 2015cf0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 2015cf4:	e0c00217 	ldw	r3,8(fp)
 2015cf8:	e0800117 	ldw	r2,4(fp)
 2015cfc:	1885883a 	add	r2,r3,r2
 2015d00:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 2015d04:	e0800117 	ldw	r2,4(fp)
 2015d08:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 2015d0c:	e0bffe17 	ldw	r2,-8(fp)
 2015d10:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 2015d14:	00800044 	movi	r2,1
 2015d18:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 2015d1c:	e0bffc17 	ldw	r2,-16(fp)
 2015d20:	10800504 	addi	r2,r2,20
 2015d24:	e0fffd17 	ldw	r3,-12(fp)
 2015d28:	01000044 	movi	r4,1
 2015d2c:	20c6983a 	sll	r3,r4,r3
 2015d30:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2015d34:	e0800317 	ldw	r2,12(fp)
 2015d38:	1080008c 	andi	r2,r2,2
 2015d3c:	1000041e 	bne	r2,zero,2015d50 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 2015d40:	e0bffc17 	ldw	r2,-16(fp)
 2015d44:	10800304 	addi	r2,r2,12
 2015d48:	00c10004 	movi	r3,1024
 2015d4c:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2015d50:	e0bffc17 	ldw	r2,-16(fp)
 2015d54:	10800037 	ldwio	r2,0(r2)
 2015d58:	00000106 	br	2015d60 <alt_avalon_spi_command+0x98>

      if (read_ignore == 0 && read_data == read_end)
        break;
    }
    
  }
 2015d5c:	0001883a 	nop
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2015d60:	e0bffc17 	ldw	r2,-16(fp)
 2015d64:	10800204 	addi	r2,r2,8
 2015d68:	10800037 	ldwio	r2,0(r2)
 2015d6c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2015d70:	e0bffa17 	ldw	r2,-24(fp)
 2015d74:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2015d78:	10000226 	beq	r2,zero,2015d84 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2015d7c:	e0bff717 	ldw	r2,-36(fp)
 2015d80:	1000031e 	bne	r2,zero,2015d90 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2015d84:	e0bffa17 	ldw	r2,-24(fp)
 2015d88:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2015d8c:	103ff426 	beq	r2,zero,2015d60 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 2015d90:	e0bffa17 	ldw	r2,-24(fp)
 2015d94:	1080100c 	andi	r2,r2,64
 2015d98:	10001e26 	beq	r2,zero,2015e14 <alt_avalon_spi_command+0x14c>
 2015d9c:	e0bff717 	ldw	r2,-36(fp)
 2015da0:	00801c0e 	bge	zero,r2,2015e14 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 2015da4:	e0bff717 	ldw	r2,-36(fp)
 2015da8:	10bfffc4 	addi	r2,r2,-1
 2015dac:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 2015db0:	e0ffff17 	ldw	r3,-4(fp)
 2015db4:	e0bff817 	ldw	r2,-32(fp)
 2015db8:	18800a2e 	bgeu	r3,r2,2015de4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 2015dbc:	e0bffc17 	ldw	r2,-16(fp)
 2015dc0:	10800104 	addi	r2,r2,4
 2015dc4:	e0ffff17 	ldw	r3,-4(fp)
 2015dc8:	18c00003 	ldbu	r3,0(r3)
 2015dcc:	18c03fcc 	andi	r3,r3,255
 2015dd0:	e13fff17 	ldw	r4,-4(fp)
 2015dd4:	21000044 	addi	r4,r4,1
 2015dd8:	e13fff15 	stw	r4,-4(fp)
 2015ddc:	10c00035 	stwio	r3,0(r2)
 2015de0:	00000c06 	br	2015e14 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 2015de4:	e0bff517 	ldw	r2,-44(fp)
 2015de8:	10000826 	beq	r2,zero,2015e0c <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 2015dec:	e0bff517 	ldw	r2,-44(fp)
 2015df0:	10bfffc4 	addi	r2,r2,-1
 2015df4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 2015df8:	e0bffc17 	ldw	r2,-16(fp)
 2015dfc:	10800104 	addi	r2,r2,4
 2015e00:	0007883a 	mov	r3,zero
 2015e04:	10c00035 	stwio	r3,0(r2)
 2015e08:	00000206 	br	2015e14 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 2015e0c:	00bf0004 	movi	r2,-1024
 2015e10:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 2015e14:	e0bffa17 	ldw	r2,-24(fp)
 2015e18:	1080200c 	andi	r2,r2,128
 2015e1c:	103fcf26 	beq	r2,zero,2015d5c <alt_avalon_spi_command+0x94>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2015e20:	e0bffc17 	ldw	r2,-16(fp)
 2015e24:	10800037 	ldwio	r2,0(r2)
 2015e28:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 2015e2c:	e0bff617 	ldw	r2,-40(fp)
 2015e30:	10000426 	beq	r2,zero,2015e44 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 2015e34:	e0bff617 	ldw	r2,-40(fp)
 2015e38:	10bfffc4 	addi	r2,r2,-1
 2015e3c:	e0bff615 	stw	r2,-40(fp)
 2015e40:	00000706 	br	2015e60 <alt_avalon_spi_command+0x198>
      else
        *read_data++ = (alt_u8)rxdata;
 2015e44:	e0bffb17 	ldw	r2,-20(fp)
 2015e48:	1007883a 	mov	r3,r2
 2015e4c:	e0800217 	ldw	r2,8(fp)
 2015e50:	10c00005 	stb	r3,0(r2)
 2015e54:	e0800217 	ldw	r2,8(fp)
 2015e58:	10800044 	addi	r2,r2,1
 2015e5c:	e0800215 	stw	r2,8(fp)
      credits++;
 2015e60:	e0bff717 	ldw	r2,-36(fp)
 2015e64:	10800044 	addi	r2,r2,1
 2015e68:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 2015e6c:	e0bff617 	ldw	r2,-40(fp)
 2015e70:	103fba1e 	bne	r2,zero,2015d5c <alt_avalon_spi_command+0x94>
 2015e74:	e0c00217 	ldw	r3,8(fp)
 2015e78:	e0bff917 	ldw	r2,-28(fp)
 2015e7c:	18bfb71e 	bne	r3,r2,2015d5c <alt_avalon_spi_command+0x94>
        break;
 2015e80:	0001883a 	nop
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2015e84:	e0bffc17 	ldw	r2,-16(fp)
 2015e88:	10800204 	addi	r2,r2,8
 2015e8c:	10800037 	ldwio	r2,0(r2)
 2015e90:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 2015e94:	e0bffa17 	ldw	r2,-24(fp)
 2015e98:	1080080c 	andi	r2,r2,32
 2015e9c:	103ff926 	beq	r2,zero,2015e84 <alt_avalon_spi_command+0x1bc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 2015ea0:	e0800317 	ldw	r2,12(fp)
 2015ea4:	1080004c 	andi	r2,r2,1
 2015ea8:	1000041e 	bne	r2,zero,2015ebc <alt_avalon_spi_command+0x1f4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 2015eac:	e0bffc17 	ldw	r2,-16(fp)
 2015eb0:	10800304 	addi	r2,r2,12
 2015eb4:	0007883a 	mov	r3,zero
 2015eb8:	10c00035 	stwio	r3,0(r2)

  return read_length;
 2015ebc:	e0800117 	ldw	r2,4(fp)
}
 2015ec0:	e037883a 	mov	sp,fp
 2015ec4:	df000017 	ldw	fp,0(sp)
 2015ec8:	dec00104 	addi	sp,sp,4
 2015ecc:	f800283a 	ret

02015ed0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2015ed0:	defffa04 	addi	sp,sp,-24
 2015ed4:	dfc00515 	stw	ra,20(sp)
 2015ed8:	df000415 	stw	fp,16(sp)
 2015edc:	df000404 	addi	fp,sp,16
 2015ee0:	e13ffe15 	stw	r4,-8(fp)
 2015ee4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2015ee8:	e0bfff17 	ldw	r2,-4(fp)
 2015eec:	10800017 	ldw	r2,0(r2)
 2015ef0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2015ef4:	e13ffe17 	ldw	r4,-8(fp)
 2015ef8:	2009ad00 	call	2009ad0 <strlen>
 2015efc:	10800044 	addi	r2,r2,1
 2015f00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2015f04:	00000d06 	br	2015f3c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2015f08:	e0bffc17 	ldw	r2,-16(fp)
 2015f0c:	10c00217 	ldw	r3,8(r2)
 2015f10:	e0bffd17 	ldw	r2,-12(fp)
 2015f14:	1809883a 	mov	r4,r3
 2015f18:	e17ffe17 	ldw	r5,-8(fp)
 2015f1c:	100d883a 	mov	r6,r2
 2015f20:	20161940 	call	2016194 <memcmp>
 2015f24:	1000021e 	bne	r2,zero,2015f30 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2015f28:	e0bffc17 	ldw	r2,-16(fp)
 2015f2c:	00000706 	br	2015f4c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2015f30:	e0bffc17 	ldw	r2,-16(fp)
 2015f34:	10800017 	ldw	r2,0(r2)
 2015f38:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2015f3c:	e0fffc17 	ldw	r3,-16(fp)
 2015f40:	e0bfff17 	ldw	r2,-4(fp)
 2015f44:	18bff01e 	bne	r3,r2,2015f08 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2015f48:	0005883a 	mov	r2,zero
}
 2015f4c:	e037883a 	mov	sp,fp
 2015f50:	dfc00117 	ldw	ra,4(sp)
 2015f54:	df000017 	ldw	fp,0(sp)
 2015f58:	dec00204 	addi	sp,sp,8
 2015f5c:	f800283a 	ret

02015f60 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2015f60:	defffb04 	addi	sp,sp,-20
 2015f64:	dfc00415 	stw	ra,16(sp)
 2015f68:	df000315 	stw	fp,12(sp)
 2015f6c:	df000304 	addi	fp,sp,12
 2015f70:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2015f74:	008080b4 	movhi	r2,514
 2015f78:	10a4f204 	addi	r2,r2,-27704
 2015f7c:	10800017 	ldw	r2,0(r2)
 2015f80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2015f84:	00003106 	br	201604c <alt_find_file+0xec>
  {
    len = strlen(next->name);
 2015f88:	e0bffd17 	ldw	r2,-12(fp)
 2015f8c:	10800217 	ldw	r2,8(r2)
 2015f90:	1009883a 	mov	r4,r2
 2015f94:	2009ad00 	call	2009ad0 <strlen>
 2015f98:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2015f9c:	e0bffd17 	ldw	r2,-12(fp)
 2015fa0:	10c00217 	ldw	r3,8(r2)
 2015fa4:	e0bffe17 	ldw	r2,-8(fp)
 2015fa8:	10bfffc4 	addi	r2,r2,-1
 2015fac:	1885883a 	add	r2,r3,r2
 2015fb0:	10800003 	ldbu	r2,0(r2)
 2015fb4:	10803fcc 	andi	r2,r2,255
 2015fb8:	1080201c 	xori	r2,r2,128
 2015fbc:	10bfe004 	addi	r2,r2,-128
 2015fc0:	10800bd8 	cmpnei	r2,r2,47
 2015fc4:	1000031e 	bne	r2,zero,2015fd4 <alt_find_file+0x74>
    {
      len -= 1;
 2015fc8:	e0bffe17 	ldw	r2,-8(fp)
 2015fcc:	10bfffc4 	addi	r2,r2,-1
 2015fd0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2015fd4:	e0bffe17 	ldw	r2,-8(fp)
 2015fd8:	e0ffff17 	ldw	r3,-4(fp)
 2015fdc:	1885883a 	add	r2,r3,r2
 2015fe0:	10800003 	ldbu	r2,0(r2)
 2015fe4:	10803fcc 	andi	r2,r2,255
 2015fe8:	1080201c 	xori	r2,r2,128
 2015fec:	10bfe004 	addi	r2,r2,-128
 2015ff0:	10800be0 	cmpeqi	r2,r2,47
 2015ff4:	1000081e 	bne	r2,zero,2016018 <alt_find_file+0xb8>
 2015ff8:	e0bffe17 	ldw	r2,-8(fp)
 2015ffc:	e0ffff17 	ldw	r3,-4(fp)
 2016000:	1885883a 	add	r2,r3,r2
 2016004:	10800003 	ldbu	r2,0(r2)
 2016008:	10803fcc 	andi	r2,r2,255
 201600c:	1080201c 	xori	r2,r2,128
 2016010:	10bfe004 	addi	r2,r2,-128
 2016014:	10000a1e 	bne	r2,zero,2016040 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 2016018:	e0bffd17 	ldw	r2,-12(fp)
 201601c:	10c00217 	ldw	r3,8(r2)
 2016020:	e0bffe17 	ldw	r2,-8(fp)
 2016024:	1809883a 	mov	r4,r3
 2016028:	e17fff17 	ldw	r5,-4(fp)
 201602c:	100d883a 	mov	r6,r2
 2016030:	20161940 	call	2016194 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2016034:	1000021e 	bne	r2,zero,2016040 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2016038:	e0bffd17 	ldw	r2,-12(fp)
 201603c:	00000806 	br	2016060 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 2016040:	e0bffd17 	ldw	r2,-12(fp)
 2016044:	10800017 	ldw	r2,0(r2)
 2016048:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201604c:	e0fffd17 	ldw	r3,-12(fp)
 2016050:	008080b4 	movhi	r2,514
 2016054:	10a4f204 	addi	r2,r2,-27704
 2016058:	18bfcb1e 	bne	r3,r2,2015f88 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 201605c:	0005883a 	mov	r2,zero
}
 2016060:	e037883a 	mov	sp,fp
 2016064:	dfc00117 	ldw	ra,4(sp)
 2016068:	df000017 	ldw	fp,0(sp)
 201606c:	dec00204 	addi	sp,sp,8
 2016070:	f800283a 	ret

02016074 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2016074:	defffa04 	addi	sp,sp,-24
 2016078:	dfc00515 	stw	ra,20(sp)
 201607c:	df000415 	stw	fp,16(sp)
 2016080:	dc000315 	stw	r16,12(sp)
 2016084:	df000304 	addi	fp,sp,12
 2016088:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 201608c:	00bffa04 	movi	r2,-24
 2016090:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2016094:	e03ffd15 	stw	zero,-12(fp)
 2016098:	00002106 	br	2016120 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 201609c:	040080b4 	movhi	r16,514
 20160a0:	84201204 	addi	r16,r16,-32696
 20160a4:	e0bffd17 	ldw	r2,-12(fp)
 20160a8:	1009883a 	mov	r4,r2
 20160ac:	01400304 	movi	r5,12
 20160b0:	20093b80 	call	20093b8 <__mulsi3>
 20160b4:	8085883a 	add	r2,r16,r2
 20160b8:	10800017 	ldw	r2,0(r2)
 20160bc:	1000151e 	bne	r2,zero,2016114 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 20160c0:	040080b4 	movhi	r16,514
 20160c4:	84201204 	addi	r16,r16,-32696
 20160c8:	e0bffd17 	ldw	r2,-12(fp)
 20160cc:	1009883a 	mov	r4,r2
 20160d0:	01400304 	movi	r5,12
 20160d4:	20093b80 	call	20093b8 <__mulsi3>
 20160d8:	8085883a 	add	r2,r16,r2
 20160dc:	e0ffff17 	ldw	r3,-4(fp)
 20160e0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 20160e4:	008080b4 	movhi	r2,514
 20160e8:	10a4f604 	addi	r2,r2,-27688
 20160ec:	10c00017 	ldw	r3,0(r2)
 20160f0:	e0bffd17 	ldw	r2,-12(fp)
 20160f4:	1880040e 	bge	r3,r2,2016108 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 20160f8:	008080b4 	movhi	r2,514
 20160fc:	10a4f604 	addi	r2,r2,-27688
 2016100:	e0fffd17 	ldw	r3,-12(fp)
 2016104:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 2016108:	e0bffd17 	ldw	r2,-12(fp)
 201610c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 2016110:	00000606 	br	201612c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2016114:	e0bffd17 	ldw	r2,-12(fp)
 2016118:	10800044 	addi	r2,r2,1
 201611c:	e0bffd15 	stw	r2,-12(fp)
 2016120:	e0bffd17 	ldw	r2,-12(fp)
 2016124:	10800810 	cmplti	r2,r2,32
 2016128:	103fdc1e 	bne	r2,zero,201609c <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 201612c:	e0bffe17 	ldw	r2,-8(fp)
}
 2016130:	e037883a 	mov	sp,fp
 2016134:	dfc00217 	ldw	ra,8(sp)
 2016138:	df000117 	ldw	fp,4(sp)
 201613c:	dc000017 	ldw	r16,0(sp)
 2016140:	dec00304 	addi	sp,sp,12
 2016144:	f800283a 	ret

02016148 <atexit>:
 2016148:	200b883a 	mov	r5,r4
 201614c:	000d883a 	mov	r6,zero
 2016150:	0009883a 	mov	r4,zero
 2016154:	000f883a 	mov	r7,zero
 2016158:	20162101 	jmpi	2016210 <__register_exitproc>

0201615c <exit>:
 201615c:	defffe04 	addi	sp,sp,-8
 2016160:	000b883a 	mov	r5,zero
 2016164:	dc000015 	stw	r16,0(sp)
 2016168:	dfc00115 	stw	ra,4(sp)
 201616c:	2021883a 	mov	r16,r4
 2016170:	20163400 	call	2016340 <__call_exitprocs>
 2016174:	008080b4 	movhi	r2,514
 2016178:	10a4ed04 	addi	r2,r2,-27724
 201617c:	11000017 	ldw	r4,0(r2)
 2016180:	20800f17 	ldw	r2,60(r4)
 2016184:	10000126 	beq	r2,zero,201618c <exit+0x30>
 2016188:	103ee83a 	callr	r2
 201618c:	8009883a 	mov	r4,r16
 2016190:	20164e00 	call	20164e0 <_exit>

02016194 <memcmp>:
 2016194:	01c000c4 	movi	r7,3
 2016198:	3980192e 	bgeu	r7,r6,2016200 <memcmp+0x6c>
 201619c:	2904b03a 	or	r2,r5,r4
 20161a0:	11c4703a 	and	r2,r2,r7
 20161a4:	10000f26 	beq	r2,zero,20161e4 <memcmp+0x50>
 20161a8:	20c00003 	ldbu	r3,0(r4)
 20161ac:	28800003 	ldbu	r2,0(r5)
 20161b0:	1880151e 	bne	r3,r2,2016208 <memcmp+0x74>
 20161b4:	31bfff84 	addi	r6,r6,-2
 20161b8:	01ffffc4 	movi	r7,-1
 20161bc:	00000406 	br	20161d0 <memcmp+0x3c>
 20161c0:	20c00003 	ldbu	r3,0(r4)
 20161c4:	28800003 	ldbu	r2,0(r5)
 20161c8:	31bfffc4 	addi	r6,r6,-1
 20161cc:	18800e1e 	bne	r3,r2,2016208 <memcmp+0x74>
 20161d0:	21000044 	addi	r4,r4,1
 20161d4:	29400044 	addi	r5,r5,1
 20161d8:	31fff91e 	bne	r6,r7,20161c0 <memcmp+0x2c>
 20161dc:	0005883a 	mov	r2,zero
 20161e0:	f800283a 	ret
 20161e4:	20c00017 	ldw	r3,0(r4)
 20161e8:	28800017 	ldw	r2,0(r5)
 20161ec:	1880041e 	bne	r3,r2,2016200 <memcmp+0x6c>
 20161f0:	31bfff04 	addi	r6,r6,-4
 20161f4:	21000104 	addi	r4,r4,4
 20161f8:	29400104 	addi	r5,r5,4
 20161fc:	39bff936 	bltu	r7,r6,20161e4 <memcmp+0x50>
 2016200:	303fe91e 	bne	r6,zero,20161a8 <memcmp+0x14>
 2016204:	003ff506 	br	20161dc <memcmp+0x48>
 2016208:	1885c83a 	sub	r2,r3,r2
 201620c:	f800283a 	ret

02016210 <__register_exitproc>:
 2016210:	defffa04 	addi	sp,sp,-24
 2016214:	008080b4 	movhi	r2,514
 2016218:	10a4ed04 	addi	r2,r2,-27724
 201621c:	dc000315 	stw	r16,12(sp)
 2016220:	14000017 	ldw	r16,0(r2)
 2016224:	dc400415 	stw	r17,16(sp)
 2016228:	dfc00515 	stw	ra,20(sp)
 201622c:	80805217 	ldw	r2,328(r16)
 2016230:	2023883a 	mov	r17,r4
 2016234:	10003e26 	beq	r2,zero,2016330 <__register_exitproc+0x120>
 2016238:	10c00117 	ldw	r3,4(r2)
 201623c:	020007c4 	movi	r8,31
 2016240:	40c0180e 	bge	r8,r3,20162a4 <__register_exitproc+0x94>
 2016244:	00800034 	movhi	r2,0
 2016248:	10800004 	addi	r2,r2,0
 201624c:	1000061e 	bne	r2,zero,2016268 <__register_exitproc+0x58>
 2016250:	00bfffc4 	movi	r2,-1
 2016254:	dfc00517 	ldw	ra,20(sp)
 2016258:	dc400417 	ldw	r17,16(sp)
 201625c:	dc000317 	ldw	r16,12(sp)
 2016260:	dec00604 	addi	sp,sp,24
 2016264:	f800283a 	ret
 2016268:	01006404 	movi	r4,400
 201626c:	d9400015 	stw	r5,0(sp)
 2016270:	d9800115 	stw	r6,4(sp)
 2016274:	d9c00215 	stw	r7,8(sp)
 2016278:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 201627c:	d9400017 	ldw	r5,0(sp)
 2016280:	d9800117 	ldw	r6,4(sp)
 2016284:	d9c00217 	ldw	r7,8(sp)
 2016288:	103ff126 	beq	r2,zero,2016250 <__register_exitproc+0x40>
 201628c:	80c05217 	ldw	r3,328(r16)
 2016290:	10000115 	stw	zero,4(r2)
 2016294:	10c00015 	stw	r3,0(r2)
 2016298:	80805215 	stw	r2,328(r16)
 201629c:	10006215 	stw	zero,392(r2)
 20162a0:	10006315 	stw	zero,396(r2)
 20162a4:	10c00117 	ldw	r3,4(r2)
 20162a8:	88000d1e 	bne	r17,zero,20162e0 <__register_exitproc+0xd0>
 20162ac:	19000084 	addi	r4,r3,2
 20162b0:	2109883a 	add	r4,r4,r4
 20162b4:	18c00044 	addi	r3,r3,1
 20162b8:	2109883a 	add	r4,r4,r4
 20162bc:	1109883a 	add	r4,r2,r4
 20162c0:	10c00115 	stw	r3,4(r2)
 20162c4:	0005883a 	mov	r2,zero
 20162c8:	21400015 	stw	r5,0(r4)
 20162cc:	dfc00517 	ldw	ra,20(sp)
 20162d0:	dc400417 	ldw	r17,16(sp)
 20162d4:	dc000317 	ldw	r16,12(sp)
 20162d8:	dec00604 	addi	sp,sp,24
 20162dc:	f800283a 	ret
 20162e0:	02400044 	movi	r9,1
 20162e4:	12806217 	ldw	r10,392(r2)
 20162e8:	48d2983a 	sll	r9,r9,r3
 20162ec:	19000804 	addi	r4,r3,32
 20162f0:	18d1883a 	add	r8,r3,r3
 20162f4:	2109883a 	add	r4,r4,r4
 20162f8:	4211883a 	add	r8,r8,r8
 20162fc:	2109883a 	add	r4,r4,r4
 2016300:	1109883a 	add	r4,r2,r4
 2016304:	1211883a 	add	r8,r2,r8
 2016308:	5254b03a 	or	r10,r10,r9
 201630c:	21c02215 	stw	r7,136(r4)
 2016310:	41802215 	stw	r6,136(r8)
 2016314:	12806215 	stw	r10,392(r2)
 2016318:	01000084 	movi	r4,2
 201631c:	893fe31e 	bne	r17,r4,20162ac <__register_exitproc+0x9c>
 2016320:	11006317 	ldw	r4,396(r2)
 2016324:	2252b03a 	or	r9,r4,r9
 2016328:	12406315 	stw	r9,396(r2)
 201632c:	003fdf06 	br	20162ac <__register_exitproc+0x9c>
 2016330:	008080b4 	movhi	r2,514
 2016334:	10a55b04 	addi	r2,r2,-27284
 2016338:	80805215 	stw	r2,328(r16)
 201633c:	003fbe06 	br	2016238 <__register_exitproc+0x28>

02016340 <__call_exitprocs>:
 2016340:	008080b4 	movhi	r2,514
 2016344:	10a4ed04 	addi	r2,r2,-27724
 2016348:	10800017 	ldw	r2,0(r2)
 201634c:	defff304 	addi	sp,sp,-52
 2016350:	df000b15 	stw	fp,44(sp)
 2016354:	d8800015 	stw	r2,0(sp)
 2016358:	10805204 	addi	r2,r2,328
 201635c:	dd400815 	stw	r21,32(sp)
 2016360:	dfc00c15 	stw	ra,48(sp)
 2016364:	ddc00a15 	stw	r23,40(sp)
 2016368:	dd800915 	stw	r22,36(sp)
 201636c:	dd000715 	stw	r20,28(sp)
 2016370:	dcc00615 	stw	r19,24(sp)
 2016374:	dc800515 	stw	r18,20(sp)
 2016378:	dc400415 	stw	r17,16(sp)
 201637c:	dc000315 	stw	r16,12(sp)
 2016380:	d9000115 	stw	r4,4(sp)
 2016384:	2839883a 	mov	fp,r5
 2016388:	d8800215 	stw	r2,8(sp)
 201638c:	057fffc4 	movi	r21,-1
 2016390:	d8800017 	ldw	r2,0(sp)
 2016394:	ddc00217 	ldw	r23,8(sp)
 2016398:	14805217 	ldw	r18,328(r2)
 201639c:	90001726 	beq	r18,zero,20163fc <__call_exitprocs+0xbc>
 20163a0:	94400117 	ldw	r17,4(r18)
 20163a4:	8c3fffc4 	addi	r16,r17,-1
 20163a8:	80001116 	blt	r16,zero,20163f0 <__call_exitprocs+0xb0>
 20163ac:	8c400044 	addi	r17,r17,1
 20163b0:	8427883a 	add	r19,r16,r16
 20163b4:	8c63883a 	add	r17,r17,r17
 20163b8:	95802204 	addi	r22,r18,136
 20163bc:	9ce7883a 	add	r19,r19,r19
 20163c0:	8c63883a 	add	r17,r17,r17
 20163c4:	b4e7883a 	add	r19,r22,r19
 20163c8:	9463883a 	add	r17,r18,r17
 20163cc:	e0001726 	beq	fp,zero,201642c <__call_exitprocs+0xec>
 20163d0:	8c87c83a 	sub	r3,r17,r18
 20163d4:	b0c7883a 	add	r3,r22,r3
 20163d8:	18c01e17 	ldw	r3,120(r3)
 20163dc:	1f001326 	beq	r3,fp,201642c <__call_exitprocs+0xec>
 20163e0:	843fffc4 	addi	r16,r16,-1
 20163e4:	9cffff04 	addi	r19,r19,-4
 20163e8:	8c7fff04 	addi	r17,r17,-4
 20163ec:	857ff71e 	bne	r16,r21,20163cc <__call_exitprocs+0x8c>
 20163f0:	00800034 	movhi	r2,0
 20163f4:	10800004 	addi	r2,r2,0
 20163f8:	10002a1e 	bne	r2,zero,20164a4 <__call_exitprocs+0x164>
 20163fc:	dfc00c17 	ldw	ra,48(sp)
 2016400:	df000b17 	ldw	fp,44(sp)
 2016404:	ddc00a17 	ldw	r23,40(sp)
 2016408:	dd800917 	ldw	r22,36(sp)
 201640c:	dd400817 	ldw	r21,32(sp)
 2016410:	dd000717 	ldw	r20,28(sp)
 2016414:	dcc00617 	ldw	r19,24(sp)
 2016418:	dc800517 	ldw	r18,20(sp)
 201641c:	dc400417 	ldw	r17,16(sp)
 2016420:	dc000317 	ldw	r16,12(sp)
 2016424:	dec00d04 	addi	sp,sp,52
 2016428:	f800283a 	ret
 201642c:	91000117 	ldw	r4,4(r18)
 2016430:	88c00017 	ldw	r3,0(r17)
 2016434:	213fffc4 	addi	r4,r4,-1
 2016438:	24001526 	beq	r4,r16,2016490 <__call_exitprocs+0x150>
 201643c:	88000015 	stw	zero,0(r17)
 2016440:	183fe726 	beq	r3,zero,20163e0 <__call_exitprocs+0xa0>
 2016444:	00800044 	movi	r2,1
 2016448:	1408983a 	sll	r4,r2,r16
 201644c:	91406217 	ldw	r5,392(r18)
 2016450:	95000117 	ldw	r20,4(r18)
 2016454:	214a703a 	and	r5,r4,r5
 2016458:	28000b26 	beq	r5,zero,2016488 <__call_exitprocs+0x148>
 201645c:	91406317 	ldw	r5,396(r18)
 2016460:	2148703a 	and	r4,r4,r5
 2016464:	20000c1e 	bne	r4,zero,2016498 <__call_exitprocs+0x158>
 2016468:	99400017 	ldw	r5,0(r19)
 201646c:	d9000117 	ldw	r4,4(sp)
 2016470:	183ee83a 	callr	r3
 2016474:	90c00117 	ldw	r3,4(r18)
 2016478:	1d3fc51e 	bne	r3,r20,2016390 <__call_exitprocs+0x50>
 201647c:	b8c00017 	ldw	r3,0(r23)
 2016480:	1cbfd726 	beq	r3,r18,20163e0 <__call_exitprocs+0xa0>
 2016484:	003fc206 	br	2016390 <__call_exitprocs+0x50>
 2016488:	183ee83a 	callr	r3
 201648c:	003ff906 	br	2016474 <__call_exitprocs+0x134>
 2016490:	94000115 	stw	r16,4(r18)
 2016494:	003fea06 	br	2016440 <__call_exitprocs+0x100>
 2016498:	99000017 	ldw	r4,0(r19)
 201649c:	183ee83a 	callr	r3
 20164a0:	003ff406 	br	2016474 <__call_exitprocs+0x134>
 20164a4:	90c00117 	ldw	r3,4(r18)
 20164a8:	1800071e 	bne	r3,zero,20164c8 <__call_exitprocs+0x188>
 20164ac:	90c00017 	ldw	r3,0(r18)
 20164b0:	18000926 	beq	r3,zero,20164d8 <__call_exitprocs+0x198>
 20164b4:	9009883a 	mov	r4,r18
 20164b8:	b8c00015 	stw	r3,0(r23)
 20164bc:	00000000 	call	0 <__alt_mem_sdram-0x2000000>
 20164c0:	bc800017 	ldw	r18,0(r23)
 20164c4:	003fb506 	br	201639c <__call_exitprocs+0x5c>
 20164c8:	90c00017 	ldw	r3,0(r18)
 20164cc:	902f883a 	mov	r23,r18
 20164d0:	1825883a 	mov	r18,r3
 20164d4:	003fb106 	br	201639c <__call_exitprocs+0x5c>
 20164d8:	0007883a 	mov	r3,zero
 20164dc:	003ffb06 	br	20164cc <__call_exitprocs+0x18c>

020164e0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20164e0:	defffc04 	addi	sp,sp,-16
 20164e4:	df000315 	stw	fp,12(sp)
 20164e8:	df000304 	addi	fp,sp,12
 20164ec:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 20164f0:	0001883a 	nop
 20164f4:	e0bfff17 	ldw	r2,-4(fp)
 20164f8:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 20164fc:	e0bffd17 	ldw	r2,-12(fp)
 2016500:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2016504:	e0bffe17 	ldw	r2,-8(fp)
 2016508:	10000226 	beq	r2,zero,2016514 <_exit+0x34>
    ALT_SIM_FAIL();
 201650c:	002af070 	cmpltui	zero,zero,43969
 2016510:	00000106 	br	2016518 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 2016514:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2016518:	003fff06 	br	2016518 <_exit+0x38>
